// ==UserScript==
// @name 	Travian4 Beyond - SSE
// @version 	4.0.0.0.0013
// @author	npocmu (Black_Cat, ms99, Nux, Lux, onetmt, Velonis Petros, Richard Laffers, Szabka, Victor Garcia-aka Croc-)
// @namespace 	T4
// @description	A lot of interface enhancements and tools for Travian 4.X. This is VERY RESTRICTED version. Porting is just began. 
// @source 	http://userscripts.org/scripts/show/98310
// @identifier 	http://userscripts.org/scripts/show/98310.user.js
// @copyright	© npocmu 2011, © Black_Cat 2010 © ms99, 2008-2010 (parts of this script © Nux, Lux, onetmt, Velonis Petros, Richard Laffers, Szabka, Victor Garcia-aka Croc-)
// @license 	Creative Commons Attribution-Noncommercial-Share Alike 3.0 Germany License
// @include 	http://*.traaviaan*.*/*.php*
// @exclude 	http://*.traaviaan*.*/
// @exclude 	http://*.traaviaan*.*/hilfe.php*
// @exclude	http://*.traaviaan*.*/log*.php*
// @exclude 	http://*.traaviaan*.*/index.php*
// @exclude 	http://*.traaviaan*.*/anleitung.php*
// @exclude 	http://*.traaviaan*.*/impressum.php*
// @exclude 	http://*.traaviaan*.*/anmelden.php*
// @exclude 	http://*.traaviaan*.*/gutscheine.php*
// @exclude 	http://*.traaviaan*.*/spielregeln.php*
// @exclude 	http://*.traaviaan*.*/links.php*
// @exclude 	http://*.traaviaan*.*/geschichte.php*
// @exclude 	http://*.traaviaan*.*/gold.php*
// @exclude 	http://*.traaviaan*.*/tutorial.php*
// @exclude 	http://*.traaviaan*.*/manual.php*
// @exclude 	http://*.traaviaan*.*/manual.php*
// @exclude 	http://*.traaviaan*.*/ajax.php*
// @exclude 	http://*.traaviaan*.*/ad/*
// @exclude 	http://*.traaviaan*.*/chat/*
// @exclude 	http://forum.traaviaan*.*
// @exclude 	http://board.traaviaan*.*
// @exclude 	http://shop.traaviaan*.*
// @exclude 	http://*.traaviaan*.*/activate.php*
// @exclude 	http://*.traaviaan*.*/support.php*
// @exclude  	http://help.traaviaan*.*
// @exclude  	http://analytics.traviangames.com/*
// @exclude 	http://*.traviantoolbox.com/*
// @exclude 	http://*.traviandope.com/*
// @exclude 	http://*.travianteam.com/*
// @exclude 	http://travianutility.netsons.org/*
// @exclude 	*.css
// @exclude 	*.js
// ==/UserScript==

/**
*The original script from Victor Garcia (aka Croc) is licensed under the
*Creative Commons Attribution-NonCommercial-ShareAlike 2.5 Spain License
*To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/2.5/es/
*
*The updated script from ms99 is licensed under the
*Creative Commons Attribution-Noncommercial-Share Alike 3.0 Germany License
*To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/de/
*
*An English translation of the "Creative Commons Attribution-Noncomercial-Share Alike 3.0 License"
*can be found here http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en
/*****************************************************************************
*Copyright © npocmu 2011
*Copyright © ms99, 2008-2010
*Parts of this script Copyright © Nux, 2008
*Setup page behavior Copyright © Lux, 2008
*Big icons behavior (except default & except Setup) Copyright © onetmt, 2009
*Until then & Residue calculations Copyright © Velonis Petros (mail: velonis.gr) , 2009
*Parts of this script Copyright © Szabka, 2008
*Initial script Copyright Victor Garcia (aka Croc) ©, 2007
*Parts of this script (functions for moving a report/message displayed as a pop-up with the mouse) Copyright © Richard Laffers, 2007
*
*Parts of this code are provided or based on ideas and/or code written by others
*Additional images embedded in this script provided by ms99, Nux, Lux, DMaster, Brains, fr3nchlover, CuPliz13
*Translations to different languages are provided by users of this script
*
*IMPORTANT CONTRIBUTIONS TO THIS SCRIPT (listed in alphabetical order):
*ACE, Acr111, BmW, Brains, Chu Chee Meng, CuPliz13, Dakkie, digital012, david.macej, DMaster, Dream1, EXEMOK, ezGertieY,
*FitForTheLooneyVille, friedturnip, fr3nchlover, GotGs, Lassie, Lux, MarioCheng, matteo466, MrRyMan, napkin, Nux, onetmt,
*phob0z, rtellezi, Rypi, Sag, samad909, someweirdnobody, Thornheart, vampiricdust, Velonis Petros, yabash, zerokmatrix, Zippo
*
*Please have understanding if I've forgotten somebody with a relevant contribution to this script
*Please send a message via the userscripts.org mailing facility, for credits
*
*Other contributors' (nick)names may be provided in the header of (or inside) the functions
*SPECIAL THANKS to all contributors and translators of this script !
*
*FUCK-OFF swarnava/piece of stinky shit ! You're only a stupid, idiot copy-paster ! We all reject you as you're nothing else than an abortion !
*****************************************************************************/

(function() 
{
   var crtPage = window.location.href; // OBSOLETE: use crtUrl instead
   var urlNow = window.location.pathname + window.location.search; 
   var crtUrl = parseUri(crtPage);

   var TB3O = {};
   TB3O.TBStartTime = new Date().getTime();
   TB3O.TBEndTime = TB3O.TBStartTime;

   TB3O.version = '4.0.0.0.0013';
   TB3O.url = 'http://userscripts.org/scripts/source/98310.user.js';
   TB3O.shN = 'TB4-SSE';
   TB3O.sn = '';

   TB3O.BrT = "";
   TB3O.nTARbT = '';
   TB3O.nTASb = '';
   TB3O.nTAUb = '';
   TB3O.nTANb = '';

   TB3O.bIsNPCAvailable = (crtPage.indexOf(".org") === -1); // global setting
   TB3O.bIsNPCInVillage = TB3O.bIsNPCAvailable; 

   TB3O.gServer;
   TB3O.fullServerName;

   TB3O.serverTime;
   TB3O.localTimeOffset = 0;   // offset in milliseconds between serverTime and local time
   TB3O.desiredTimeOffset = 0; // milliseconds added to serverTime to take local time (or 0 if all times need to be like server)

   TB3O.localGP = "";          // path to local graph packet
   TB3O.nLayoutType = 2;       // layout: 0 - standard, 1 - extended, 2 - T4
   TB3O.iLayoutMinWidth = 980; // min width for layout by design, detected automatically later

   TB3O.iBiC = 0;           // count of big icons added

   TB3O.VillagesCount = 1;
   TB3O.VillagesList = null; // store additional info for list of villages 
   TB3O.VillagesInfo = {};   // store additional info about villages
   TB3O.ActiveVillageId = undefined;
   TB3O.ActiveVillageInfo = undefined; // shortcut for TB3O.VillagesInfo[TB3O.ActiveVillageId]

   TB3O.UserID = '0';
   //user information: username(0), race(1), disprace(2), capital name(3), capital vid(4), capital newdid (5), capitalxy(6), deltaRaceImg (7)
   TB3O.U = ['', '', '', '', '', '', '', 1];

   TB3O.MerchantsInfo = {};
   TB3O.Overview = null; // store additional info for Dorf3

   // current processed page id
   TB3O.pageSelector = "";

   TB3O.hOffBonus = 0;

   TB3O.ServerInfo = undefined; // { version:4.0, mod:"" };
   TB3O.nServerType = 0;          // 0 - normal, 1 - speed (3x),   2 - 2x,  3 - 5x, 4 - 10x
   TB3O.nMerchantSpeedFactor =    [ 1,           3,                2,       5,      10];
   TB3O.nMerchantCapacityFactor = [ 1,           3,                2,       5,      10];
   TB3O.nTroopSpeedFactor =       [ 1,           2,                1,       2,      3];

   TB3O.ResInfoTotals = new ResourcesInfo();//total production per hour for all villages -> requires to open all villages on a regular basis to get current data

   // different timeouts in milliseconds
   TB3O.Timeouts =
   {
      "ttf_update"   : 1000,   // update "time to fill" interval (1s)
      "min_res_freq" : 500,    // minimal interval to resources counters updates
      "resbar_update": 10000,  // resource bar widget update interval
      "reports_delete": 500,   // pause when delete reports
      "reports_search": 200,   // pause when search reports
      "map_refresh":       0,   // pause between map navigation and updates
      "tooltip":         500,   // pause before displaying tooltip
   };

   // OBSOLETE
   //cpbuilding, barracks, big barracks, workshop, stable, big stable, tournament square, townhall, horse drinking through
   TB3O.d2spB = [0, 0, 0, 0, 0, 0, 0, 0, 0];

   //crt coords
   TB3O.xCrt = -1000;
   TB3O.yCrt = -1000;
   //CN colors (0, 1, 2, 3, 4,5)
   TB3O.CNc = ['#000000', '#FDF8C1', '#7DFF7D', '#FF9696', '#FFC84B', '#F096F0'];
   TB3O.DFc = ['#000000', 'white'];

   TB3O.isTtB = false;

   TB3O.lng = 'en';

   TB3O.O = []; // user settings

   //detect doc direction
   var docDir, DOMdocDir;
   if (document.defaultView.getComputedStyle(document.body, null).getPropertyValue("direction") === 'rtl') 
   {
      docDir    = ['right', 'left'];
      DOMdocDir = ['Right', 'Left'];
   }
   else
   {
      docDir    = ['left', 'right'];
      DOMdocDir = ['Left', 'Right'];
   }

   //link to the profile
   var spLnk = '';
   //link to the barracks
   var bksLnk = 'build.php?gid=19';

   //available races
   var avRace = ['Romans', 'Teutons', 'Gauls'];
   //merchant's speed (normal servers)
   TB3O.MerchantsSpeed = {'Romans': 16, 'Teutons': 12, 'Gauls': 24}
   //merchant's capacity (normal servers, without trade office)
   TB3O.DefaultMerchantsCapacity = {'Romans': 500, 'Teutons': 1000, 'Gauls': 750}

   //available languages
   var arAvLang = ['Server language', 'ae', 'ar', 'ba', 'bg', 'br', 'cl', 'cn', 'cz', 'de', 'dk', 'el', 'en', 'es', 'fi', 'fr', 'gr', 'hk', 'hr', 'hu', 'id', 'il', 'ir', 'it', 'jp', 'kr', 'lt', 'lv', 'mx', 'my', 'nl', 'no', 'ph', 'pl', 'pt', 'ro', 'rs', 'ru', 'si', 'sk', 'th', 'tr', 'tw', 'ua', 'vn'];

   function xTiT(aType, aName, t1) {this.type = aType;this.name = aName;this.t1 = t1;var aD = new Date();aD.setTime(aD.getTime());this.crtDate = aD; return this;}
   function yTiT(tType, intNo, strName) {this.tType = tType;this.intNo = intNo;this.strName = strName; return this;}
   function xTtT(tType, necRes, tTime, aRes) {this.necRes = necRes;this.tType = tType;this.tTime = tTime;this.aRes = aRes; return this;}

   var arrTtT = new Array();
   var defaultMF = [5, 5, 4, 2, 4];
   var marketFilters;
   var wsSName;
   var wsAnalysers =	
   [
      ["World Analyser", "http://www.travian.ws/analyser.pl", getUrlWorldAnalyser], 
//      ["Travian Utils",  "http://travian-utils.com",          getUrlTravianUtils], 
      ["Travian-Live",  "http://travian-live.com",            getUrlTravianLive], 
      ["Travian Box",    "http://travianbox.com",             getUrlTravianBox ], 
      ["GetterTools",    "http://www.gettertools.com",        getUrlGetterTools],
   ];
   var mapAnalysers =	
   [
      ["Travmap",        "http://travmap.shishnet.org/",      getUrlTravmap], 
//      ["Flash map",      "http://travian.org.ua/",            getUrlFlashmap],
   ];
   var repSites =		
   [
      ["Travilog",       "http://travilog.org.ua",          function (site) { return site + "/" + TB3O.lng; } ], 
      ["T-Reports.net",  "http://travian-reports.net",      getUrlTravianReports ],
      ["Travian Worlds", "http://report.travianworlds.com", function (site) { return site + "/intl/" + TB3O.lng; }],
      ["4Travian",       "http://4travian.org",             function (site) { return site; } ],
      ["t4log",          "http://www.t4log.com",            function (site) { return site; } ],
   ];

   var warsimLinks = 	
      ["warsim.php", 
       "http://travian.kirilloid.ru/warsim.php"];

   var jsVoid = 'javaScript:void(0)';
   var xGIF = "a/x.gif";

   // most important div's in layout
   var ID_SIDE_INFO = 'side_info';
   var ID_HEADER    = 'header';
   var ID_MTOP      = 'mtop';
   var ID_CONTENT   = 'content';
   var ID_MID       = 'mid';
   var ID_MID2      = 'content';

   var gIc = {};        // OBSOLETE, use I() instead
   var t = {}; 

   var NPCResources = 'npcResources';
   var NPCbacklinkName = 'npcBackLink';
   var NPCURL = '/build.php?gid=17&t=3';

   TB3O.TBTRT = function() {return TB3O.TBEndTime - TB3O.TBStartTime;}
   TB3O.versionText = function() {return TB3O.version + (TB3O.sn ? " - " + TB3O.sn : "");}

   
//////////////////////////////////////////////////////////////////////
var villageTypes = 
[
[],
[3,3,3,9],
[3,4,5,6],
[4,4,4,6],
[4,5,3,6],
[5,3,4,6],
[1,1,1,15],
[4,4,3,7],
[3,4,4,7],
[4,3,4,7],
[3,5,4,6],
[4,3,5,6],
[5,4,3,6],
]


var uc = new Array();
//Romans
uc[1] = [120,100,150,30,50,40,35,50,6,1];//Legionnaire
uc[2] = [100,130,160,70,20,30,65,35,5,1];//Praetorian
uc[3] = [150,160,210,80,50,70,40,25,7,1];//Imperian
uc[4] = [140,160,20,40,0,0,20,10,16,2];//Equites legati
uc[5] = [550,440,320,100,100,120,65,50,14,3];//Equites imperatoris
uc[6] = [550,640,800,180,70,180,80,105,10,4];//Equites cesaris
uc[7] = [900,360,500,70,0,60,30,75,4,3];//Battering ram
uc[8] = [950,1350,600,90,0,75,60,10,3,6];//Fire catapult
uc[9] = [30750,27200,45000,37500,0,50,40,30,4,5];//Senator
uc[10] = [5800,5300,7200,5500,3000,0,80,80,5,1];//Settler
//Teutons
uc[11] = [95,75,40,40,60,40,20,5,7,1];//Club swinger
uc[12] = [145,70,85,40,40,10,35,60,7,1];//Spearman
uc[13] = [130,120,170,70,50,60,30,30,6,1];//Axeman
uc[14] = [160,100,50,50,0,0,10,5,9,1];//Scout
uc[15] = [370,270,290,75,110,55,100,40,10,2];//Paladin
uc[16] = [450,515,480,80,80,150,50,75,9,3];//Teutonic knight
uc[17] = [1000,300,350,70,0,65,30,80,4,3];//Ram
uc[18] = [900,1200,600,60,0,50,60,10,3,6];//Catapult
uc[19] = [35500,26600,25000,27200,0,40,60,40,4,4];//Chief
uc[20] = [7200,5500,5800,6500,3000,10,80,80,5,1];//Settler
//Gauls
uc[21] = [100,130,55,30,35,15,40,50,7,1];//Phalanx
uc[22] = [140,150,185,60,45,65,35,20,6,1];//Swordsman
uc[23] = [170,150,20,40,0,0,20,10,17,2];//Pathfinder
uc[24] = [350,450,230,60,75,90,25,40,19,2];//Theutates thunder
uc[25] = [360,330,280,120,35,45,115,55,16,2];//Druidrider
uc[26] = [500,620,675,170,65,140,50,165,13,3];//Haeduan
uc[27] = [950,555,330,75,0,50,30,105,4,3];//Ram
uc[28] = [960,1450,630,90,0,70,45,10,3,6];//Trebuchet
uc[29] = [30750,45400,31000,37500,0,40,50,50,5,4];//Chieftain
uc[30] = [5500,7000,5300,4900,3000,0,80,80,5,1];//Settler
//Nature
uc[31] = [0,0,0,0,0,10,25,20,0,1];//Rat
uc[32] = [0,0,0,0,0,20,35,40,0,1];//Spider
uc[33] = [0,0,0,0,0,60,40,60,0,1];//Snake
uc[34] = [0,0,0,0,0,80,66,50,0,1];//Bat
uc[35] = [0,0,0,0,0,50,70,33,0,2];//Wild boar
uc[36] = [0,0,0,0,0,100,80,70,0,2];//Wolf
uc[37] = [0,0,0,0,0,250,140,200,0,3];//Bear
uc[38] = [0,0,0,0,0,450,380,240,0,3];//Crocodile
uc[39] = [0,0,0,0,0,200,170,250,0,3];//Tiger
uc[40] = [0,0,0,0,0,600,440,520,0,5];//Elephant
//Natarian - fr3nchlover
uc[41] = [0,0,0,0,0,20,35,50,0,1];//Pikeman
uc[42] = [0,0,0,0,0,65,30,10,0,1];//Thorned warrior
uc[43] = [0,0,0,0,0,100,90,75,0,1];//Guardsman
uc[44] = [0,0,0,0,0,0,10,0,0,1];//Birds of prey
uc[45] = [0,0,0,0,0,155,80,50,0,2];//Axerider
uc[46] = [0,0,0,0,0,170,140,80,0,3];//Natarian knight
uc[47] = [0,0,0,0,0,250,120,150,0,6];//Warelephant
uc[48] = [0,0,0,0,0,60,45,10,0,5];//Ballista
uc[49] = [0,0,0,0,0,80,50,50,0,0];//Natarian emperor
uc[50] = [0,0,0,0,0,30,40,40,0,0];//Settler
uc[98] = [20,30,10,20,0,0,0,0,0,0];//trap
uc[99] = [20,30,10,20,0,0,0,0,0,0];//trap

var bCost = [[0],//dummy
[//lumberCost gid = 1
[0,0,0,0,0,0],
[40,100,50,60,1,2],
[65,165,85,100,1,3],
[110,280,140,165,2,4],
[185,465,235,280,2,5],
[310,780,390,465,2,6],
[520,1300,650,780,3,8],
[870,2170,1085,1300,4,10],
[1450,3625,1810,2175,4,12],
[2420,6050,3025,3630,5,14],
[4040,10105,5050,6060,6,16],//10
[6750,16870,8435,10125,7,18],
[11270,28175,14090,16905,9,20],
[18820,47055,23525,28230,11,22],
[31430,78580,39290,47150,13,24],
[52490,131230,65615,78740,15,26],
[87660,219155,109575,131490,18,29],
[146395,365985,182995,219590,22,32],
[244480,611195,305600,366715,27,35],
[408280,1020695,510350,612420,32,38],
[681825,1704565,852280,1022740,38,41],//20
[1138650,2846620,1423310,1707970,38,44],
[1901540,4753855,2376925,2852315,38,47],
[3175575,7938935,3969470,4763360,38,50],
[5303210,13258025,6629015,7954815,38,53],
[8856360,22140900,11070450,13284540,38,56]//25
],
[//clayCost gid = 2
[0,0,0,0,0,0],
[80,40,80,50,1,2],
[135,65,135,85,1,3],
[225,110,225,140,2,4],
[375,185,375,235,2,5],
[620,310,620,390,2,6],
[1040,520,1040,650,3,8],
[1735,870,1735,1085,4,10],
[2900,1450,2900,1810,4,12],
[4840,2420,4840,3025,5,14],
[8080,4040,8080,5050,6,16],//10
[13500,6750,13500,8435,7,18],
[22540,11270,22540,14090,9,20],
[37645,18820,37645,23525,11,22],
[62865,31430,62865,39290,13,24],
[104985,52490,104985,65615,15,26],
[175320,87660,175320,109575,18,29],
[292790,146395,292790,182995,22,32],
[488955,244480,488955,305600,27,35],
[816555,408280,816555,510350,32,38],
[1363650,681825,1363650,852280,38,41],//20
[2277295,1138650,2277295,1423310,38,44],
[3803085,1901540,3803085,2376925,38,47],
[6351150,3175575,6351150,3969470,38,50],
[10606420,5303210,10606420,6629015,38,53],
[17712720,8856360,17712720,11070450,38,56]//25
],
[//ironCost gid = 3
[0,0,0,0,0,0],
[100,80,30,60,1,3],
[165,135,50,100,1,5],
[280,225,85,165,2,7],
[465,375,140,280,2,9],
[780,620,235,465,2,11],
[1300,1040,390,780,3,13],
[2170,1735,650,1300,4,15],
[3625,2900,1085,2175,4,17],
[6050,4840,1815,3630,5,19],
[10105,8080,3030,6060,6,21],//10
[16870,13500,5060,10125,7,24],
[28175,22540,8455,16905,9,27],
[47055,37645,14115,28230,11,30],
[78580,62865,23575,47150,13,33],
[131230,104985,39370,78740,15,36],
[219155,175320,65745,131490,18,39],
[365985,292790,109795,219590,22,42],
[611195,488955,183360,366715,27,45],
[1020695,816555,306210,612420,32,48],
[1704565,1363650,511370,1022740,38,51],//20
[2846620,2277295,853985,1707970,38,54],
[4753855,3803085,1426155,2852315,38,57],
[7938935,6351150,2381680,4763360,38,60],
[13258025,10606420,3977410,7954815,38,63],
[22140900,17712720,6642270,13284540,38,66]//25
],
[//cropCost gid = 4
[0,0,0,0,0,0],
[70,90,70,20,1,0],
[115,150,115,35,1,0],
[195,250,195,55,2,0],
[325,420,325,95,2,0],
[545,700,545,155,2,0],
[910,1170,910,260,3,1],
[1520,1950,1520,435,4,2],
[2535,3260,2535,725,4,3],
[4235,5445,4235,1210,5,4],
[7070,9095,7070,2020,6,5],//10
[11810,15185,11810,3375,7,6],
[19725,25360,19725,5635,9,7],
[32940,42350,32940,9410,11,8],
[55005,70720,55005,15715,13,9],
[91860,118105,91860,26245,15,10],
[153405,197240,153405,43830,18,12],
[256190,329385,256190,73195,22,14],
[427835,550075,427835,122240,27,16],
[714485,918625,714485,204140,32,18],
[1193195,1534105,1193195,340915,38,20],//20
[1992635,2561960,1992635,569325,38,22],
[3327700,4278470,3327700,950770,38,24],
[5557255,7145045,5557255,1587785,38,26],
[9280620,11932225,9280620,2651605,38,28],
[15498630,19926810,15498630,4428180,38,30]//25
],
[//sawmillCost gid = 5
[0,0,0,0,0,0],
[520,380,290,90,1,4],
[935,685,520,160,1,6],
[1685,1230,940,290,2,8],
[3035,2215,1690,525,2,10],
[5460,3990,3045,945,2,12]
],
[//brickyardCost gid = 6
[0,0,0,0,0,0],
[440,480,320,50,1,3],
[790,865,575,90,1,5],
[1425,1555,1035,160,2,7],
[2565,2800,1865,290,2,9],
[4620,5040,3360,525,2,11]
],
[//ironFoundryCost gid = 7
[0,0,0,0,0,0],
[200,450,510,120,1,6],
[360,810,920,215,1,9],
[650,1460,1650,390,2,12],
[1165,2625,2975,700,2,15],
[2100,4725,5355,1260,2,18]
],
[//grainMillCost gid = 8
[0,0,0,0,0,0],
[500,440,380,1240,1,3],
[900,790,685,2230,1,5],
[1620,1425,1230,4020,2,7],
[2915,2565,2215,7230,2,9],
[5250,4620,3990,13015,2,11]
],
[//bakeryCost gid = 9
[0,0,0,0,0,0],
[1200,1480,870,1600,1,4],
[2160,2665,1565,2880,1,6],
[3890,4795,2820,5185,2,8],
[7000,8630,5075,9330,2,10],
[12595,15535,9135,16795,2,12]
],
[//warehouseCost gid = 10
[0,0,0,0,0,0],
[130,160,90,40,1,1],
[165,205,115,50,1,2],
[215,260,145,65,2,3],
[275,335,190,85,2,4],
[350,430,240,105,2,5],
[445,550,310,135,3,6],
[570,705,395,175,4,7],
[730,900,505,225,4,8],
[935,1155,650,290,5,9],
[1200,1475,830,370,6,10],//10
[1535,1890,1065,470,7,12],
[1965,2420,1360,605,9,14],
[2515,3095,1740,775,11,16],
[3220,3960,2230,990,13,18],
[4120,5070,2850,1270,15,20],
[5275,6490,3650,1625,18,22],
[6750,8310,4675,2075,22,24],
[8640,10635,5980,2660,27,26],
[11060,13610,7655,3405,32,28],
[14155,17420,9800,4355,38,30]//20
],
[//granaryCost gid = 11
[0,0,0,0,0,0],
[80,100,70,20,1,1],
[100,130,90,25,1,2],
[130,165,115,35,2,3],
[170,210,145,40,2,4],
[215,270,190,55,2,5],
[275,345,240,70,3,6],
[350,440,310,90,4,7],
[450,565,395,115,4,8],
[575,720,505,145,5,9],
[740,920,645,185,6,10],//10
[945,1180,825,235,7,12],
[1210,1510,1060,300,9,14],
[1545,1935,1355,385,11,16],
[1980,2475,1735,495,13,18],
[2535,3170,2220,635,15,20],
[3245,4055,2840,810,18,22],
[4155,5190,3635,1040,22,24],
[5315,6645,4650,1330,27,26],
[6805,8505,5955,1700,32,28],
[8710,10890,7620,2180,38,30]//20
],
[//blacksmithCost gid = 12

],
[

//smithy (T4) gid = 13
[0,0,0,0,0,0],         
[180,250,500,160,2,4], 
[230,320,640,205,3,6], 
[295,410,820,260,3,8], 
[375,525,1050,335,4,10],
[485,670,1340,430,5,12],
[620,860,1720,550,6,15], 
[790,1100,2200,705,7,18],
[1015,1405,2815,900,9,21],
[1295,1800,3605,1155,10,24], 
[1660,2305,4610,1475,12,27],//10
[2125,2950,5905,1890,15,30], 
[2720,3780,7555,2420,18,33], //12
[3480,4835,9670,3095,21,36],
[4455,6190,12380,3960,26,39],
[5705,7925,15845,5073,31,42],
[7300,10140,20280,6490,37,46],
[9345,12980,25960,8310,44,50],
[11965,16615,33230,10635,53,54],
[15315,21270,42535,13610,64,58],
[19600,27225,54445,17420,77,62]//20

],
[//tournamentSquareCost gid = 14
[0,0,0,0,0,0],
[1750,2250,1530,240,1,1],
[2240,2880,1960,305,1,2],
[2865,3685,2505,395,2,3],
[3670,4720,3210,505,2,4],
[4700,6040,4105,645,2,5],
[6015,7730,5255,825,3,6],
[7695,9895,6730,1055,4,7],
[9850,12665,8615,1350,4,8],
[12610,16215,11025,1730,5,9],
[16140,20755,14110,2215,6,10],//10
[20660,26565,18065,2835,7,12],
[26445,34000,23120,3625,9,14],
[33850,43520,29595,4640,11,16],
[43330,55705,37880,5940,13,18],
[55460,71305,48490,7605,15,20],
[70990,91270,62065,9735,18,22],
[90865,116825,79440,12460,22,24],
[116305,149540,101685,15950,27,26],
[148875,191410,130160,20415,32,28],
[190560,245005,166600,26135,38,30]//20
],
[//mainBuildingCost gid = 15
[0,0,0,0,0,0],
[70,40,60,20,2,2],
[90,50,75,25,3,3],
[115,65,100,35,3,4],
[145,85,125,40,4,5],
[190,105,160,55,5,6],
[240,135,205,70,6,8],
[310,175,265,90,7,10],
[395,225,340,115,9,12],
[505,290,430,145,10,14],
[645,370,555,185,12,16],//10
[825,470,710,235,15,18],
[1060,605,905,300,18,20],
[1355,775,1160,385,21,22],
[1735,990,1485,495,26,24],
[2220,1270,1900,635,31,26],
[2840,1625,2435,810,37,29],
[3635,2075,3115,1040,44,32],
[4650,2660,3990,1330,53,35],
[5955,3405,5105,1700,64,38],
[7620,4355,6535,2180,77,41]//20
],
[//rallyPointCost gid = 16
[0,0,0,0,0,0],
[110,160,90,70,1,1],
[140,205,115,90,1,2],
[180,260,145,115,2,3],
[230,335,190,145,2,4],
[295,430,240,190,2,5],
[380,550,310,240,3,6],
[485,705,395,310,4,7],
[620,900,505,395,4,8],
[795,1155,650,505,5,9],
[1015,1475,830,645,6,10],//10
[1300,1890,1065,825,7,12],
[1660,2420,1360,1060,9,14],
[2130,3095,1740,1355,11,16],
[2725,3960,2230,1735,13,18],
[3485,5070,2850,2220,15,20],
[4460,6490,3650,2840,18,22],
[5710,8310,4675,3635,22,24],
[7310,10635,5980,4650,27,26],
[9360,13610,7655,5955,32,28],
[11980,17420,9800,7620,38,30]//20
],
[//marketplaceCost gid = 17
[0,0,0,0,0,0],
[80,70,120,70,4,4],
[100,90,155,90,4,6],
[130,115,195,115,5,8],
[170,145,250,145,6,10],
[215,190,320,190,7,12],
[275,240,410,240,9,15],
[350,310,530,310,11,18],
[450,395,675,395,13,21],
[575,505,865,505,15,24],
[740,645,1105,645,19,27],//10
[945,825,1415,825,22,30],
[1210,1060,1815,1060,27,33],
[1545,1355,2320,1355,32,38],
[1980,1735,2970,1735,39,41],
[2535,2220,3805,2220,46,44],
[3245,2840,4870,2840,55,48],
[4155,3635,6230,3635,67,52],
[5315,4650,7975,4650,80,56],
[6805,5955,10210,5955,96,60],
[8710,7620,13065,7620,115,64]//20
],
[//embassyCost gid = 18
[0,0,0,0,0,0],
[180,130,150,80,5,3],
[230,165,190,100,6,5],
[295,215,245,130,7,7],
[375,275,315,170,8,9],
[485,350,405,215,10,11],
[620,445,515,275,12,13],
[790,570,660,350,14,15],
[1015,730,845,450,17,17],
[1295,935,1080,575,21,19],
[1660,1200,1385,740,25,21],//10
[2125,1535,1770,945,30,24],
[2720,1965,2265,1210,36,27],
[3480,2515,2900,1545,43,30],
[4455,3220,3715,1980,51,33],
[5705,4120,4755,2535,62,36],
[7300,5275,6085,3245,74,39],
[9345,6750,7790,4155,89,42],
[11965,8640,9970,5315,106,45],
[15315,11060,12760,6805,128,48],
[19600,14155,16335,8710,153,51]//20
],
[//barracksCost gid = 19
[0,0,0,0,0,0],
[210,140,260,120,1,4],
[270,180,335,155,1,6],
[345,230,425,195,2,8],
[440,295,545,250,2,10],
[565,375,700,320,2,12],
[720,480,895,410,3,15],
[925,615,1145,530,4,18],
[1180,790,1465,675,4,21],
[1515,1010,1875,865,5,24],
[1935,1290,2400,1105,6,27],//10
[2480,1655,3070,1415,7,30],
[3175,2115,3930,1815,9,33],
[4060,2710,5030,2320,11,36],
[5200,3465,6435,2970,13,39],
[6655,4435,8240,3805,15,42],
[8520,5680,10545,4870,18,46],
[10905,7270,13500,6230,22,50],
[13955,9305,17280,7975,27,54],
[17865,11910,22120,10210,32,58],
[22865,15245,28310,13065,38,62]//20
],
[//stableCost gid = 20
[0,0,0,0,0,0],
[260,140,220,100,2,5],
[335,180,280,130,3,8],
[425,230,360,165,3,11],
[545,295,460,210,4,14],
[700,375,590,270,5,17],
[895,480,755,345,6,20],
[1145,615,970,440,7,23],
[1465,790,1240,565,9,26],
[1875,1010,1585,720,10,29],
[2400,1290,2030,920,12,32],//10
[3070,1655,2595,1180,15,36],
[3930,2115,3325,1510,18,40],
[5030,2710,4255,1935,21,44],
[6435,3465,5445,2475,26,48],
[8240,4435,6970,3170,31,52],
[10545,5680,8925,4055,37,56],
[13500,7270,11425,5190,44,60],
[17280,9305,14620,6645,53,64],
[22120,11910,18715,8505,64,68],
[28310,15245,23955,10890,77,72]//20
],
[//workshopCost gid = 21
[0,0,0,0,0,0],
[460,510,600,320,4,3],
[590,655,770,410,4,5],
[755,835,985,525,5,7],
[965,1070,1260,670,6,9],
[1235,1370,1610,860,7,11],
[1580,1750,2060,1100,9,13],
[2025,2245,2640,1405,11,15],
[2590,2870,3380,1800,13,17],
[3315,3675,4325,2305,15,19],
[4245,4705,5535,2950,19,21],//10
[5430,6020,7085,3780,22,24],
[6950,7705,9065,4835,27,27],
[8900,9865,11605,6190,32,30],
[11390,12625,14855,7925,39,33],
[14580,16165,19015,10140,46,36],
[18660,20690,24340,12980,55,39],
[23885,26480,31155,16615,67,42],
[30570,33895,39875,21270,80,45],
[39130,43385,51040,27225,96,48],
[50090,55535,65335,34845,115,51]//20
],
[//academyCost gid = 22
[0,0,0,0,0,0],
[220,160,90,40,5,4],
[280,205,115,50,6,6],
[360,260,145,65,7,8],
[460,335,190,85,8,10],
[590,430,240,105,10,12],
[755,550,310,135,12,15],
[970,705,395,175,14,18],
[1240,900,505,225,17,21],
[1585,1155,650,290,21,24],
[2030,1475,830,370,25,27],//10
[2595,1890,1065,470,30,30],
[3325,2420,1360,605,36,33],
[4255,3095,1740,775,43,36],
[5445,3960,2230,990,51,39],
[6970,5070,2850,1270,62,42],
[8925,6490,3650,1625,74,46],
[11425,8310,4675,2075,89,50],
[14620,10635,5980,2660,106,54],
[18715,13610,7655,3405,128,58],
[23955,17420,9800,4355,153,62]//20
],
[//crannyCost gid = 23
[0,0,0,0,0,0],
[40,50,30,10,1,0],
[50,65,40,15,1,0],
[65,80,50,15,2,0],
[85,105,65,20,2,0],
[105,135,80,25,2,0],
[135,170,105,35,3,1],
[175,220,130,45,4,2],
[225,280,170,55,4,3],
[290,360,215,70,5,4],
[370,460,275,90,6,5]//10
],
[//townhallCost gid = 24
[0,0,0,0,0,0],
[1250,1110,1260,600,6,4],
[1600,1420,1615,770,7,6],
[2050,1820,2065,985,9,8],
[2620,2330,2640,1260,10,10],
[3355,2980,3380,1610,12,12],
[4295,3815,4330,2060,15,15],
[5500,4880,5540,2640,18,18],
[7035,6250,7095,3380,21,21],
[9005,8000,9080,4325,26,24],
[11530,10240,11620,5535,31,27],//10
[14755,13105,14875,7085,37,30],
[18890,16775,19040,9065,45,33],
[24180,21470,24370,11605,53,36],
[30950,27480,31195,14855,64,39],
[39615,35175,39930,19015,77,42],
[50705,45025,51110,24340,92,46],
[64905,57635,65425,31155,111,50],
[83075,73770,83740,39875,133,54],
[106340,94430,107190,51040,160,58],
[136115,120870,137200,65335,192,62]//20
],
[//residenceCost gid = 25
[0,0,0,0,0,0],
[580,460,350,180,2,1],
[740,590,450,230,3,2],
[950,755,575,295,3,3],
[1215,965,735,375,4,4],
[1555,1235,940,485,5,5],
[1995,1580,1205,620,6,6],
[2550,2025,1540,790,7,7],
[3265,2590,1970,1015,9,8],
[4180,3315,2520,1295,11,9],
[5350,4245,3230,1660,12,10],//10
[6845,5430,4130,2125,15,12],
[8765,6950,5290,2720,18,14],
[11220,8900,6770,3480,21,16],
[14360,11390,8665,4455,26,18],
[18380,14580,11090,5705,31,20],
[23530,18660,14200,7300,37,22],
[30115,23885,18175,9345,44,24],
[38550,30570,23260,11965,53,26],
[49340,39130,29775,15315,64,28],
[63155,50090,38110,19600,77,30]//20
],
[//palaceCost gid = 26
[0,0,0,0,0,0],
[550,800,750,250,6,1],
[705,1025,960,320,7,2],
[900,1310,1230,410,9,3],
[1155,1680,1575,525,10,4],
[1475,2145,2015,670,12,5],
[1890,2750,2575,860,15,6],
[2420,3520,3300,1100,18,7],
[3095,4505,4220,1405,21,8],
[3965,5765,5405,1800,26,9],
[5075,7380,6920,2305,31,10],//10
[6495,9445,8855,2950,37,12],
[8310,12090,11335,3780,45,14],
[10640,15475,14505,4835,53,16],
[13615,19805,18570,6190,64,18],
[17430,25355,23770,7925,77,20],
[22310,32450,30425,10140,92,22],
[28560,41540,38940,12980,111,24],
[36555,53170,49845,16615,133,26],
[46790,68055,63805,21270,160,28],
[59890,87110,81670,27225,192,30]//20
],
[//treasuryCost gid = 27
[0,0,0,0,0,0],
[2880,2740,2580,990,7,4],
[3630,3450,3250,1245,9,6],
[4570,4350,4095,1570,10,8],
[5760,5480,5160,1980,12,10],
[7260,6905,6505,2495,15,12],
[9145,8700,8195,3145,18,15],
[11525,10965,10325,3960,21,18],
[14520,13815,13010,4990,26,21],
[18295,17405,16390,6290,31,24],
[23055,21930,20650,7925,37,27],//10
[29045,27635,26020,9985,45,30],
[36600,34820,32785,12580,53,33],
[46115,43875,41310,15850,64,36],
[58105,55280,52050,19975,77,39],
[73210,69655,65585,25165,92,42],
[92245,87760,82640,31710,111,46],
[116230,110580,104125,39955,133,50],
[146450,139330,131195,50340,160,54],
[184530,175560,165305,63430,192,58],
[232505,221205,208285,79925,230,62]//20
],
[//tradeOfficeCost gid = 28
[0,0,0,0,0,0],
[1400,1330,1200,400,4,3],
[1790,1700,1535,510,4,5],
[2295,2180,1965,655,5,7],
[2935,2790,2515,840,6,9],
[3760,3570,3220,1075,7,11],
[4810,4570,4125,1375,9,13],
[6155,5850,5280,1760,11,15],
[7880,7485,6755,2250,13,17],
[10090,9585,8645,2880,15,19],
[12915,12265,11070,3690,19,21],//10
[16530,15700,14165,4720,22,24],
[21155,20100,18135,6045,27,27],
[27080,25725,23210,7735,32,30],
[34660,32930,29710,9905,39,33],
[44370,42150,38030,12675,46,36],
[56790,53950,48680,16225,55,39],
[72690,69060,62310,20770,67,42],
[93045,88395,79755,26585,80,45],
[119100,113145,102085,34030,96,48],
[152445,144825,130670,43555,115,51]//20
],
[//greatBarrackCost gid = 29
[0,0,0,0,0,0],
[630,420,780,360,1,4],
[805,540,1000,460,1,6],
[1030,690,1280,590,2,8],
[1320,880,1635,755,2,10],
[1690,1125,2095,965,2,12],
[2165,1445,2680,1235,3,15],
[2770,1845,3430,1585,4,18],
[3545,2365,4390,2025,4,21],
[4540,3025,5620,2595,5,24],
[5810,3875,7195,3320,6,27],//10
[7440,4960,9210,4250,7,30],
[9520,6345,11785,5440,9,33],
[12185,8125,15085,6965,11,36],
[15600,10400,19310,8915,13,39],
[19965,13310,24720,11410,15,42],
[25555,17035,31640,14605,18,46],
[32710,21810,40500,18690,22,50],
[41870,27915,51840,23925,27,54],
[53595,35730,66355,30625,32,58],
[68600,45735,84935,39200,38,62]//20
],
[//greatStableCost gid = 30
[0,0,0,0,0,0],
[780,420,660,300,2,5],
[1000,540,845,385,3,8],
[1280,690,1080,490,3,11],
[1635,880,1385,630,4,14],
[2095,1125,1770,805,5,17],
[2680,1445,2270,1030,6,20],
[3430,1845,2905,1320,7,23],
[4390,2365,3715,1690,9,26],
[5620,3025,4755,2160,10,29],
[7195,3875,6085,2765,12,32],//10
[9210,4960,7790,3540,15,36],
[11785,6345,9975,4535,18,40],
[15085,8125,12765,5805,21,44],
[19310,10400,16340,7430,26,48],
[24720,13310,20915,9505,31,52],
[31640,17035,26775,12170,37,56],
[40500,21810,34270,15575,44,60],
[51840,27915,43865,19940,53,64],
[66355,35730,56145,25520,64,68],
[84935,45735,71870,32665,77,72]//20
],
[//citywallCost gid = 31
[0,0,0,0,0,0],
[70,90,170,70,1,0],
[90,115,220,90,1,0],
[115,145,280,115,2,0],
[145,190,355,145,2,0],
[190,240,455,190,2,0],
[240,310,585,240,3,1],
[310,395,750,310,4,2],
[395,505,955,395,4,3],
[505,650,1225,505,5,4],
[645,830,1570,645,6,5],//10
[825,1065,2005,825,7,6],
[1060,1360,2570,1060,9,7],
[1355,1740,3290,1355,11,8],
[1735,2230,4210,1735,13,9],
[2220,2850,5390,2220,15,10],
[2840,3650,6895,2840,18,12],
[3635,4675,8825,3635,22,14],
[4650,5980,11300,4650,27,16],
[5955,7655,14460,5955,32,18],
[7620,9800,18510,7620,38,20]//20
],
[//earthwallCost gid = 32
[0,0,0,0,0,0],
[120,200,0,80,1,0],
[155,255,0,100,1,0],
[195,330,0,130,2,0],
[250,420,0,170,2,0],
[320,535,0,215,2,0],
[410,685,0,275,3,1],
[530,880,0,350,4,2],
[675,1125,0,450,4,3],
[865,1440,0,575,5,4],
[1105,1845,0,740,6,5],//10
[1415,2360,0,945,7,6],
[1815,3020,0,1210,9,7],
[2320,3870,0,1545,11,8],
[2970,4950,0,1980,13,9],
[3805,6340,0,2535,15,10],
[4870,8115,0,3245,18,12],
[6230,10385,0,4155,22,14],
[7975,13290,0,5315,27,16],
[10210,17015,0,6805,32,18],
[13065,21780,0,8710,38,20]//20
],
[//palisadeCost gid = 33
[0,0,0,0,0,0],
[160,100,80,60,1,0],
[205,130,100,75,1,0],
[260,165,130,100,2,0],
[335,210,170,125,2,0],
[430,270,215,160,2,0],
[550,345,275,205,3,1],
[705,440,350,265,4,2],
[900,565,450,340,4,3],
[1155,720,575,430,5,4],
[1475,920,740,555,6,5],//10
[1890,1180,945,710,7,6],
[2420,1510,1210,905,9,7],
[3095,1935,1545,1160,11,8],
[3960,2475,1980,1485,13,9],
[5070,3170,2535,1900,15,10],
[6490,4055,3245,2435,18,12],
[8310,5190,4155,3115,22,14],
[10635,6645,5315,3990,27,16],
[13610,8505,6805,5105,32,18],
[17420,10890,8710,6535,38,20]//20
],
[//stonemasonCost gid = 34
[0,0,0,0,0,0],
[155,130,125,70,1,2],
[200,165,160,90,1,3],
[255,215,205,115,2,4],
[325,275,260,145,2,5],
[415,350,335,190,2,6],
[535,445,430,240,3,8],
[680,570,550,310,4,10],
[875,730,705,395,4,12],
[1115,935,900,505,5,14],
[1430,1200,1155,645,6,16],//10
[1830,1535,1475,825,7,18],
[2340,1965,1890,1060,9,20],
[3000,2515,2420,1355,11,22],
[3840,3220,3095,1735,13,24],
[4910,4120,3960,2220,15,26],
[6290,5275,5070,2840,18,29],
[8050,6750,6490,3635,22,32],
[10300,8640,8310,4650,27,35],
[13185,11060,10635,5955,32,38],
[16880,14155,13610,7620,38,41]//20
],
[//breweryCost gid = 35
[0,0,0,0,0,0],
[1460,930,1250,1740,5,6],
[2045,1300,1750,2435,6,9],
[2860,1825,2450,3410,7,12],
[4005,2550,3430,4775,8,15],
[5610,3575,4800,6685,10,18],
[7850,5000,6725,9360,12,22],
[10995,7000,9410,13100,14,26],
[15390,9805,13175,18340,17,30],
[21545,13725,18445,25680,21,34],
[30165,19215,25825,35950,25,38]//10
],
[//trapperCost gid = 36
[0,0,0,0,0,0],
[100,100,100,100,1,4],
[130,130,130,130,1,6],
[165,165,165,165,2,8],
[210,210,210,210,2,10],
[270,270,270,270,2,12],
[345,345,345,345,3,15],
[440,440,440,440,4,18],
[565,565,565,565,4,21],
[720,720,720,720,5,24],
[920,920,920,920,6,27],//10
[1180,1180,1180,1180,7,30],
[1510,1510,1510,1510,9,33],
[1935,1935,1935,1935,11,36],
[2475,2475,2475,2475,13,39],
[3170,3170,3170,3170,15,42],
[4055,4055,4055,4055,18,46],
[5190,5190,5190,5190,22,50],
[6645,6645,6645,6645,27,54],
[8505,8505,8505,8505,32,58],
[10890,10890,10890,10890,38,62]//20
],
[//herosMansionCost gid = 37
[0,0,0,0,0,0],
[700,670,700,240,1,2],
[930,890,930,320,1,3],
[1240,1185,1240,425,2,4],
[1645,1575,1645,565,2,5],
[2190,2095,2190,750,2,6],
[2915,2790,2915,1000,3,8],
[3875,3710,3875,1330,4,10],
[5155,4930,5155,1765,4,12],
[6855,6560,6855,2350,5,14],
[9115,8725,9115,3125,6,16],//10
[12125,11605,12125,4155,7,18],
[16125,15435,16125,5530,9,20],
[21445,20525,21445,7350,11,22],
[28520,27300,28520,9780,13,24],
[37935,36310,37935,13005,15,24],
[50450,48290,50450,17300,18,27],
[67100,64225,67100,23005,22,30],
[89245,85420,89245,30600,27,33],
[118695,113605,118695,40695,32,36],
[157865,151095,157865,54125,37,39]//20
],
[//greatWarehouseCost gid = 38
[0,0,0,0,0,0,0],
[650,800,450,200,1,1],
[830,1025,575,255,1,2],
[1065,1310,735,330,2,3],
[1365,1680,945,420,2,4],
[1745,2145,1210,535,2,5],
[2235,2750,1545,685,3,6],
[2860,3520,1980,880,4,7],
[3660,4505,2535,1125,4,8],
[4685,5765,3245,1440,5,9],
[5995,7380,4150,1845,6,10],//10
[7675,9445,5315,2360,7,12],
[9825,12090,6800,3020,9,14],
[12575,15475,8705,3870,11,16],
[16095,19805,11140,4950,13,18],
[20600,25355,14260,6340,15,20],
[26365,32450,18255,8115,18,22],
[33750,41540,23365,10385,22,24],
[43200,53170,29910,13290,27,26],
[55295,68055,38280,17015,32,28],
[70780,87110,49000,21780,38,30]//20
],
[//greatGranaryCost gid = 39
[0,0,0,0,0,0],
[400,500,350,100,1],
[510,640,450,130,1,2],
[655,820,575,165,2,3],
[840,1050,735,210,2,4],
[1075,1340,940,270,2,5],
[1375,1720,1205,345,3,6],
[1760,2200,1540,440,4,7],
[2250,2815,1970,565,4,8],
[2880,3605,2520,720,5,9],
[3690,4610,3230,920,6,10],//10
[4720,5905,4130,1180,7,12],
[6045,7555,5290,1510,9,14],
[7735,9670,6770,1935,11,16],
[9905,12380,8665,2475,13,18],
[12675,15845,11090,3170,15,20],
[16225,20280,14200,4055,18,22],
[20770,25960,18175,5190,22,24],
[26585,33230,23260,6645,27,26],
[34030,42535,29775,8505,32,28],
[43555,54445,38110,10890,38,30]//20
],
[//WWCost gid = 40
[0,0,0,0,0,0],
[66700,69050,72200,13200,0,1],
[68535,70950,74185,13565,0,2],
[70420,72900,76225,13935,0,3],
[72355,74905,78320,14320,0,4],
[74345,76965,80475,14715,0,5],
[76390,79080,82690,15120,0,6],
[78490,81255,84965,15535,0,7],
[80650,83490,87300,15960,0,8],
[82865,85785,89700,16400,0,9],
[85145,88145,92165,16850,0,10],//10
[87485,90570,94700,17315,0,12],
[89895,93060,97305,17790,0,14],
[92365,95620,99980,18280,0,16],
[94905,98250,102730,18780,0,18],
[97515,100950,105555,19300,0,20],
[100195,103725,108460,19830,0,22],
[102950,106580,111440,20375,0,24],
[105785,109510,114505,20935,0,26],
[108690,112520,117655,21510,0,28],
[111680,115615,120890,22100,0,30],//20
[114755,118795,124215,22710,0,33],
[117910,122060,127630,23335,0,36],
[121150,125420,131140,23975,0,39],
[124480,128870,134745,24635,0,42],
[127905,132410,138455,25315,0,45],
[131425,136055,142260,26010,0,48],
[135035,139795,146170,26725,0,51],
[138750,143640,150190,27460,0,54],
[142565,147590,154320,28215,0,57],
[146485,151650,158565,28990,0,60],//30
[150515,155820,162925,29785,0,64],
[154655,160105,167405,30605,0,68],
[158910,164505,172010,31450,0,72],
[163275,169030,176740,32315,0,76],
[167770,173680,181600,33200,0,80],
[172380,178455,186595,34115,0,84],
[177120,183360,191725,35055,0,88],
[181995,188405,197000,36015,0,92],
[186995,193585,202415,37005,0,96],
[192140,198910,207985,38025,0,100],//40
[197425,204380,213705,39070,0,105],
[202855,210000,219580,40145,0,110],
[208430,215775,225620,41250,0,115],
[214165,221710,231825,42385,0,120],
[220055,227805,238200,43550,0,125],
[226105,234070,244750,44745,0,130],
[232320,240505,251480,45975,0,135],
[238710,247120,258395,47240,0,140],
[245275,253915,265500,48540,0,145],
[252020,260900,272800,49875,0,150],//50
[258950,268075,280305,51245,0,156],
[266070,275445,288010,52655,0,162],
[273390,283020,295930,54105,0,168],
[280905,290805,304070,55590,0,174],
[288630,298800,312430,57120,0,180],
[296570,307020,321025,58690,0,186],
[304725,315460,329850,60305,0,192],
[313105,324135,338925,61965,0,198],
[321715,333050,348245,63670,0,204],
[330565,342210,357820,65420,0,210],//60
[339655,351620,367660,67220,0,217],
[348995,361290,377770,69065,0,224],
[358590,371225,388160,70965,0,231],
[368450,381435,398835,72915,0,238],
[378585,391925,409800,74920,0,245],
[388995,402700,421070,76985,0,252],
[399695,413775,432650,79100,0,259],
[410685,425155,444550,81275,0,266],
[421980,436845,456775,83510,0,273],
[433585,448860,469335,85805,0,280],//70
[445505,461205,482240,88165,0,288],
[457760,473885,495505,90590,0,296],
[470345,486920,509130,93080,0,304],
[483280,500310,523130,95640,0,312],
[496570,514065,537520,98270,0,320],
[510225,528205,552300,100975,0,328],
[524260,542730,567490,103750,0,336],
[538675,557655,583095,106605,0,344],
[553490,572990,599130,109535,0,352],
[568710,588745,615605,112550,0,360],//80
[584350,604935,632535,115645,0,369],
[600420,621575,649930,118825,0,378],
[616930,638665,667800,122090,0,387],
[633895,656230,686165,125450,0,396],
[651330,674275,705035,128900,0,405],
[669240,692820,724425,132445,0,414],
[687645,711870,744345,136085,0,423],
[706555,731445,764815,139830,0,432],
[725985,751560,785850,143675,0,441],
[745950,772230,807460,147625,0,450],//90
[766460,793465,829665,151685,0,460],
[787540,815285,852480,155855,0,470],
[809195,837705,875920,160140,0,480],
[831450,860745,900010,164545,0,490],
[854315,884415,924760,169070,0,500],
[877810,908735,950190,173720,0,510],
[901950,933725,976320,178495,0,520],
[926750,959405,1000000,183405,0,530],
[952235,985785,1000000,188450,0,540],
[1000000,1000000,1000000,193630,0,550]//100
],
[//horsedtCost gid = 41
[0,0,0,0,0,0],
[780,420,660,540,4,5],
[1000,540,845,690,4,8],
[1280,690,1080,885,5,11],
[1635,880,1385,1130,6,14],
[2095,1125,1770,1450,7,17],
[2680,1445,2270,1855,9,20],
[3430,1845,2905,2375,11,23],
[4390,2365,3715,3040,13,26],
[5620,3025,4755,3890,15,29],
[7195,3875,6085,4980,19,31],//10
[9210,4960,7790,6375,22,35],
[11785,6345,9975,8160,27,39],
[15085,8125,12765,10445,32,43],
[19310,10400,16340,13370,39,47],
[24720,13310,20915,17115,46,51],
[31640,17035,26775,21905,55,55],
[40500,21810,34270,28040,67,59],
[51840,27915,43865,35890,80,63],
[66355,35730,56145,45940,96,67],
[84935,45735,71870,58800,115,71]//20
]
];
var imP = 'data:image/gif;base64,';
var imPNG = 'data:image/png;base64,';
//base64 coded images
var image = {
'addbmspacer':	imP + 'R0lGODlhEwAQAOZrAP/+/f/8+vZrAPumZP/59f/7+P/JmP+SMf57B/x0APhuAPmAIf7r3fuiWvlvAP/69f/Gkvy0ef/BivqCIv727/+rYf/Ej/3ZvP/Ci/2qZ/dyDPdxCPqRPvumYv56CP/s3f6RMvytbPulYv58DP/t3f95AfqmZ/+JIP/9/Py8iv6nWv2NLvp+F/mIL/+EFvmKMv/hxv+aQPuxeP+uZ/VrBPqtcf/Sqv/GlPyqaP/69v+oWvhxB/uyef/Aiv/48//17f61ePxzAP/p1f/27/mrcf2QMf+MJv/27v7s3f57CP+LJPqpbf/Ytv/48vdtBP/9+/dsAPhyB/3Kov/79//59P/Wsv+CFP7n1f3YvPqILv/t3Pd4F//ewf3l0/+fSPyUPvt5DP/VsP/48f2pYv6vbfhzCP2HIf+IH/+mVv717f+wa////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEAAGsALAAAAAATABAAAAengGtrDwYSgoeIYTZihwU3RVSIkjkzFk1rAEwuPpKdDxUYAUdeIZ2mBgcfECMXpp0wVjhKWVcorodPQisLHiKYt4hjGwgNaydnQUBVMSUJJGhGCV9rKjvEaw4KAjJSDlACDBPaHGs6UUkdwJJqZWYtXeqCWgcLGRpY8WtcYCZINEv5yDhhEKDGFgLqprAgEmDNkAEvEAIwVQDEAAqHfvBIcatHhDSCAgEAOw==',
'addbmthispage':	imP + 'R0lGODlhFwAQAOZ/AP/69v+rQ/l8GPV+AfaEMf/RlfqKL/2qDP3Zvf/Kmv6SMvuuI/738f/x5v/kzf/m0vacBP/48v/PgPlxBfumZf/v4f717fu7i/dxCv/27//HlP/BivWRAv/GZv/59faEA/mscf/8+vmlCP16CfyMBf+1MvzHnv/BW/ZsBP/Fkf6ubf/Ytf+DFfulYvuzef26RP7n1fypZv///v/s3f7q2fqhWv/9/P57B//Sqv+zb/mAIf/fwv/69f/+/f+6ff7dwv6mWv2HIf6zLP/VsPvLqP+sYv/Oif2taf+fSfZ/JvigBvR4APicWPqpGf+LJP6/VPuWB//UpPmna//coP/frP/79/mvef7r3feNQPSMAf/juPy3gPhzCPeTSfyWQv+aQPyhL/7z6vmeDPvBl/qpbfusbviECf2qaPeiEvqmH/2pYv/AdP/o1f+uZ/6jNP+oWv+zXP/hx/zRsfuTHP7Xtf/Ylv/Lc//Ej//NoP/Ibf+/eft5DP58DPq4h/+9gv///yH5BAEAAH8ALAAAAAAXABAAAAf/gH9/PAkbgocAFRmHgkM4EYdVGgqQjBU+OIx/AG13kD0rLJWMO3pHNpo8RRshGUgqmn8NGkYCP7EJCjMafAiHMiFVO1F1YDEVHj2HcSxnTgYwIQ8PDjsreFp1JyNfPikadCFsBjojLX8efgFwawVUUxIdTwFuc2ZlkGoYNzWCHlsT0rzIY6fDiRcL0HwAwUAQkAn8EPVBIWZBiRJCmkAYYKWhoDdcbpxD5ILEgZMHlHyQ4lFQDi5BDDxglMCkiJtKBlywpEDHGQy+BFXJAUUEhwEcIGRhEubQjj0UZqAgc6iBl41YxnRZwoEAjUMqUFwJAUKAB0EOMCQhYuFPBjkEKZbc+lNFAIgQbikYOEvDRANNFkzAoKuAwiJBFlzs/IMqlg1lG1y0/RMIADs=',
'addbookmark':	imP + 'R0lGODlhEAAQAOZ/APV+AfaRA/748/qdVfvKpvl0CvV6APunC/54AvZ8JP/7+P/t3f/9/P/49PijB/2rDv/59P3Dk/7z6v/ewP/HaPeBAvx7DP/u4P62OPzBVv+xSfidBv3o2f/Kc/eQRf/z6fyiM//cr/7q2fSPAfuwKvzQsP/FYvuLBf2uDv+xa//69fuLDv++T//9+/V1Fv+4cP25QvR2APmwJv/VkPSDAPWgAvyqDf/Kmv67RvecBf/lzf/w4v/KcfRpAf/37/iPQf/MlPaEBv/Vp//dpP/gxPipB/q0gP/YtfvJo/eiDvzLpf/isf/Nof/XsvzUtv/IbP+mRP2pEf6sE/+vF/iaVfyfUv+TJf+vGPqoGP/17P717v/VmPusbvmLNPytbv2safaCLf+9dfuZJPhvAf+jU/+mV//DXP/RhvWUAv/Xk/WBAP/38vehBvmmCf2pDvV5H//Lnf/8+fy6RP2XP//+/fafBP7AV//lz/+ybf+/U/++Uf7CWPx9CvRpBP/27v///yH5BAEAAH8ALAAAAAAQABAAAAezgH+Cg39ZO4SIiE0piY0QeAgijYgTYSBck4MKEVsZBReIDAo+C3dHQkMUYnM3RAt+cUxlZC9AIUtpT3saUFZ8BV4qVSswHTNnPCZmdnIyQT9afwwDFVgYLHl6OCRJAD8Ngy0DYwdSU1dRGz0e4IQfFm4PNg8HOX0ciToIKG1sDg51YjhJBOdEETQGDASoQcNIoi8B1CQgUAIMgBFUEnVxEUGAIAVI3iSgQ0iBEgmJ1hBoFwgAOw==',
'adn':	imP + 'R0lGODlhEAAQAPcAAAAAADFM1jxX0SJa9Cpj6i5m6CVg9yhv/Chy/Cp3/C579yp7/E9Txkla3V5nwVFl4i+D+S2A/C2D/C+F/C2F/y+I/C+L/D6I7zCJ/zKS/zWV/DWW/zWa/zed/Die/zeg/Dii/z2r/zys/Dyv/D2u/z+w/EyH4EKS7UCe91WG6Eag9E+t+UGx/Eu7/Ey9/1C9/FW//GmN02KO/GSP/GSS/GSU/GeZ/Geb/Gee/Gqf/HqC6HyN71/D/IyNzoWH24WJ3YuO04yK2ICW3Y+Q2JWS05WR1pGR2JCT25KU3ZKW3ZWT2JKY3YOK6oiT6oiY74KX8oqd8oqe8ome9JSa4J2a6o6szpChzpauzpmvyYCq5Yui9Iqj94ql946n+Yup+Yur+Y2u/I2w/LCo27Sz07i80aaj7aqq7aqr76qt76ux8quz8quz9Ku19Ku29K229LO54LzF06zB5dfY3dPa6tra6t3c8u3t7eLh8gjKAP8JHEiw4L86SoYgSTKlYcMlSY4YKXInSJkzaNK4YdOmzRo3atCYoULkB5MmTqJo2dKlyxYtUJw00QHExxMpXLyACcMTDJgvW6Ts6CHmwYwaNm7cyIEjxw0bNGQ0GPOPgQEECyJImDAhQoQEBwY4EEgnQAIKFjKozYBBAgIBcga+IWCBg4cPIDxsqFCATEEhEDqQGEEiBAcFVgz+S9GBhYsWIjTEsKN4zoUSPGCIMBFX8b84KGC8OAHH88AsK1RcMU2wChbWsAUGBAA7',
'alliance35':	imP + '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',
'alliance35gs':	imP + 'R0lGODlhRgBDAPcAAAAAABAQEBgYGB0dHR4eHikpKTIyMjU1NTc3N0NDQ0REREpKSktLS05OTlBQUFFRUVJSUlNTU1RUVFVVVVZWVllZWVpaWlxcXF5eXl9fX2FhYWNjY2RkZGdnZ2lpaWpqamtra2xsbG1tbW9vb3JycnV1dXZ2dnl5eXx8fH5+foCAgIGBgYKCgoODg4SEhIWFhYeHh4mJiYqKio6Ojo+Pj5GRkZKSkpOTk5SUlJeXl5iYmJmZmZqampubm52dnZ6enqCgoKGhoaKioqOjo6Wlpaampqenp6ioqKqqqqysrK2tra6urq+vr7CwsLGxsbKysrOzs7S0tLW1tba2tre3t7i4uLm5ubq6uru7u7y8vL29vb6+vr+/v8DAwMHBwcPDw8TExMXFxcbGxsfHx8jIyMnJycvLy8zMzM3Nzc7Ozs/Pz9DQ0NHR0dLS0tPT09TU1NXV1dbW1tfX19jY2NnZ2dra2tzc3N7e3t/f3+Dg4OHh4eLi4uPj4+Tk5OXl5ebm5ufn5+jo6Onp6erq6uvr6+zs7O3t7e7u7u/v7/Dw8PHx8fLy8vPz8/T09PX19ff39/j4+Pn5+fv7+/39/f7+/gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEAAP8ALAAAAABGAEMAAAj/AP8JHEiwoEGDK35wOTMHEKAjgO7MORNFx8GLGDNqvPjjjCNKICdNkiSphEiRICkh4mJxo8uXBme0gQRSEqSbOCFFyIlTEkhHXFbAHJpRxx1KNnnmfLRTaU+QbYQSnfpvxtFJTpU2zYpT5BmpVDWeOLHjCJk9j7jm3KqWEZspcKfwCHsQw9i7MpiQaaT2JtusjuDyGMxDLl2Cdk/IKLtjLJMrjnhGXtsX0lseKjJn5pGFj+ewLuwesRNpEqM1Mk4wWTP5pqNHsCFJipAUJ5smjG4qkvtBs2YeYvDg4TOIKBe7SMosiQJmTHMZMo7sufnIUSA4YK5EiaJg+5UxdRCp/5mh5cyfMTBU9PbdO7hwPkR3YJBxpf6VMnPcjLmi+oqdM2As950addjRwB11qJFdFEuUsMODIKT3wYQUtoeHG3iIscdQHWBwRBljnHGGGnbc0YYdislAAw04aMFFGXDssYgjDTjCyCKIFCLIHDAwwYQMJdigXoUT7uDGkW5wkQdMWnRwwhVnuAGHG2rIoUcdfyi2QhddREFDCRGAsIIaiDSAyJlnGiLIET7KsMEKMBDZ2xRITnEETHbY0eERaMgxZRtowAHHGmOtoMQWXQAxBAU1JNGEIWaieaYgMzy4ww0rkDAhBpx+YIMbZYQ6BRNxvFRHHqHJ8MUc+VG53xGKpf+QxBZRAJFGFXCoUcIbB97hq69y3KAdGmXAgMEHnXZKwhRaNKuFGC61IckeM3B6hBty1DFHGdrdRcMUtOIwBpdRrICDAiX+eocbTahxRxbGcirvvBgAUYaz0GoEiCR1RECAaFqoUcYPjY0VQhDgRrEDHLgm4UMSK7gwww06VKzDxDrIGwGnG3ccQQQkOKsFEBpxQUkgGhDwMaeKFcxpCDQMgUUXScwwLhxH3OCDD5i60EQUTRwBAxFRfGz00Ui3qEUQOGTEBSKLgGAACCUYoDK9GMAchBVXdFEEEnB0oUYSKdygsw9FFLEiDQ/EQMMCDCCNNAMMuLA0EDP0gNHTJSj/QLUBAUxQAghGZxDCCjQYscXMPvxwRxdwJBFC2T4occUWX3yBxaFKwE3356B/bgIND17RkkHm/aBACSsoQAAFOvwAAtUahHDDEENMgQXjOlTRxRhDcFB2EVLsrgUWViRxQwqehx76AjPAMMMSdhyxxEFXQDJDA2CqrFC5Pfwwwg1OKKFFGVzMTEMSSUDBvgVlK2GF8WTjsMMDC+SvPwP658/ACjP4wRXqsAg5/OAgZ1jEFSpgAANU4Adg2EMQonCFJuAgCl1gFhh21wUadKEKdwBeBGznhN1hAWJIIAOPFKCA/rlwASsIAhfa0IdFVOcHUShIGwCxCDC0LgI6AIMg/+CwBAWBYARbCIMWNni5KOAAcuPKwQhvUDwsXOEGMyDDg7iwAAQoIAIvlMAKjnAGHk5mEsspyBkgwYg6LOEGEPyDI67ABTig4QgrwMK9dIeFL/hACFyqwhFysIEQ+EAKx5McEpCwAypwIQIIeMAGSjA4qlHyBm0gRGtkc4Y7EeQKlHjEIeDAhTH4wRGLKMIZ5DCDGdDgC2CIJRi00IUbJKELUBhDEnRQgQzEwAmLuwEHyEAFKuxgBAiIJAfMhsUb9CAIPTDEJmVzh9MJpA2UgIQjECGIQkSmD1Gowx2KlYIvvAh9XXpiFcaVhBqA4AE3wIIWpBADE3BhBhx4gCQXkP8BDkQBRGMYAxrUsIRCOMURChlIG47iFDSAoURCG0IXwIC+LVjhBoBUgyC6UIMVaCAFJdSCE0KwgHwiYAFIGIQJEBCCKKjrDnbgwnSU4ogjcGEgZ2CoUu7jqyaYwAcUTZ8ViuCCMajhg1XQQQgscMjdKSEDySxAADQwiEFQ4QEhMMFL7wAGNWRlCdcTSBmxopQouCsOQXCBEULFhS34IANGOUISqpCEIYAgBUrY3UUzYIIAAIAAJhjEHExQgAdw4AsvRQMXatOTKHjyH2N1ikv/sIciPGALFC3DFpIQAxdAYQhQcN8KMpCE+SGvs2QgAAEKoIAZ6C8DK2jCH2Y7Wzv/XIGxN5EEFx57BkTgVjZX2MNs7xCEiZZhg13AQgw4ANrPaiAGV9Ar2ZgwBwIEQAAFgN4cdqCADAjBD7SlLCiVMondDuRpvy0veP/wBSNQdINY2IISnOCDEHDABCtIgRWOhzwfrGAOXCCAALQrWBM8IAMbeEN4/bBY8p7hgALxodw+poAGNCACG3ACRRe3uy1IAW06m58SDoUFJyx3BhaAHhe4oEULJHOpGrCwjBUwgQnf4LFt+ANZc6JbQSCCDUMIw3GTcIXjdUEJPphfF6zgRx8srgghaKELkEAFJKCYhRvgQAYe8AVJCWIMv4WEea8JiB3j5BFg6MNKkkDRKRQh/77G24IWtlAEJXxBCUXQwlBDMGUycMEEHFDAAyywgyiM4MBHkNQe0vDbR4B1IHPQKY/PYAdEFJcLYJCv/I7nLCv4AJjNKjGmqEAGGARaASPQIhE2oIAQZGAEkqpDHQ56hBwORNJn/kMdGmGEKGjueE5ApAk9XLnk6plsOzA1C2dABSJwIdALaNsNLLAER1i7DoZQiiQQkVCFZlMpi2iDI1xAAx90YXGhNiGw5bc4JxSBeYJ2AQwAnE9Uc2EHKUiBBYpgbUeo4TVKAYQOzkCQM3x7KZEYwyHyQAYL3IDJX+CwujdnBSdYAclbJvQgduACFyNgA1VtwoFNwAZrGwINkf9wShus+Y85yEbbddiDtSOWuCJYIbkm7HCJpfBuC9h0BzN4AAIKIABUz2EQTBhBEJrQbz3MVDJcgDBB7mBmnDhCDnRYhBCaAIMRMFUK58658dydAhhEYQYKGLpfCfCAERx9BiXQQiJCMoe08GTb3SbIHA6+FDPQgQ6NfBAOXIA4JsvZeBXHFAwswEIEBCAAqm37IJBwBCjkAAhAeILmNZ8GROSkmm0wSN2dwggvmB4GTWjCDhYZvRXcIK9biL0UlJCCByigAABAgAUgXwC2cwAGCsjB2jCP+c0/QRA4YclFqK4UOhSTCmZ4EBKaMH1jdj2eTrjC7DOQXesa4AGQN0D/AVJcghCgYG0rIn7mnwAEQTyC21e4iLQk83wqeCESYBACEohABeoToZU0sAIx4AMpwFojADiCxnsAYFhV0AIO2AJrkwZpAAQ0UHzt1wYzkBH7khN4QAXERwV4QAmEoAWr12xEsEhCkGwckD8KYAIGkHsK8HgBYAAriAIP+IA0sAiUQIHpl3lF8FgH0QaLEAhE2IHqBwRUQAdEKAeq1wRV1n9E0AStFGgw8IIVoAB/BQJsAANZZQJe6IAm0AKah34V2AIuoBEe6IHE9wJsyIZHiIRHMAMrVmVOSAUjoAAu0EBwsAIEoAFx4AiC0AJeOIhimAZPQAMQSIYooBFA0IaO//iIj4h5cTgDTcAFxcQFdzgCDTABULACJVABOzAGXzAhgxiGxzcJQHCDa7OIGeEFbOgBsBiLshiLbEhGi4B/M+BsLIZMEeACJaABVKMDRTCEJkCKg/gBabCDYaiKrIgRS8ACIjCL0giLIsACPSBTZ5IHUbB1c4BMHjAuLtAoalAEfQAHRFKMyLgIgniDDtiMF1EGQQCNsAgB8+gB9EiP1TgDRYAGfyApeUCCLsYBUCAIVYAravADeVAGF1AhxdgCgpAGpUiI7viORSCPEHCR9oiRIjADfJIHboAGdxAIhoAmd7ADC7ABOqAGvlMFRfAFZ/AFC1khFwAEkfAEHxCRXv84kReBBkUgAhf5k0ApAkvgBt4kCY6gB2fQBuLkB900AXBwBj1QA0egA0qyCHaAAjE5IRfwBJNAAzdZii3wATnwEl5QAUB5lh7gBYhgd7JhlIVgIgOlAGogMHAUCDbxCHmgAxcQkwuZjKnIkCZwAUCYEUeQkWf5k17AF1lBEpIwAZIwEkrhB1EQAgu5l1spCHdgk8Z4AWf4EkAAlBUgAmb5k0CwCJXxFzmBCG4QBJSplR/ggERyAQcDEz55kdGoAR5glgkAASIQCKfJFdYBBjrgAHv5AZaZlbJZA0OxmwmAAAKxBDOAm2YpAnjAllmBmjnhCHtwRSFAnMe5lwcwAFO4cQAHIAAE0QZB8IsiAAR1YJ1OgZ05wQh3UC4RkAAOcJ/kKZ6HYRBjMAMg4AIe0Rfw6RqHgAY9QEkrkKD7qRExtQS1tkMApxVKUR2IcAdRp48wUgYL+hKFQAhy4FhLwBBnAnCzYRPbhAiA0AZRFztR0AZruaFEMQmOkKK7dQTWEwUrpgAr5qA/UDFHcAUQOgkwShdGWaFtcAZcsB0gsBw4yhB3gAiOIKRDCqNFeiZ+gCbW9ghT+g8BAQA7',
'aup':	imP + 'R0lGODlhEAAQAPcAAAAAADFM1jxX0SJa9Cpj6i5m6CVg9yhv/Chy/Cp3/C579yp7/E9Txkla3V5nwVFl4i+D+S2A/C2D/C+F/C2F/y+I/C+L/D6I7zCJ/zKS/zWV/DWW/zWa/zed/Die/zeg/Dii/z2r/zys/Dyv/D2u/z+w/EyH4EKS7UCe91WG6Eag9E+t+UGx/Eu7/Ey9/1C9/FW//GmN02KO/GSP/GSS/GSU/GeZ/Geb/Gee/Gqf/HqC6HyN71/D/IyNzoWH24WJ3YuO04yK2ICW3Y+Q2JWS05WR1pGR2JCT25KU3ZKW3ZWT2JKY3YOK6oiT6oiY74KX8oqd8oqe8ome9JSa4J2a6o6szpChzpauzpmvyYCq5Yui9Iqj94ql946n+Yup+Yur+Y2u/I2w/LCo27Sz07i80aaj7aqq7aqr76qt76ux8quz8quz9Ku19Ku29K229LO54LzF06zB5dfY3dPa6tra6t3c8u3t7eLh8gjIAP8JHEiwoEGBWKocNHhFxYosCwfCOfECBoo4EeWYEAGDR4kLcw7aiaFBRAsXLDqkOGhFAYcQJEaQ6ABBSEEyBSps8ADigwcOFgi8GShHAAIJGDIozWCBQoIAdAQ6GHAgQYQIEyZIiLAAgQEG/8Y0kEHDxo0cOHLcuGGjxowHYnrskLLlCxgwYfKC8cJFyhMfQHQ0cQJFy5YuXbZoieKkCZMfRKiYQaPGzZo2bdi4SYPmTJkgd4oYOZJkyZTTp5MgGaKkTsSDAQEAOw==',
'bau':	imP + 'R0lGODlhCgAQALMIACQQB3d0lM+EGH8zDtXT5MC/0kxMV4+Mr////wAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEAAAgALAAAAAAKABAAAAQxEMmJxKDTAlzHxhrXGSJSBKR4ptSBHEbREkY9F/B97OlB4LucD8iT/II5CdI2qTEpEQA7',
'bDel':	imP + 'R0lGODlhLQAUAPcAAAAAAHHQAJoIBZQ2LZ8xKZw+NqMDAa0NCaEVDqkfGbwFArsKB7oPCrIVC7IUDbgSDrcYEqslGq8iHb8kFrgkHKYvJKc1LLU+Lb4/MLBFM5hKQZVWT55gWaRMQqpZSaNjWrpgUqxyZqlyaqV9d8IHBcwEA80GBM8KBcMVDc8bD8YbEdQOD9MSCdURD9YREdUSEdYYEtQeFNkWE9oYEtgeFdkfFtwcFMElGtAjFd0gFt4jF90mFd4rHcIyIOAjF+ElGOEnGeIoGeIpGuIrG+AtG+MvG+QpGuQrGuUsGuYvGuYuG+MwHOcwGuc0HugxHOgyHek1Huo2H+w5H+Q1Iuk7I+w4IO46Ie89IfA/IshHKc9LK8JJOsVNO8tONsxIMdJCKeBHJelFJO1BI+9FJO5JMfBAIvFBI/FCI/NEJPFFJvRHJfdNJ/hNKPpSKfpTK8JcTclcRsxcSM1pVsN9dtB+cK6Jg7aQiM+ZktSViNWjmcOrp8S2s8i4tNanodqxqNqxqtqxrOC+ucrKyszMzM/Pz9PFw9LS0tnS0NjY2Nra2tzc3OTKxebQyujSzuPd2+Pe3enV0ODg4OLi4uTk5OXm5Obm5ufn5+ro5+jo6Onp6evr6+zs7O7t7e7v7e/v7/Hk4fHx8fPy8fPz8/T09PX19fb29vf29/n08vj4+Pn5+fr6+vz8/P39/f7+/v///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEAAP8ALAAAAAAtABQAAAj/AP8J/BegoMGDCBMqXBhg4MCCriJKnEixosWLrgo+xMhx4h86eBh1jMiqIcGRrvzEkZPn1MQ+KKi40YLSVMMArXLq3LnTC5k0Y+B8yhmIAQs2bbLwXNqKVSlOBZuymkq16tQLU7CYOdMFUiMIJ9CsAWPHqtmppCwVZLWqrdu3bvlU2GHlCpYvFEpIURMmhCm4gNuOmlSwrarDiBMjPlQgRZQqVpgkKSPGAyfFmBGDklRQVSpUoEOLFn2JQ4MlUB5byfBotGvRniIV/Gyqtu3buE0NEEDEyZMmIHILtx27IKpSpJIrX858joEDQo4gUVLkDfPryzfJDmBqlKjv4MOH2r+jgEQOHzhUBDEyZIv49+A1KSpIShSo+/jz4we0oMQMGzF8sIEDOvwABAb6JXhfJokUNAoonkQo4YQRLnKDCS3IAEMHnIQyAgI05DABhSRGiAkiBYHSySYstugii1zw0IILL1jgSIt7aBCBCC/2uIkmkxhSECeaZGLkkUga2UMNK6wgQSFJRimlkZMgIiRBmFRCSSVcdullHQQ8kIAeXnaJZJldUhJJIoSYFEAkisQp55x01mnnnVYOMohJBAVgCCF6Biqonn8OauihegoiiEYO9cnQo5Ai5FBAADs=',
'capacity':	imP + 'R0lGODlhDwAQAOZ/AKqlmopuQKyMVpqETFdGI3psSqaXe6ySVczJwpWKcqSdjuLf2aWKWWdQLJqUhYRxQ3tjQLy3qtnTzk09IlpVRod9aP38+mFLLMLBtJ2FW/f38qmOXKWKVpd7RpuOaaKGVN7c1vTz7m5bMpODXHdfN////o12QqqPWqOFRaeNV5d9TotzRYtxQmhVLoBnP62PWJl6Sop1Rf7+/f39/aKhmqiGVI9xRaSHUph+TZGAZJyFYWFTP21WOqiLXY9ySuzp5J+MVJF4SZR5SOLh3Z2AVGVOJ722pfHu525iNrCkiLSvoLe3sk1EKcS7ZVlKNF9XPpF0SH59aczIv/n595GCaXdqMW9qUIVpPGFSNI99Tp6LWnJaK2tVMmpfPquKWNTLxMvGuKSRWKuPXefm4u/s6aGLUqSPUDsvGISBb3ttQIJnN7iuYYBsN5iQe4lrPIVwTZF+TIuAXPPz8/b19WJUKKCCUaKMYpmBULCTW5mAVJ2HU2NFJpp8SVZBIZ1+TP///yH5BAEAAH8ALAAAAAAPABAAAAfsgH+CfyFSVkoIDksyQwgWglMRCR5rdDwXbRFoURh/cxUtF2xNdHsuTxVgITQlDg0rKy5VSA8EFAoSMnIyCXYnLCoHYSJnFBgzg0cjQFkiDDEEE1gAMoMWcVVpLSQtRS4kfQDIfwsjbA8PJBB5KgFbBAB/GgZ3dRspH0QMHTZXF0wavmjhAwPPCwEfOJgI4uaCk3kfYLDgIOBFihQDBqjpU0GGDj81fEDhIEaMECE4uEwA8ScDCgE9OJwQw4BFBhc7FghKYubGhwMvDpSBk6YLS0FkPOgxUcfLgBgFHIwZJOiHkRwQ3lBRoJPqn0AAOw==',
'centermap':	imP + 'R0lGODlhEAAQAPcAAAAAAAATfwx0FRB3GRZ8Hxh9IRl+IxQu/yQ+/yBG5S9J/0NZ/0Ve/0xj/2B1/xyAJSOELCmJMzCOOTaRPzeSQTuURT+XSE6gVk+gV1alX1ukal+pZmGsaXe4fnizvIC9h5up/5LHmJvLoKXQqbjbvKLjqbj/osvT/8LgxcvlztXq2ODviHAAMs+EewoEGDDgIgOMiwIIMADRo2VBAAhESGBwKc+DeBwkWCAQJoKBDAwoqLI0KaCBCCwAeGKyxIKBEgQQATJi5AQFHwA4EQOD2oxGniwYZ/AirgDMmUKE4OA1JA+OC0Ks4HPP9doGAVZwYJJwuKeGA1QoeGKswSfUDiYwYKGCR8LGjAQMOAADs=',
'del':	imP + 'R0lGODlhEAAQAPcAAAAAAJoIBZQ2LZ8xKZw+NqMDAa0NCaEVDqkfGbwFArsKB7oPCrIVC7IUDbgSDrcYEqslGq8iHb8kFrgkHKYvJKc1LLU+Lb4/MLBFM5hKQZVWT55gWaRMQqpZSaNjWrpgUqxyZqlyaqV9d8IHBcwEA80GBM8KBcMVDc8bD8YbEdQOD9MSCdURD9YREdUSEdYYEtQeFNkWE9oYEtgeFdkfFtwcFMElGtAjFd0gFt4jF90mFd4rHcIyIOAjF+ElGOEnGeIoGeIpGuIrG+AtG+MvG+QpGuQrGuUsGuYvGuYuG+MwHOcwGuc0HugxHOgyHek1Huo2H+w5H+Q1Iuk7I+w4IO46Ie89IfA/IshHKc9LK8JJOsVNO8tONsxIMdJCKeBHJelFJO1BI+9FJO5JMfBAIvFBI/FCI/NEJPFFJvRHJfdNJ/hNKPpSKfpTK8JcTclcRsxcSM1pVsN9dtB+cK6Jg7aQiM+ZktSViNWjmcOrp8S2s8W9u8i4tNanodqxqNqxqtqxrOC+udPFw9nS0NjT0t/c2+TKxebQyujSzuPd2+Pe3enV0O3e2+vj4ezl4+ro5+7o5+zr6+/t7fHk4fDs6/bt6vTt7PXu7fPy8fXy8fX19Pf29/n08vr29fr6+gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEAAP8ALAAAAAAQABAAAAjcAP8JHEjw3585dw4J9AMnDh5OBPucmNImyyVLXcagEfNmksBAC1asYYMFEiULUq6UMcNlEaIHJs6o+VJHIB8KOqpYueJlAokoacCA2DRwEAEUUKhUWYKETJgOkgo+2sBAyZOkVTAoKigwk4AAQ5o4YfKBq0A5BQwEMXIkCRE3lQraSTACR48bKYAUEaKF0UBACkjIqAHDg4YGOXz8uCDQkI0SLGK84CAJk4gDM3BIaNRpyw4WLVxUSDRQTwYIIf454kFDhYoIggpqKiTQE50BDhDkMVsw0h5CvAcGBAA7',
'distl':	imP + 'R0lGODlhDAAMAPcAAAAAACpIgjJWmTdkqzhstDh0uzh7wEdhklJkiFRmiUNjoUhwsFJwqFZ7t1J/vTiExTiMyTiUzTWn1FmEv0mAwEiGxEeVy0CYzlOUy1aVzFacz06x2FKh0nCWxnyey2+k0X+hzHiq1Hus1VvB317D342pz4q02Jew0pW62qOuxajwAAAhZAP8JFDiCxMCDAlVIkLAB4cELESJwcDjQAgQIGgZ+CCHCBAoMD0Jm+GegpMmTBioUWMmyZQEK/zp4AFHihAMCOCdQXDBgQAOKCgQIYEAxRYAABygKRJAAYUAAOw==',
'distr':	imP + 'R0lGODlhDAAMANUqADh0uzh7wDhstDiExTWn1DJWmTiUzTdkqypIgjiMyVvB33CWxlacz0eVy0CYzkdhkn+hzG+k0Yq02I2pz6jT5Hiq1FJwqHus1Zew0laVzFRmiVZ7t06x2FKh0lJ/vUiGxFOUy1JkiFmEv0NjoUhwsHyey17D30mAwJW62qOuxf///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEAACoALAAAAAAMAAwAAAZIQJVQaFIMj0IOgUBBCjsGg8OpYiQSDWpmwAWhJJdKRPUJmM/owAnAbrsBKpFg7sFMIKXFcHM4kKhCFgUFI4AqDwgIKYYaIUhBADs=',
'editbookmark':	imP + 'R0lGODlhEAAQAOZ/AP/x5P7z6v7t3/SdBv/8+fq3hv/lzv/69P/cvP/17PiYUffYS/VuCfpzBfhuAfV5HfVqAffZhf/Fkfq8jvmqcf/7+f7p2PZ/KfV2Gf+3d/K/NvVqBPeuKP738fu+j//+/fZyEP/38f/Djv+cRfngqP/38PVzE/nplfbcb/+zb/isMf/Hlv+9hPXaZvTCSPTRYfnWZfeCKvXHWf+4efq6jPffefp+HP+gS/WcEfXTav/o0/jhiPbcaf+MJ/7IkvrbofVxEP/GkvXUJP/Qpv/TrPyrVfLMJf+uZvfQPPfhZvmwevz03P7v5P7m1P/Ytf7ox/PCQvadIvzJovLLQvjNTvnaafjWUvveqvjaU/G4Hf/XtO/DHP1+EPixNf2gUfu5XP+oW//jyv/kyvzln/2xcfZxEPdvBv+SMvqdMPSYFPafF/u9jPjUX/XMLf53Af+8f/qHKvnnifvqw/SeCv7q3P+JIP/u3/+fS/nWbPnfo/vuzP7uz//Il//LnP/o1P///yH5BAEAAH8ALAAAAAAQABAAAAfYgH+CgwRBd3aDiX8fJYs6TiIsBH8Jk4IJWnxhRAgAe24jK2deAoIARwB9Fno5UzVPEmNmTYNDGSdQUSBlaRpJHBSJGWIaGxMBARMbWW0xlwYpcg4TiR4OLQ5rATdvBi8gHYkhXBFVag82aFRbQOGDB3URC3MmAVIMRhAeiQg9KBAFLAiCg8dFAxEhDhiQ8IPNhURkvsSRUQTMDB9XlqhQMshPgwUckPDIQ2IHjC5CMAj8I0DBAwoXIGCxguMCBQYKSgkiwORPhQIDBtCo8IeOJUUsMTxwlygQADs=',
'external':	imP + 'R0lGODlhCgAKAKIFAAChAf+AALjogArGASnGAf///wAAAAAAACH5BAEAAAUALAAAAAAKAAoAAAMlWFrRvoMsNsNYAWgQBAZKVwhXxnhCQ5gCkYIXOAaFXE+3su1LAgA7',
'globe':	imP + 'R0lGODlhDAANAPcAAAAAAAVrEwB0CgB4DQB7DQByHwplPQF+MRZlNxJwOQdcRAZYagRkTwFuTRhiUAFjditgawM/pQBHmxVHlx9UgwFApwNGqABGrQJJrwBQtQBUuwBevBJCpxREqRdFqxdWsgFrpQB1tAF4uitcgShOtCJXtjdXpDddvjhXuDtdvTxltQBcwgBrzQFuzQ1oxxxsxRV41EFdiUdemkRerVxsk1lsmkZxvgGCNiSoLDSxLgGGQQGETAGJWQyTcB6beD6NdSWkfky/LEK3RljFNWfNRWzPQ2LKU2/QVHTTan7YdQGAjQiHjw2Xgx6KnQKIoQiEohyilTazjQGJyQKD3AaS2AGG7QmY5BKe+xehxzSd6DCw+meBkHqJmHKQmHaIqnmGo06Qz0mj3kq+/nam2nbNrGfL13rU1JyisqOotKistqW6va6yuYir1pWnwY3YkIjcq4LStZDhkZPhpJ3mpJzlrqTpoqTjtpvV0p3K66rL0qHZ0KLH5qfjzabow7XwxifAP8J/McHDpk7AwfaeSMnyRAgWfAMdINkjh86RqBMaZLnnx4hReLU6VMGi5MDP/6F8RGEyBEzYqzwIJBADYwnOHJE0XJFyo0CBrq4aLGkBxMqVZQMCOBgy4sVLETo2BECBAMEELiAwaBhQwMBDzJYGBEDzZ4PFS4sUCAhAgcTNASOKdGBwgQPJFDIWDOQjQ0VJ1LMqJEmocA2Xr6cSRgQADs=',
'imgo':	imP + 'R0lGODlhCwAPAPcAAEBAQAAm/4CAgP///wwAAAAACwAPAAAIRwAHABhIkOAAgQcTHgSwcECAhw8RSlQokSHEiAwnKsxo8SLCgRQXAhAgwKFHkiVLKkypUuWAljBRHiT5kiJLlysFjETJU2dAADs=',
'locked':	imP + 'R0lGODlhDAAQAOZ/APvx0qmIUvnqtc2ra//Fk/+bQ/p2Cf6xZvuROvp+HP15CZ6AT/6GHfV1GPRnAP+4ePnpuP54AfGtS/nowu2dFv7Opv/aufvmqu+0DfXEXvGuQPtzAfCvE/RoAf/y6P7Gj+2ZFfeWT/XCQf+RMPTRfvS7X/nqxMOaW/zbw/iQQOeDBumLB/qlZPPFVvK+NP/JmPjmve7PNf2WP/bYkPK/We2dBf+hTv7x6PvKpfydT/TThv2rWP7y6fmNOv/DjvnqwPK2If/Qpvd5GPDAHvbdo//r2Pvfp//hx/K8Yv+1c/25dfDVR/+iUPLTb/+/humQE+mQGfCiHvyFIvrciPz35u+lEeeDCvhuAemOD/+rYP+vaPHKVPO0OPO6PPvhu/CtIvjnuPTHcu/IK/LEb/uTP/+7f//Mn/C6F/zBkvXblvjovu+lBOuUBvh3D//XtPG3Se2dLv+pXP7fwPXYmv+fSvKrF/fSg/fotPRrB/qlQP+oW/9/DfqMNcGZV//z6f///yH5BAEAAH8ALAAAAAAMABAAAAesgH+CFQUMDExHgoosGwoIPQZ7boo4VzIegjxkI0WCKQp+in83Bk6CCTaignxxp1qqfwhZfyhtBRZBLwQEaFJ6fnhcXh9KBwc7eUZyZg5Ldz9qMBMmAgBUPg4xTSQ6AwNzRGAAZQ5iWy00CwtjJGkQDw5DLl1vfSdIYTMC8GdAdVEBAkgoYedCEgcYOFQB8QQKHA0ZptDpsKYGmxUqrGCh8EVEhBANQooUKSRHIAA7',
'mercado35':	imP + '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',
'mercado35gs':	imP + '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',
'merchant':	imP + 'R0lGODlhCgAMAPcAAAAAAAAEBQQAAAACCw4GEwARAA8TAg8WDgQZEg8cFRMLAB0WBB0aCRwgHxQ0KSYoGywhHTUvHyInKy0tISwsJC45Kys+PDo1IjM1MjgyNBxFMzNFNzlLMyJMQjZISjxbXj94aU8/L0c6MUZFM1BQTktXY1xkT0V5Y0B4d1B2a2JfQGxeQ2xlS25sXXFsWHl6anR6el+LjmKupFXRyW3NyXLTyoKAZ5GHbpSRcJyXeZ6bfJqRgJ+Xio+hi6eZjq+qjaWikbOti7GtlLiykKamsrvEp8XFoczXt9POsdjUt83Hy+LW2gwAAAhuAP/9W7HggQqBCIOEgJBBwQ2E/3L4WEJAwA6ISEQoIWKhQhKIPBp4QNGBA8R/G1LQkKGhCEIbBU7MqAGih0AjBgKUiPEhgRCIMAY4QHAA4Y8WGCQcMTEBiEAWESiQ+DfkAgMdAl2MeCGQAQMcAQEAOw==',
'militar235':	imP + 'R0lGODlhRgBDAPcAAAAAABIPCBccKyMbCiEhHSwnFjAvJj44JjU5Oz9EREQ0D1U9EFxLCE5LOFNIKF9MIFZSM1tXPlRgOmZFC29MDGVTC2tSG3RLCHpOB3dSD3tRCn5RCH5UDHVUFnBbJ31tH2hhN31rL0hHR0pOT0RTWVFTSFRVTVxbSlBQUFFSUFNTU1NUUVVVVFlZWVFYYllfYltxQ1NkcGlkRmNjVmxpUm1uXm1+R3RtQXRtUH91RHp2VWNqbWxyd3d6bXN+gXqFjIQ2KYFUCYJVCoFWDYNYDYZZDItZBo1eC4tiFo14DpVgBptmDY17PJNsIahuD6l2H7d6EcZ+C5WHKKGJEKyTDrmdC6OUNriiHbKmOoOAUI6LVZ+SSIWAYo6KbISFdYaQZpGOd5qWYpGcc56beJ+qf565f7irUaagZa60frOrcMWnCcmtF9e0BNGyDNq5DN+9Cte5E8KtJuqUGMS7e+LADeXBCeXDDufEC+fFDuvEAerFCOvHCurGDOnGDenGDu3JBuvIDu7JCuzJDu/LDfPODPbRDuPMOt/ER97IYIeLhYWNkYuQiYmUmJaahZCUkJCXmpWakpGan5iYmJ6eno+gsJmhpJ6orqGjjaqnh6mtl6+/kLevhr+7ibWylb64mKqrqqWusau2o6m0u7a4prO0s7e5tr6+vpC5za64wLO+xb3Brr3JoLjDyr7K0sjBndDIhsfIuMXTss/WvtLLqOHXkeDZtfDkm+bgvP3yqMTExMfIxszOxcrMy8vMzMzMzM3QysTR2srW39DRz9LWyNjfydLS0tfX1tvf1NjY2Nrb2dzc29/f2N3d3d7e3t7h2t/g39Tg6eDi0eTm3uHp1vbux/32zeLj4uLk4+Pl5OXl5eTm5ebm5ufn5+jo4ujp5+jv4Onq6uvs6u7u6e3t7e3v7O3v7u/v7+3x6e3w7u7w7/Dx7vHx8fP08fP09PT18vX19PX29Pb29vf39/j4+Pv7+/39/f7+/v///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEAAP8ALAAAAABGAEMAAAj/AP8JHEiwoEGDiSaZ8oWMG7dP3Joh80VKEsEQBzNq3Mhx4CRf8ezdu1evHj16PUqWHPkOFpMnTph0nEmz4CJVXchJEzevp895Kn7OcwnziVEvNZN6mOABhEFJze7FC6OFSzShPYP6LNfDiVGjULT4SpR0ZoYiQTh0aPpvUdR6PbuE4bIMK1Cf6iSlYuL16xNM9MaW1WghCBEiHIQECdLhRiZY4ebFuwRLnd2787wtetSq0RK/UJCYqhdv0mCDOTQM4cB6CGIhsCl4GKOqkzR4l7U62mEpVasQTqA4WfJAlbl59O75Oj1wRgcNh4msdi2dg3QhQx5AGJO75zpQqFoF/8ukZAmXRAji/bzHbQaTNYHa5KjJZQPrItQPr7bOYQiGEHNAIEtP8hSIHAv09ASKJeEF08gnovyAADc+xRPNJmtYkcMWe6hxxkyqBKFBa/1Rx9qJHFxwRhpnRNANOMbkUgoppCBAYymPgNJKKsFAw0okMQhwXDewmAEHIW0wIgoqcehRRTQcLeOBfa5NN8RqiLW2ARNznLGFAlyQYoouwiTzzAjPJCMMepa0Ip4lXDDxARZmxOHGG4MMskYkqTCpBxuucDQGBvwVkWV1VyI2xAVMhKDdHA78Eo4567TzjgrvtLOOIwbwAMyOW6jxxh+FEEIIIH74McgVkbCCyhVv1P9hxkaqZKAaYoexlmtrRGhgQQgDAFDAHFrIEE46yKaDQrKWvMAINK1gMgUXJuTgRiCp+iGIGyFQsuQaewSCRTca3XBBEPiRuKuuQlCQRhoBAOBAlw5gkqyyyJZTCSrBsAKMGUkokoAPTLwhSKqCvDEFGKhYckUghKxBjEaX3OABBRtcaeV+qzH6ShgAAADBHHPoUAAszaQsQsrNTCIKK/5iwYQMEMiAAxWDpAqIHW1QYQUWbQAyiBuuNJNRJmFQFQLGRehKIgcZnNElAAHMG8YBA+iQjMosTwIKK8GUMgUkOzZCwwd8HJxqH33UocfBgtyRhtEHeUFLFgfIkMUNFlz/gF1rGhShAA1jaJE3BBA0AAENXkjiOAKOS+IDKL6pIgWDlYgCzCVq5KwzIKj6sXMdW1h00CW0nDFAAGdo4boFFARxpWo3hEHDDDXMUMIJIEDghS/A+5JA8I5YAnYmTKQSyQgvtIIKFnW0oTboCL/BRhylZHSJLVoUMAAtYRQAgRY5wH7BBh6EIUMDNoCQBQg5gFBCI8H7IkLwj2QezBhMiKKIDwKoBDC2wAY1iG5neEAVINpAhzeA4WjgK0AAXqE6AOAgDVnY2wOyEIYa9KAHNfBCDUZ4BjDUTwS9AN4jesOKLuggEj7gAQA4gwk10MEOoKODG0IHCELwYQumOEgm/yI4wTRIMAy4AMEAIhCGG3DwDK+YxSY2MQtalGwUwbsf8CQhikr8wBIuGAEPUPEDH7ACFFS4gxsOBgg8aIsQdLgCFjLxidOlzgQEeIURA6AFXOQgXq1Lgy1wgYs0POABc8DFHHLwBeD1Qou+iEQlLPGDRzDii8EABSMsQYkQvIEOOssTHqhwBkaoAhmmKQgsxvAKXGyiB+8KVhZwkYV4zeEVr6CFIhewgAncwI8g6EIW8Wc8RfxAEYxI5iR98IMSqAFuenhDFRyAgEewghSlIUVBVJG0VtICfCIIwCx1EIAA3DILWqBFDiaggA08gBZG5EIxjGEMEdDTGPlrhSX+p/+IRyiCB4wYASNcMAVT7cEMYwADAATwg1aQoh6f0CZBfEEPcowiDLq0BSe8AIYk2vIVe0tD3yiAgXeSYQYzGAU97UlPSFTijJHgQQJ2EMNjpsIHWshDG6RAimBYQgA8EAUohhGYOhKkFPfoiUVZiQta5LIGIgAAybIwvgxQYAIlnYMnUgGJMaz0nrtYRCpAAUMe8OAF+4wEGSXxAQIk4GUNY0UlhIGcZphuIMVIak/iIY5RnEGXuHhFJniQhkVykAIZWEBJw9CFHmRCGVxLGTOMAQke/OAFPNgBD1jRT+UBIwYASADlWGGJUvBkr6kUSDGi8pN4xEMaY/grLjQ6B1r/gMABObgABhbAhUzoghksi2zKksGIzMo0ACOIUJsq0YoXGKChoviEMNRToU8EUSC+YC1WTFGKS8g2sCaYQQMokINRADe4LFsZy4yhI1D4YAcueIEiUKCIsbaiEl+rBDbt8gmj/sMX3ICLUORBCmE0wxiYSMM3UcGKGlxiF+hFr3pTpoxSVEIRjjAuZn0gyVackRS8MEWChEIPUvgXwAIWSimasY1taCMZSPsEIzJxDGK0+MY43sYIcryNZzwjG/hsRasYsUJQfEIZ2VCGiLFCD1Oc2Bwj/kmTrZFjbtw4G9ngMY53zGNnULkUqKjEI3TRDF38IsvbuIYp7IGVejh5/yCmgHKbTYFmLdt5y3feBpb1rOVsLFko9fBFanXhAxao4NCIZkECUMBoRq8gBStotKQnTelKW1rSCTA0og/NAkf4txgBZrIpwHEvacQiGuW4l6rvtaxVu9rV4NBFlH/yZtWGesC5wMa9iCELZ7x61a12dTiO9etrULQnsSDGNNwhj/4OBBnalXIvlIEscqjCEYtYBCzQ8etkBVvVsZDCFjRxjFcnIxk9IQYxNBGLacQjogOJiF7nIY9VaGIY20iGa78xWBLw4BLqcK3ABy5wFRA8HufQxBX2AMcroOEYB0fGOL6hCU2oexr0MIdCCJLXnkxjC1SoAilH8Q7XoiIVqf+wRCbYcfCDG5zgaIgV3AixhyuQwRkCf8d0ZbGKaUxDHurhxl2xq1c0SI8ObVDDFM7giWF8DRWRWAQ6Wk7wlwv8GLDaYbYEUYian0EW8RiHL9QRikZM4yfFGPo/kIGcc2jhDwfDAx3oUAc3UKERokgFJXqwClkEnOrxsLprzaAH6WVr64QIxBrMMIpnhIKZmaBuPEyR2oE0ox6xqAIdEggIQQgCEHuowiL0+YEptKENW/jGSFbPehasvh5puIMd6KC2wyMsT3CwQiOgAYxM9CTjGy8IMu6hCTWsUVvZqkMSfGAJKbChDVcwPhpYT33Xj8TohPi87ROGh23RoYd/CIP/h0PhE7sWwyDIiAca3GAHPOChZ1RoAx7U8IErRDMNxBiDGqZP/dVb/x7TgAVqUAeeky074wfvJzp+wAZhkAqsIAbH0BOmoHYDkQxYwH7bogZqIHJTMAhvcAeEQAVgkAMeMAVpIBL9dw//Zw8VYwV4kCeHBzp2cHxuMAVewC9cEALSoHHZcxDCAD3aUgVJUAVuwABVcCoJIwUOMACXYAZW4A4pqIKrZw+N0AmzEAJU4AbZZ3syWAUPoAhukggg8AXCsAjIkBHHAD0v+AbBEgAKUAietwdU4ApeYACdcAZSwA5R+H+qEAFjABxOcARUgAenki3dR3840ANtkghcAAJe/+BfBjENccBGb6AGSaAAU1AIc1cHVnALNFAAOJADebiHI0EGFNAEneABRuAETlAEU1AFguA5dNAHSUADWVA8lQAJOqADN/ALGrEKbHN4d3AHe9AHbeAHagACOsAFneAKYfABuyAOLfdyX6AETXALPQAAC7AErCiInTMICfMBXKADjuAbuqgFELALB9ELqnAFhHB4gwA6nfcGfEAFY+AKm7AFSKAESoAETNAFZIAJozAKpfBIwEMGTnCNXBAABqAAE6AEw8EBREgIyTiOi4BflaA3BwAJGWEFb7AHg0AIOaMGoYMHdvAGFeAAQ2AEELkE3MiNEbkAlyCF97AKTnAAYP+ACTRgADypAEMAkxQwBUmAA424CKIgCpbQADTwABMgBgexClvwAVRABWqAB1KggG7UBgxAAAfgkBA5HEtgBBkQAo3wBdzWarLABJTAA5vQBQdgAA4QAQUwAWGJA7MwjlnQADwQCVF3Ag3gAUcwATRgEOkQCp0wBgdwAEkwBXQgkoJAB1WwAAYQAeujAAtAARzgAWAAC94QC/aCL+kACyHwAymACXU4AAfQAwVAAAoQAGBQDZigAzjQAGPQCZ4wC7VAAwtwBEZQBgYxB2bgCrPQABEwAxFQem0wNFOgAAdAnDIgA3VYAqPADeVADqFwCciyLOZgDCCAAGDQCThwADH/cABAwJMEAABcQA2YgAMRQAOdcAu3UAu3IAsewI+aYBCGcAi14Ao1EAF+WQINmQRJEAIHEAAI8F4ngAl6mQm8UAzJcAmZAA7lgALlAA7aoAokkJO8dAIIsACJaQABwAWugAnr0wWeUAsoKp9j8AAK8AUG0TqX8AOq4AqJmQAGQABu5QPBQgKnwAgF0AUQMAOqQA/xEA6XoAm9IAwiIAzCUAylgABi0AgPoAEXUAROoAAGcAAE0AOJAAYREAFg4ArxmaKzAAFbsAkGoQ6a0AM/YIUz0ANgUAMIQACN0AgLUACT2QFOEAIt0AA6QA49QQbEcBIIYhLxMAw+oAo6MAEa/zABQnCTB/CjcUqZYyCfKYqiXIAIaHAQxJAJoaAKl3AJL3ACs9ADXHALnPAAZ9AEThAFE1AAEuAEchALuCEG0pAVFfINiQALXuCQHFAEUZCYBBABmKCgNIAJtwmftYCbaWAGTrkR5WCnCiA/YEANm9ABc/AESRAGOJAFNmAUZfAN8/AFt4oZe6Ue5NADC3ABRgAFWDoACgABmBABOuAJXGAAJVCpy4oJvtkRNnABTrCuHnALmxACGBSuM0oGIkACsXAO41quWoEV8bALfIMJieAAT9AET9AIB6ADrhAKpxADJTALJIsJNGEDRIAEExAFTfAFLkQGw+AOPSELmpAF3ezgE7eBq5cxD+uwDfBQDmJgFFaACQVQA65QCafAAzVworVABmUBHBjxD/FQDNbVDPBwDrKgBd2xs/FgDlSbCBrLBGBQAA3QCZ1QRp4gnGPAHARRD+ZAEaRQDN5AXVgRsT4BdObQDJS3CJ9QDMwgCwShA40QAz3gQjbAtgYxD+aADCb2CQxhDuYQD/JwIAnStebADcVAeZIwCXF7HBlhADCAuBtBGpjrZP0VUaZgCiKQuv01CY7zCaUAavFQDxshAaEruhxBpOXADMXgC6ZAIzsQUWLCEM0QubSLu8hLEEQKueawDczrWvKQvAMREAA7',
'militar235gs':	imP + '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',
'militar35':	imP + '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',
'militar35gs':	imP + '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',
'misc35':	imP + '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',
'misc35gs':	imP + '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',
'reload':	imP + 'R0lGODlhEAAQAPcAAAAAAB82YSlGfTBTlDZgpjhqsjhwuDh3vTh+wjiHxjiOyjeXzjSo1TK12pqmv7CytLKztpKrzp2rx5G726Cyz6u40r/AwqLH4aPL46zM4qHS58rKzMrKzcvMzszMzsLH0MbM2N3e38ze683n7uDh4eDh4uLi4uHi4+Pj5OXl5ubm5+bn6Ozs7e/v7+/v8PDw8PDw8fLy8vLyiVAP8JFDhjBouBCBPKaNBgxImECVVoYBBjBcSEIhZgSHERoYkLCjKEGIgCBoqBJFy4SJBggsoSJV4kePHwXwsEOHMiUJnTRYl/HFQcGDpUhVCiB1QI7LDCgFOjTqM+FehhRYEVHDisUBGhQAGjHAZW7TDQQgUCFMJ2FMhBwgAQD9YCVSHAgdqOED4ECKBU7lwVG/yuDQgAOw==',
'setup35':	imP + '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',
'smap':	imP + 'R0lGODlhDAAMAPcAAAB/DgAm//8AAP/YAICAgP///wwAAAAADAAMAAAIPgAJCBxIcKAAAQQKKEy4kMBBhgUgClyoMGKBAAEmWqSIUaPEih5BgmSYcMAAiSQLmEQJAMDHhi1fRixIk0BAADs=',
'speedl':	imP + 'R0lGODlhGgAQAPcAAAAAAAICAgQEBAYGBgkJCQ0NDRAQEBISEhYWFhkZGR0dHR8fHyIiIiQkJCYmJigoKCsrKy4uLjMzMzU1NTc3Nzg4OD4+PkFBQUdHR0tLS01NTU9PT1JSUldXV1lZWV5eXmJiYmVlZWdnZ2hoaHFxcXNzc3R0dHd3d3l5eYGBgYKCgoSEhIaGhomJiYqKioyMjI2NjY+Pj5CQkJGRkZWVlZqampubm5ycnKGhoaampqioqKurq6+vr7Ozs7S0tLW1tbi4uLm5ub6+vr+/v8PDw8fHx8nJycrKyszMzM7Ozs/Pz9HR0dLS0tfX193d3d7e3uDg4OHh4eLi4uPj4+Tk5Ofn5+jo6Onp6erq6uzs7O/v7/Dw8PLy8vPz8/T09PX19fb29vj4+Pn5+fv7+/z8/P39/f7+/v///waABAAAAj/AP8JHEiwoMAzOBpgqGKwoUAiQrAM1FIAAIATDgs+iTFAgAIQN5hYgWARRsaBQDQIsFCCQgABBkQQ6ZCiy8l/QxoAcHHlH5gWBCwGMXOzzAsABnwIDMOiQAEYCSSIGUhGBoqCZDxgYCJwSQYAF4r8swGAh0AnIQBEMAjGi8AcCQqoCCPwCwMGWo4sAOCBYcMpJCxuQAJmoA4AFgocoEHGYZEGAig4eGlhRpR/XiIAeKDE4ZYZTmlwufJjREUFVv4lWTHFoRQNASIYIVjjgAAWUzOO4aEAgAkqA6eI2NzjJhcTAg7sIAhF5wcpN7NUAMCBK8ElE2AQvdkEQQq6BrncAxwYEAA7',
'speedr':	imP + 'R0lGODlhGgAQAPcAAAAAAAICAgQEBAYGBgkJCQ0NDRAQEBISEhYWFhkZGR0dHR8fHyIiIiQkJCYmJigoKCsrKy4uLjMzMzU1NTc3Nzg4OD4+PkFBQUdHR0tLS01NTU9PT1JSUldXV1lZWV5eXmJiYmVlZWdnZ2hoaHFxcXNzc3R0dHd3d3l5eYGBgYKCgoSEhIaGhomJiYqKioyMjI2NjY+Pj5CQkJGRkZWVlZqampubm5ycnKGhoaampqioqKurq6+vr7Ozs7S0tLW1tbi4uLm5ub6+vr+/v8PDw8fHx8nJycrKyszMzM7Ozs/Pz9HR0dLS0tfX193d3d7e3uDg4OHh4eLi4uPj4+Tk5Ofn5+jo6Onp6erq6uzs7O/v7/Dw8PLy8vPz8/T09PX19fb29vj4+Pn5+fv7+/z8/P39/f7+/v///waABAAAAj/AP8J/FcFQwMcZwYqXMhw4AkAAApoGYhFCJGGGGFAhGCFyQ0QCgQMiPEE48IuKToQEWFAQAAKJSwI0ADE5EIzQSASaAHm3xUXABoMaYhCBpmBYiQkgFGgAIswAn0YAPCizMIIAEI4EcgDgI1/RS4AyLBEIBMMHo4qrOIBwIIjWhgw+CIwjIoCCXII9NKTIRkaBwpYAKBjIBgkGyCSmGLzn5IHACJ4+RdlhswADigIaFCk8ZQVSf5ZURBxxI8rXGg0nbGlsUAxLAQcqKHQSIQAGqS4FtgDsgjGAqmYAKCAx5jdUj4EhaJwxwEBJrjsNgNjQlmFTDgAqJBl9z/pDMOkBEDQJCAAOw==',
'underline':	imP + 'R0lGODlhFwAQAIABAODg4AAAACH5BAEAAAEALAAAAAAXABAAQAIVjI+py+0Po5y02ouz3rxjAIbiSIIFADs=',
'unlockedr':	imP + 'R0lGODlhEwAQAOZ/AP7ElPV0FfuGJv7Wtv3dw/ZxDf95Ae6rE//iyP/q2vCzHP6iUvG7Yv3jz/+BEv+6fv/9+/7z6v/hxv3Prf6WPP/lzf3hzPXXg/aDL//AiPt6Dv+4ef+DFauMWvaEMKeGUvZ+J////v+TM/+0ceycFvDHSvfis/GvEf2rZf/38PiMOffeoP28iO2pOv7k0frryPvsz/GwLPnnt/C4HPSsHu/DcP/06vihYviUSf99CPnkrv368fqAIPz04P/txO2fBP+kVOmOB/h1EvfVjLmRVPicWeydLf7Rq/7u4+6oBP+ybf+pXvdtBPvZh/yjWfp9F/qJMP/7+P/QpeuDBeqECPHLPumND6WBPPvsyf/uyKqJVPPCWPXIVO+uR/GzFs2GHZh7S/rv0vvu1P/o1P3fyf/auvC+KPPFeuumDf+AD++qCte4fPXboflzCfbdpva/Zf/17f6YQP15Cvt1Bvvip/bShf/79/+gTPHMWvuxd//x5PCwTvrtwfbJTOuXBf///yH5BAEAAH8ALAAAAAATABAAAAfRgH8QBCgUC1I2f4qLjIITPHMaGjkbeiGNjAMFTywuFnlyG3CYizhtR4wABmWXpAUUEIwJAhlRpH9McY1IUCN2tyoLjQQ8dxVjCBLKFQkpEwSMEUUxDkAiHA5pHCJKA5hkIFV8WC8+WTBiPTsAmBYYZngXF2sdbG4mYRmYDR4zJVxbwHyoUWeFjAf7PHg5oEBBhw8MGJzRgbARvxMKaNDQQmTPmyF0KjJqgEENmgMHvlwx0qJLkyXtQCT54SfIFCpWSMTokwNThBsFAggdKlSIk0AAOw==',
'ww':	imP + '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',
'bClose':	imPNG + 'iVBORw0KGgoAAAANSUhEUgAAABkAAAATCAYAAABlcqYFAAAABGdBTUEAALGPC/xhBQAAABh0RVh0U29mdHdhcmUAUGFpbnQuTkVUIHYzLjM2qefiJQAABMZJREFUSEu1lXtQlFUYxg+jIIXoBMw04vpH2i6sOoIkDgTeYBAFC2uhsBKScNcJqqGRSwiKEitXEa8tStSMOYOQkaloIFPCtGDo4AUQBANUZIGNm6i7sDy956yidvurvtlnzvu9531+z5z9vtm12BXoBVuryczG0oqNjBrFOtVqErOxsmTTabW1tmTiAn1gIQpYgJnGLdj4OJjRNMYM4+PswZiJ3Tea2LBxlN0zjhFjsljvEZPFrvTG6OgoxsbGJlZe/1cK91sBlrTKG0MXtejS5EB/rBD9pCHSSMmXeFBSCMO3hTCSRo//SY/6Bpq5T7pH80PFZr++qFDw+s+dQrjPUrDtq5dMhPTQRl9+NgZIw4ezcZ/0sCDnH2UoyBl5SDMjpCES93E/5zwOCVvuBZYW8OQkui+y0KfJQr8mE8P5mdBsjkXw26oJaWJjYSzIQn5s3LN9mhuiee7rI4buYNZEyPqlHmBqChmsqcKt3FTc3Z2KnrxU6PfswODeHVC8pYTJZMI4PWEuHqiJifnb/gB5uI/7u4hzO/dz6E8fx3uei8AyVnuhv/oc2tPicUsdjy5Sz854/J4ejwPR0QLMXwIexld+z18Ufs8VErpJzPXRvI58Xeo4dBKrXZ2A3tKjeNfdFSzd3wN9FafQHKdEW7wKHQlK3PlMCV2iEoPJKhxQKQXYYDDAaDROrLzmAfuVGzGQpEQ3zd8mXzv5OaclToW73xxGqIucvi5fd9w9WYL6SAXqw9eg4f1ANJNuRgSiN0qBvqhg7AsPE0Hd3d3Q6XRCPGAv9Xs/5DMKtG0w+66FB6I+bA0uE689PxfBzrPBUjzlaNifjWNSO5QtdEQF6bzbDNS+MgPXFkxDIylz5QrxHJ4O4aEZ1G+gfS4tzXMf9592dUSx9AVoYyLhN20KhXg442peOo5IrPHd7Odxcs5zKH/ZGuel1rgsnYRMX28R0N7eic7OJ+ro6KTTKZHh4y3mfqL5H+dYC/9x4hydNQXV0WHwtZn06CQHslAkm4bv59qibJ4tKufboHqBDTJWLRMBLS2taG01KyRUiRs3zDVfRRDNVdH8OfJxfylxiomn/TQCftOtwLZ5yXH90C6ULnRA2WIHVHja47yXPWqW2omAhsYmNDWZxQMyg3wEuPFRv5H6/F67xE74KjzsBeeEmwPqElXwd7Cmn5VX5Wg9sgdnfGahcpUE1YES1AZJcOnNmcgKXSkAj8Xvm99xRPa6v/YvvjETta9JUBUgQaW/BOX+L6F+ZwxenzkVbIv3XHSUHESVwhk165xQF+aEyx/I0LBJhuaPZGiLkf6rWj+R4nqUDFdVMtRHyFC33gla4mg3LMbFfdsQNv9FOsmyebhzQoNfI91Qt9ENlzYtRFOCC1qSXNCR7YLf0l1wM80FrSnmHt9riHXF1RjXZ+orH7uiPnoRrmz2FRzO4yGcz75WeGPk9FfoLdqKntIU9P6QAv2pbeg/m4z+ymQMVpFqkzB8KRFDF5Iw+EsyBn6mvXLqP1Xrz2yF/qxa+AWHeJzL+Wx3gDuKQ5fg0Fp3JCyXYouPFNtXO0GtkCMjRI70YLmo1WvlSAtyRuoaZ7G/1V/2TJ3kJ0Wir1mcw3mcy/nmf73/4bqQlzr1MfYPNcKdTI8iX3wAAAAASUVORK5CYII=',
'bMax':	imPNG + 'iVBORw0KGgoAAAANSUhEUgAAABkAAAATCAYAAABlcqYFAAAABGdBTUEAALGPC/xhBQAAABh0RVh0U29mdHdhcmUAUGFpbnQuTkVUIHYzLjM2qefiJQAABERJREFUSEu1lQ9MlGUcxx/UmBqRWy1iBi0NFeE4IBMGAVZjbbX+LAqbzdpoglYIlvw5SSwk/v8RiBk5To4/h5z8BwEPkAMhhAPiBO84OP6GcQdSyUToDvj2PK+DDWeDrflu3/f3Pu/v+X2+v+d533evkWdqOYxNnibGJqbE+EkTsnHzFkKIETHauIls2LCJ0BMdr3FgiWBxgSwtUf0zTwz3Z8nS4iLR35uhukvIm16HYTAYsLCw8FjE+MT9g0/ROjyFnPZRiOVjEHfexuWOCRQptChR6FDSM4WKW3dwRck0jSrVNCpUf3KRid2rpPnynjsoU0yimNax+oLOcTRqJsH45LX3Dj1WE8YnLu8e/E+TU/GZ+Oig37oURucur6SwU7uyEsYnTm97o7lfhwtNg8i8PgRR6wiy239Hrnycg+v1eu6ZrSU2N79rAnm0LofWi1qHca1vAoxPHD0/RINqAmkNfUiXqXFeNsCZCVuGOZP1vhRsbvaNUVxsGUFm8xAymgZQc/MPMD6xff19VN+8jZgrPYir6kVCjRJJUjVSr6lXmXz8ydFHbttyE8wkXTZI6/qRXKtG0lUliumLxPjkZbd3IGkbwrfiNgTltyOkoBOniroRXtLNQbVaLXQ6HXcdK1UhlgJipP2Io408nI+ovIXwUgXCirshkHRARFfD+GSLtQeC8pphfjQLL/iLYBmYC6ugAtgILsPLe7WJW4wUbnF1cI+vh1tsHbweasLxTDlsBYXYHSzBDso5klEPxidP7HbH11mN2Pp5Bp7yuYBtfkKYHc+BxclLnMno6BjGxsZo174cdJW8fVflrUKLaJNimPvn4llfIQ6lXQXjE+M9HgjIboapTyaeOXIRZl+KsD2kAJaR5RxwYEADjUbDxUeJ5ZhYE1YRZdgZXASLADG2HxPhcHotGJ9stj6A4PxfYeaXhedpwjIwHy9GVGBHcjVnolSqoFKtLWayN7Yae06X0e0uxEvHxfD5RQbGJ6b8txBOTaxOSLDzxCVYCYqxK1EK658b8EZoEtfheuQZlAB+WgN40TWwDa+A9ckiHBPSHaJ8Yu7ijcTCFuyjCZ6gFHY/VMHhfBMc8uRwKO2CvbQXdg0q2FxXY29bH6zlDyIb28v68EpdL/ZVKuAk6YKT8AacU2XYH1XL8QJzWsH4xN3nO87ENboWbilNcD0ng3OOHE7lCjjXq+HUPIhXO0Zg3zMGvnIcfBUVjWy8v3MELvTLdmnUwKNKCQ+JAgeE8gccyguW/AbG50yiuqeRPjSFc+N/I3RyBgm6GQT/NQvXe/dhNTcHC4Mezy3osW3RgK1LBhhTscjGZjRnOT+PXbNzcLs7y9UzDuMx7oqJo38ylsXzOwu7gCjwg+PBFySCfzoZ9t+ngBeRBl7kT+D9SBVJr8+mgU/vszw/LAn2IXTuN9HgfxUJ2y/OwOaz0BWRlC6tyVo/vv+b/xcAf9f/4T3A6wAAAABJRU5ErkJggg==',
'bMin':	imPNG + 'iVBORw0KGgoAAAANSUhEUgAAABkAAAATCAYAAABlcqYFAAAABGdBTUEAALGPC/xhBQAAABh0RVh0U29mdHdhcmUAUGFpbnQuTkVUIHYzLjM2qefiJQAABHtJREFUSEu1lXlQlGUcxx+PGM0jO8WybMILddnFpnTAtDSnpqZj0tGZnI6xEq0YrzxQIWkByxQQMQSVAIHFRUUOFS8OWUDQRZCFZV1CXOISnClvOfbT82zWTH/pH/nOfPd53t/z+32+7/udnXn7zI7Kwm3wY8Jt8FDhNmiw6DdgoOjTt7/o26+/kD/igS5nr3A6ewS9PcJ5947ounlDdN24Jq63NAq3IcOEmDXnE7q7u+np6XkoUnwx/cMFlF7qYG/5ZVLPOkg1N2OsaMVY1cbBqg4OVXeQWd1JtkWq9io5NZ3kqPWesuV9luUqmRc6XP3pF9rYd74VQ0ULRfUdKL6Y9v7H/5vJgcor/zE5bb+C4guf9+Y/NBP1JoovprwzD9PFdnad/o09RQ0kljaSVOYg5VyLjK4FY2WbjO4KRhmHUUaXLqMzSqXL+FQtXdWr2jFUtpMiY04pb2bvGYeLc6quHcUXk2d/RL61le35dewosBFTYCdOmu0ubiShtImk8haSpWGKuZXUirZ7anetKWalVtd5Ylkz8aUO15ya31lYT66lDcUXk974gKMXmvnxcDWbj1jYkltL+HErkXl2ovLr2VHYQEzRJWKLL0s5iFMqaSK2xOG6jzU18os8j5Z9qn/bKRsRJ+rYeqyWjIomFF+Mfu1djGUNrEwtY5WhnDX7zKzbX8H6jCqCsqoJzrEQcqSGsFwrYcfq2HTMxqbjNsKk1Loptw790VqCD9cQlG0hMKNSzp9nrdFMosmO4ouBnjNYlWJixOIERvon8sKyZDy+S2Ps2nTe9Atlzny/B9LsJaFoAjMZJ+c8VqYxankyX+4qQPHFI+Om821CIY9+FsuQhbsY5hfP098k4b7MwJx5i+jt7cXpdN5Xc+XDPB9wkBHLUnlGzj++OJ4F0SdRfOE2fgZLk0wMXbiHJ7/6leFfJ8rGNJ5bf9BlYrfXU19/f82dv4iRodmMDJRGK9Jwl0afxuSh+GKA5+usNpQw3C8B9yUqLgOj1h7gxZAcl0ltrRWr9f5SJi9FnMQjNIdRAQdkXAa+2JmP4ouh2rcIkiZjlhvxWJ7GGPnK46XBBDkwc+XPqOEH0cw14XjuKWJi5Ek89YcZuy6DJfHFKL4Y4TOPrfuL8QnOQRNwCK/gI3hvPYV3XAneqefQZZ1He7waTb6VicU2JpTa8DwrVWZjYpHNVdedsOCdWYl3mpmXd5vQReSh0x9l6d4yFF9MX7jhb5OIQt6OKMA3Uir2DD7JZnzl33dK3kVeNTXwirkRncWBrqYJL+vv6Gqb0FU7XHV1PjXfztScaqbJB/ONk/OSt3pfJYrvMomt6SDmUidRzX+QXNdGvNzHyv22zpvo/7yN763bjO7qwr2ni6d6uxnk7MZNapDcPyFrz969w2jZ43vtFj90XndxFE9xXSaen2/gH032j0Djp0frH4Z2xWa8A8LRbYhEG7QN3cYoNPrtaEKkQqOZFBKNlz4K7feReAWG4xWwBe2qn9D4hzLJb+O/TMV2ffiW5lrlZ/DhXX8BmUnqCVosKVcAAAAASUVORK5CYII=',
'bOK':	imPNG + 'iVBORw0KGgoAAAANSUhEUgAAAC8AAAAWCAYAAABQUsXJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAABh0RVh0U29mdHdhcmUAUGFpbnQuTkVUIHYzLjM2qefiJQAAAgVJREFUWEfdl0urQVEUx93Bnd4PcL/lnXlMFMmAiZGUx4SBlDLwKJFHXhERoSiSkMhAKWld/1Vnd06329U+k3PuqT/rbNZev7VaZ7WPxfKfrq+BhYyqX+usAJOBLxXjm0gEi4/HwzQCrwb+fr+TWSTgYdxuN9OJE8DH9XrVrcvlQtvtls7ns+69XuER8Agsq8PhQLFYjGw2G1mtVlY4HKbNZsN7DodDXut0Ony/2+3I5/ORw+GgwWAgHVfAn04nkpUCns/naTabUbPZJJfLRX6/n47HIwMCvtVq0X6/p0AgwIkiGdmY8BPwqJ6MVqsVgyUSCY1/vV4XwL1ej22sBYNBYcvEU/sIePSqjLrdLsOUy2WN/3w+5/VMJsMVhu3xePjb6XTScrmUiqdmFPDr9Zpk1G63GahYLGr8J5MJr6fTaW4j5VmIx+Nso9Vk4ql9BPxisSAZjcdj7t9oNKrxLxQKDFkqlahWq7GdSqX4P6FQiO8rlYpUTIVTwE+nU5JVJBJhmGQyyVXO5XLcGl6vl5AcWgq/IyHEQKth0rjdbhqNRtJxBTw2kRWmCRKw2+2iPTBRMF2wJ1oK8NlsVsRQt49sXAHf7/dJr1BRTBQ8oHr3esVfwCOg2cTwzxPwO4xGo2Ea/ThVVqtVMos08M/qfygHfUwHo0ph/PONyoivgs8if/6bV+5vVrsE+rT9pU4AAAAASUVORK5CYII=',
'bSave':	imPNG + 'iVBORw0KGgoAAAANSUhEUgAAAC4AAAAUCAMAAADFhv/OAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAwBQTFRFAAAAIDBAMDBgMDhwMEBAQDhwUFBQUFhwUGBwEDigMDigIECgIEiwMECgMEiwMFCwQDiAQECAQEiQUEiQQECgQEiwUFCgUFCwUFiwYFiwYGiAaWqOYHiAcHiQQFDAUFjAUGDAYGDAYGjAYGDQYGjQcGjQcHDQcHjQcHjgcdAAcICQgHjQgHjggIDggIjwkIjgkIjwkJDgkJDwkJD/oJjgoJj/sLjAoKDwoKD/oKjwsKjwsKj/sLDwsLD/sLjwsLj/wLj/ysrKzMzMz8/PwMDQwMjQ0tLS2NjY2tra3NzcwMjgwMD/wNDg0Njw0ODw4ODg4uLi5OTk5ebk5ubm5+fn6Ojo6enp6+vr7Ozs7e3t7u/t7+/v4ODw4Ojw8PDw8fHx8/Pz9PT09fX19vb29/f38Pj/+Pj4+fn5+vr6/Pz8/f39/vfr7zJgAAAQB0Uk5T////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////AFP3ByUAAAAYdEVYdFNvZnR3YXJlAFBhaW50Lk5FVCB2My4zNqnn4iUAAAFpSURBVDhPlZNrUwFRGIBVJGldFosuNsVqY4mEaimUS5uE3JLWPbb+/1e9i+qcaZrR8+3M88x75sycVzEF2KWQS4UcfywFy8r5kjFMlNjfeSLB8xfRcDAY4LweBrt2ADn7jsMLp4tmSNvtqJP6TRZyCYMXTub58NWxasNU7wlyaYJxLnCLuq33UZjqliCfTMYoUeFoPrtd0DEUpsRHyMdvI5SwIL9Pru+1LgpTrSLkb6MBSlBwLeo7jdOEqVk+6vdQAtdXh/u0Q6/Tapw0iamGnA+6HRQuHo+F/JyPcTtpK4mpeh7yXkdE8V7GQmpgY5u2WoyYquUg74otFA/MViuUhYddi8VsxFQ1C7n43EBhzvycWrn30j4mzIQBNfVSBvJmvYbiDnFbK5HIze06QWyqUFPKQj5lq5Vy5YedAxtFUSaSNBoMqrXKtysXc+nZjyzm/wI12UwqJeewHpl0CgE/fYlkcr4e/1q+T12HLuCJR4bvAAAAAElFTkSuQmCC',
'cp':	imPNG + 'iVBORw0KGgoAAAANSUhEUgAAABIAAAAMCAYAAABvEu28AAAAUUlEQVR42mNgIBKoqv7/z8BwB4rJADADIDQIkGzQHTQDkMVJNogU8ZFtUHb2f3CgI5IAmQZBDNgJxMXEGYLLZgi/GEtSwJv4SLAZv0Ek2IwEAD1eUhIkoQjAAAAAAElFTkSuQmCC',
'cw':	imPNG + 'iVBORw0KGgoAAAANSUhEUgAAAEsAAABkCAMAAAD5aj07AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAAAkFBA8OAxkIDBoZCBwZFhQxACYTAyofAC4lGSspFCkpGiwyETEpDT0hACgnITsoKzg1JjI3MDs0MSRQBDRdEzxTGjdCKCtsBjltCjl/CUYoAEEzBUA2GFw9H00+LFtKFUdEKENJO0hFMUhFOkdUKlJLJ1RUIFVSPVtTOkJvH0x6GUZrK0x8KlZ8OlpyOGBBD21KCHxTDXZeInFfL2lmL0NESFxLTVNSRVZUT1xlRFlnVGBeTmliR2JhXmpnV213VHRoQX1gWndwVWp0YW9xbH1tY3JxYHtxZXt+a0aAF0SUBU2SG1WNJVaLLVCmDli5E1+hMWSNQGuJTnqKUnGeTX6WTXmbXWiIc3eHYX6BeHysVnu9SnXCOn6DgoRXCYZpC4BoH4plH5NmEp57E4BvPIxwNJV8Kox/ToB9YZiFFK6DAK6NKLGbIoeEX4iDWIuEaoaBcoSIdYmbaoeWcZeRbJyRZ5SSdZKSfZaseZCydJ6xd62bWaWWf6ekd6akfbWteY/CbpjQcIOahI6UhYmTlJmNgJWShZSpg52khZqljpamlp+npKCfkaekhqWjjqyihamnmqG5haO6kK62l6u2nrCyibu2iLe0lraznruylKa2paKyu6i1s7Ozpa/ckrzEjLDImLTemL/GrLzJornJrbzFtLjHvbzbqLXGybrR3ci+i8S2mMnKi8DHls3El8jDntHDntLOmcPAqcXIo8XEvcnFs8fXucrXsMjVv8rZvdnEs9PUrdjSrNnbq9DTu9vUvuDRrujivPLqu/r1vcvYzsPY2s3T19fTxNbVzdDdwdjcw8Pb+dfnzdrnx93lzdvsw93k0t3m3M/k6Mvm+c3q9NPn9NHj/NXu8tzs8dTx/Njz/t74++Hvzunpz+Hm0uPj3eLu1Obu3Ozm0+rq3Oj22fLrxP3nxvfzzPz0xf3wzfnz3P781fj43uXt4uzt6eLu8eHu/+fw4erx4+vx6ePy+O/09/Xz4/Hz6v397fX38/X6/fn79/3//AAAAAAAAK5rAZkAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAGXRFWHRTb2Z0d2FyZQBQYWludC5ORVQgdjMuNS4xTuc4+QAAEg9JREFUWEftmXtU09eWx+8vBCtSqwGtj6sXeUgTFIU+LGBC9EIIKIpWLeID66uWtmoS0KBWsCUQHoYkkgghkKkTAdGphgZ+4Y7yCogxNA/KQ5SQMWaCCb/EmU7HG3JrF/f84oNotdO71l1r/un5wS+PlXzWd++zz9ln7/xh4p83/vDPQ038zpqYuGc03vutLn21v8bHzRMT/2Ey6Uy6iYl/bz53JjN1U+qvYl/FuufsNZp0uhGNxqRWN5+7cPz48Q+WhYcvSz1eVvYq4MtY/wlMA2p0JpNGq9VqAOr49u0b168PDw8LX78lNTXzbPNLcS9hIffu9ep0Oo1Gq1aDm1bdjKI2Jq8PX7p03vzkjes+OHZNaX0J7Res/9WYdBoA0mnUarVCrdZr9RfObd+YsjZ5/bKti8PWpqSkbPzwcuvoaOcvaC+yfjTptFqdpqdH3aNRK5oVgKZoPvMlkLUufPPWOeFrUzakbNzy9bVrra3XXoS9wPpRZ+oFDIBQqN2sZrVG0Vx2fMsH4eFL0+K3LluzJjl5zYfHMlNPfP3t+bPP015g9QLTFG21UqEQVYQCweuyM8dTly1fFYf3T+zZPGX2kuWZ7y0NX775RE5WfJwn7XnWj/d6ND2KGnFJMau4BrhKq9foFOeAqvVrluKptACSHf5TB680JmzevCVhy5bH4KkZHrDnWOO9Go2iVsw5zT/Niheq1SAgwBvHtqxLTlkbFj9t0+vLU9+Ks24OmzVr3pK5s2cvnpPBpHko82Q9Gtehok5XV9+oSk/fVosGhFZfkzo/ZcOGlDWbZq1bsmb+mtnLlqSkzF+7IWxeGPbQpYYC3+xn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',
'ew':	imPNG + 'iVBORw0KGgoAAAANSUhEUgAAAEYAAABkCAMAAAAMlLaLAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAABUKBR0TAi8TIiggACE3HzEmDTAuGT0rHz86HS0vNTY2KitGFjVNDzlCGTZaFD1cKTBkDj1xFUUnAEQ0CWM9B0xFGFJHAVhFGk5HKkdGM1dVNlBbMkl5Ek9/JUl8LlxuLVN3Mll0P2FECGpMH3RaCn9TCnFZG2RYIGNbLW1aK31xLnxwPEtPS1hIT1hVQUxgR1x1ZWhURmZkSml0TWR1W3RvTHxmXnhwRHFxWWhtYWtxcECAEEqPFkqaDFiQLlqtHVGzAGKHOGSpM2q+KmmNSW2XRXGJWX6QUXidV2iRfHyGbXWOcH+DfW+nSHOpTX+2o4xsGZlnEolsLY9/KoJwN618EbN1Cqd8J4t/XJJ+S4mBGImiMqeFDaGLEr6eG4uDSoKDXomBUZmORp2TWYSCb4OeZYaZbo6YfpOUbZmSYZ2RbZaTfoOrWIO8WpmoWJSqeJCybpq4e6efbaWTeKugTayhWrWoR72rVLyxX6+nbKezcbuvZ7CjfbG+ary0doHJTZ7KfpLVZZ7Zd6XCVqnCX6PCabfDY9i3ZNG/debSFMrBbcfCdsTYasfVetLEYt7ReoKPgpOVlIe3mZumiJimkJ69h52oq5u0pa2ag6OlgKWlkKe7j662nKq5mbq0gLSznbi1kaKooKS6oq23tJvOo6jPiq7Glazfi7PJmLvLpbvKrLXIur7Jt7nYoYvXwLbLx7zO1MrFic7IntTTgtjWl8HFrMjGpMrcq8LQs8fctM7cvN7WrtLYv9rXtePOgujciPbXjOLOqufVv+jWt+bpu/XqvPvyu8DHw8PSyczdwsPa1M/Z2NHayN7Yytba0MXb48be9dbnzNnnx97ly9npwt7l1Mvl/tju7NLr99n0/fHc3uroxeDl2+ft0+Xu2+nu1uDw0Oj32vLpwfzmwfnsy/Xr1PDs3f3wxfz3zf/6yvT81vr31vjz3ebq4+Ht7enu4+jr6Or04+v26uX39/Tz6vjz5PT28vH2+fT4+vr8+QAAAAAAAAAAAAAAAAAAAFb4MNMAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAGXRFWHRTb2Z0d2FyZQBQYWludC5ORVQgdjMuNS4xTuc4+QAAD8pJREFUWEftmG1YU2eax0dGQYwSUFAJCKLyDgKCGN4UoYqCMKIVC7MC4UUQUXBZMoIIbLcGWWgILAgDiIKOuxIZDSB0TAIpDYGN0GIIIWFC2CSESUJ2VYjS+qV7n5MEwbZz9ZqrH3tHDpJczy//+/U85/nN97+I/eYXoXz/K+an4/h3YrP05ueH/ycxr19NT08LBMgP2Ci9/cGDKw9y793+cfSPY5beoAyBgMkFY/JHue23rhy/dPT8iSi/I0d/90PUDzHv3r1+82r6m9HRHiaXDsZFUO3NV44fdziyy29/xJGwQ2FHPwR9gPnu3bu/vnkzLRjt6Lh3uwfWA4bH5FKbzx8/au+wy8/WNyriWFhY2JEPOKswS+/evFn82ysBv6Pj/t22ujoqd3x8nMfnccGjmEP2DuZ+trYREcccHMLswlZzVmJGBdNvpmdgVUdHXVtbW3X17R4eiqHfOhoScjDEfpf5rp07jxwJC7MDW8VZgflLS3s7ly/gcjvu3kesJrq6g8+TSqXj7ecPHQwNDQ+2x9rtCNmxw27HjpDgkODgFaBlzF+ac69caabSmXRqQ9v9YRqNVh/t2cDnAYefax8SGnr4YPiOYBB1MAQMua7kGDD/efz48aOXrtyiUqm11W3DI7Rh2v3ooMAOiUQ6vng++HDoQVi5A5aHhsJ6lBMcvHlZjx7zrzExhw7FxFy60tzckuEDHHApyKfau25iXCqV/ckCgQRbONgBIHizxWb4BRR7e3sDR4f5r9LQ8JDw8PCYo+ebWzIz9/sEBgb6eLdl1tGlMt6CjGu+Gb7aYuf1DAfsZotNtpsc0L8ddpmvxpSGgoWX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',
'help':	imPNG + 'iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAYAAABWdVznAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAABh0RVh0U29mdHdhcmUAUGFpbnQuTkVUIHYzLjM2qefiJQAAAhVJREFUKFM1kU9Ik3Ecxl/pIBTR3XvX2sECL7mo8GAoRgw6SP8OHSSbRFb0B8WyjGpumi3N0LRZ6bSotkBFZzp1M3NaTVD36sRaDf9Mo6nv7/19GpofeG7f53n48iQp/5kILxhGp2LGnTuSLdFlTZEkKbu2b1OWVtYLdqckd6ftSRnZulV6h2eNbZ6wanf/oqY7zushQZNPYO1Yo6QlSq07rDrc48YNw+TsoqGpY1q99zbKw06Bf1onEpP8TMgbEhS7dPIbYpS3qmrH4LRBsTUHzedrZrjQImn0CxbjEs+UwDcj0HRwBjROv5CYrD8ofDJmVmpdITLL5zHV61xzC2yfNPLadOz9GnFN4h4XnGiU5FSvcrMuiFLwaIR02xqpFZKj9ZKTzYLWb4LIimRpVVLWI8hpgKxnkuO3hlHyrJ9JtcTZWwn7ayC3TTCxIJmN6TzoT6Q7JRnPJYee6mQX+1BsziD77kZIrZYcTFTnt0s6E493hXXKBiRnXXCgTpJWsczFx4mGG/Z+85GSAMY6jcwWKPJK/BGdQFRS/x3MXXDYoZN+O8iZUo9Z8Y/NGa7bB9Ws8nFyP6xT6tcJzutMLuk4JiRXejWO2UPkWbzqS9dXw8YWjnejxsJKr5pxZ4hTr+Yo7ftD5Ze/XHb/JtsS4Nz9PrW4qmdzuC26fSHDR6/K1eoBTEXtG7pU5eWNZxLH+7HN5AT/AFV8jI8kgcGCAAAAAElFTkSuQmCC',
'igm':	imPNG + 'iVBORw0KGgoAAAANSUhEUgAAAAsAAAAICAYAAAAvOAWIAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH1QsKFws6qttDxQAAAB10RVh0Q29tbWVudABDcmVhdGVkIHdpdGggVGhlIEdJTVDvZCVuAAAAkUlEQVQY05XQTUpDQRAE4K8yz9BuPEduEH8C2Tw8haeT3CQbPZEiIeNmhLdIAvamqerqaqqDdxxwcr0mvAWv+MYHfi4I13hErXCuqmOSp9batFS11qYk26o64gzzmCXJPsl64DvskYHn1cKo995PvfdnPOBl5OjLa/PY3qEGtxm9Bh/MfwG/8Hkj4Bb3+c/rfgHKwRzhskmMfQAAAABJRU5ErkJggg==',
'info':	imPNG + 'iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAYAAABWdVznAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAABh0RVh0U29mdHdhcmUAUGFpbnQuTkVUIHYzLjM2qefiJQAAAhpJREFUKFM1kd1Lk3EUxx/pQijqD/C+29qFBt7kosILQzFKijBKqSwpp6IVlClWhgjzLV2aMTOn5dRe1AUuc2K+ZeJcMVm2R1eTfC2VMt3z+31amh84FwfO93w55xui/Oezb1E39mVJv3NHqHFuOaBIQpRd27cpSyvr6bvDQrsj94SNbs0qvSPf9K0On1ppm8HUtcobt8ZLp0bR6zXyrXPU2HxqvW1cvyGY+PpD12CfVAtfzJHTJrnVruGZFTj9gqxWQUYzXKlborhFVe2DkzqltMltuFw9RZpVcvGZ5FKTpMQRoLBL43ywT26EpHpJQsk02Q9cBqWmw0tM8QIJZsHZRklKs6DHq2EbF5x5KklskJx8Iomv+kOO2Y2Sfn+UqNI1IsokR2ol51oCeOYFrhnJaavgeAPE10HsI8mx2yMoqSUfCDeusrcc9lXDqX+CBYFnUZDZKTgRvCH6seTgQ0Fc3hBKabObiHvfCa+SHAhaZ9g1Jn9KppYlhYOC5A7Yb5ZEli2TWRl0uGnqNxzOd6I3B4ixQn6/wL8imf0NtW5J2ls4ZBFE3XGTdNdhUN67/LobpkE1tnicxPZ1cgcEw9Man+Y1LB7Jtd4AR01eUo19amPHR91GFpZXY/rs8j41umA4+Bk/OY4VjMO/uGqbJc7o5ELROzWvomczuC26h7y6lAK74XrVAAm59mB1klXRx3PHBJY21+bmIH8BLUeFBNafPYwAAAAASUVORK5CYII=',
'iv':	imPNG + 'iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAMAAABhq6zVAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAwBQTFRFADs8ADw8ADw9AD0+AD4/AEdHAEhIAElJAExMAU5OAVFRAVJSAlNTAlRUAlZWWLGzW7O2XbS4Xba99AAA+QAA/wAA/wQE/wYG/wgI/wkJ/xMT/xQU/zk5/z09/0FB/0JC/1NT+Vpa/2Ji+WhqmNPTp9vbq9zcr97etODguOLivOTkwObmyenp7/n57/n7//nwUCwAAABh0RVh0U29mdHdhcmUAUGFpbnQuTkVUIHYzLjM2qefiJQAAAHlJREFUGFctzskSgjAURNFnRIIQcAw4zwxRhPv/X2dSZa/6bLpaoM91ksyyDwhr9cKnnqyQXn1Dh0GcmBru+911pEklhqe1dnOBWOZw9LAVmIBDQAmFaHj4vj2DFtPArSpPI87IWw3/6agVltMuyEUL/4Au03mh0xZ+eFQR+TbmyMoAAAAASUVORK5CYII=',
'ov':	imPNG + 'iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAMAAABhq6zVAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAwBQTFRFAT0HBD8JCD4LFiwSGi0TIC8eJDIiMjMpOjcuPjoxPjszBEgJB08MDEIMCkwNC1MOAH4OAH4PAn4QA34RBH0SBX4SBX8TB34UB38VfXt7I4suIoovII0sIYwtIo0uI40vJIsvJI0wK482LI83KJE0L5A6fLuDfbqEf7qFfbyEg4CAm5aYgbuHg72JhL2Khr+MpKGh1OnW1unY7fXu7/Xv8PXw8ffx8vfy8/n0+Pf3+fn5/Pz8/v7+////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/pJ70gAAABh0RVh0U29mdHdhcmUAUGFpbnQuTkVUIHYzLjM2qefiJQAAAIJJREFUGFctjtcSgkAUQ6+9a3btIqKCvQIWLPn/3/LujHlJzkMyETK7rIwJT09SmERdqMwioWSRi07BXc5q7VK5BditLIHO+MNDDpiLFgovklVgKD2g+FaoAX0Jgeb+y6sAEzlaoFGp53VgJ4/Zf9l4qTCeGofWi/UBbxt/NPDXKfkDJWUQtUYbGbQAAAAASUVORK5CYII=',
'pa':	imPNG + 'iVBORw0KGgoAAAANSUhEUgAAAEsAAABkCAMAAAD5aj07AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAABYJAREMFBIRBBYQKhk3ACIMByQdAiIaDS0YACwzHjQuBDoqBjsnEzgwHyotJiEtOC1HDCNSCD9bFChhAixyBDhsBjxuGzh/CEAkBUcsAEIwAEY+E048GVY8BFA8DlU4FUEvMWU3BGM7AktCAUBFElNBBUxGL0pTOFdPKF9ENlRbJ1pTOUh9FkJiLkp7KFp0LlN+OmxLAGpKEWJRAGRTDW9cBmNUGXNJDH5OBX1HEHlWCHRWGWlPJmVXJWVbNHdnDn9mD2NkIHtrLXxqOUhMQEVPUF11QV9qemNiRmBpWG5oUXdtRXZmXXtrUnJzV2BqaW51ZXJjekaSCVSMJV+bM1CoAlKhGFOzC1+/FmGxHGWSQG+QSnWKV32FdHavSH+LiotrAYdjEoVzA4RyGphjCJR/Dp18AJt6D5p7H4JmKYNmPoxoMJN+IKx9A6N1G651HLZwAIl/WKl/X4qCF5eIApCFOZqBOaeGBq2aHLePDrOUFayLKqOPMLqcO7qhAJaCSJGMT4KDZYqdbIGTcpGFe5mRZpOSc4eiXoKqYZGqdLSbW7enQ7yjVqulYLCofpXNbcWQBMCbAcWtFM6qFNSkEdq4Cs2rMcWyOOOxBcquSNe+WeDFTImWgZGThIKApZmlhZimkJ67hqWOl6WhhKSkk6q0h6q3lreylaqusai2oaq4o6CysbS0o6Cy0LfVjrjSnq/Mo7HNpb7Io7jIqLXGubnHsK/G2qjawLHJxrzFxcfIi87Hm8fQn8fBoMbEsMXHvs7Yss3butHKodnVrd3Wtdrtufb0lOnpu/bqtvTqvP3xvPz9vcTXyc3ZwcXb2c/X2dXYztjVwMHd6sXa+dfnzdnmxtzkzN3vx93k08vl+c/s99Ts59Dq79Dj/dXp9dLt/9b0/9z3++Duzuroxevsz+Ts2Ovl0eH02u321vHpwf3zxPvyzPr4wPn5yvzx1fny3fv41ebq5ubv+ur16eH39eDy++f+/f7n4/D34PL18fH2+ff68Pb7/v3//AAAANncWdcAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAGXRFWHRTb2Z0d2FyZQBQYWludC5ORVQgdjMuNS4xTuc4+QAAEeBJREFUWEftmXtUk2e2hweZgsrFSkFAIGiLIN7lkmABISJt4ShIEUERJAGTYCUoRU1CQEUUoVJKJGhEnIQRgxlsdRKjeLyRAzaGEqyYEAiRXIAGCNGoQDkzZ5z9UWsJ2rXadea/mS+LtbisPPnt/e533/jDy3/d84d/Herlvznrh4GBAb0Mnk65QPBb3Pqr/gJSv66zXy5qarp8q7Z0++rV22sFUoGUL+3se/J28q+x+vWyAZlMLpM3XblcW3J89eqVK1dvL63lcvkt4j6xZOhttF9hyfrlcpkOWE2XS0p27EhYudLZeeXK5JLjR7gtQxKDwTD0FtxbWbJ+oMjkcoCJvinZkZAYv9l5tbPz5sT4hO2l/D6jeAihiadrextrAGHJ5SLFPXB8bUJi0rZEp9Ufr3COT9yWmHD8VovBKDYMGYZu3Z4GewurEwhAEgmu3FN06RXJCUDYnJK6eGX8tqQt25L/u6WpWSw2iZv4R7jmsDdYXV1SKcBEAoFQINJ3/V12Gdzu/M6FTUWrl7skxi/ffuFCSuktsaGfzxZI5WawaazvHwqFPK5IBO6SKfR62VNh14vrc9LORfvMiROlvOPg/F55lIPT3KVGcTFXKuqXd06FmbG6pG1XeXXnajhSuU6nk+ufDVxetWq1Q+KKmUeL7WKMd5Y8LOeC3+a5zCtaNVcAHygSsKfAprK6vm+7VFfX0JAWzZHBGeo79Xp+skt8UpJD6uyURR9vD9tgWLXKwcEp3snBIcHF+TI4lR37X7/AprC6pMKrDRcbblxMS02VynQ6vU6hT3FK2ro1ySnFIcFxs8tyh+TNiS7x8dscXbZsTUos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',
'pop':	imPNG + 'iVBORw0KGgoAAAANSUhEUgAAAAYAAAAOCAYAAAAMn20lAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAABh0RVh0U29mdHdhcmUAUGFpbnQuTkVUIHYzLjM2qefiJQAAAOFJREFUKFNNUEELAWEQnc2WC32/wJbyAxxwdXGS8gfsyUH8Bcqd3OVAFDflorg6bHKU4m+QtNoY84avbE07vTfvvZmP6PeVyhVOJJOczRdYocP74c6CnYKD4YSbnbb2tI/umfF2wynP4zB6KoGegvDmYBJT7UGf07ksV31fCRe+IGyJqkij+bIIAHJJ5a6UKA3ZMIBaLdIcgg2mVXH5ElhdFQBhZ61UEYTXzP9xGKjVG0zn98vBmnZd/EVhKIiuDnJAri9n8+sNrU5HFxkyFZdeCbE21FtMjT1MborJ8+ER+QOubZgWE4PrQAAAAABJRU5ErkJggg==',
'pph':	imPNG + 'iVBORw0KGgoAAAANSUhEUgAAABwAAAAUCAYAAACeXl35AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwgAADsIBFShKgAAAABh0RVh0U29mdHdhcmUAUGFpbnQuTkVUIHYzLjM2qefiJQAAA8FJREFUSEudlUtsG2UQx01PPXLkyJEjR46coPQCQjjlgoJIUtITLRWkQoIEVCflWYFUAVEfJKpUoZICgUBUlAqJIkobmkdBVuq68Wu9tnfX6/V6n971n5kPOfL60USMtLI8+3l+8/jP54diu9ihkZkn+UhrX0x8DrJ9rdiv/G5/4N6Ym3vX3S1u5P2zw5MPT7x3/uL85RX7Xqao84NdrH1u4cffnbcSXy3Fhz94ZE/QF0amDywsXq8EQeh3Mnzfh240IFd05IsaspKKgqyhrNbQsBy0WmEkpZ9WVtVXjp0eeyD0ROLCubxEETssDANUdR3ZfAkFqYJyWYWqaNAUFUpFRVGuIEPvJPq0bTsCVfV67eQnl77vCx07/ulL5Ype7fxFMwgooILtrARN0+HZFkLXRmA16DHFZ+jY5Lchl1SktyXqghmBWrbbODJxZioC5X7/cPWm3Hmy1QIUzaDsZXiOg3q9TnAZDaOGgMBNhhLMNk2Uya8pClRKKp2lM9TiTvtjNak9fzjx2A506sOLy0EQRGbmek1kCxXU9BpavicC5wsScvkCfAK2PBeuZWErlcbt9Q1oqgoaJM1XodmqCDnjDnv/zOU1ARwentzPyuoWoWE6YjauWUeTAFyN2yDRyGWRhGs7oqJCsQSTkmmLpkotvU9V+n4zEnL52qrL6o/xnvWTvW5YAugxkNonoK6DkKrNFSvYTKZQNxs9y1IzLaQzNIYuIDPETsdHZ1426qSALmvYHrZzJZqZge8WvgE1A/dTdxE2faFGnapkXzabjfyypFSRKZRBaxXxu57vDo1OHyXg9DgpyeoGBmEIqVTFa0ePIXnnjgi+nb6HkJTLs2LrBtqOR6Ipgtahp3JSfDM+kjgR40Xv3r32advxhXBk2r3/gmcigdi3uLiI8fFxPHPwIJaWVyhJDZxst8llvTZ0OPFcjFfi2m/rPRXuQF1f3CgcfH3zb9iOC78ZUMsC4XvjzQlKSMPsuTk89fSBnla24zBj57r7+IsryZ6UOhycMQe/dXtTyD5HN05OUoTvxs01VOh629pKie+DbHb+Z2VnD+OjJx//ayNFizTY+gmk08fiGQTkkfHoIrfN65NnP6J29ai1ncL/BfKfwDun5q/03Kd8AZye/XbD8/zIJcCg7qe9CrtVyLC5r39JioXvZww9/vaXnyXv5vUHtXcv77iNXNlAWGcCQ6Onnvj8wpJ0/c9/TJbzXgB8RqvWjVtrW8b5S1eNnpn1LbHLeejVmUd5d+JjM1N7eYbGEi9G/hX6QP4F7nAoMfND3esAAAAASUVORK5CYII=',
'pphall':	imPNG + 'iVBORw0KGgoAAAANSUhEUgAAABwAAAAUCAYAAACeXl35AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwgAADsIBFShKgAAAABh0RVh0U29mdHdhcmUAUGFpbnQuTkVUIHYzLjM2qefiJQAAA8FJREFUSEudlUtsG2UQx01PPXLkyJEjR46coPQCQjjlgoJIUtITLRWkQoIEVCflWYFUAVEfJKpUoZICgUBUlAqJIkobmkdBVuq68Wu9tnfX6/V6n971n5kPOfL60USMtLI8+3l+8/jP54diu9ihkZkn+UhrX0x8DrJ9rdiv/G5/4N6Ym3vX3S1u5P2zw5MPT7x3/uL85RX7Xqao84NdrH1u4cffnbcSXy3Fhz94ZE/QF0amDywsXq8EQeh3Mnzfh240IFd05IsaspKKgqyhrNbQsBy0WmEkpZ9WVtVXjp0eeyD0ROLCubxEETssDANUdR3ZfAkFqYJyWYWqaNAUFUpFRVGuIEPvJPq0bTsCVfV67eQnl77vCx07/ulL5Ype7fxFMwgooILtrARN0+HZFkLXRmA16DHFZ+jY5Lchl1SktyXqghmBWrbbODJxZioC5X7/cPWm3Hmy1QIUzaDsZXiOg3q9TnAZDaOGgMBNhhLMNk2Uya8pClRKKp2lM9TiTvtjNak9fzjx2A506sOLy0EQRGbmek1kCxXU9BpavicC5wsScvkCfAK2PBeuZWErlcbt9Q1oqgoaJM1XodmqCDnjDnv/zOU1ARwentzPyuoWoWE6YjauWUeTAFyN2yDRyGWRhGs7oqJCsQSTkmmLpkotvU9V+n4zEnL52qrL6o/xnvWTvW5YAugxkNonoK6DkKrNFSvYTKZQNxs9y1IzLaQzNIYuIDPETsdHZ1426qSALmvYHrZzJZqZge8WvgE1A/dTdxE2faFGnapkXzabjfyypFSRKZRBaxXxu57vDo1OHyXg9DgpyeoGBmEIqVTFa0ePIXnnjgi+nb6HkJTLs2LrBtqOR6Ipgtahp3JSfDM+kjgR40Xv3r32advxhXBk2r3/gmcigdi3uLiI8fFxPHPwIJaWVyhJDZxst8llvTZ0OPFcjFfi2m/rPRXuQF1f3CgcfH3zb9iOC78ZUMsC4XvjzQlKSMPsuTk89fSBnla24zBj57r7+IsryZ6UOhycMQe/dXtTyD5HN05OUoTvxs01VOh629pKie+DbHb+Z2VnD+OjJx//ayNFizTY+gmk08fiGQTkkfHoIrfN65NnP6J29ai1ncL/BfKfwDun5q/03Kd8AZye/XbD8/zIJcCg7qe9CrtVyLC5r39JioXvZww9/vaXnyXv5vUHtXcv77iNXNlAWGcCQ6Onnvj8wpJ0/c9/TJbzXgB8RqvWjVtrW8b5S1eNnpn1LbHLeejVmUd5d+JjM1N7eYbGEi9G/hX6QP4F7nAoMfND3esAAAAASUVORK5CYII=',
'rap':	imPNG + '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',
'search':	imPNG + 'iVBORw0KGgoAAAANSUhEUgAAAA0AAAAQCAYAAADNo/U5AAAABGdBTUEAALGPC/xhBQAAABh0RVh0U29mdHdhcmUAUGFpbnQuTkVUIHYzLjM2qefiJQAAASxJREFUOE9jYBiaoHlTw//Qxf7/zWcaAenA/zuO7fy/89gOHpy+yViV9t94mh4GBolj1di0vuG/0WTd//mrcsGmg0wG0QVAvuFkHbgYio2B8wL+G03U/b/9yDawBhjYeWTHfwOgOEgew4mmfYb/9ft0MCWAKg36dP+D5DE0+c/0+6/bCXTGEYjTYGDbwW1gcf+Z/piaQO7Xbtf+n704B64RpCFrQdZ/rRYt7H7ymOj937bH/r9Wkw4GTp2X/n/HwR0WKM7z6vP5r1Wv89+63fZ/+eLK/34TA/7r1huA6foVjf93HdmNrsH3v2aNzn+bFgeQJNaAQLWhx/e/do3hf7t2l/97ju0lrMG/L/S/TpXRf/t21//7Tx4krAFk3eLty/47tXgAbdhPnAagHgBQL7l6a7VQzwAAAABJRU5ErkJggg==',
'unlockedl':	imPNG + 'iVBORw0KGgoAAAANSUhEUgAAABMAAAAQCAMAAADDGrRQAAAAAXNSR0IArs4c6QAAAYBQTFRFAAAA/sSU9XQV+4Ym/ta2/d3D9nEN/3kB7qsT/+LI/+ra8LMc/qJS8bti/ePP/4ES/7p+//37/vPq/+HG/c+t/pY8/+XN/eHM9deD9oMv/8CI+3oO/7h5/4MVq4xa9oQwp4ZS9n4n///+/5Mz/7Rx7JwW8MdK9+Kz8a8R/atl//fw+Iw5996g/byI7ak6/uTR+uvI++zP8bAs+ee38Lgc9Kwe78Nw//Tq+KFi+JRJ/30I+eSu/frx+oAg/PTg/+3E7Z8E/6RU6Y4H+HUS99WMuZFU+JxZ7J0t/tGr/u7j7qgE/7Jt/6le920E+9mH/KNZ+n0X+okw//v4/9Cl64MF6oQI8cs+6Y0PpYE8++zJ/+7IqolU88JY9chU765H8bMWzYYdmHtL+u/S++7U/+jU/d/J/9q68L4o88V666YN/4AP76oK17h89duh+XMJ9t2m9r9l//Xt/phA/XkK+3UG++Kn9tKF//v3/6BM8cxa+7F3//Hk8LBO+u3B9slM65cFJqizLQAAAAF0Uk5TAEDm2GYAAAABYktHRACIBR1IAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH2AsOFwYDc4wxCQAAANVJREFUGNNjYEAA82AeUU1WQSQRpWoZK2npElsRJMFCmeIqcX3dADYWhLI0dkYQ7ZFnCRcLkmLmAtGComxwsXKVQE8wo8iXQYtLTFhYmDNFrMKWFSzGo83gZsTvqCzLnyWr7M0iBBJjFWFQDKuNNLCPMky2s2FMhZojmV4pIZEjl5uvniQlDhWTN1GLjUlUMCvTMRbgg4nFc3Bzyynw8mZYI8Q0uE1No11rClxK4WKS2ZkcHAkR7npxfj4wMUUvh3qnkNBwVaM6K5gdFmxMUODsLwQRAgAIGCOyrkYbMQAAAABJRU5ErkJggg==',
'upgr0':	imPNG + 'iVBORw0KGgoAAAANSUhEUgAAACgAAAAnCAMAAABKdvqKAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAABo0ByQtFCk9CyY6FTI9Hx9FBSNCBiRBCiVMBClEDitLCSxFEitAGipIEi9MGC1SDjVKGjVeCjdYGDZJJD1TKDhlCjZgEEFdHU1PLERWKENXNVVIJl1QKVpaN0VqHFFvHVd8HkVkJEtlM010JVFnN1V5KltzPl99M21HKGNYLGxZPHVdKmhmOGF/P3hiK3lkM05ZRlZUQ1BlQlxqSV1kVVp0RF9zS2RhSGRiU2Z4SWV6UHZsR3pzTHt3Vnx8Z1eKH0+AIVqIKlqBNF2SJ2eLOWGTLGOUMmiVNmuTPmqaOW6hOXOnO3izNmWDQ2mBTmiJRmyEVm+cSHuCWHGTTHaaS3qbTHeSW3aJZHmFYXiNYnqNanuFcX6QZHekQ4RZK4VqNYNwPIV4SYV6VoK2PYiCV4iTXZSFVYmKa42PcIWVaIeddI2VcYybdIybfJWNZJSTa5iaeIavW4O7QoajZ4uheJagbpWleJqzfqKZeKGsfIbFPobRO4vIRY3UQZbUToiLh5Odg5WcjJmdgp6fipWXk5agiZWqgpyhh56nj56thpuri52zjqOnh6OukaKonKKziqS8gqW2kKSwnKa8kqyxk6y2nam7lK27nbCvj7aulLa6l6q0oq+1rK+/orO8orW7qbq9ori/qry+s7u9uKzDlKzBmrbEnK3AobnHpbzDtr7DvLzLsb3UqcPEn8TIqcTLtMHLu8vOscPUrMTUtMfVusbZssrSssnUvMvbtM3avNHKo9fYrtPaus7jv9jkv/Drtvz4ucPGwcbJwcnPwsvOyszSw83Qy87cxNHVwtLWztLcw9TazNjexNjczNXW0tXZ0trb1drb2M3iw9jlyNbh0dfr0t3h2d3q093w1ejoyeDh0OHj2eHs0+fu3OLw0+Xx2uny1Ojx3P34wvr53AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADlQ5SkAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAGXRFWHRTb2Z0d2FyZQBQYWludC5ORVQgdjMuNS4xTuc4+QAABEdJREFUOE+NlP9fE3Ucx8+iogIVh0hLtxpzmF8CF9lO8VZDmMhGGRkWMhdrsahwFy4qGkWkFnmAmc08E9FgnUY3BAU2FpvUHG4q6scci4vZ+j8+fY4N2MN4PPL9wz3uy/Pz/vJ63+OFwXsM7B45+H/gWT5R0AfnBa9dRx/3xUp9BuEkPPrh0Lxg22kIb+RBeOn3Ud/64KTvzIEdh7j5Stfuh7A35ayvrTfyXSobafJ1F79/IRH8ka91EcLS7N8CtYubpio67uQlV3DPnThRWmhPAEeVPLjvcq80o4PbvuQZf9brkfTkpT+n7bq1XbY3ATyed+PiqdufK3GF6DH82YyFFonwq+QHU/Hkx90vqlZh0Hf6GgPh+KXrmzJPjikVSoodjnpokpCnLElJffThRxaIk47+VCbEztRkZ8l+ILOEwsXLXsNNx/6JovB4o1GSwAULFj50/7K6pLbIYD5m2SGT6pIksifTMjJwkxcR0Sh/8XqHzQrBIpWg6NOXy78NEFjhVk2RWLJULEjNwMkwj02T6IQnTOLqRuvWLdqGV9sN2Da1RleiEoi1KiXhiuWKs9Gom2i0NtTVvVlUXFmFqZ8v0WlUArXVKqdjheNJ0YOXljd80tioKSpvJ7FiXZFULBFkipWEJxGc7sCrtFobrdJSBrixArWmUCYTqDQ4NVM1oTiltGpKXqjg0N9Tn/3AffL0Qq0ORx3OpvTE69MKrVqr2ggQ6GSI9YclKrVU7p5rcPbOI9I+oVp1EK0WC0VM8ne2abaoRbwkM+rEqqMXItnyTRYwhUCOqzYAsU6jlvPruCs8Hjmp990J8T1OhKqrBpZn6mSox/+GC/8+58qpiTBAPdrWrbOYn5YskjTPTj13wKx4O4f+YpdjDGL+ATvbz6xUNCcZwvHOEhITIlMuDUhqEmIH7CAcAgaDPU1KxQWMT4QkOoavIVa3+DuPBCG2t/xrWwSBNULBxsQueQlcxLsr3rPfdJ7rvAqxrlcKXroAAkNHVmxIN8d1jv0VXg+pqF1N/hr6spNFU9+q1xX2+bm/mKeYNaK3EInWE9vQsFlkatljYx00G+ANwN/FhAAA5t3te4y5ZfTsJJSR0FsYN0XSvoDjNm8AAEwB4CQNlnoqP19oJF3RcNhFldUcMuoV7TQ1yIWAf9pSQk6Gam6q7aSOU7kmcneZQoTCmGPuoz6iKbo/AtBeYt5zvrWZbGUDU4BdS5iI+jcMtuqWj/XGHjc30UszHFp0HBzvaKU6zgcHnfbczT2sXV81NGT/YK2hiwGc/ZeOiZhbTRtA8OT+yrJaBoz0jUwAe9XmHnCTYfsATV1hB4KTCSC8fHjnyqyd/eCPEDfSTZj6wd9oPpZ20X/O+mzcUkYPVhZssA2BQV4pFIHA8LDbkejGM94z7vimprvPCQASA5xjOll2Ltlcj7GT44EAr0TQMcbSg3dh81szhFcTi8bu/wUUhzueP53uUwAAAABJRU5ErkJggg==',
'upgr1':	imPNG + 'iVBORw0KGgoAAAANSUhEUgAAACgAAAAnCAMAAABKdvqKAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAABULBykVDC4lCEwiBkMsFks2G1cnDVQuEk09J1U+K2MsBno+Ck1PLFpaN0NoHVhjHVFzKG9OEXRGCnNCG3lXCnJSG29MKGddNn5IKHlVJnJaOmR9KXltP3txN1ZTQVBRXFVMclFaZF1eeVtgWlpjfWRba2ViSGRjU250Snx4THx4WWdofn59aFVcmVtkiVlho2Nqjmx1g2p0mHN6nmBqrVuHLWiVNHKqN2iCSG2TRHqDVXOaR3mcUX+AaHuBfX+cYX63QX7EOX+Ih3iBlnuGxoM+CohGFIdcBphLD5FaA59XGIBPKYBUOpdZK5NcNoxhCY9qH5hlB5plF4RtN5FmKJplNphzOqVOCqlRC6ZYG7lYC7hbFaNcKKJnBKx2CalkJadoNaN4ObJlKbRpNbNyO4l7Q4h3U5RrQZh1SJV5Wod4aa9sQKx2TL14Q7h9UMRYCcdiFd1mDdhnEsp5O+RlCsF7RpaGPISpOIqES4yKW4iTXZGDSpWKVJKUXoeJaYuTaYuZdZiGbZWWZ5uad4KoWYK/RYinaJWlepi3dq+HR6uBWLyASLiDVbmXRKeOZ6iPcKOZaqOXdryTaqmneYXHRIzTR5DXTc6dOcmCTMeHVNeJTdiMV9uSW8iUaMOadduVZMehSteoSdOkUeiWWfCVVuaYYeOsXOe4TO+1U/G5V+OhcoCKlZmahoiSvJmlipqol52xh5iloqacgKWnhKismaS3iae1lLWrhraulLa0irm5laiuoKyttai0pau3sLa5pLi9tK2zyKvDjrPDm7jRmbjJpr3FtrrQorzHxcSrl8y2lti8pOargemxh+u5lcbFp8XMt8HTp8nYttHKo9LOtdrbrtXVu9TlvPLGqfDSvPDrtvz4ucPKzczYw83R2NTZxdjc1tfmyd3q0t7w1uDfzejnyeLr1eLyyuLx1/34wvr53Orr5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ7PC0EAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAGXRFWHRTb2Z0d2FyZQBQYWludC5ORVQgdjMuNS4xTuc4+QAABHdJREFUOE+FlI9fE2Ucx68faGVOJ1kZ2fqlO1sght6dDrGygsxwzoDyJxiNgCx+JAZiiJsKxqgZmIwNJx1XmQTWYMJyLsNBYXVjs1Eb63gON7b6H67nbmMs6/Xq+3rd3XPPvZ/P98fz3BfhoubsaVAfLnqiRkffCNyYmYx7IsKYdY07HGMjDguk1RcHR697PJ6baB4EtMPlAiwbmpoC42P9hw+qdbwNupmbFHlqeirEAkdfPQPv/Q3vV6tqDx3StdDXYyjCsX4wHQIMbdaptikVdDAIXEMtalVNdW0tRK0zqggHAAiZ71ds26Tcrdy9NfnK+Y19ll5Lj6amWqWqVg+6opoIC4LTzqUnFEoeVCqTvlqd9vCjy9I2WCyamoyGIdc4wwoo4rcPT0ibP8/KUkBMuSffbAd258TzK23A73IygLF09wnekSupax7Z+8W5vVmboOYeZVZ3BioVzUcfX9Vrs122/VB6bxI6IICXlpfe92nnudMKpWLx4sRkaYaZ9oS9Vo1MkpKSuuaxRVuXr1o9wYPXjG3ZBxLOfpaz6NY5SWjdwJ/hsC/s9YXDGhlq670zcenXK9Oem4Tgb4YlmXkJZzubEm55AK3zQYIn4eXzqFFNndQVZM6n/QHBHw0vb86943Rnc8JtqCbAYwIJV3gDGrTkiJ3963LKJQhebCKNb7yZ19w0J1nm5rUEzcjDIyON+04Gv03ZMMkhZyiSNBmrCnLvklgjjqMgfPFZJSRVAmypT37HIR0kb0aSSpZ540FB1VdKaukgWPZUA4fktgkk2Y6a/+E28mLO0IVCQX/9eheypcAAgywszEdhhDFJb9S/VVps9YDQhfVjyDt6kqx6tXx/pcQzG2Bs5BVRen2R1fH0EPIlSVKFO3e8mCjiSxLLOFJPX1gEP1MljsYR5BeYdcHc2+dlSqLu4nW9Xgl1oNg0am+8ivxugmvatmy+m4/xX87daG7rewtl645eRbifSKjZZcyeq4llPcurpfipVgLH079HuJ8pQzskTW8VBSKS8bqy4mPHMAyS/RCM1BveYCHjzAdjHkBVBNH6DIGv40EjX28Kkivc8RwUdstMDz37SStBYDx47UyHCSbU3lZVpY5P3OfzaqSmvPTWUwSG8TF6aNo9CnccHgzRQUjC7Yns0K9qkZE0iHECE2N81hwLWOZj6Ny066VMuTXm3SzXw01rWoiLFywQH3fxYJC18yfj3bKyF3LnyzXucCDgNstJUvt2m/4VHBNDa+SE3sM6i7TajtcrK7fPu8cgl4qg1RgpyqSvynmQICCKWQSQAxznZ6z5+yvKXsvcZRKqAK0Lxl2MEzyZPhwBoQU8BRUVFeVl25foig0R0KDV7itZATkCP87EQGDNK9+xMz8nWzPyDUV1kSa99qOWPqenHsNx/KgD/lwRQZYFIzRNwwYIQN8HBlL/Ic2wLJxuwHDxWsjNgJMMG5hphaz1ZFE34PjexLIX5GuldfD/j7kW5qPqsREssd/S0zMs9J7Z2f8aAdbl5/X+F5xd/DckPzbTuvnomAAAAABJRU5ErkJggg==',
'upgr2':	imPNG + 'iVBORw0KGgoAAAANSUhEUgAAACgAAAAnCAMAAABKdvqKAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAAC5KFzVMGDlXGENbHE1PLERfI1tXOlpeNUVmH0pnKE1lM051JFdtOlJ4Kld3MlZ6MlxzPV58OmtkOFZTQVtgWmNgSGNhUmxsWWZ3R2p3UnZ6Unx4WWRpb2txbWxwdX9+ZH58bHV5fHp+gV6ELWCLMmiZLmWTMWyTPGydNGuZOnWnOWSDQWSATGiGSmyKTW+HU2+KUm+aQHCNT3uCV3GXTnWcTHmWWnmAaXyWZXehSH2Bg4B0TIiTXYuLb4iYbIWTfIuecYueepWSaZSdbZ2bcpybfoWkXImlaI2oc5GhfJGucJOrepird5i1eKGrfqPDfIyNjoWLkYmNkY2ThoyQlo+UmpSbjZ2fgpeck5qdnpuepJ6eq5argZuhi5ynl5yomp22g6CeoqCmh6Sphairgamrk6G0hqCyi6K9hKS7iqm3lraulLO0lLO2mrC7lbi1nb69k6CipKKmq6WspaWpraqtrq22oKywq6u8pa2wsrG2prK7o7a/rLm7p7u9q7W6tLW6vLa2wLS6wrm+xby/yKjGh63HkrLNjrfDn7HMk7TNnLvNm7nWmrbMprjEoLnCrbvPpbrDsr3Eu7PSoLzUor3cor3aqL/Xs77gpMXNm8HbncHJpcDLrcLLs8TKvMLco8PTs8XRusTZssvWtsvUusjbs8vZu9HKo9rbrtXTvtLbtdLfvcLhncLgpMvhtc/gv9LjvPHrs/Drv//xtv35tfz4u8XHxsDEyMTJysjLyMbM1MnN0szVws/dxczR1c/V3NLXxNDVy9LexNPZy9ncz9HU1tLV29Tb0tPZ3tHU4dXa4djc4tvd69TixNrly9rozOLiwe/nxuLs1P31wP/2yP76w/v5yPr53OPl4+Hl6unt4+rs6u/v8Ory4/H06/L08gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKBcQJYAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAGXRFWHRTb2Z0d2FyZQBQYWludC5ORVQgdjMuNS4xTuc4+QAABAZJREFUOE+NlP9fE3UcxzHRrZMm2NpJLeOLFSpB2XIBRSmNDl2L0LKyb7NZsdMSjEr7JpGfzcnH/NKdzZV9+CKOjDMHXJmUGiZhNBDvS9oq/pP1vtsYNvjBz+Nxt8c+99zr/Xq/Prt3Rvz/a2LjU7G0rcTXjLTdocaCxusCm34oLLgucMPIjoILE7Hz0+C00rHGqwNNdzz3c4I7pl1bzs3gMVZYcfpsy9OLjr67D57+tK49/t1njq0zgE3bbq8bGjq9dlHFOnh6cO36+OBuz5bp4MSG4ea6luHhlmdeeP5oPL6zpa6iva1TM5AWz5UdV39fn09bDHPoW16Ot709cuqVe1YdmSHHC815ljzPl91qpMFhNUcP7jxQsqRk9Yud0xR/pCs3/ykrkhSRJNlhpS93rbjrzuwHvOng33RlX5+kKIooSZIodVfRg6vvK1laNA2kq8cBkzRUEUUlMl5Nx9vbXI/vT1PMt4Y1SAIUPkBV/cY6dUBTJ3PF3CCKmpp+SSJo9jWYEycEnafAgXxrr9g/icmqpi2KeU6u6yT7bPXHKTBWuNCjiv0Jg4mbCDdPnpvrWPVm5Ucp8PttC8OSDuos5KNLNlhqnHs8r742pfjOGfNxNammM7Iqq4oaMTBl9Y+wL304qRhrPGOQ+8UkqjetquBRNaxh3E/cms9Ogu9v/MTcKyo6mNBVNReRXrPdVsMsLlqZBI88+F4zDR6TDjUswYdpxNiZ5eXOBDj46KenRs5WQ61Ujpo28FUWl99bb1/h1cG/fNt3XfxjxNqraono4ciyJq7K1twFSFv7Afx34oMA+e3iAOv1yAAmNaGRiCpvpqlZuQi5EAbw1+1c8JBv7xc4lBtOWoNwFLFflMPWHCqLcqFaxAG4j8UCL/A8xrgqkigtKbIKZx1xWCiTiZrFoNpWAL/CAoHF+TAxPhxRQQoWdKV2VxnnUTdmU3OLkcsH4DEeCwLieZ6EyP22BlWW4UhkRd1ko3JmF2XNnZfrQijQlhGPkh5C6nlewCQwf+kcmyMsj4+HN9lw2U0UY7evAQxh3JERH+0KhQjBLhQQuNK7ly2xWQxGo9GGCXYHEPYHMEI9mBuEHKMEihLeFxAEp2lZeSlPnAwnkKBAtAYxrkF4T6ce+NgJATYFsFBGZea49957Q6bbT0gwCO7BETrE7j6f+j8KUBnzn6Obn3TbM+ebFizHQogIIAB5IPaaV+Ey7PXA7x96rDibMmXNXswAFQT32PsGq02s1DvzT/QEwQK+zcaUUlSWqRiByxCPA6+z7IFf0mbPSYKxq96HfVR5LYNDHDQSeIvd+vUMY4+0+v2Y49wQHE9Ia+hw57nJ2Zs2cY+Tw+Tb0bGxjo7o6OilS9cM6P8AlcpIworLO5cAAAAASUVORK5CYII=',
'upgr3':	imPNG + 'iVBORw0KGgoAAAANSUhEUgAAACgAAAAnCAMAAABKdvqKAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAAE1PLFVMKlpaN39aFGVdOHJZNGpjLXJqNVZTQVtgWmBZRWNgSGphTm9sR2RiU250Snh6Rnx4WX59Z3F+gHF8iX2AVniCi3iCk4V7OoZ9Q4V4Yo2BPpSFP4uFRoaHVouTWpaKR5KJV5mVWIiKaY2JcoiRY4STfYaYcoiadp+PeJWSaZmVZJuWbZ2aYpydap2ceJikapumcZqrf6KTS6SXVKOgXqmiXLWmWqakaaOqaq2jYa+tb6akd6eqea6sdKqtfLiuZb2yabW0c7e2eb20c7m1er25f8G1ZMKyasW4b8y+bcK8csS+e8q+c8zAb8XBe8rEfdXGbNXJdNTKe9nHetjJdNnLfN7Se+LVeuTZeuvcfPDdfe/iffPjffXoffnof4OHiYyRgYqSn4yckJWcjJWlg5Kjjp+rhpysiZ6ulp6xiaaohaGzhKO2iqW5iquxjqq5hqm7jKK3kaaynKS4kqm8k6q9mraulLS6hLG9jbi3g7q7grm5jrC9kbC9m769k6Sqsqu6oKzBk6/EnbfCkLLDm7TKlrTJnLrJmrzVn7PEoLbKorjHpLrEqrnMo7zMq77Ft77NsLzSo7zQqcHBgcPGi8LIis/LgcfNns3UndbHidXUi93ThN3Rid7ak97bmsLKpMjMt8TTrMHZpcjXtdHKo9jarNPYuc7hvOLWguTZhOvcguzci+rbl/HegvDei+7hhe7gi+7jkPPjg/Pki/bqhPbpifjlhfjljPvshfvri/Pkk/Tlm/TplPTomvnmlPjnnPnrkfnqnfzxi/zwkvbnoPDrtvz4ucTFycTKxMfKzs7JwsvVws7cw9TbxtXU19TY2M3hwdPjxNrlxNvizNvqy9vj0tzq097q2Ozox+Hm2uHs1OPt2+Px2f34wvr53AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB+2p9wAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAGXRFWHRTb2Z0d2FyZQBQYWludC5ORVQgdjMuNS4xTuc4+QAABDNJREFUOE91lI1fE3Ucx8+W6YI6HTULaHAbUobh1F3NqBQztDKKWMk4WI9W1AClACujGYRDlqOGPRGUEYPgYEI3Hu53x8M52GXFSknmGq3/5Prdw2CQfV+vu9c9vO/z/f4+39/3EEGK30/dVuH0uN1tn7hcNVXVLlfT2x9VVDa89dr3v83LBAKPP34+teXuxjZny8fvHnjowLlHn9q7o8HpPuPxeE5v23bP7rrW5s/+EsFLr9yx5XWnu/ucxWItJQjCZqOsh08+8l5DveeMu7nWWdPYWN26iAi/vnT7q/WumoOWch+kCIIap2DYbGT/MwX7qrrboXBTdZ0bEe696eX5Ky3f0lDHDwmCAoAGYAye6dmBLz4/7oRkdaML+SXtxlvfbNv3QClNPUtRo9yhwouTDMNOsQwAozQY/ubB0+0/eJwe5NKH+luytiatx8gACADAdQ3NTc1NTbIdHUPsBFQF3P76nh97epCr0bP5pf1562/YWAzEYFmWYfzDnfj+oZ8Y3zh84ivqDYejyLWrJ8fAGF2St+FOagKMU0dT0CTVOvRmy+CFwQskBclZcHghvIREQ3upYZKgKEshSVFpSSn2832xoMOoUQ+QPrL8BbgwruRrqDgfKrCVW80lZJmPItCtJ/6JwQjG+JhRg5LEkWGYm6YHvvobeaengB61PtFPlpURaBbPi5x44vneHNSa95zoFQ2+u4J8GjoIF0tRL9oI9GhE4kQSfhGMGNGSUWmF4Es3shh6P3ARusb4UzTeuJyi2qcR/RGTFzUjS6EdAQ56wg6qHXJiRRTe8A41AH7oJthTiyxFj3HAz86wKZpgIiiJ8ymwPwAEBjJakXDYDm+mmU7ULr5RSozXYE9joN4IJoJL9k5oFZhCvXFO8kf+wpFcAgLFJmxXNyJEzz42OQ3ogLpvpcDlq6DKHxjAdbq6Bbhxw6ldM1BftSIIC5D95GOq0cdTTZsrLkujkGFgOECr4yYmCAcjajwdy62TZ+aafWMRB4BY43+Se1Fct/mN+HCF9AUQ9BmVhIl0TrIhs3V5Chfv0wVgAzQRpbIEUqPPbloZV6FNL/UJGpkQPLToBJol68lzLYS2S53fJPU6oYVeTYZL4WTwz1wJHMlRfJbN5oPG5No4p4BGChZJj6gyIclLAcneHFXVMieD0YcHaZrzD7Ks1rGc267NPr7CKaD9SRpMT3Ls3Nw6rdEbi0S8di2WWZnAyaBw/hDcQAAwzExXhzZZBUOry65J5BRwAafE2QDcJDPCcVYzjt2fUb2Kk8HFy3gx/NkQftigAHjebDLl7qpsvw4oCB/o8idmrQQA5BGzCcfxzErPak5JLfRo081PF1ryzSYMw3HDzjV5452BBh1LxdJ1ELoL12XuXL2MhBaKlwY9ZoJimC6jZU3SNaBg3643GPbsrr8upmyK/3m36vG/k4AtntEwBKYAAAAASUVORK5CYII=',
'usethem1h':	imPNG + 'iVBORw0KGgoAAAANSUhEUgAAABwAAAAUCAYAAACeXl35AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwgAADsIBFShKgAAAABh0RVh0U29mdHdhcmUAUGFpbnQuTkVUIHYzLjM2qefiJQAAAqNJREFUSEudlU1oE0EUx9eeevTo0aNHjx49SipYxKReJGKyVS9BbaCNoInSTepnUVLUUrsmDRQpW9GYWiotghW/EmoPkqg5CKUpjWm32TXpJtl0zRuYJdnMbBYfDPsxb99v3n/em93HdLA+V+gouOx1MehKs6495h3MdavKp0jkhtIpbsv8Cad//+DNyVh0ZrGc/Z0TYWgdDPsJrz/sXuWeJezO2wcsQU+5gseEV8t5Va1XMSMej2ssy6KRSqXa0KT3c4vJwrnLo6wpdIjjn66t59uyOd7To0PgPpfL6c+0RYBDQZR2hu9PvyRC2YEHZzbz4jZJOYDgzJoBXq9XC4fDpmKXysrfi4NjgRYo6B1f+LJB+xIyguAwACjLMlVeUoyPyfTWyX7ukA4N3InNq6qq71mnAgFoJpNB0uK9bZaZ9P2tsZkVBHQ6/d1QWZ0geB6ynJqKoUezvTXGm19KKlD9DPSZlbKHAMYCoe0tafHAQD1td4fOFqWSbJahIAhaQwwtm80iN0mS0BXeNctqFkOpVBWHO3ipAQxeaFRSiebs8XgQqBmIfTEQP+OFkGLVVLVmd3FDDDQ6qffwR7gYjMFxhonEnAaLstlsGtzTbGNT3HH0c70MtMTS+2/UDNWaostnPGVgET6fD8nK8zyC0gwY+nF37/Fs2kx/tV5HkpKA8A6kxLLT4oxH3/zR+9DuHj6cWv1VMIPSJMWSwxV8SAZbBlvXctpc8U/cLe8q1Gr9XyD8BK6PRGfbzlM4AEbHX6xWKtWWQwBAxkEqJFKGAIs8f5tGDU8ygA5ce/Iw/XNNNJPXyhzICJlRYc0LcLhHjjziE+vLn7/LUM5WAOCztS0Vv678KE5OLxTb9szK37jvfOgg9I6dDQWsDAfLnW75KxAg/wA2VAgVwrGBmgAAAABJRU5ErkJggg==',
'usethemeq':	imPNG + 'iVBORw0KGgoAAAANSUhEUgAAABwAAAAUCAYAAACeXl35AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAAlwSFlzAAAOwwAADsMBx2+oZAAAABh0RVh0U29mdHdhcmUAUGFpbnQuTkVUIHYzLjM2qefiJQAAAflJREFUSEtjZCAAwpPbHUBK/jExgGlcgOkfwwGQHMefHycWLmz8QchcFHn/+HqB8qZ5Sxat3vvtzoNn70H4PwEAU7d2y9HvVa0LtobGd0kQZWlIcpvH2k1HXv358/cXIUvwyW/be+ZNUmF/Kl5LK1rnz3389BVB3xDrkDfvP31o6Vu+EaulqcUTY1++ev+OWMOIVff1248vmeVTG1AsBYX35l2nnhNrCKnqjp+5/jYorVUDbmlD95Idf/78oSjOCDmic+rq82AL4+PrOUApi5AGSuV37DvzA5T6GUD5jJhkP2XKlP9nzpzBijdu3Pj/5s2beN0EsgOcp0NT2hM+fvr6mZAPAgMD/9vY2ODEIMfgAz9+/voRltJWALSwLQOYkr4SsvDzZ4JuwmvE7z9/focmt1YwgDI6MXmP0iB9/vL9h7C01gAGUJbYd/gCQR9SGqQgO+DFXe+MdddpHaSzFm1/Dc+HoSktBmcv3n5DyFJy5UFRBoo6lNKmqH5Oz7fvPyhLGVhcBKoE6joWrcMoT0EFQP+s9Rd//vxFtUIAZNnClbuvgzM8NgCytLh25qTrtx5TXGOAghHkM5yWITsgLKXDYvr8rU+PnLz6GZSciY27t+8+fTx9/ubHect3fcSIM2Jq4/D0dgVQ3glNbW8gBoeltkag1ApYLAEAIKtp4+xd+jMAAAAASUVORK5CYII=',
'usethempr':	imPNG + 'iVBORw0KGgoAAAANSUhEUgAAABwAAAAUCAYAAACeXl35AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAAlwSFlzAAAOwwAADsMBx2+oZAAAABh0RVh0U29mdHdhcmUAUGFpbnQuTkVUIHYzLjM2qefiJQAAAntJREFUSEuVlU1ME1EQx1dOHD169OjRo0eP3rTGLV5Mjdui3lCaQEy01bAtfiDRlIgEwbYkxBAwVVGCgZqI8WsNcjBNlYMJoYRaWNq1ZVtWVv6bvGa7fbv7mOSlzb7Z/29m3szbA5yLtQnR43DZbeGMXztr2eXeYa9VUz/F4zdVN92G/ZO+0MGuWyNjiYm5yvLvnIyluxjxm3z1Yfua+HSa9905xAQ9I0ROTL5YyGvav5obxGn/9ZxUuHClP+AI7RZHn6ys5l2zYQ2kIJe2eu6Pp6jQQOeDc+t5eZNVjNWvXFH/Xu4aCDdAUe+Xs1/W7ERyuZwuSZKezWapLtjDsrOPUmbjdLt4pA4N3x2b0TSNemapVEoXBMEQFEVRDwaDTboej0dHUE52e2Bi0QD6fKFWdJadM8TMZhUnwbiVeGZeUtH9HObMqe2tQGRJyheLxXQsFgPDmGneHz1fLJUVpwwJQFEUnQSAZ7Ty2umo1Zrq9Uc69oCRS3udVHaKEsJYKB8axwzGe25NA58dTdvhBbGbw6Dvd/aQJcBoFPxPp9N6MpmsZ08Lfm1d3vK2i6c4jMT8+++OGZoFkCnEYcjY3J14TvasUDDq113f4FSG5eDJiBBfa0OR0aFpDSXe/KnPIe/vOfpt6VfBCQoxKwDZmLvUmjHRw5Hh6Bpum6uh4XuVbZXarTgvwGjlAhAgLFTAavgI3OhNTDXdp7gA+oeeL1WrNdtLgKXsZh/A4s/eZoyBpxmgndcfP8z8XJH3K271RxmRmS3MHIDX33vs0ej06sLnHwramRW+sVkqfl3MFkfGZ4tNZ8byNW67GD2M2eED0TDL8gbEsw1fBQrkP6+jTExmIuLUAAAAAElFTkSuQmCC',
'vmkls':	imPNG + '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',
};
function setDefLang()
{
//default = English
t['0'] = "Script language"
t['1'] = "Travian v2.x server";
t['2'] = "Remove ad banners";
t['3'] = "Force T3.1 Legionnaire & Phalanx capacity calculation<br>(for mixed T3.1 & T3.5 servers)";
t['4'] = "Market";
t['5'] = "Rally point/Barracks/Workshop/Stable";
t['6'] = "Town hall/Hero's mansion/Armoury/Blacksmith";
t['7'] = "Palace/Residence/Academy/Treasury";
t['8'] = "Alliance";
t['9'] = "Show additional links in left menu<br>(Traviantoolbox, World Analyser, Travilog, Map, etc.)";
t['10'] = "Combat simulator link to use:";
t['11'] = "Link to use for posting reports site";
t['12'] = "Show 'dorf1.php' and 'dorf2.php' links";
t['13'] = "Show \"Center map on this village\" icon";
t['14'] = "Show 'Send troops/Send resources' icons in village list";
t['15'] = "Show lumber, clay, iron production per hour in village list";
t['16'] = "Show effective crop production in village list";
t['17'] = "Show population in village list";
t['18'] = "Show additional (2 columns) village list as floating window";
t['19'] = "Show information about buildings in progress and troop movements<br>in village list";
t['20'] = "Show bookmarks";
t['21'] = "Show 'User Bookmarks' as floating window";
t['22'] = "Show note block";
t['23'] = "Show 'NoteBlock' as floating window";
t['24'] = "Note block size";
t['25'] = "Note block height";
t['26'] = "Show NPC Assistant calculations/links";
t['27'] = "World Analyser to use";
t['28'] = "Show analyser statistic links";
t['29'] = "Map Analyser to use";
t['30'] = "Show links to map for users";
t['31'] = "Show links to map for alliances";
t['32'] = "Show 'Search Bar'";
t['33'] = "Show 'Search Bar' as floating window";
t['34'] = "Show CP/day information in upgrade tables";
t['35'] = "Show crop consumption in upgrade tables";
t['36'] = "Show 'Until then/Residue' calculation in upgrade/training tables";
t['37'] = "Show resource fields upgrade table";
t['38'] = "Show resource level colours";
t['39'] = "Show 'Resource Bar' table";
t['40'] = "Show 'Resource Bar' table as floating window";
t['41'] = "Show buildings upgrade table";
t['42'] = "Sort buildings by name in upgrade table";
t['43'] = "Show center numbers";
t['44'] = "Show building level colours";
t['45'] = "Show blinking levels for buildings being upgraded";
t['46'] = "Show additional information for every merchant arrival";
t['47'] = "Show last market transport";
t['48'] = "Number of offer pages to preload<br>while on the 'Market => Buy' page<br>(Default = 1)";
t['49'] = "Rally point default action";
t['50'] = "No. of scouts for the \"Select scout\" function";
t['51'] = "Show last attack";
t['52'] = "Show/use coordinates for last attack";
t['53'] = "Show troops information in tooltips";
t['54'] = "Show distance and times to villages in tooltips";
t['55'] = "Auto fill in available troops for the internal war simulator";
t['56'] = "Show cell type/oasis info<br>while mousing over the map";
t['57'] = "Show distances & times";
t['58'] = "Show table of players/villages/occupied oasis";
t['59'] = "Number of message/report pages to preload<br>(Default = 1)";
t['60'] = "Show links to open messages/reports in a pop-up";
t['61'] = "Show \"Delete all\" table on the Reports page";
t['62'] = "Show the \"Send IGM\" icon for me, too";
t['63'] = "Show TB3 enhanced Battle Reports";
t['64'] = "Show details in Report Statistics";
t['65'] = "Color upgrade available<br>(Default = Empty)";
t['66'] = "Color max level<br>(Default = Empty)";
t['67'] = "Color upgrade not possible (not enough resources)<br>(Default = Empty)";
t['68'] = "Color upgrade via NPC<br>(Default = Empty)";
t['69'] = "Console Log Level<br>ONLY FOR PROGRAMMERS OR DEBUGGING (Default = 0)";
t['82.L'] = "Lock bookmarks (Hide delete, move up, move down icons)";
t['82.U'] = "Unlock bookmarks (Show delete, move up, move down icons)";
t['85'] = "Show 'Send troops/Send resources' icons";
t['87'] = "Remember last 1x/2x/3x market send option (if available)";
t['91'] = "Customize village list";
t['92.L'] = "Lock list of villages (Hide move up, move down icons)";
t['92.U'] = "Unlock lis of villages (Show move up, move down icons)";
t['U.2'] = "Race";
t['U.3'] = "Name of your capital<br><b>Visit your Profile for an update</b>";
t['U.6'] = "Coordinates of your capital<br><b>Visit your Profile for an update</b>";
t['SIM'] = "Combat simulator";
t['QSURE'] = "Are you sure?";
t['LOSS'] = "Loss";
t['PROFIT'] = "Profit";
t['EXTAV'] = "Extension available";
t['PLAYER'] = "Player";
t['VILLAGE'] = "Village";
t['POPULATION'] = "Population";
t['COORDS'] = "Coordinates";
t['MAPTBACTS'] = "Actions";
t['SAVED'] = "Saved";
t['YOUNEED'] = "You need";
t['TODAY'] = "today";
t['TOMORROW'] = "tomorrow";
t['DAYAFTERTOM'] = "day after tomorrow";
t['MARKET'] = "Marketplace";
t['BARRACKS'] = "Barracks";
t['RAP'] = "Rally point";
t['STABLE'] = "Stable";
t['WORKSHOP'] = "Workshop";
t['SENDRES'] = "Send resources";
t['BUY'] = "Buy";
t['SELL'] = "Sell";
t['SENDIGM'] = "Send IGM";
t['LISTO'] = "Available";
t['ON'] = "on";
t['AT'] = "at";
t['EFICIENCIA'] = "Efficiency";
t['NEVER'] = "Never";
t['ALDEAS'] = "Village(s)";
t['TIEMPO'] = "Time";
t['OFREZCO'] = "Offering";
t['BUSCO'] = "Searching";
t['TIPO'] = "Type";
t['DISPONIBLE'] = "Only available";
t['CUALQUIERA'] = "Any";
t['YES'] = "Yes";
t['NO'] = "No";
t['LOGIN'] = "Login";
t['MARCADORES'] = "Bookmarks";
t['ANYADIR'] = "Add";
t['UBU'] = "New Bookmark URL";
t['UBT'] = "New Bookmark Text";
t['DEL'] = "Delete";
t['MAPA'] = "Map";
t['MAXTIME'] = "Maximum time";
t['ARCHIVE'] = "Archive";
t['SUMMARY'] = "Summary";
t['TROPAS'] = "Troops";
t['CHKSCRV'] = "Update TBeyond";
t['ACTUALIZAR'] = "Update village information";
t['VENTAS'] = "Saved Offers";
t['MAPSCAN'] = "Scan the Map";
t['BIC'] = "Show extended icons";
t['SAVE'] = "Save";
t['AT2'] = "Reinforcement";
t['AT3'] = "Attack: Normal";
t['AT4'] = "Attack: Raid";
t['NBSA'] = "Auto";
t['NBSN'] = "Normal (small)";
t['NBSB'] = "Large screen (large)";
t['NBHAX'] = "Automatic expand height";
t['NBHK'] = "Default height";
t['NPCSAVETIME'] = "Save: ";
t['TOTALTROOPS'] = "Total village troops";
t['SELECTALLTROOPS'] = "Select all troops";
t['PARTY'] = "Festivities";
t['CPPERDAY'] = "CP/day";
t['SLOT'] = "Slot";
t['TOTAL'] = "Total";
t['SELECTSCOUT'] = "Select scout";
t['SELECTFAKE'] = "Select fake";
t['ALL'] = "All";
t['SH2'] = "In color fields you may enter:<br>- <b>green</b> or <b>red</b> or  <b>orange</b>, etc.<br>- the HEX color code like <b>#004523</b><br>- leave empty for the default color";
t['SOREP'] = "Show original report (for posting)";
t['WSIMO1'] = "Internal (provided by the game)";
t['WSIMO2'] = "External (provided by kirilloid.ru)";
t['NONEWVER'] = "You have the latest version available";
t['BVER'] = "You may have a beta version";
t['NVERAV'] = "A new version of the script is available";
t['UPDSCR'] = "Update script now ?";
t['CHECKUPDATE'] = "Checking for script update.<br>Please wait...";
t['AVPPV'] = "Average population per village";
t['AVPPP'] = "Average population per player";
t['MAX'] = "Max";
t['TOTTRTR'] = "Total troops training";
t['TB3SL'] = "$1 Setup";
t['UPDALLV'] = "Update all villages.  USE WITH MAXIMUM CARE AS THIS CAN LEAD TO A BANNED ACCOUNT !";
t['LARGEMAP'] = "Large map";
t['USETHEMPR'] = "Use them (proportional)";
t['USETHEMEQ'] = "Use them (equal)";
t['TOWNHALL'] = "Town Hall";
t['GSRVT'] = "Game server";
t['ACCINFO'] = "Account Information";
t['NBO'] = "Noteblock";
t['MNUL'] = "Menu on the left side";
t['STAT'] = "Statistics";
t['RESF'] = "Resource fields";
t['VLC'] = "Village center";
t['MAPO'] = "Map options";
t['COLO'] = "Color options";
t['DBGO'] = "Debug options";
t['HEROSMANSION'] = "Hero's mansion";
t['BLACKSMITH'] = "Blacksmith";
t['ARMOURY'] = "Armoury";
t['NOW'] = "Now";
t['CLOSE'] = "Close";
t['USETHEM1H'] = "Use them (1 hour production)";
t['OVERVIEW'] = "Overview";
t['FORUM'] = "Forum";
t['ATTACKS'] = "Attacks";
t['NEWS'] = "News";
t['ADDCRTPAGE'] = "Add current";
t['SCRPURL'] = "TBeyond page";
t['SPACER'] = "Spacer";
t['MEREO'] = "Messages & Reports";
t['ATTABLES'] = "Troop tables";
t['MTW'] = "Wasted";
t['MTX'] = "Exceeding";
t['MTC'] = "Current load";
t['ALFL'] = "Link to external forum<br>(Leave empty for internal forum)";
t['MTCL'] = "Clear all";
t['CKSORT'] = "Click to sort";
t['MIN'] = "Min";
t['SVGL'] = "Shared among villages";
t['VGL'] = "Village List";
t['UPDATEPOP'] = "Update population";
t['EDIT'] = "Edit";
t['NPCO'] = "NPC Assistant options";
t['NEWVILLAGEAV'] = "Date/Time";
t['TIMEUNTIL'] = "Time to wait";
t['CENTERMAP'] = "Center map on this village";
t['SENDTROOPS'] = "Send troops";
t['PALACE'] = "Palace";
t['RESIDENCE'] = "Residence";
t['ACADEMY'] = "Academy";
t['TREASURY'] = "Treasury";
t['UPGTB'] = "Resource fields/buildings upgrade tables";
t['RBTT'] = "Resource Bar";
t['USE'] = "Use";
t['RESIDUE'] = "The residue if you build it ";
t['RESOURCES'] = "Resources";
t['SH1'] = "Open your Profile for automatic capital/coordinates detection<br>Build the barracks for automatic race detection and then open the village center";
t['RESEND'] = "Send again ?";
t['WSI'] = "War simulator provided by the game";
t['TTT'] = "General troops/distance tooltips";
t['MTR'] = "Ratio";
t['MTRMIN'] = "(must be 0.50 minimum)";
t['FINDREP'] = "Search the last of";
t['IREPORT1'] = "Won as attacker without losses";
t['IREPORT2'] = "Won as attacker with losses";
t['IREPORT3'] = "Lost as attacker";
t['IREPORT4'] = "Won as defender without losses";
t['IREPORT5'] = "Won as defender with losses";
t['IREPORT6'] = "Lost as defender with losses";
t['IREPORT7'] = "Lost as defender without losses";
t['VLISTUP'] = "Move up";
t['VLISTDOWN'] = "Move down";
t['VLISTSEP'] = "Insert/remove horizontal separator";
t['VLISTEDIT'] = "Village properties";
t['VLISTOPTIONS'] = "Village list options";
t['REPTT'] = "Show this report in separate window";
t['WMIN'] = "Minimize window";
t['WMAX'] = "Maximize window";
t['REFRESHP'] = "Update page";
t['1H'] = "1h";
t['GENLNK'] = "General links enhancements";
t['11.TT'] = "Posting reports site";
t['27.TT'] = "World Analyser";
t['29.TT'] = "Map Analyser";
t['WSS'] = "Server statistics";
t['WSP'] = "Player statistics";
t['WSA'] = "Alliance statistics";
t['TRAVIANDOPE'] = "Traviandope";
t['TRAVIANDOPE.TT'] = "World Map, Player, and Alliance Analysis Tool";
t['TOOLBOX'] = "Toolbox";
t['TOOLBOX.TT'] = "Units Comparison, Combat Simulator, Calculators, Users and Allies Signature";
t['CRYTOOLS'] = "Cry's Tools";
t['CRYTOOLS.TT'] = "Cry's Travian Tools & News";
t['KIRILLOID'] = "Kirilloid";
t['KIRILLOID.TT'] = "Lot of useful tables & calculators";
t['CROPFINDER'] = "Crop finder";
t['CROPFINDER.TT'] = "Search for crop";
t['ERRUPDATE'] = "Script update failed!";
t['TRADEBAL.TT'] = "Get a trade balance for this player";
t['100'] = "Show links to get trade balance for players";
t['101'] = "Color upgrade not possible (not enough capacity of granaries/warehouses)<br>(Default = Empty)";
t['102'] = "Show number of resource fields in 'Resource Bar'";
t['RESNEED'] = "Need for normal extension:";
t['NPCNEED'] = "Need for extension via NPC:";
t['RESREQ_TT'] = "Need for extension: $1";
t['NPCLNK'] = "&raquo; To NPC trading";
t['USERES_TT'] = "Allow/disallow to use resource $1 when simultaneously operate with all resources.";
t['USETRADERS_TT'] = "Use not more then this traders number when distributing resources.";
t['USEUNIRES_TT'] = "Use not more then this resources quantity when distributing resources.";
t['USEPPH_TT'] = "Use the 1h production of this village as the maximum transfer quantity.";
t['USEPPHALL_TT'] = "Use the 1h production of all villages as the maximum transfer quantity.";
t['STAT_DISMISS'] = "Statistics for dismiss troops";
t['STAT_REMAINS'] = "Statistics for remains troops";
t['SELECTALL'] = "Select all";
};
function switchLanguage(lang) { if ( lang !== 'en' ) { switch ( lang ) {
case 'ae': //contributors: Dream1, Me_TheKing, kaser15, aatkco, ghooost
t['1'] = "Travian v2.x server";
t['2'] = "????? ?????????";
t['3'] = "T3.1 ???? ??????? ???? ??? & ??????? <br> (???? ??????? T3.1 ????? ?? T3.5 )";
t['4'] = "?????";
t['5'] = "???? ?????? / ?????? / ??????? ??????? / ???????";
t['6'] = "??????? / ??? ??????? / ?????? ??????? / ??????";
t['7'] = "????? / ????? / ?????????? / ??????";
t['8'] = "???????";
t['9'] = "????? ??????? ???????? ?? ??????? ?????? <br> (Traviantoolbox, World Analyser, Travilog, Map, ?????.)";
t['10'] = "????? ??? ????? ???????: <br> (?? ??????? ??????)";
t['11'] = "???? ?????????? ???? ????????";
t['12'] = "????? ????? 'dorf1.php' ? 'dorf2.php'";
t['13'] = " ????? ?????? \"????? ??? ?????? ??? ???????";
t['14'] = "????? '????? ???? / ???? ??????? '?????? ?? ????? ??????";
t['15'] = "????? ????? ?????? ??????? ??????? ??? ???? ?? ????? ??????";
t['16'] = "????? ????? ????? ????? ?? ????";
t['17'] = "????? ??? ?????? ????? ?? ????";
t['18'] = "????? ?????? ?????? ?????? ????? ?????";
t['19'] = "??? ??????? ?? ???? ????? ??????? ??????? ?????? ?? ????? ?????";
t['20'] = "????? ???????";
t['21'] = "????? ??????? ????? ????? ";
t['22'] = "????? ???? ?????????";
t['23'] = "????? ???? ????????? ????? ?????";
t['24'] = "???? ???? ?????????";
t['25'] = "?????? ???? ?????????";
t['26'] = "????? ????????/??????? ??????? NPC";
t['27'] = "?????? ??? ???? ???? ???????";
t['28'] = "????? ???? ???? ??????????";
t['29'] = "??????  ??? ???? ??????????";
t['30'] = "????? ????? ??????? ??????????";
t['31'] = "????? ????? ??????? ?????????";
t['32'] = "??? ???? ?????";
t['33'] = "??? ????? ??????? ??? ???? ?????  <br>  ?????? ???? ?? ????? ????? ?????? ???";
t['34'] = "????? ????? ?????? ???????? ?? ???? ???????";
t['35'] = "????? ??????? ????? ?? ???? ???????";
t['36'] = "??? ??????? ???????? ??? ?????? <br> ???????? ?? ??? ????? ?? ???? ??????? ????????";
t['37'] = "????? ???? ??? ????? ???????  <br>  ?????? ?????? ???? ??????";
t['38'] = "????? ??????? ??? ??????? ???????";
t['39'] = "????? ???? ???????";
t['40'] = "????? ???? ??????? ?? ???? ?????";
t['41'] = "????? ???? ??? ????? ???????";
t['42'] = "??? ??????? ?????? ?? ???? ???????";
t['43'] = "????? ??????? ??? ???????";
t['44'] = "????? ??????? ??? ??????? ???????";
t['45'] = "????? ????? ?????? ??? ????? ??????? ";
t['46'] = "??? ??????? ?????? ?? ???? ?? ????";
t['47'] = "????? ??? ????? ??? ????? ?? ?????";
t['48'] = "??? ????? ?????? <br> ?? '????? => ????' <br> (????? ????????? = 1 ?? ???? ? ???? ?????? = 5)";
t['49'] = "???????? ????????? ?? ???? ??????";
t['50'] = "??? ??????? ?? <br> ????? \"?????? ???????\"";
t['51'] = "????? ??? ???? ?? ???? ??????";
t['52'] = "????? ?????????? ?? ????? ??? ????";
t['53'] = "????? ??????? ??????";
t['54'] = "????? ??????? ? ????? ????? ????????";
t['55'] = "??? ???? ?????? ?? ????? ??????? ???? ??????";
t['56'] = "??? ??? ?????? <br> ??? ?????? ??????? ??? ???????";
t['57'] = "????? ???????? & ?????";
t['58'] = "????? ???? ???????? ( ????? / ??????? ??????? )";
t['59'] = "??? ??????? ?? ???????/???????? <br> (????? ????????? = 1 ?? ???? ? ???? ?????? = 5)";
t['60'] = "????? ????? ???? ??????? ?? ????? ??????";
t['61'] = "????? ???? \"??? ??????\" ??? ???? ????????";
t['62'] = "????? ?????? \"????? ?????\"";
t['63'] = "??? ?????????? ?? ?????? ???????";
t['64'] = "????? ???????? ?? ????? ?????????";
t['65'] = "??? ??????? ???? <br> ?????? ???? = ???????)";
t['66'] = "??? ???? ?????? <br> (?????? ???? = ???????)";
t['67'] = "??? ??????? ?? ???? <br> (?????? ???? = ???????)";
t['68'] = "??? ??????? ?? ???? NPC <br> (?????? ???? = ???????)";
t['69'] = "????? ?????? ??? ?????? ??????? ????????? <br> (????????? = 0 ?? ????? ????)";
t['82.L'] = "????? ???? ???????   ????? ?????? ( ???? ???? ???";
t['82.U'] = "??? ???? ???????   ????? ?????? ( ???? ???? ???)";
t['U.2'] = "???????";
t['U.3'] = "??? ??????? <br> ?? ????? ???????, ??? ?? ?????? ????? ???????";
t['U.6'] = "???????? ??????? <br> ?? ????? ???????, ??? ?? ?????? ????? ???????";
t['SIM'] = "????? ???????";
t['QSURE'] = "?? ??? ??????";
t['LOSS'] = "???????";
t['PROFIT'] = "???????";
t['EXTAV'] = "????";
t['PLAYER'] = "??????";
t['VILLAGE'] = "??? ??????";
t['POPULATION'] = "??????";
t['COORDS'] = "??????????";
t['MAPTBACTS'] = "?????";
t['SAVED'] = "?? ??? ?????????";
t['YOUNEED'] = "?????";
t['TODAY'] = "?????";
t['TOMORROW'] = "????";
t['DAYAFTERTOM'] = "??? ????";
t['MARKET'] = "?????";
t['BARRACKS'] = "??????";
t['RAP'] = "???? ??????";
t['STABLE'] = "???????";
t['WORKSHOP'] = "??????? ???????";
t['SENDRES'] = "????? ???????";
t['BUY'] = "????";
t['SELL'] = "???";
t['SENDIGM'] = "????? ?????";
t['LISTO'] = "????";
t['ON'] = "???";
t['AT'] = "??";
t['EFICIENCIA'] = "????????";
t['NEVER'] = "????";
t['ALDEAS'] = "??????-?????";
t['TIEMPO'] = "?????";
t['OFREZCO'] = "?????";
t['BUSCO'] = "?????";
t['TIPO'] = "?????";
t['DISPONIBLE'] = "??? ??????";
t['CUALQUIERA'] = "??";
t['YES'] = "???";
t['NO'] = "??";
t['LOGIN'] = "????? ??????";
t['MARCADORES'] = "???????";
t['ANYADIR'] = "????? ???? +??";
t['UBU'] = "?? ?????? ???";
t['UBT'] = "?? ?? ?????? ???";
t['DEL'] = "???";
t['MAPA'] = "???????";
t['MAXTIME'] = "???? ?????? ?????";
t['ARCHIVE'] = "???????";
t['SUMMARY'] = "??????";
t['TROPAS'] = "??????";
t['CHKSCRV'] = "???? ??? ?????? ??????? ??????";
t['ACTUALIZAR'] = "????? ??????? ??????";
t['VENTAS'] = "??? ??????";
t['MAPSCAN'] = "??? ???????";
t['BIC'] = "????????? ????????";
t['SAVE'] = "???";
t['AT2'] = "??????";
t['AT3'] = "????: ????";
t['AT4'] = "????: ?????";
t['NBSA'] = "??????";
t['NBSN'] = "???? (?????)";
t['NBSB'] = "??? ?????? (?????)";
t['NBHAX'] = "????? ?????? ????????";
t['NBHK'] = "?????? ???????";
t['NPCSAVETIME'] = "???: ";
t['TOTALTROOPS'] = "????? ?????? ?? ??????";
t['SELECTALLTROOPS'] = "?????? ?? ??????";
t['PARTY'] = "??????????";
t['CPPERDAY'] = "???? ?????? ??????";
t['SLOT'] = "??? ????";
t['TOTAL'] = "???????";
t['SELECTSCOUT'] = "?????? ???????";
t['SELECTFAKE'] = "?????? ???? ????";
t['ALL'] = "????";
t['SH2'] = "????? ????? ??????? ??????:<br>- green ?? red ??  orange, ???.<br>- ??? ????? ??? #004523<br>- ???? ???? ????? ?????????";
t['SOREP'] = "????? ?????? ??????? ???????";
t['WSIMO1'] = "????? (????? ??????? ??????)";
t['WSIMO2'] = "????? (????? ??????? ?????? kirilloid.ru)";
t['NONEWVER'] = "???? ???? ????";
t['BVER'] = "?? ???? ???? ???? ???????";
t['NVERAV'] = "???? ???? ????? ?? ???????";
t['UPDSCR'] = "?? ???? ????? ??????? ?????";
t['CHECKUPDATE'] = "?????? ?? ???? ????? ???????. ?????? ????????...";
t['AVPPV'] = "????? ??? ?????? ?????? ??????? ";
t['AVPPP'] = "????? ??? ?????? ????? ??????";
t['MAX'] = "???? ??????";
t['TOTTRTR'] = "?????? ?????? ???? ??? ???????";
t['TB3SL'] = "??????? ??????? ??????";
t['UPDALLV'] = "????? ???? ?????. ?? ???????? ????? ??? ???? ???? ??? ??? ????? !";
t['LARGEMAP'] = "????? ?????";
t['USETHEMPR'] = "????????? (??????)";
t['USETHEMEQ'] = "????????? (????????)";
t['TOWNHALL'] = "???????";
t['GSRVT'] = "????? ??????";
t['ACCINFO'] = "??????? ??????";
t['NBO'] = "???? ?????????";
t['MNUL'] = "??????? ??? ?????? ??????";
t['STAT'] = "????????";
t['RESF'] = "???? ???????";
t['VLC'] = "???? ??????";
t['MAPO'] = "?????? ???????";
t['COLO'] = "?????? ???????";
t['DBGO'] = "?????? ???????";
t['HEROSMANSION'] = "??? ???????";
t['BLACKSMITH'] = "??????";
t['ARMOURY'] = "?????? ???????";
t['NOW'] = "????";
t['CLOSE'] = "?????";
t['USETHEM1H'] = "????????? (1 ???? ???????)";
t['OVERVIEW'] = "?????";
t['FORUM'] = "???????";
t['ATTACKS'] = "???????";
t['NEWS'] = "???????";
t['ADDCRTPAGE'] = "????? ?? ?????? ???????";
t['SCRPURL'] = "???? ??? ???? ?????? ??????? ???????";
t['SPACER'] = "????? ????";
t['MEREO'] = "????? & ??????";
t['ATTABLES'] = "???? ??????";
t['MTW'] = "??????";
t['MTX'] = "??????";
t['MTC'] = "??????? ???????";
t['ALFL'] = "???? ????? ??????? <br> (?????? ???? = ??? ??? ??????? ?????)";
t['MTCL'] = "??? ????";
t['CKSORT'] = "???? ??????";
t['MIN'] = "??????";
t['SVGL'] = "??? ????? ??? ?????";
t['VGL'] = "????? ??????";
t['UPDATEPOP'] = "????? ??????";
t['EDIT'] = "?????";
t['NPCO'] = "?????? ???????? NPC";
t['NEWVILLAGEAV'] = "???????/?????";
t['TIMEUNTIL'] = "????? ?????? ????????";
t['CENTERMAP'] = "????? ??? ?????? ??? ???????";
t['SENDTROOPS'] = "????? ??????";
t['PALACE'] = "?????";
t['RESIDENCE'] = "?????";
t['ACADEMY'] = "??????????";
t['TREASURY'] = "??????";
t['UPGTB'] = "???? ??????? ( ???????/?????? )";
t['RBTT'] = "???? ???????";
t['USE'] = "???????";
t['RESIDUE'] = "??????? ??? ?????? ";
t['RESOURCES'] = "??????? ??? ?????? ";
t['SH1'] = "???? ????? ??????? ?????? ??????? ???????? ??? ??????? <br> ???? ?????? ????? ???????? ??? ??? ??????? ??? ?? ?????? ??? ???? ??????";
t['RESEND'] = "????? ??? ???? ?";
t['WSI'] = "????? ??????? ???? ??????";
t['CROPFINDER'] = "??? ?? ????? ???????";
break;

case 'ar': //contributors: Leonel (aka Phob0z), Gabraham
case 'cl':
case 'mx':
t['1'] = "Servidor Travian v2.x?";
t['2'] = "Quitar banners publicitarios";
t['3'] = "Forzar el cálculo de capacidad de Legionarios y Falanges según T3.1<br>(para servidores mixtos T3.1 & T3.5)";
t['4'] = "Mercado";
t['5'] = "Plaza de reuniones/Cuartel/Taller/Establo";
t['6'] = "Ayuntamiento/Hogar del H&eacute;roe/Armer&iacute;a/Herrer&iacute;a";
t['7'] = "Palacio/Residencia/Academia/Tesoro";
t['8'] = "Alianza";
t['9'] = "Mostrar enlaces adicionales en el menu de la izquierda<br>(Traviantoolbox, World Analyser, Travilog, Map, etc.)";
t['10'] = "&iquest;Qu&eacute; simulador de combate usar?:<br>(men&uacute; izquierdo)";
t['12'] = "Mostrar enlaces 'dorf1.php' y 'dorf2.php'";
t['13'] = "Mostrar ícono \"Centrar mapa sobre esta aldea\"";
t['14'] = "Mostrar ícono 'Enviar tropas/Enviar recursos' en lista de aldeas";
t['16'] = "Mostrar producción efectiva de cereales en lista de aldeas";
t['17'] = "Mostrar cantidad de habitantes en lista de aldeas";
t['18'] = "Mostrar lista de aldeas adicional (2 columnas) como ventana flotante";
t['19'] = "Mostrar información acerca de edificios en construcción y movimiento de tropas<br>en lista de aldeas";
t['20'] = "Mostrar marcadores";
t['21'] = "Mostrar 'marcadores' como ventana flotante";
t['22'] = "Mostrar hoja de notas";
t['23'] = "Mostrar 'hoja de notas' como ventana flotante";
t['24'] = "Tama&ntilde;o de la hoja de notas";
t['25'] = "Altura de la hoja de notas";
t['27'] = "&iquest;Qu&eacute; analizador usar para las estad&iacute;sticas?";
t['28'] = "Mostrar enlaces del analizador de estadisticas<br>(icono del mundo al lado de usuarios/alianzas)";
t['29'] = "Analizador de Mapas a ser usado";
t['30'] = "Mostrar vínculo a mapa, para un usuario";
t['31'] = "Mostrar vínculo a mapa, para una alianza";
t['32'] = "Mostrar 'Buscador'";
t['33'] = "Mostrar 'Buscador' como ventana flotante";
t['34'] = "Mostrar PC/día en tablas de actualización";
t['35'] = "Mostrar consumo de cereales en tablas de actualización";
t['36'] = "Mostrar los cálculos de 'Hasta entonces/Excedentes'<br>en las tablas de entrenamiento/mejora";
t['37'] = "Mostrar la tabla de actualizaci&oacute;n de los recursos";
t['38'] = "Mostrar colores en el nivel de los recursos";
t['39'] = "Mostrar tabla 'Barras de Recursos'";
t['40'] = "Mostrar tabla 'Barras de Recursos' como ventana flotante";
t['41'] = "Mostrar la tabla de actualizaci&oacute;n de las construcciones";
t['42'] = "Ordenar edificios por su nombre en tablas de actualización";
t['43'] = "Mostrar el nivel de las construcciones en el centro de la aldea";
t['44'] = "Mostrar colores en el nivel de las construcciones";
t['45'] = "Mostrar nivel parpadeando en los edificios que están siendo ampliados";
t['46'] = "Mostrar información adicional para cada mercader en camino";
t['48'] = "P&aacute;ginas mostradas en la secci&oacute;n 'Comprar' del mercado<br>(Valor por defecto = 1)";
t['49'] = "Opci&oacute;n por defecto cuando se mandan tropas";
t['50'] = "N° de esp&iacute;as para selecionar por defecto en \"Seleccionar espías\"";
t['53'] = "Mostrar informaci&oacute;n de tropas en tooltips";
t['54'] = "Mostrar tiempos y distancias a aldeas en tooltips";
t['56'] = "Mostrar el tipo de casilla al ponerle el cursor encima";
t['57'] = "Mostrar distancias y tiempos en tooltips";
t['58'] = "Mostrar tabla de Jugadores/Aldeas/Oasis ocupados";
t['59'] = "N&uacute;mero de pag&iacute;nas de mensajes/reportes precargadas<br>(Valor por defecto = 1)";
t['60'] = "Mostrar vínculos para abrir mensajes/informes como ventanas emergentes";
t['61'] = "Mostrar la tabla \"Borrar todo\" en la página de Informes";
t['62'] = "Mostrar ícono \"Enviar IGM\" también para mi";
t['63'] = "Mostrar Reportes de Batalla mejorados de TB3";
t['64'] = "Mostrar detalles en Infórmes Estadísticos";
t['65'] = "Color para las actualizaciones disponibles";
t['66'] = "Color para los niveles m&aacute;ximos";
t['67'] = "Color para las actualizaciones no disponibles";
t['68'] = "Color para actualizar por medio de NPC";
t['69'] = "Nivel de Registro de la Consola<br>SOLO PARA PROGRAMADORES O DEPURACI&Oacute;N<br>(Valor por defecto = 0)";
t['82.L'] = "Bloquear marcadores (Ocultar iconos de eliminar, subir, bajar)";
t['82.U'] = "Desbloquear marcadores (Mostrar iconos de eliminar, subir, bajar)";
t['U.2'] = "Raza";
t['U.3'] = "Nombre de tu capital<br><b>Revisa tu perfil para actualizarla</b>";
t['U.6'] = "Coordenadas de tu capital<br><b>Revisa tu perfil para actualizarla</b>";
t['SIM'] = "Simulador de combate";
t['QSURE'] = "¿Estás seguro?";
t['LOSS'] = "P&eacute;rdidas";
t['PROFIT'] = "Ganancias";
t['EXTAV'] = "Subir nivel";
t['PLAYER'] = "Jugador";
t['VILLAGE'] = "Aldea";
t['POPULATION'] = "Poblaci&oacute;n";
t['COORDS'] = "Coordenadas";
t['MAPTBACTS'] = "Acciones";
t['SAVED'] = "Guardado";
t['YOUNEED'] = "Te falta";
t['TODAY'] = "hoy";
t['TOMORROW'] = "ma&ntilde;ana";
t['DAYAFTERTOM'] = "pasado ma&ntilde;ana";
t['MARKET'] = "Mercado";
t['BARRACKS'] = "Cuartel";
t['RAP'] = "Plaza de reuniones";
t['STABLE'] = "Establo";
t['WORKSHOP'] = "Taller";
t['SENDRES'] = "Enviar recursos";
t['BUY'] = "Comprar";
t['SELL'] = "Vender";
t['SENDIGM'] = "Enviar IGM";
t['LISTO'] = "Listo";
t['ON'] = "el";
t['AT'] = "a las";
t['EFICIENCIA'] = "Eficiencia";
t['NEVER'] = "Nunca";
t['ALDEAS'] = "Aldea(s)";
t['TIEMPO'] = "Tiempo";
t['OFREZCO'] = "Ofrezco";
t['BUSCO'] = "Busco";
t['TIPO'] = "Tipo";
t['DISPONIBLE'] = "Solo disponible";
t['CUALQUIERA'] = "Cualquiera";
t['YES'] = "Si";
t['NO'] = "No";
t['LOGIN'] = "Ingresar";
t['MARCADORES'] = "Marcadores";
t['ANYADIR'] = "Añadir";
t['UBU'] = "URL del nuevo Marcador";
t['UBT'] = "Nombre del nuevo Marcador";
t['DEL'] = "Eliminar";
t['MAPA'] = "Mapa";
t['MAXTIME'] = "Tiempo m&aacute;ximo";
t['ARCHIVE'] = "Archivar";
t['SUMMARY'] = "Resumen";
t['TROPAS'] = "Tropas";
t['CHKSCRV'] = "Actualice TBeyond";
t['ACTUALIZAR'] = "Actualizar informaci&oacute;n de aldea";
t['VENTAS'] = "Guardar ofertas";
t['MAPSCAN'] = "Escanear el Mapa";
t['BIC'] = "Mostrar iconos de acceso r&aacute;pido";
t['SAVE'] = "Guardar";
t['AT2'] = "Refuerzos";
t['AT3'] = "Ataque: Normal";
t['AT4'] = "Ataque: Asalto";
t['NBSA'] = "Automático";
t['NBSN'] = "Normal";
t['NBSB'] = "Grande";
t['NBHAX'] = "Expandir altura automáticamente";
t['NBHK'] = "Altura por defecto";
t['NPCSAVETIME'] = "Tiempo ahorrado: ";
t['TOTALTROOPS'] = "Tropas totales de la aldea";
t['SELECTALLTROOPS'] = "Seleccionar todas las tropas";
t['PARTY'] = "Fiesta";
t['CPPERDAY'] = "PC/día";
t['SLOT'] = "Espacios disp.";
t['TOTAL'] = "Total";
t['SELECTSCOUT'] = "Seleccionar esp&iacute;as";
t['SELECTFAKE'] = "Seleccionar unidad para fake";
t['ALL'] = "Todo";
t['SH2'] = "En los campos para escribir en el color, puedes poner:<br>- <b>green</b> o <b>red</b> o <b>orange</b>, etc.<br>- El c&oacute;digo Hexadecimal del color.<br>- D&eacute;jalo vac&iacute;o para usar el color por defecto";
t['SOREP'] = "Mostrar reporte original (para poner en foros)";
t['WSIMO1'] = "Interno (el que trae travian por defecto)";
t['WSIMO2'] = "Externo (kirilloid.ru)";
t['NONEWVER'] = "Tiene la última versión disponible";
t['BVER'] = "Tal ves tengas una versión beta";
t['NVERAV'] = "Hay una nueva versión del script disponible";
t['UPDSCR'] = "Actualizar el script?";
t['CHECKUPDATE'] = "Buscando nuevas versiones del script.<br>Por favor espera...";
t['AVPPV'] = "Poblaci&oacute;n promedio por aldea";
t['AVPPP'] = "Poblaci&oacute;n promedio por jugador";
t['MAX'] = "Max.";
t['TOTTRTR'] = "Tropas totales que se estan creando";
t['TB3SL'] = "Config. de TBeyond";
t['UPDALLV'] = "Actualizar todas las aldeas. USAR CON MUCHO CUIDADO, PUEDE LLEVAR A QUE BORREN TU CUENTA!";
t['LARGEMAP'] = "Mapa grande";
t['USETHEMPR'] = "Llenar proporcionalmente a la cantidad de cada recurso que hay en los almacenes";
t['USETHEMEQ'] = "Llenar con la misma cantidad de cada recurso";
t['TOWNHALL'] = "Ayuntamiento";
t['GSRVT'] = "Versi&oacute;n del servidor";
t['ACCINFO'] = "Información de la Cuenta";
t['NBO'] = "Hoja de notas";
t['MNUL'] = "Men&uacute; en el lado izquierdo";
t['STAT'] = "Estad&iacute;sticas";
t['RESF'] = "Campos de recursos";
t['VLC'] = "Centro de la aldea";
t['MAPO'] = "Opciones del Mapa";
t['COLO'] = "Opciones de color";
t['DBGO'] = "Opciones de depuraci&oacute;n (DEBUG)";
t['HEROSMANSION'] = "Hogar del H&eacute;roe";
t['BLACKSMITH'] = "Armer&iacute;a";
t['ARMOURY'] = "Herrer&iacute;a";
t['NOW'] = "Ahora";
t['CLOSE'] = "Cerrar";
t['USETHEM1H'] = "Llenar con 1 hora de producci&oacute;n de esta aldea";
t['OVERVIEW'] = "Resumen";
t['FORUM'] = "Foro";
t['ATTACKS'] = "Ataques";
t['NEWS'] = "Noticias";
t['ADDCRTPAGE'] = "Añadir Página Actual";
t['SCRPURL'] = "Pág. de TBeyond";
t['SPACER'] = "Separador";
t['MEREO'] = "Mensajes y Reportes";
t['ATTABLES'] = "Tabla de tropas";
t['MTW'] = "Disponible";
t['MTX'] = "Excedido";
t['MTC'] = "Carga actual";
t['ALFL'] = "V&iacute;nculo a foro externo<br>(Dejar en blanco para foro interno)";
t['MTCL'] = "Limpiar todo";
t['CKSORT'] = "Haga clic para ordenar";
t['MIN'] = "Min";
t['SVGL'] = "Compartir entre las aldeas";
t['VGL'] = "Lista de Aldeas";
t['UPDATEPOP'] = "Actualizar habitantes";
t['EDIT'] = "Editar";
t['NEWVILLAGEAV'] = "Fecha/Hora";
t['TIMEUNTIL'] = "Tiempo a esperar";
t['CENTERMAP'] = "Centrar mapa sobre esta aldea";
t['SENDTROOPS'] = "Enviar tropas";
t['PALACE'] = "Palacio";
t['RESIDENCE'] = "Residencia";
t['ACADEMY'] = "Academia";
t['TREASURY'] = "Tesoro";
t['UPGTB'] = "Tablas de actualización de Recursos y Edificios";
t['RBTT'] = "Barras de Recursos";
t['USE'] = "Usar";
t['RESIDUE'] = "Excedentes si construyes ";
t['RESOURCES'] = "Recursos";
t['SH1'] = "Abra su Perfil para detectar automáticamente la capital/coordenadas<br>Construya el cuartel para la detección automática de la raza y<br>abra entonces el centro de la aldea";
t['CROPFINDER'] = "Buscar Cultivos";
break;

case 'ba': //contributors: Nemanja
case 'hr':
t['1'] = "Travian v2.x server";
t['4'] = "Pijaca";
t['5'] = "Vojska Mjesto okupljanja/Kasarna/Radionica/Štala";
t['6'] = "Opština/Herojska vila/Kovacnica oklopa/Kovacnica oružja";
t['7'] = "Dvorac/Rezidencija/Akademija/Zgrada za blago";
t['8'] = "Alijansa";
t['9'] = "Prikazuj dodatne linkove u lijevom<br>izborniku<br>(Traviantoolbox, World Analyser, Travilog, Map, itd.)";
t['10'] = "Simulator borbe koji se koristi: (izbornik lijevo)";
t['12'] = "Prikazuj 'dorf1.php' i 'dorf2.php' linkove";
t['13'] = "Prikaži \"Centriraj kartu na ovo selo\" ikonu";
t['20'] = "Prikaži Oznake";
t['22'] = "Prikaži notes";
t['24'] = "Velicina notesa";
t['25'] = "Visina notesa";
t['26'] = "Prikazuj NPC Assistant kalkulacije/linkove";
t['27'] = "Analizator svijeta koji se koristi";
t['28'] = "Prikaži statisticke linkove analizatora";
t['37'] = "Prikazuj tablicu nadogradnje za polja resursa";
t['38'] = "Prikazuj boje nivoa resursa";
t['41'] = "Prikazuj tablicu nadogradnje za infrastrukturu";
t['43'] = "Prikaži centralne brojeve";
t['44'] = "Prikazuj boje nivoa gradevine";
t['48'] = "Proj preucitanih stranica ponude<br>dok ste na stranici za kupovinu => na Pijaci<br>(Zadano = 1)";
t['49'] = "Standardna akcija za<br>mjesto okupljanja";
t['50'] = "Broj izvidaca za \"Izaberi izvidaca\" funkciju";
t['53'] = "Prikazuj informacije o vojsci na napomenama";
t['54'] = "Prikazuj udaljenosti i vremena<br>do sela u napomenama";
t['56'] = "Prikazuj podatke o tipu/oazi celije pri prelazu miša preko mape";
t['57'] = "Prikazuj udaljenosti i vremena";
t['58'] = "Prikaži tabelu igraca/sela/oaza";
t['59'] = "Broj unaprijed ucitanih<br>poruka/izvještaja<br>(Zadano = 1)";
t['60'] = "Prikazuj linkove na otvorene<br>poruke u pop-upu";
t['61'] = "Prikaži \"Izbriši sve\" u izvještajima";
t['62'] = "Prikaži \"Pošalji IGM\" ikonu i za mene";
t['64'] = "Prikaži detalje u izvještajima";
t['65'] = "Boja dostupne nadogradnje<br>(Zadano = prazno)";
t['66'] = "Boja maksimalnog nivoa<br>(Zadano = prazno)";
t['67'] = "Boja nemoguce nadogradnje<br>(Zadano = prazno)";
t['68'] = "Boja nadogradnje pomocu NPC-a<br>(Zadano = prazno)";
t['69'] = "Nivo zapisa konzole<br>ONLY FOR PROGRAMMERS(Zadano = 0)";
t['82.L'] = "Zakljucaj Oznake (Sakrij ikone za brisanje i pomjeranje)";
t['82.U'] = "Otkljucaj Oznake (Prikaži ikone za brisanje i pomjeranje)";
t['U.2'] = "Pleme";
t['U.3'] = "Naziv glavnog grada<br>Za ažuriranje posjetite vaš profil";
t['U.6'] = "Koordinate vašeg glavnog grada<br>Za ažuriranje posjetite vaš profil";
t['SIM'] = "Simulator borbe";
t['QSURE'] = "Da li ste sigurni?";
t['LOSS'] = "Gubitak";
t['PROFIT'] = "Profit";
t['EXTAV'] = "Dostupna ekstenzija";
t['PLAYER'] = "Igrac";
t['VILLAGE'] = "Selo";
t['POPULATION'] = "Populacija";
t['COORDS'] = "Koordinate";
t['MAPTBACTS'] = "Akcije";
t['SAVED'] = "Sacuvano";
t['YOUNEED'] = "Potrebno";
t['TODAY'] = "danas";
t['TOMORROW'] = "sutra";
t['DAYAFTERTOM'] = "prekosutra";
t['MARKET'] = "Pijaca";
t['BARRACKS'] = "Kasarna";
t['RAP'] = "Mjesto okupljanja";
t['STABLE'] = "Štala";
t['WORKSHOP'] = "Radionica";
t['SENDRES'] = "Slanje resursa";
t['BUY'] = "Kupovina";
t['SELL'] = "Prodaja";
t['SENDIGM'] = "Pošalji poruku";
t['LISTO'] = "Dostupno";
t['ON'] = "za";
t['AT'] = "u";
t['EFICIENCIA'] = "Ucinkovitost";
t['NEVER'] = "Nikad";
t['ALDEAS'] = "Sela";
t['TIEMPO'] = "Vrijemo";
t['OFREZCO'] = "Nudi";
t['BUSCO'] = "Traži";
t['TIPO'] = "Tip";
t['DISPONIBLE'] = "Dostupno samo";
t['CUALQUIERA'] = "Svejedno";
t['YES'] = "Da";
t['NO'] = "Ne";
t['LOGIN'] = "Prijava";
t['MARCADORES'] = "Oznake";
t['ANYADIR'] = "Dodaj";
t['UBU'] = "Dodaj adresu u Oznake";
t['UBT'] = "Dodaj tekst u Oznake";
t['DEL'] = "Obriši";
t['MAPA'] = "Mapa";
t['MAXTIME'] = "Maksimalno vrijeme";
t['ARCHIVE'] = "Arhiva";
t['SUMMARY'] = "Rezime";
t['TROPAS'] = "Vojska";
t['CHKSCRV'] = "Update";
t['ACTUALIZAR'] = "Ažuriraj podatke o selu";
t['VENTAS'] = "Spremljenje ponude";
t['MAPSCAN'] = "Skeniraj mapu";
t['BIC'] = "Prikazuj proširene ikone";
t['SAVE'] = "Spremi";
t['AT2'] = "Pojacanje";
t['AT3'] = "Napad: normalan";
t['AT4'] = "Napad: pljacka";
t['NBSA'] = "Automatski";
t['NBSN'] = "Normalno (malo)";
t['NBSB'] = "Veliki ekran (veliko)";
t['NBHAX'] = "Automatsko proširenje visine";
t['NBHK'] = "Standardna visina";
t['NPCSAVETIME'] = "Spremi: ";
t['TOTALTROOPS'] = "Ukupna vojska sela";
t['SELECTALLTROOPS'] = "Izaberi sve vojnike";
t['PARTY'] = "Zabave";
t['CPPERDAY'] = "KP/dnevno";
t['SLOT'] = "Slot";
t['TOTAL'] = "Ukupno";
t['SELECTSCOUT'] = "Izaberi izvidaca";
t['SELECTFAKE'] = "Izaberi lažnjak";
t['ALL'] = "Sve";
t['SH2'] = "U polja boje možeš unijeti:<br>- green ili red ili  orange, itd.<br>- HEX (heksadecimalni) kod boje poput #004523<br>- ostaviti prazno za standardnu boju";
t['SOREP'] = "Prikaži originalni izvještaj (za postanje)";
t['WSIMO1'] = "Interni (iz igre)";
t['WSIMO2'] = "Eksterni (kirilloid.ru)";
t['NONEWVER'] = "Imate posljednju dostupnu verziju";
t['BVER'] = "Moguce da imate beta verziju";
t['NVERAV'] = "Dostupna je nova verzija skripte";
t['UPDSCR'] = "Nadograditi odmah?";
t['CHECKUPDATE'] = "Provjera nadogradnje skripte.<br>Molimo sacekajte...";
t['AVPPV'] = "Prosjecno populacije po selu";
t['AVPPP'] = "Prosjecno populacije po igracu";
t['MAX'] = "Maksimalno";
t['TOTTRTR'] = "Ukupno obucavane vojske";
t['TB3SL'] = "$1 Podešavanje";
t['UPDALLV'] = "Ažuriraj sva sela. KORISTITI OPREZNO JER MOŽE DOVESTI DO SUSPENZIJE NALOGA!";
t['LARGEMAP'] = "Velika mapa";
t['USETHEMPR'] = "Koristi ih (proporcionalno)";
t['USETHEMEQ'] = "Koristi ih (jednako)";
t['TOWNHALL'] = "Opština";
t['ACCINFO'] = "Informacije o nalogu";
t['NBO'] = "Notes";
t['MNUL'] = "Izbornik s lijeve strane";
t['STAT'] = "Statistika";
t['RESF'] = "Polja resursa";
t['VLC'] = "Centar sela";
t['MAPO'] = "Opcije mape";
t['COLO'] = "Opcije boje";
t['DBGO'] = "Debug opcije";
t['HEROSMANSION'] = "Herojska vila";
t['BLACKSMITH'] = "Kovacnica oružja";
t['ARMOURY'] = "Kovacnica oklopa";
t['NOW'] = "Odmah";
t['CLOSE'] = "Zatvori";
t['USETHEM1H'] = "Koristi ih (1 satna proizvodnja)";
t['OVERVIEW'] = "Pregled";
t['FORUM'] = "Forum";
t['ATTACKS'] = "Napadi";
t['NEWS'] = "Vijesti";
t['ADDCRTPAGE'] = "Dodaj trenutnu";
t['SCRPURL'] = "TBeyond";
t['SPACER'] = "Spacer";
t['MEREO'] = "Poruke & Izvještaji";
t['ATTABLES'] = "Vojne tabele";
t['MTW'] = "Škart";
t['MTX'] = "Premašuje";
t['MTC'] = "Trenutni tovar";
t['ALFL'] = "Link na eksterni forum<br>(Ostaviti prazno za interni forum)";
t['MTCL'] = "Poništi sve";
t['CKSORT'] = "Klikni da sortiraš";
t['MIN'] = "Min";
t['SVGL'] = "Djeljeno medu selima";
t['VGL'] = "Lista sela";
t['UPDATEPOP'] = "Ažuriraj populaciju";
t['EDIT'] = "Uredi";
t['NPCO'] = "NPC Assistant opcije";
t['NEWVILLAGEAV'] = "Datum/Vrijeme";
t['TIMEUNTIL'] = "Vrijeme za sacekajte";
t['CENTERMAP'] = "Centriraj kartu na ovo selo";
t['SENDTROOPS'] = "Pošalji vojsku";
t['PALACE'] = "Dvorac";
t['RESIDENCE'] = "Rezidencija";
t['ACADEMY'] = "Akademija";
t['TREASURY'] = "Zgrada za blago";
t['USE'] = "Koristi";
t['CROPFINDER'] = "Crop finder";
break;

case 'bg': //contributors: NUT 
t['1'] = "Travian v2.x ??????";
t['2'] = "???????? ?????????? ??????";
t['3'] = "??????? T3.1 ????????? & ??????? ?????????<br>(?? ??????? T3.1 & T3.5 ???????)";
t['4'] = "?????";
t['5'] = "?????? ?????/???????/???????????/???????";
t['6'] = "????????/???????/????????? ?? ??????/????????? ?? ?????";
t['7'] = "??????/??????????/????????/????????????";
t['8'] = "????";
t['9'] = "?????? ???????????? ?????? ? ?????? ????<br>(Traviantoolbox, World Analyser, Travilog, Map, ? ?.?.)";
t['10'] = "????????? ?? ?????:<br>(? ?????? ????)";
t['11'] = "????????? ?? ?????? ???????";
t['12'] = "?????? 'dorf1.php' ? 'dorf2.php' ??????";
t['13'] = "?????? \"?????\" ?????";
t['14'] = "?????? '??????? ??????/??????? ???????' ????? ? ??????? ?? ??????";
t['15'] = "?????? ?????, ?????, ?????? ????????? ?? ??? ? ??????? ?? ??????";
t['16'] = "?????? ??????????? ????????? ?? ???????? ? ??????? ?? ??????";
t['17'] = "?????? ??????????? ? ??????? ?? ??????";
t['18'] = "?????? ???????????? (2 ??????) ? ??????? ?? ?????? ? ??????? ????????";
t['19'] = "?????? ?????????? ?? ???????? ? ??????? ? ?????????? ?? ????????<br>? ??????? ?? ??????";
t['20'] = "?????? ?????????";
t['21'] = "?????? '????????????? ???????' ? ??????? ????????";
t['22'] = "?????? ???????";
t['23'] = "?????? '????????' ? ??????? ????????";
t['24'] = "?????? ?? ?????????";
t['25'] = "?????? ??????? - ????????";
t['26'] = "?????? NPC ???????? ??????????/??????";
t['27'] = "???????? ??????????";
t['28'] = "?????? ?????? ??? ???????????";
t['29'] = "?????????? ?? ???????";
t['30'] = "?????? ?????? ??? ????????????? ? ???????";
t['31'] = "?????? ?????? ??? ??????? ? ???????";
t['32'] = "?????? '????? ?? ???????'";
t['33'] = "?????? '????? ?? ???????' ? ??????? ????????";
t['34'] = "?????? ??/??? ?????????? ? ?????????";
t['35'] = "?????? ???????????? ?? ???????? ? ?????????";
t['36'] = "?????? '??????/???????' ?????????? ? ????????/???????? ?????????";
t['37'] = "?????? ??????? ? ???????????? ?? ?????????? ??????";
t['38'] = "?????? ?????? ???? ?? ?????????";
t['39'] = "?????? '????? ?? ?????????' ???????";
t['40'] = "?????? '????? ?? ?????????' ??????? ? ??????? ????????";
t['41'] = "?????? ??????? ? ???????????? ?? ????????";
t['42'] = "???????? ???????? ?? ??? ? ?????????";
t['43'] = "?????? ?????? ?? ????????";
t['44'] = "?????? ?????? ???? ?? ????????";
t['45'] = "?????? ?????? ???? ?? ???????? ????? ?? ??????????";
t['46'] = "?????? ???????????? ?????????? ?? ????? ?????????? ????????";
t['48'] = "???? ???????? ? ?????? ?? ????????????<br>?????? ? ? '?????? => ????' ????????<br>(Default = 1)";
t['49'] = "?????? ????? ???????? ????????";
t['50'] = "??. ?? ???????? ??<br>\"?????? ??????\" ???????";
t['53'] = "?????? ?????????? ?? ???????? ? tooltips";
t['54'] = "?????? ???????????? ? ??????? ?? ?????? ? tooltips";
t['56'] = "?????? ?????????? ?? ????/??????<br>?????? ???????? ? ??????? ????? ???????";
t['57'] = "?????? ???????????? & ???????";
t['58'] = "?????? ??????? ?? ????????/??????/???????? ??????";
t['59'] = "???? ?????????/??????? ???????? ?? ????????????<br>(Default = 1)";
t['60'] = "?????? ?????? ??? ???????????/????????? ? ??????? ?? ????????";
t['61'] = "?????? \"?????? ??????\" ??????? ? ?????????? ? ?????????";
t['62'] = "?????? \"??????? ????? ?????????\" ????? ?? ??? ????";
t['63'] = "?????? TB3 ???????? ?????? ?? ?????";
t['64'] = "?????? ??????? ? ?????????";
t['65'] = "????????? ??????? ?? ?????<br>(Default = Empty)";
t['66'] = "???? ?? ?????????? ????<br>(Default = Empty)";
t['67'] = "?????????? ????? ?? ?????<br>(Default = Empty)";
t['68'] = "????? ?? ????? ???? NPC<br>(Default = Empty)";
t['69'] = "???? ?? LOG<br>???? ?? ???????????<br>(Default = 0)";
t['82.L'] = "??????? ????????? (????? ?????????, ??????? ??????, ??????? ?? ???? ?? ???????)";
t['82.U'] = "??????? ????????? (?????? ?????????, ??????? ??????, ??????? ?? ???? ?? ???????)";
t['U.2'] = "????";
t['U.3'] = "??? ?? ?????? ???????<br>?????? ???? ?????? ?? ??????????";
t['U.6'] = "?????????? ?? ?????? ???????<br>?????? ???? ?????? ?? ??????????";
t['SIM'] = "????????? ?? ?????";
t['QSURE'] = "??????? ?? ????";
t['LOSS'] = "??????";
t['PROFIT'] = "???????";
t['EXTAV'] = "???????? ????????????";
t['PLAYER'] = "?????";
t['VILLAGE'] = "????";
t['POPULATION'] = "?????????";
t['COORDS'] = "??????????";
t['MAPTBACTS'] = "????????";
t['SAVED'] = "????????? ?? ????????";
t['YOUNEED'] = "????? ????? ??";
t['TODAY'] = "????";
t['TOMORROW'] = "????";
t['DAYAFTERTOM'] = "? ????? ???";
t['MARKET'] = "?????";
t['BARRACKS'] = "???????";
t['RAP'] = "?????? ?????";
t['STABLE'] = "???????";
t['WORKSHOP'] = "???????????";
t['SENDRES'] = "??????? ???????";
t['BUY'] = "????";
t['SELL'] = "??????";
t['SENDIGM'] = "??????? ????? ?????????";
t['LISTO'] = "????????";
t['ON'] = "??";
t['AT'] = "?";
t['EFICIENCIA'] = "??????????";
t['NEVER'] = "??????";
t['ALDEAS'] = "????(?)";
t['TIEMPO'] = "?????";
t['OFREZCO'] = "??????????";
t['BUSCO'] = "???????";
t['TIPO'] = "???";
t['DISPONIBLE'] = "???? ??????????";
t['CUALQUIERA'] = "??????";
t['YES'] = "??";
t['NO'] = "??";
t['LOGIN'] = "???????";
t['MARCADORES'] = "???????";
t['ANYADIR'] = "?????????";
t['UBU'] = "???? ??????? URL";
t['UBT'] = "???? ??????? ?????";
t['DEL'] = "?????????";
t['MAPA'] = "?????";
t['MAXTIME'] = "?????????? ?????";
t['ARCHIVE'] = "?????";
t['SUMMARY'] = "????";
t['TROPAS'] = "??????";
t['CHKSCRV'] = "?????? TBeyond";
t['ACTUALIZAR'] = "?????? ???????????? ?? ??????";
t['VENTAS'] = "?????? ????????";
t['MAPSCAN'] = "???????? ???????";
t['BIC'] = "?????? ???????????? ?????";
t['SAVE'] = "????????:";
t['AT2'] = "????????????";
t['AT3'] = "?????: ????????";
t['AT4'] = "?????: ?????";
t['NBSA'] = "???????????";
t['NBSN'] = "???????? (?????)";
t['NBSB'] = "????? ????? (??????)";
t['NBHAX'] = "??????????? ??????? ??????????";
t['NBHK'] = "?????????? ????????";
t['NPCSAVETIME'] = "??????: ";
t['TOTALTROOPS'] = "???? ?????? ?? ??????";
t['SELECTALLTROOPS'] = "???????? ?????? ??????";
t['PARTY'] = "???????????";
t['CPPERDAY'] = "??/???";
t['SLOT'] = "????";
t['TOTAL'] = "????";
t['SELECTSCOUT'] = "?????? ???????";
t['SELECTFAKE'] = "?????? ??????";
t['ALL'] = "??????";
t['SH2'] = "? ???????? ?????? ????? ?? ????????:<br>- orange ??? red ??? green, ? ?.?.<br>- HEX ???? ?????? #004523<br>- ?????? ?????? ?? ??????????? ????";
t['SOREP'] = "?????? ??????????? ??????";
t['WSIMO1'] = "???????? (????????? ?? ??????)";
t['WSIMO2'] = "?????? (????????? ?? kirilloid.ru)";
t['NONEWVER'] = "????? ?????????? ???????? ??????";
t['BVER'] = "??? ??????????? ? ???? ??????";
t['NVERAV'] = "??? ???? ?????? ?? ???????";
t['UPDSCR'] = "?????? ???????? ?? ??????? ???? ?";
t['CHECKUPDATE'] = "???????? ?? ???????????.<br>???? ?????????...";
t['AVPPV'] = "?????? ????????? ?? ??????";
t['AVPPP'] = "?????? ????????? ?? ?????";
t['MAX'] = "??????????";
t['TOTTRTR'] = "???? ????????? ???????";
t['TB3SL'] = "$1 ?????????";
t['UPDALLV'] = "?????? ?? ?????? ????. ????????? ? ?????????? ???????? ?? ?? ?? ????? ??????? !";
t['LARGEMAP'] = "?????? ?????";
t['USETHEMPR'] = "????????? ?? (??????????????)";
t['USETHEMEQ'] = "????????? ?? (?? ?????)";
t['TOWNHALL'] = "????????";
t['GSRVT'] = "?????? ?? ??????";
t['ACCINFO'] = "?????????? ?? ???????";
t['NBO'] = "????????";
t['MNUL'] = "???? ?? ?????? ??????";
t['STAT'] = "??????????";
t['RESF'] = "???????? ??????";
t['VLC'] = "??????";
t['MAPO'] = "????? ?? ???????";
t['COLO'] = "????? ?? ?????";
t['DBGO'] = "Debug ?????";
t['HEROSMANSION'] = "???????";
t['BLACKSMITH'] = "????????? ?? ??????";
t['ARMOURY'] = "????????? ?? ?????";
t['NOW'] = "????";
t['CLOSE'] = "???????";
t['USETHEM1H'] = "????????? ?? (1 ?????? ?????????)";
t['OVERVIEW'] = "??? ??????";
t['FORUM'] = "?????";
t['ATTACKS'] = "?????";
t['NEWS'] = "??????";
t['ADDCRTPAGE'] = "?????? ??????";
t['SCRPURL'] = "TBeyond ????????";
t['SPACER'] = "??????????";
t['MEREO'] = "????????? & ???????";
t['ATTABLES'] = "??????? ?? ????????";
t['MTW'] = "???????";
t['MTX'] = "? ???????";
t['MTC'] = "????? ?????";
t['ALFL'] = "?????? ??? ?????<br>(?????? ?????? ?? ????????? ?????)";
t['MTCL'] = "??????? ??????";
t['CKSORT'] = "??????? ?? ?????????";
t['MIN'] = "?????????";
t['SVGL'] = "???????????? ????? ??????";
t['VGL'] = "?????? ?? ??????";
t['UPDATEPOP'] = "?????? ???????????";
t['EDIT'] = "???????";
t['NPCO'] = "NPC ????? ?? ?????";
t['NEWVILLAGEAV'] = "????/???";
t['TIMEUNTIL'] = "????? ?? ?????????";
t['CENTERMAP'] = "?????";
t['SENDTROOPS'] = "??????? ??????";
t['PALACE'] = "??????";
t['RESIDENCE'] = "??????????";
t['ACADEMY'] = "????????";
t['TREASURY'] = "????????????";
t['UPGTB'] = "???????? ??????/?????? ???????";
t['RBTT'] = "????? ?? ?????????";
t['USE'] = "?????????";
t['RESIDUE'] = "??????? ??? ????????? ";
t['RESOURCES'] = "???????";
t['SH1'] = "?????? ???? ?????? ?? ??????????? ???????? ?? ???????/??????????<br>??????? ??????? ?? ??????????? ???????? ?? ?????? ? ????? ?????? ???????";
t['CROPFINDER'] = "??????? ?? ????";
break;

case 'br': //contributors: Bruno Guerreiro - brunogc@limao.com.br
t['1'] = "Travian v2.x server";
t['4'] = "Mercado";
t['5'] = "Ponto de encontro/Quartel/Oficina/Cavalaria";
t['6'] = "Edifício Principaç/Mansão do Herói/Fábrica de Armaduras/Ferreiro";
t['8'] = "Aliança";
t['9'] = "Exibir links adicionais no menu esquerdo?<br>(Traviantoolbox, World Analyser, Travilog, Map, etc.)";
t['12'] = "Mostrar 'dorf1.php' and 'dorf2.php' links";
t['20'] = "Exibir favoritos";
t['22'] = "Exibir bloco de anotações";
t['24'] = "Tamanho do bloco de anotações";
t['25'] = "Altura do bloco de anotações";
t['37'] = "Exibir recursos disponíveis para elevar";
t['38'] = "Exibir cores nos recursos";
t['41'] = "Exibir construções disponíveis para elevar";
t['43'] = "Exibir níveis de construção";
t['44'] = "Exibir cores nos edifícios";
t['48'] = "Number of offer pages to preload<br>while on the 'Market => Buy' page<br>(Default = 1)";
t['49'] = "Ação padrão do Ponto de Encontro";
t['50'] = "Nº de tropas espiãs<br>\"Select scout\" fuction";
t['53'] = "Mostrar informações de tropas";
t['57'] = "Exibir distâncias e tempos";
t['59'] = "Número de mensagens/relatórios por página<br>(Default = 1)";
t['65'] = "Cores disponíveis<br>(Default = Empty)";
t['66'] = "Cor de nível máximo<br>(Default = Empty)";
t['67'] = "Cor de não disponível<br>(Default = Empty)";
t['68'] = "Cor de atualização via NPC<br>(Default = Empty)";
t['69'] = "Console Log Level<br>ONLY FOR PROGRAMMERS OR DEBUGGING<br>(Default = 0)";
t['82.L'] = "Fechar favoritos (ocultar ícones de edição)";
t['82.U'] = "Abrir Favoritos (Mostrar ícones de edição)";
t['U.2'] = "Raça";
t['U.3'] = "Nome da sua capital<br>Visite seu perfil";
t['U.6'] = "Coordenadas da sua capital<br>Visite seu perfil";
t['SIM'] = "Simulador de Combate";
t['QSURE'] = "Tem certeza?";
t['LOSS'] = "Perdas";
t['PROFIT'] = "Lucro";
t['EXTAV'] = "Recursos suficientes";
t['PLAYER'] = "Jogador";
t['VILLAGE'] = "Aldeia";
t['POPULATION'] = "População";
t['COORDS'] = "Coords";
t['MAPTBACTS'] = "Ações";
t['SAVED'] = "Configurações salvas";
t['YOUNEED'] = "Você precisa";
t['TODAY'] = "hoje";
t['TOMORROW'] = "amanhã";
t['DAYAFTERTOM'] = "depois de amanhã";
t['MARKET'] = "Mercado";
t['BARRACKS'] = "Quartel";
t['RAP'] = "Enviar tropas";
t['STABLE'] = "Cavalaria";
t['WORKSHOP'] = "Oficina";
t['SENDRES'] = "Enviar recursos";
t['BUY'] = "Comprar";
t['SELL'] = "Vender";
t['SENDIGM'] = "Enviar IGM";
t['LISTO'] = "Disponível";
t['ON'] = "em";
t['AT'] = "as";
t['EFICIENCIA'] = "Eficiência";
t['NEVER'] = "Nunca";
t['ALDEAS'] = "Aldeias";
t['TIEMPO'] = "Tempo";
t['OFREZCO'] = "Oferecendo";
t['BUSCO'] = "Procurando";
t['TIPO'] = "Tipo";
t['DISPONIBLE'] = "Somente disponível?";
t['CUALQUIERA'] = "Qualquer";
t['YES'] = "Sim";
t['NO'] = "Não";
t['LOGIN'] = "Login";
t['MARCADORES'] = "Favoritos";
t['ANYADIR'] = "Adicionar";
t['UBU'] = "URL do novo favorito";
t['UBT'] = "Texto do novo favorito";
t['DEL'] = "Deletar";
t['MAPA'] = "Mapa";
t['MAXTIME'] = "Tempo máximo";
t['ARCHIVE'] = "Arquivo";
t['SUMMARY'] = "Sumário";
t['TROPAS'] = "Tropas";
t['CHKSCRV'] = "Atualizar TBeyond";
t['ACTUALIZAR'] = "Atualizar informação da aldeia";
t['VENTAS'] = "Ofertas salvas";
t['MAPSCAN'] = "Analisar mapa";
t['BIC'] = "Exibir ícones adicionais";
t['SAVE'] = "Salvo";
t['AT2'] = "Reforço";
t['AT3'] = "Ataque: Normal";
t['AT4'] = "Ataque: Assalto";
t['NBSA'] = "Auto";
t['NBSN'] = "Normal (pequeno)";
t['NBSB'] = "Grande";
t['NBHAX'] = "Altura automática";
t['NBHK'] = "Altura padrão";
t['NPCSAVETIME'] = "Salvo: ";
t['TOTALTROOPS'] = "Total de tropas da aldeia";
t['SELECTALLTROOPS'] = "Selecionar todas as tropas";
t['PARTY'] = "Festividades";
t['CPPERDAY'] = "CP/dia";
t['SLOT'] = "Slot";
t['TOTAL'] = "Total";
t['SELECTSCOUT'] = "Enviar espiões";
t['SELECTFAKE'] = "Enviar fakes";
t['ALL'] = "Todos";
t['SOREP'] = "Exibir relatório original";
t['WSIMO1'] = "Interno (provided by the game)";
t['WSIMO2'] = "Externo (provided by kirilloid.ru)";
t['NONEWVER'] = "Você tem a última versão instalada.";
t['BVER'] = "VOcê tem uma versão beta.";
t['NVERAV'] = "Uma nova versão do script foi encontrada";
t['UPDSCR'] = "Atualizar script agora ?";
t['CHECKUPDATE'] = "Checando novas atualizações.<br>Aguarde...";
t['AVPPV'] = "Média de população por aldeia";
t['AVPPP'] = "Média de população por jogadores";
t['MAX'] = "Máximo";
t['TOTTRTR'] = "Total de tropas sendo treinadas";
t['TB3SL'] = "Configurações do Script";
t['UPDALLV'] = "Atualizar todas as aldeias.  UTILIZAR COM O MÁXIMO DE CAUTELA, ESSA FUNÇÃO PODE FAZER SUA CONTA SER BANIDA DO JOGO !";
t['LARGEMAP'] = "Mapa maior";
t['USETHEMPR'] = "Usar tudo (proporcional)";
t['USETHEMEQ'] = "Usar tudo (equilibrar)";
t['TOWNHALL'] = "Edifício Principal";
t['NBO'] = "Bloco de anotações";
t['MNUL'] = "Menu on the left side";
t['STAT'] = "Statistics";
t['RESF'] = "Resource fields";
t['VLC'] = "Centro da Aldeia";
t['MAPO'] = "Opções de Mapa";
t['COLO'] = "Opções de Cor";
t['DBGO'] = "Opções de DEBUG";
t['HEROSMANSION'] = "Mansão do Herói";
t['BLACKSMITH'] = "Ferreiro";
t['ARMOURY'] = "Fábrica de Armaduras";
t['NOW'] = "Agora";
t['CLOSE'] = "Fechar";
t['USETHEM1H'] = "Usar tudo (1 hora de produção)";
t['OVERVIEW'] = "Visão geral";
t['FORUM'] = "Forum";
t['ATTACKS'] = "LOG de ataques";
t['NEWS'] = "Notícias";
t['ADDCRTPAGE'] = "Adicionar atual";
t['SCRPURL'] = "TBeyond page";
t['SPACER'] = "Separador";
t['MEREO'] = "Mensagens e Relatórios";
t['ATTABLES'] = "Tabela de tropas";
t['MTW'] = "Capacidade desperdiçada";
t['MTX'] = "Capacidade excedida";
t['MTC'] = "Capacidade utilizada";
t['ALFL'] = "Link para fórum externo<br>(deixe vazio o fórum interno)";
t['MTCL'] = "Apagar tudo";
t['CKSORT'] = "Click to sort";
t['MIN'] = "Mínimo";
t['SVGL'] = "Shared among villages";
t['VGL'] = "Lista de Aldeias";
t['UPDATEPOP'] = "Atualizar habitantes";
t['USE'] = "Usar";
t['RESIDUE'] = "Se construir, sobra";
t['RESOURCES'] = "Recursos";
t['CROPFINDER'] = "Localizador de CROPs";
break;

case 'cn': //contributors: ????, congxz6688
t['1'] = "Travian v2.x ???";
t['2'] = "????????????";
t['3'] = "???????????????(????????)";
t['4'] = "??";
t['5'] = "???/??/??/??";
t['6'] = "???/???/???/???";
t['7'] = "??/??/???/??";
t['8'] = "??";
t['9'] = "????????????<br>(Travilog,Traviantoolbox,TravMap,World Analyser??.)";
t['10'] = "????????????";
t['12'] = "??'dorf1.php'?'dorf2.php'???";
t['13'] = "???? ?? \"????\"???";
t['14'] = "??????'??/????'???";
t['16'] = "??????????";
t['17'] = "??????????";
t['18'] = "?????????????(??,??????)";
t['19'] = "?????????????????????";
t['20'] = "????";
t['21'] = "???????????";
t['22'] = "?????";
t['23'] = "?????????";
t['24'] = "?????";
t['25'] = "?????";
t['26'] = "??NPC????????";
t['27'] = "????????";
t['28'] = "?????????????";
t['29'] = "????????";
t['30'] = "?????????????";
t['31'] = "?????????????";
t['32'] = "?????";
t['33'] = "??????????";
t['34'] = "?????????????";
t['35'] = "????????????";
t['36'] = "????????????????????";
t['37'] = "?????????";
t['38'] = "?????????";
t['39'] = "???????";
t['40'] = "???????????";
t['41'] = "?????????";
t['42'] = "??????????(???)";
t['43'] = "???????";
t['44'] = "?????????";
t['45'] = "??????????????";
t['46'] = "????????????????";
t['48'] = "??????<br>? '?? => ??' ???<br>(?? = 1 ? ??; ?? = 5)";
t['49'] = "????????";
t['50'] = "??\"?????\"?<br>?????????";
t['53'] = "????????";
t['54'] = "?tooltip????????";
t['56'] = "??????<br>???????????";
t['57'] = "???????";
t['58'] = "?\"karte.php\"?? ??/??/?? ??";
t['59'] = "??????????<br>???????<br>(?? = 1 ? ??; ?? = 5)";
t['60'] = "?????????????";
t['61'] = "??????? \"???\"???";
t['62'] = "?? ?IGM??????";
t['63'] = "??TB3???????";
t['64'] = "?????????";
t['65'] = "???????<br>(?? = ??)";
t['66'] = "?????????<br>(?? = ??)";
t['67'] = "???????<br>(?? = ??)";
t['68'] = "???npc????????<br>(?? = ??)";
t['69'] = "???????<br>????????? ? BUG??<br>(?? = 0 or ??)";
t['82.L'] = "???? (?? ??, ??, ?????)";
t['82.U'] = "???? (?? ??, ??, ?????)";
t['U.2'] = "??";
t['U.3'] = "????<br>?????????????????,????????";
t['U.6'] = "????<br>?????????????????,????????";
t['SIM'] = "?????";
t['QSURE'] = "?????";
t['LOSS'] = "??";
t['PROFIT'] = "??";
t['EXTAV'] = "????!";
t['PLAYER'] = "??";
t['VILLAGE'] = "??";
t['POPULATION'] = "??";
t['COORDS'] = "??";
t['MAPTBACTS'] = "??";
t['SAVED'] = "???";
t['YOUNEED'] = "??";
t['TODAY'] = "??";
t['TOMORROW'] = "??";
t['DAYAFTERTOM'] = "??";
t['MARKET'] = "??";
t['BARRACKS'] = "??";
t['RAP'] = "???";
t['STABLE'] = "??";
t['WORKSHOP'] = "??";
t['SENDRES'] = "????";
t['BUY'] = "?";
t['SELL'] = "?";
t['SENDIGM'] = "??IGM";
t['LISTO'] = "????";
t['ON'] = "-";
t['AT'] = "-";
t['EFICIENCIA'] = "??";
t['NEVER'] = "????,????";
t['ALDEAS'] = "??";
t['TIEMPO'] = "??";
t['OFREZCO'] = "??";
t['BUSCO'] = "??";
t['TIPO'] = "??";
t['DISPONIBLE'] = "??????";
t['CUALQUIERA'] = "??";
t['YES'] = "?";
t['NO'] = "?";
t['LOGIN'] = "??";
t['MARCADORES'] = "??";
t['ANYADIR'] = "??";
t['UBU'] = "?????";
t['UBT'] = "?????(???????)";
t['DEL'] = "??";
t['MAPA'] = "TravMap";
t['MAXTIME'] = "??????";
t['ARCHIVE'] = "??";
t['SUMMARY'] = "??";
t['TROPAS'] = "??";
t['CHKSCRV'] = "????";
t['ACTUALIZAR'] = "????????";
t['VENTAS'] = "????";
t['MAPSCAN'] = "?????";
t['BIC'] = "????????";
t['SAVE'] = "??";
t['AT2'] = "??";
t['AT3'] = "??:??";
t['AT4'] = "??:??";
t['NBSA'] = "??";
t['NBSN'] = "?? (?)";
t['NBSB'] = "??? (?)";
t['NBHAX'] = "??????";
t['NBHK'] = "????";
t['NPCSAVETIME'] = "??????:";
t['TOTALTROOPS'] = "????????";
t['SELECTALLTROOPS'] = "??????";
t['PARTY'] = "??";
t['CPPERDAY'] = "???(??)";
t['SLOT'] = "??";
t['TOTAL'] = "??";
t['SELECTSCOUT'] = "?????";
t['SELECTFAKE'] = "????";
t['ALL'] = "??";
t['SH2'] = "????,????:<br>- green ? red ? orange, ??...<br>- ???????16???,? #004523<br>- ??????????????";
t['SOREP'] = "??????";
t['WSIMO1'] = "?? (??????)";
t['WSIMO2'] = "?? (?kirilloid.ru??)";
t['NONEWVER'] = "?????????";
t['NVERAV'] = "??????????,";
t['UPDSCR'] = "???????";
t['CHECKUPDATE'] = "????????,???...";
t['AVPPV'] = "??????";
t['AVPPP'] = "???????";
t['MAX'] = "??";
t['TOTTRTR'] = "?????????";
t['TB3SL'] = "TB??";
t['UPDALLV'] = "???????(?????????)";
t['LARGEMAP'] = "???";
t['USETHEMPR'] = "?????? (???????)";
t['USETHEMEQ'] = "?????? (????)";
t['TOWNHALL'] = "???";
t['GSRVT'] = "?????";
t['ACCINFO'] = "????";
t['NBO'] = "???";
t['MNUL'] = "????";
t['STAT'] = "??";
t['RESF'] = "????";
t['VLC'] = "????";
t['MAPO'] = "????";
t['COLO'] = "????";
t['DBGO'] = "????";
t['HEROSMANSION'] = "???";
t['BLACKSMITH'] = "???";
t['ARMOURY'] = "???";
t['NOW'] = "??";
t['CLOSE'] = "??";
t['USETHEM1H'] = "?????? (??1????)";
t['OVERVIEW'] = "??";
t['FORUM'] = "??";
t['ATTACKS'] = "??";
t['NEWS'] = "??";
t['ADDCRTPAGE'] = "????";
t['SCRPURL'] = "TB????";
t['SPACER'] = "???";
t['MEREO'] = "??&??";
t['ATTABLES'] = "?????";
t['MTW'] = "????";
t['MTX'] = "???";
t['MTC'] = "??????";
t['ALFL'] = "???????<br>(?????????)";
t['MTCL'] = "????";
t['CKSORT'] = "?????";
t['MIN'] = "??";
t['SVGL'] = "????????";
t['VGL'] = "????";
t['UPDATEPOP'] = "??????";
t['EDIT'] = "??";
t['NPCO'] = "NPC????";
t['NEWVILLAGEAV'] = "??";
t['TIMEUNTIL'] = "???????";
t['CENTERMAP'] = "????????";
t['SENDTROOPS'] = "??";
t['PALACE'] = "??";
t['RESIDENCE'] = "??";
t['ACADEMY'] = "???";
t['TREASURY'] = "??";
t['UPGTB'] = "?????????????";
t['RBTT'] = "?????";
t['USE'] = "??";
t['RESIDUE'] = "???????";
t['RESOURCES'] = "???????";
t['CROPFINDER'] = "????";
break;

case 'cz': //contributors: Rypi, JiriK
t['1'] = "Travian verze 2.x";
t['2'] = "Odstranit reklamní bannery";
t['3'] = "Vynutit výpocty kapacit Legionáru a Falang jako v T3.1<br>(pro smíšené servery T3.1 & T3.5)";
t['4'] = "Tržište";
t['5'] = "Shromaždište/Kasárny/Dílny/Stáje";
t['6'] = "Radnice/Hrdinský dvur/Zbrojnice/Kovárna";
t['7'] = "Palác/Rezidence/Akademie/Pokladnice";
t['8'] = "Aliance";
t['9'] = "Zobrazit odkazy v levém menu<br>(Traviantoolbox, World Analyser, Travilog, Mapa atd.)";
t['10'] = "Bitevní simulátor:<br>(levé menu)";
t['11'] = "Odkaz na server pro zverejnování hlášení";
t['12'] = "Zobrazit odkazy 'dorf1.php' a 'dorf2.php'";
t['13'] = "Zobrazit ikonu 'Vycentruj mapu na tuto vesnici'";
t['14'] = "Zobrazit ikonu 'Poslat jednotky/suroviny' v seznamu vesnic";
t['15'] = "Zobrazit produkci dreva, hlíny, železa za hodinu v seznamu vesnic";
t['16'] = "Zobrazit produkci obilí v seznamu vesnic";
t['17'] = "Zobrazit populaci v seznamu vesnic";
t['20'] = "Zobrazit záložky";
t['21'] = "Zobrazit 'záložky' jako okno";
t['22'] = "Zobrazit poznámkový blok";
t['23'] = "Zobrazit 'poznámkový blok' jako okno";
t['24'] = "Velikost poznámkového bloku";
t['25'] = "Výška poznámkového bloku";
t['26'] = "Zobrazit NPC pomocníky (výpocty a odkazy)";
t['27'] = "Analyser:";
t['28'] = "Zobrazit odkaz na analyser";
t['29'] = "Mapy k použití";
t['30'] = "Zobrazit odkazy na mapu pro hráce";
t['31'] = "Zobrazit odkazy na mapu pro aliance";
t['34'] = "Zobrazit KB/den v tabulce staveb";
t['35'] = "Zobrazit spotrebu obilí v tabulce staveb";
t['37'] = "Zobrazit tabulku rozšírení polí";
t['38'] = "Obarvit úrovne polí";
t['39'] = "Zobrazit tabulku 'suroviny'";
t['40'] = "Zobrazit tabulku 'suroviny' jako okno";
t['41'] = "Zobrazit tabulku rozšírení budov";
t['43'] = "Zobrazit úrovne budov";
t['44'] = "Obarvit úrovne budov";
t['45'] = "Zobrazit blikající levely pro budovy, které se staví";
t['47'] = "Zobrazit poslední transport";
t['48'] = "Pocet kontrolovaných stránek<br>na 'Tržište => Koupit'<br>(Výchozí= 1)";
t['49'] = "Výchozí vojenská akce";
t['50'] = "Pocet špehu pri použití<br>funkce poslat špehy";
t['51'] = "Zobrazit poslední útok";
t['52'] = "Zobrazit/použít sourednice posledního útoku";
t['53'] = "Informace o jednotkách pri najetí myší";
t['54'] = "Zobrazit vzdálenosti a casy pri najetí myší";
t['55'] = "Automaticky vyplnit interní bojový simulátor dostupnými jednotkami";
t['56'] = "Zobrazit typ vesnic<br>pri najetí myší na mapu";
t['57'] = "Zobrazit vzdálenosti a casy";
t['58'] = "Zobrazit tabulku hrácu/vesnic/oáz";
t['59'] = "Pocet stránek zpráv/reportu k nactení<br>(Výchozí= 1)";
t['60'] = "Zobrazit odkaz pro otevrení zprávy v novém okne.";
t['61'] = "Zobrazit tabulku \"Smazat vše\" na stránce s reporty";
t['62'] = "Zobrazit \"Poslat zprávu\" i pro me";
t['64'] = "Zobrazit detaily ve statistice reportu";
t['65'] = "Možnost vylepšení (barva)<br>(Nezadáno = Výchozí)";
t['66'] = "Maximální úroven (barva)<br>(Nezadáno = Výchozí)";
t['67'] = "Vylepšení nemožné (barva)<br>(Nezadáno = Výchozí)";
t['68'] = "Vylepšení pomocí NPC (barva)<br>(Nezadáno = Výchozí)";
t['69'] = "Console Log Level<br>ONLY FOR PROGRAMMERS OR DEBUGGING<br>(Výchozí= 0)";
t['82.L'] = "Uzamknout záložky (skryje ikony smazat a presunout)";
t['82.U'] = "Odemknout záložky (zobrazí ikony smazat a presunout)";
t['U.2'] = "Národ";
t['U.3'] = "Jméno hlavní vesnice<br><b>Pro aktualizaci navštiv svuj profil</b>";
t['U.6'] = "Souradnice hlavní vesnice<br><b>Pro aktualizaci navštiv svuj profil</b>";
t['SIM'] = "Bitevní simulátor";
t['QSURE'] = "Jsi si jistý?";
t['LOSS'] = "Materiální ztráta";
t['PROFIT'] = "Výnos";
t['EXTAV'] = "Rozšírit";
t['PLAYER'] = "Hrác";
t['VILLAGE'] = "Vesnice";
t['POPULATION'] = "Populace";
t['COORDS'] = "Souradnice";
t['MAPTBACTS'] = "Akce";
t['SAVED'] = "Uloženo";
t['YOUNEED'] = "Potrebuješ:";
t['TODAY'] = "dnes";
t['TOMORROW'] = "zítra";
t['DAYAFTERTOM'] = "pozítrí";
t['MARKET'] = "Tržište";
t['BARRACKS'] = "Kasárny";
t['RAP'] = "Shromaždište";
t['STABLE'] = "Stáje";
t['WORKSHOP'] = "Dílna";
t['SENDRES'] = "Poslat suroviny";
t['BUY'] = "Koupit";
t['SELL'] = "Prodat";
t['SENDIGM'] = "Poslat zprávu";
t['LISTO'] = "Dostupné";
t['ON'] = "v";
t['AT'] = "v";
t['EFICIENCIA'] = "Efektivita";
t['NEVER'] = "Nikdy";
t['ALDEAS'] = "Vesnic";
t['TIEMPO'] = "Cas";
t['OFREZCO'] = "Nabízí";
t['BUSCO'] = "Hledá";
t['TIPO'] = "Pomer";
t['DISPONIBLE'] = "Pouze dostupné";
t['CUALQUIERA'] = "Cokoli";
t['YES'] = "Ano";
t['NO'] = "Ne";
t['LOGIN'] = "Prihlášení";
t['MARCADORES'] = "Záložky";
t['ANYADIR'] = "Pridat";
t['UBU'] = "URL odkazu";
t['UBT'] = "Název záložky";
t['DEL'] = "Odstranit";
t['MAPA'] = "Mapa";
t['MAXTIME'] = "Maximální cas";
t['ARCHIVE'] = "Archiv";
t['SUMMARY'] = "Souhrn";
t['TROPAS'] = "Vojsko";
t['CHKSCRV'] = "Aktualizuj TBeyond";
t['ACTUALIZAR'] = "Aktualizovat informace o vesnici";
t['VENTAS'] = "Nabídky tržište (nemenit)";
t['MAPSCAN'] = "Prohledat mapu";
t['BIC'] = "Zobrazení rozširujících ikon";
t['SAVE'] = "Uložit";
t['AT2'] = "Podpora";
t['AT3'] = "Normální";
t['AT4'] = "Loupež";
t['NBSA'] = "Automatická";
t['NBSN'] = "Malý";
t['NBSB'] = "Velký";
t['NBHAX'] = "Automatická výška";
t['NBHK'] = "Výchozí výška";
t['NPCSAVETIME'] = "Ušetríš: ";
t['TOTALTROOPS'] = "Všechny jednotky vyrobené ve vesnici";
t['SELECTALLTROOPS'] = "Všechny jednotky";
t['PARTY'] = "Slavnosti";
t['CPPERDAY'] = "KB/den";
t['SLOT'] = "Sloty";
t['TOTAL'] = "Celkem";
t['SELECTSCOUT'] = "Špehy";
t['SELECTFAKE'] = "Fake";
t['ALL'] = "Vše";
t['SH2'] = "Barvy mužeš zadat jako:<br>- <b>green</b> , <b>red</b> nebo <b>orange</b> atd.<br>- HEX kód barvy napr. <b>#004523</b><br>- nechat prázdné pro výchozí barvu";
t['SOREP'] = "Zobrazit originální report";
t['WSIMO1'] = "Interní (travian.cz)";
t['WSIMO2'] = "Externí (kirilloid.ru)";
t['NONEWVER'] = "Máš poslední dostupnou verzi";
t['BVER'] = "Patrne máš betaverzi";
t['NVERAV'] = "Je dostupná nová verze";
t['UPDSCR'] = "Aktualizovat nyní?";
t['CHECKUPDATE'] = "Kontroluji novou verzi.<br>Prosím cekej...";
t['AVPPV'] = "Prumerná populace vesnic";
t['AVPPP'] = "Prumerná populace hrácu";
t['MAX'] = "Maximum";
t['TOTTRTR'] = "Celkem jednotek ve výcviku";
t['TB3SL'] = "Nastavení $1";
t['UPDALLV'] = "Aktualizovat všechny vesnice. POUŽÍVEJ VELMI OPATRNE! MUŽE VÉST K ZABLOKOVÁNÍ ÚCTU!";
t['LARGEMAP'] = "Velká mapa";
t['USETHEMPR'] = "Rozdelit (proportional)";
t['USETHEMEQ'] = "Rozdelit (equal)";
t['TOWNHALL'] = "Radnice";
t['GSRVT'] = "Herní server";
t['ACCINFO'] = "Nastavení hráce <b>Ceština: <a href=\"http://www.rypi.cz\">Rypi</a>, JiriK</b>";
t['NBO'] = "Poznámkový blok";
t['MNUL'] = "Levá nabídka";
t['STAT'] = "Statistiky";
t['RESF'] = "Surovinová pole";
t['VLC'] = "Centrum vesnice";
t['MAPO'] = "Nastavení mapy";
t['COLO'] = "Nastavení barev";
t['DBGO'] = "Ladící nastavení";
t['HEROSMANSION'] = "Hrdinský dvur";
t['BLACKSMITH'] = "Kovárna";
t['ARMOURY'] = "Zbrojnice";
t['NOW'] = "Ted";
t['CLOSE'] = "Zavrít";
t['USETHEM1H'] = "Rozdelit (1 hodinová produkce)";
t['OVERVIEW'] = "Prehled";
t['FORUM'] = "Fórum";
t['ATTACKS'] = "Útoky";
t['NEWS'] = "Novinky";
t['ADDCRTPAGE'] = "Pridat aktuální stránku";
t['SCRPURL'] = "Stránka TBeyond";
t['SPACER'] = "Oddelovac";
t['MEREO'] = "Zprávy a Hlášení";
t['ATTABLES'] = "Prehled jednotek";
t['MTW'] = "Zbývá";
t['MTX'] = "Prebývá";
t['MTC'] = "Soucasný náklad";
t['ALFL'] = "Odkaz na externí fórum<br>(nevyplneno = interní fórum)";
t['MTCL'] = "Vycistit vše";
t['CKSORT'] = "Klikni pro serazení";
t['MIN'] = "Min";
t['SVGL'] = "Pro všechny vesnice";
t['VGL'] = "Seznam vesnic";
t['UPDATEPOP'] = "Aktualizovat populaci";
t['EDIT'] = "Upravit";
t['NPCO'] = "Nastavení NPC pomocníka";
t['NEWVILLAGEAV'] = "Datum/cas";
t['TIMEUNTIL'] = "Cas cekání";
t['CENTERMAP'] = "Vycentruj mapu kolem této vesnice";
t['SENDTROOPS'] = "Poslat jednotky";
t['PALACE'] = "Palác";
t['RESIDENCE'] = "Rezidence";
t['ACADEMY'] = "Akademie";
t['TREASURY'] = "Pokladnice";
t['UPGTB'] = "Tabulka vylepšení surovinových polí/budov";
t['RBTT'] = "Tabulka surovin";
t['USE'] = "Použít";
t['RESIDUE'] = "Zbytek po postavení";
t['RESOURCES'] = "Suroviny";
t['CROPFINDER'] = "Vyhledávac MC";
break;

case 'de': //contributors: ms99
t['1'] = "Travian v2.x Server";
t['2'] = "Banners entfernen";
t['3'] = "T3.1 Tragekapazität für Legionär & Phalanx erzwingen<br>(für T3.1 & T3.5 Spieleserver)";
t['4'] = "Marktplatz";
t['5'] = "Versammlungsplatz/Kaserne/Stall/Werkstatt";
t['6'] = "Rathaus/Heldenhof/Rüstungs-/Waffenschmiede";
t['7'] = "Palast/Residenz/Akademie/Schatzkammer";
t['8'] = "Allianz";
t['9'] = "Zusätzliche Links im linken Menü anzeigen<br />(Traviantoolbox, World Analyser, Travilog, Map, usw.)";
t['10'] = "Option Kampfsimulatorlink";
t['11'] = "Option Sitelink für das Hochladen der Reports";
t['12'] = "Zeige die Links 'dorf1.php' und 'dorf2.php' an";
t['13'] = "Zeige \"Zentriere Karte auf dieses Dorf\" Icon an";
t['14'] = "Zeige 'Truppen schicken/Rohstoffe verschicken' Icons in der Liste der D&ouml;rfer an";
t['15'] = "Zeige Produktion von Holz, Lehm, Eisen pro Stunde in der Liste der Dörfer an";
t['16'] = "Zeige effektive Getreide-Produktion in the Liste der D&ouml;fer an";
t['17'] = "Zeige Anzahl der Einwohner in der Liste der D&ouml;rfer an";
t['18'] = "Zeige eine zusätzliche Dörferliste (2 Spalten) als Floating-Fenster an";
t['19'] = "Zeige Informationen über Gebäude die ausgebaut werden und<br>Truppenbewegungen in der Liste der Dörfer";
t['20'] = "Lesezeichen anzeigen";
t['21'] = "Zeige 'User Bookmarks' als Floating-Fenster an";
t['22'] = "Notizblock anzeigen";
t['23'] = "Zeige 'NoteBlock' als Floating-Fenster an";
t['24'] = "Grösse Notizblock";
t['25'] = "Notizblock: Höhe";
t['26'] = "NPC Assistent Kalkulation/Links anzeigen";
t['27'] = "Benutze World Analyser";
t['28'] = "World Analyser Statistiklinks anzeigen";
t['29'] = "Option Karten-Analyser";
t['30'] = "Links zur Karte anzeigen - Spieler";
t['31'] = "Links zur Karte anzeigen - Allianzen";
t['32'] = "Zeige 'Suche-Bar' an";
t['33'] = "Zeige 'Suche-Bar' als Floating-Fenster an";
t['34'] = "Zeige KP/Tag Info in den Upgradetabellen an";
t['35'] = "Zeige Getreide-Verbrauch in Upgradetabellen an";
t['36'] = "Zeige 'Am/Rest' Kalkulation in Upgrade/Ausbildungstabellen an";
t['37'] = "Upgradetabelle f&uuml;r Resifelder anzeigen";
t['38'] = "Ressilevel Farbcode anzeigen";
t['39'] = "Zeige die Ressi-Bar an";
t['40'] = "Zeige 'Ressi-Bar' als Floating-Fenster an";
t['41'] = "Upgradetabelle f&uuml;r Gebäude anzeigen";
t['42'] = "Sortiere Gebäude nach Name in der Upgradetabelle";
t['43'] = "Levels im Dorfzentrum anzeigen";
t['44'] = "Gebäudelevel Farbcode anzeigen";
t['45'] = "Blinkende Levels für Gebäude die gerade ausgebaut werden";
t['46'] = "Zeige zus&auml;tzliche Infos für jede Händlerankunft";
t['48'] = "Anzahl der Angebotsseiten auf der 'Markt => Kaufen' Seite,<br />die vom Server automatisch runtergeladen werden sollen (Standard = 1)";
t['49'] = "Standard Aktion Versammlungsplatz";
t['50'] = "Anzahl der Späher für die \"Späher auswählen\" Funktion";
t['53'] = "Truppeninformationen anzeigen (in Informations-Boxen)";
t['54'] = "Zeige Entfernung & Zeiten zu den Dörfern in ToolTips an";
t['56'] = "Zelltyp auf der Karte anzeigen wenn Mauszeiger &uuml;ber Zelle";
t['57'] = "Entfernungen & Zeiten anzeigen";
t['58'] = "Tabelle der Spieler/Dörfer/besetzte Oasen anzeigen";
t['59'] = "Anzahl der \"Nachrichten & Berichte\" Seiten<br />die vom Server automatisch runtergeladen werden sollen (Standard = 1)";
t['60'] = "Links um IGMs/KB in Pop-ups zu öffnen anzeigen";
t['61'] = "\"Alle löschen\" Tabelle auf Berichte Seite anzeigen";
t['62'] = "Zeige das \"Sende IGM\" Icon auch f&uuml;r mich an";
t['63'] = "Zeige TB3 erweiterte Kampfreports";
t['64'] = "Details in Berichte Statistiken anzeigen";
t['65'] = "Farbe \"Upgrade möglich\"";
t['66'] = "Farbe \"Max Level\"";
t['67'] = "Farbe \"Upgrade nicht möglich\"";
t['68'] = "Farbe \"Upgrade via NPC\"";
t['69'] = "Log Level Konsole - Nur f&uuml;r Programmierer (Standard = 0)";
t['82.L'] = "Lesezeichen sperren (Die Icons werden ausgeblendet)";
t['82.U'] = "Lesezeichen entsperren (Die Icons fürs Löschen und sortieren werden wieder angezeigt)";
t['U.2'] = "Volk";
t['U.3'] = "Name des Hauptdorfs";
t['U.6'] = "Koordinaten des Hauptdorfs";
t['SIM'] = "Kampfsimulator";
t['QSURE'] = "Sind Sie sicher?";
t['LOSS'] = "Rohstoff-Verluste";
t['PROFIT'] = "Rentabilit&auml;t";
t['EXTAV'] = "Ausbau m&ouml;glich";
t['PLAYER'] = "Spieler";
t['VILLAGE'] = "Dorf";
t['POPULATION'] = "Einwohner";
t['COORDS'] = "Koordinaten";
t['MAPTBACTS'] = "Aktion";
t['SAVED'] = "Gespeichert";
t['YOUNEED'] = "Ben&ouml;tige";
t['TODAY'] = "heute";
t['TOMORROW'] = "morgen";
t['DAYAFTERTOM'] = "&uuml;bermorgen";
t['MARKET'] = "Marktplatz";
t['BARRACKS'] = "Kaserne";
t['RAP'] = "Versammlungsplatz";
t['STABLE'] = "Stall";
t['WORKSHOP'] = "Werkstatt";
t['SENDRES'] = "H&auml;ndler schicken";
t['BUY'] = "Kaufen";
t['SELL'] = "Verkaufen";
t['SENDIGM'] = "IGM schreiben";
t['LISTO'] = "Genug";
t['ON'] = "";
t['AT'] = "um";
t['EFICIENCIA'] = "Effektivität";
t['NEVER'] = "Nie";
t['ALDEAS'] = "Dörfer";
t['TIEMPO'] = "Zeit";
t['OFREZCO'] = "Biete";
t['BUSCO'] = "Suche";
t['TIPO'] = "Tauschverhältnis";
t['DISPONIBLE'] = "Nur annehmbare Angebote";
t['CUALQUIERA'] = "Beliebig";
t['YES'] = "Ja";
t['NO'] = "Nein";
t['MARCADORES'] = "Lesezeichen";
t['ANYADIR'] = "Hinzuf&uuml;gen";
t['UBU'] = "Lesezeichen URL";
t['UBT'] = "Lesezeichen Text";
t['DEL'] = "Entfernen";
t['MAPA'] = "Karte";
t['MAXTIME'] = "Maximale Dauer";
t['ARCHIVE'] = "Archiv";
t['SUMMARY'] = "Zusammenfassung";
t['CHKSCRV'] = "Update TBeyond";
t['ACTUALIZAR'] = "Update Dorf Info";
t['VENTAS'] = "Gespeicherte Angebote";
t['BIC'] = "Zusätzliche Icons";
t['SAVE'] = "Speichern";
t['AT2'] = "Unterstützung";
t['AT3'] = "Angriff: Normal";
t['AT4'] = "Angriff: Raubzug";
t['NBSA'] = "Auto";
t['NBSN'] = "Normal (klein)";
t['NBSB'] = "Breiter Monitor (breit)";
t['NBHAX'] = "Höhe automatisch anpassen";
t['NBHK'] = "Standard Höhe";
t['NPCSAVETIME'] = "Zeitgewinn";
t['TOTALTROOPS'] = "Truppen dieses Dorfes";
t['SELECTALLTROOPS'] = "Alle Truppen ausw&auml;hlen";
t['PARTY'] = "Feste";
t['CPPERDAY'] = "KPs/Tag";
t['SLOT'] = "Slots";
t['SELECTSCOUT'] = "Späher auswählen";
t['SELECTFAKE'] = "Fake Truppen auswählen";
t['ALL'] = "Alles";
t['SH2'] = "Was man in Farbfelder eintragen kann:<br>- (Englisch) <b>green</b> oder <b>red</b> oder <b>orange</b>, etc.<br>- HEX Farbkod, z.B. <b>#004523</b><br>- leer für Standardfarbe";
t['SOREP'] = "Original Bericht anzeigen";
t['WSIMO1'] = "Intern (vom Spiel zur Verfügung gestellt)";
t['WSIMO2'] = "Extern (von der kirilloid.ru Seite)";
t['NONEWVER'] = "Sie haben die letzte Version installiert";
t['BVER'] = "Sie haben vielleicht eine Beta Version installiert";
t['NVERAV'] = "Eine neue Version des Scripts steht zur Verfügung";
t['UPDSCR'] = "Script jetzt aktualisieren ?";
t['CHECKUPDATE'] = "Es wird nach einer neuen Scriptversion gesucht.<br>Bitte warten...";
t['AVPPV'] = "Durchschnitt: Bewohner/Dorf";
t['AVPPP'] = "Durchschnitt: Bewohner/Spieler";
t['TOTTRTR'] = "Total Truppen in Ausbildung";
t['TB3SL'] = "$1 Einstellungen";
t['UPDALLV'] = "Alle Dörfer aktualisieren. BITTE MIT VORSICHT BENUTZEN, DIES KÖNNTE ZUR SPERRUNG DES ACCOUNTS FÜHREN !";
t['LARGEMAP'] = "Große Karte";
t['USETHEMPR'] = "Rohstoffe proportional verteilen";
t['USETHEMEQ'] = "Rohstoffe gleichmäßig verteilen";
t['TOWNHALL'] = "Rathaus";
t['GSRVT'] = "Server";
t['ACCINFO'] = "Account Info";
t['NBO'] = "Notizblock";
t['MNUL'] = "Menü links";
t['STAT'] = "Statistiken";
t['RESF'] = "Rohstofffelder";
t['VLC'] = "Dorfzentrum";
t['MAPO'] = "Karten Einstellung";
t['COLO'] = "Farbeinstellungen  (Standard = Leer)";
t['DBGO'] = "Fehlersuche";
t['HEROSMANSION'] = "Heldenhof";
t['BLACKSMITH'] = "Waffenschmiede";
t['ARMOURY'] = "Rüstungsschmiede";
t['NOW'] = "Jetzt";
t['CLOSE'] = "Schließen";
t['USETHEM1H'] = "1 Stundenproduktion schicken";
t['OVERVIEW'] = "Übersicht";
t['FORUM'] = "Forum";
t['ATTACKS'] = "Angriffe";
t['NEWS'] = "News";
t['ADDCRTPAGE'] = "Aktuelle Seite hinzufügen";
t['SCRPURL'] = "TB-Homepage";
t['SPACER'] = "Abstandshalter";
t['MEREO'] = "Nachrichten & Berichte";
t['ATTABLES'] = "Truppenübersicht";
t['MTW'] = "Noch verfügbaren Platz verschwendet";
t['MTX'] = "Zuviel";
t['MTC'] = "Aktuell verwendet";
t['ALFL'] = "Link externes Forum (Für internes Forum leer lassen)";
t['MTCL'] = "Alle entfernen";
t['CKSORT'] = "Zum Sortieren klicken";
t['MIN'] = "Min";
t['SVGL'] = "Für alle Dörfer verfügbar";
t['VGL'] = "Dorfübersicht";
t['UPDATEPOP'] = "Einwohnerzahl aktualisieren";
t['EDIT'] = "Bearbeiten";
t['NPCO'] = "Optionen NPC Assistent";
t['NEWVILLAGEAV'] = "Datum/Uhrzeit";
t['TIMEUNTIL'] = "Wartezeit";
t['CENTERMAP'] = "Zentriere Karte auf dieses Dorf";
t['SENDTROOPS'] = "Truppen schicken";
t['PALACE'] = "Palast";
t['RESIDENCE'] = "Residenz";
t['ACADEMY'] = "Akademie";
t['TREASURY'] = "Schatzkammer";
t['UPGTB'] = "Ressifelder/Gebäude Upgradetabellen";
t['RBTT'] = "Ressi-Bar";
t['USE'] = "Benutze";
t['RESIDUE'] = "Rest wenn gebaut ";
t['RESOURCES'] = "Rohstoffe";
t['SH1'] = "Öffne Dein Profil für automatische Erkennung des Hauptdorfs und Koordinated<br>Baue eine Kaserne f&uuml;r die automatische Volkserkennung und öffne dann das Dorfzentrum";
t['CROPFINDER'] = "Crop finder";
break;

case 'dk': //contributors: polle1
t['1'] = "Travian v2.x server";
t['4'] = "Markedesplads";
t['5'] = "Forsamlingsplads/Kaserne/Værksted/Stald";
t['6'] = "Rådhus/Heltegården/Armoury/Blacksmith";
t['7'] = "Palads/Residens/Akademi/Skattekammer";
t['8'] = "Alliance";
t['9'] = "Vis extra links i venstre menu<br>(Traviantoolbox, World Analyser, Travilog, Map, etc.)";
t['10'] = "Kampsimulator link der skal bruges:<br>(menu venstre)";
t['12'] = "Vis 'dorf1.php' and 'dorf2.php' links";
t['13'] = "Vis \"Centré kortet på denne by\" ikon";
t['14'] = "Vis 'Send tropper/Send råstoffer' ikoner i by listen";
t['16'] = "Vis effektiv kornproduktion i by liste";
t['17'] = "Vis indbygger i by liste";
t['20'] = "Vis links";
t['21'] = "vis 'Bruger links' som flytbar vindue";
t['22'] = "Vis notesbog";
t['23'] = "Vis 'Notesblok' som flytbar vindue";
t['24'] = "Notesbog størrelse";
t['25'] = "Notesbog højde";
t['26'] = "Vis NPC Assistant calculations/links";
t['27'] = "World Analyser der skal bruges";
t['28'] = "Vis analyser statistic links";
t['29'] = "Map Analyser der skal bruges";
t['30'] = "Vis link til kort over spiller";
t['31'] = "Vis link til kort over alliancer";
t['34'] = "Vis kP/dag information i opgradringstabel";
t['35'] = "Vis kornforbrug i opgradringstabel";
t['37'] = "Vis råstoffelter opgradringstabel";
t['38'] = "Vis råstof trin farver";
t['39'] = "Vis 'Råstofbar' tabel";
t['40'] = "vis 'Råstofbar' tabel som flytbar vindue";
t['41'] = "vis bygnings opgradringstabel";
t['43'] = "Vis center nummer";
t['44'] = "Vis bygningstrin faver";
t['45'] = "Vis blinkende ikoner for bygninger der bliver opgraderet";
t['48'] = "Antallet af sider med tilbud der skal indlæsses<br>Mens du er på markede => køb' side<br>(Default = 1)";
t['49'] = "Forsamlingsplads standart action";
t['50'] = "Antallet af spioner til<br>\"Vælg spioner\" funktion";
t['53'] = "Vis troppe information i tooltips";
t['54'] = "Vis afstande og tider til byer i tooltips";
t['56'] = "Vis celle type/oase info<br>Hold musen over kortet";
t['57'] = "Vis afstand & tider";
t['58'] = "Vis tabel med spiller/byer/besatte oaser";
t['59'] = "antallet af besked/report sider som skal indlæses<br>(Default = 1)";
t['60'] = "Vis link til at åbne beskeder i et pop-up";
t['61'] = "Vis \"Slet alle\" tabel på Report side";
t['62'] = "Vis \"Send IGM\" ikon for mig, også";
t['63'] = "Vis extra information i kampreporter";
t['64'] = "Vis detaljer in Report Statestik";
t['65'] = "Farve opgradering mulig<br>(Default = Empty)";
t['66'] = "Farve Fuldt udbygget<br>(Default = Empty)";
t['67'] = "Farve opgradering ikke mulig<br>(Default = Empty)";
t['68'] = "Farve opgradering via NPC<br>(Default = Empty)";
t['82.L'] = "Lock links (Gem slet, flyt op, flyt ned ikoner)";
t['82.U'] = "Unlock links (Vis slet, flyt op, flyt ned ikoner)";
t['U.2'] = "Race";
t['U.3'] = "Din hovedlandsbys navn<br><b>Visit your Profile for an update</b>";
t['U.6'] = "Din hovedlandsbys koordinater<br><b>Visit your Profile for an update</b>";
t['SIM'] = "Kamp simulator";
t['QSURE'] = "Er du sikker?";
t['LOSS'] = "Tab";
t['PROFIT'] = "Profit";
t['EXTAV'] = "udvidelse mulig";
t['PLAYER'] = "Spiller";
t['VILLAGE'] = "By";
t['POPULATION'] = "Indbygger";
t['COORDS'] = "Koordinater";
t['MAPTBACTS'] = "Actions";
t['SAVED'] = "Gemt";
t['YOUNEED'] = "Du mangler";
t['TODAY'] = "i dag";
t['TOMORROW'] = "i morgen";
t['DAYAFTERTOM'] = "overmorgen";
t['MARKET'] = "Markedsplads";
t['BARRACKS'] = "Kaserne";
t['RAP'] = "Forsamlingsplads";
t['STABLE'] = "Stald";
t['WORKSHOP'] = "Værksted";
t['SENDRES'] = "Send råstoffer";
t['BUY'] = "Køb";
t['SELL'] = "Sælg";
t['SENDIGM'] = "Send IGM";
t['LISTO'] = "Tilgænglig";
t['ON'] = "on";
t['AT'] = "at";
t['EFICIENCIA'] = "Effektivit";
t['NEVER'] = "Aldrig";
t['ALDEAS'] = "By(er)";
t['TIEMPO'] = "Tid";
t['OFREZCO'] = "Tilbyder";
t['BUSCO'] = "Søger";
t['TIPO'] = "Type";
t['DISPONIBLE'] = "Kun tilgænglig";
t['CUALQUIERA'] = "Alle";
t['YES'] = "Ja";
t['NO'] = "Nej";
t['LOGIN'] = "Login";
t['MARCADORES'] = "Links";
t['ANYADIR'] = "Tilføj";
t['UBU'] = "Nyt link URL";
t['UBT'] = "Nyt link Tekst";
t['DEL'] = "Slet";
t['MAPA'] = "Kort";
t['MAXTIME'] = "Maximum tid";
t['ARCHIVE'] = "Arkive";
t['SUMMARY'] = "Total";
t['TROPAS'] = "Tropper";
t['CHKSCRV'] = "Opdater TBeyond";
t['ACTUALIZAR'] = "Opdater by information";
t['VENTAS'] = "Gemte tilbud";
t['MAPSCAN'] = "Skan kortet";
t['BIC'] = "Vis udvidet ikoner";
t['SAVE'] = "Gem";
t['AT2'] = "Opbakning";
t['AT3'] = "Angreb: Normal";
t['AT4'] = "Angreb: Plyndringstogt";
t['NBSA'] = "Auto";
t['NBSN'] = "Normal (lille)";
t['NBSB'] = "Stor skærm (Stor)";
t['NBHAX'] = "Automatisk udvid højde";
t['NBHK'] = "Standart højde";
t['NPCSAVETIME'] = "Gem: ";
t['TOTALTROOPS'] = "Byens totale troppeantal";
t['SELECTALLTROOPS'] = "Vælg alle tropper";
t['PARTY'] = "Fest";
t['CPPERDAY'] = "KP/dag";
t['SLOT'] = "Slot";
t['TOTAL'] = "Total";
t['SELECTSCOUT'] = "Vælg spioner";
t['SELECTFAKE'] = "Vælg fake";
t['ALL'] = "Alle";
t['SH2'] = "I farve felterne kan du skrive:<br>- <b>green</b> or <b>red</b> or  <b>orange</b>, etc.<br>- the HEX color code like <b>#004523</b><br>- leave empty for the default color";
t['SOREP'] = "Vis original report (Til visning)";
t['WSIMO1'] = "Inten (leveret af spillet)";
t['WSIMO2'] = "Extern (leveret af kirilloid.ru)";
t['NONEWVER'] = "Du har den seneste version";
t['BVER'] = "Du må have en beta version";
t['NVERAV'] = "En ny version af scriptet er tilgænglig";
t['UPDSCR'] = "Opdater scriptet nu ?";
t['CHECKUPDATE'] = "Checker for script opdateringer.<br>Vent venligst...";
t['AVPPV'] = "Gennemsnitlig antal indbygger per by";
t['AVPPP'] = "Gennemsnitlig antal indbygger per spiller";
t['TOTTRTR'] = "Totale antal tropper der trænes";
t['UPDALLV'] = "opdater alle byer.  BRUGS MED STOR FORSIGTIGHED DA DET KAN FØRE TIL EN BANNED KONTO !";
t['LARGEMAP'] = "Stort kort";
t['USETHEMPR'] = "Brug dem (proportional)";
t['USETHEMEQ'] = "Brug dem (equal)";
t['TOWNHALL'] = "Rådhus";
t['ACCINFO'] = "Konto Information";
t['NBO'] = "Notesblok";
t['MNUL'] = "Menu i venstre side";
t['STAT'] = "Statestik";
t['RESF'] = "Råstoffelter";
t['VLC'] = "Landsbycenter";
t['MAPO'] = "Kort options";
t['COLO'] = "Farve options";
t['DBGO'] = "Debug options";
t['HEROSMANSION'] = "Hero's mansion";
t['BLACKSMITH'] = "våbensmedje";
t['ARMOURY'] = "Rustningssmedje";
t['NOW'] = "Nu";
t['CLOSE'] = "Luk";
t['USETHEM1H'] = "brug dem (1 times produktion)";
t['OVERVIEW'] = "oversigt";
t['FORUM'] = "Forum";
t['ATTACKS'] = "Angreb";
t['NEWS'] = "Nyheder";
t['ADDCRTPAGE'] = "tilføj nuværende";
t['SCRPURL'] = "TBeyond page";
t['SPACER'] = "Mellemrumslinje";
t['MEREO'] = "Beskeder & Reporter";
t['ATTABLES'] = "Troppetabel";
t['MTW'] = "mistede";
t['MTX'] = "overskrider";
t['MTC'] = "Nuværende last";
t['ALFL'] = "Link til extern forum<br>(Tom for intern forum)";
t['MTCL'] = "Clear all";
t['CKSORT'] = "Klik for at sorter";
t['MIN'] = "Min";
t['SVGL'] = "Del imellem byer";
t['VGL'] = "By Liste";
t['UPDATEPOP'] = "opdater indbygger";
t['EDIT'] = "Edit";
t['NPCO'] = "NPC Assistant options";
t['NEWVILLAGEAV'] = "Dato/Tid";
t['TIMEUNTIL'] = "Ventetid";
t['CENTERMAP'] = "Centré kortet på denne by";
t['SENDTROOPS'] = "Send tropper";
t['PALACE'] = "Palads";
t['RESIDENCE'] = "Residens";
t['ACADEMY'] = "Akademi";
t['TREASURY'] = "Skattekammer";
t['UPGTB'] = "Råstoffelter/Bygnings opgradringstabel";
t['RBTT'] = "Råstofbar";
t['USE'] = "Brug";
t['CROPFINDER'] = "Crop finder";
break;

case 'el': //contributors: maintanosgr, ChuckNorris, Velonis Petros
case 'gr':
t['1'] = "Travian v2.x server";
t['4'] = "?????";
t['5'] = ">??ate?a s???e?t??se??/St?at?ped?/???ast????/St?ß???";
t['6'] = "??µa??e??/?e????? ?????/?a??p??p??e??/?p??p??e??";
t['7'] = "?a??t?/???a??/??ad?µ?a/T?sa???f??????";
t['8'] = "S?µµa??a";
t['9'] = "?e??e ep?p???? link st? a??ste?? µe???<br>(Traviantoolbox, World Analyser, Travilog, TravMap, ?t?.)";
t['10'] = "Link ??a p??s?µ???t? µ????:<br>(a??ste?? µe???)";
t['12'] = "?e??e ta link 'dorf1.php' ?a? 'dorf2.php'";
t['13'] = "?e??e t? \"?p????t??s? ???t? se a?t? t? ?????\" e?????d??";
t['20'] = "?µf???s? se??d?de??t??";
t['22'] = "?µf???s? t?? s?µe??µat?????";
t['24'] = "???e??? s?µe??µat?????";
t['25'] = "???? s?µe??µat?????";
t['26'] = "?e??e t??? ?p?????sµ???/link t?? NPC ß?????";
t['27'] = "???s? World Analyser";
t['28'] = "?e??e link ??a a?a??t??? stat?st???";
t['36'] = "?µf???s? ?p?????sµ?? '?????<br>t?te/?p????p?' st??? p??a?e? a?aß??µ?s??/e?pa?de?s??";
t['37'] = "?e??e t?? p??a?a a?aßa?µ?se?? ??a t?? p??te? ??e?";
t['38'] = "?e??e ???µata ??a t? ep?ped? t?? p??t?? ????";
t['41'] = "?e??e t?? p??a?a a?aßa?µ?se?? ??a ta ?t???a";
t['43'] = "?µf???s? ?e?t????? a???µ??";
t['44'] = "?e??e ???µata ??a t? ep?ped? t?? ?t?????";
t['45'] = "?e??e t? ep?ped? t?? ?t????? p?? a?aßa?µ??eta? ?a a?aß?sß??e?";
t['48'] = "????µ?? t?? se??d?? ??a f??t?s?<br>µ?sa st?? a???? => st?? se??da '?????ste'<br>(???ep????? = 1, ????st? = 5)";
t['49'] = "???ep????? p?ate?a? s???e?t??se??";
t['50'] = "????µ?? a????e?t?? ??a t??<br>?e?t?????a \"?????e?s?\"";
t['53'] = "?e??e p????f???e? st?at??t??<br>se pa?????? s?µß?????";
t['54'] = "?e??e ap?stas? ?a? ??????? sta ?????<br>se pa?????? s?µß?????";
t['56'] = "?e??e t?? t?p? t?? ???af???/t?? ?as??<br>?ta? p??a??? p??? µe t? p??t???";
t['57'] = "?e??e ap?st?se?? ?a? ???????";
t['58'] = "?e??e t?? p??a?a t?? pa??t??/??????/?ate???µ???? ??se??";
t['59'] = "????µ?? µ???µ?t??/a?af???? ??a f??t?µa<br>(???ep????? =1, ????st? = 5)";
t['60'] = "?e??e links ??a ?a a??????? ta µ???µata<br>se a?ad??µe?? pa??????";
t['61'] = "?e??e t?? p??a?a \"??a??af?\" st?? se??da a?af????";
t['62'] = "?e??e t? \"?p?st??? µ???µat?? IGM\" e?????d?? ??a µ??a, epe?s??";
t['64'] = "?e??e ?ept?µ??e?e? stat?st???? st?? ??af????";
t['65'] = "???µa ?ta? ?p???e? d?a??s?µ? a?aß??µ?s?<br>(???ep????? = ?de??)";
t['66'] = "???µa ?ta? e??a? st? ep?ped?<br>(???ep????? = ?de??)";
t['67'] = "???µa ?ta? de? ?p???e? d?a??s?µ? a?aß??µ?s?<br>(???ep????? = ?de??)";
t['68'] = "???µa ??a a?aß??µ?s? µ?s? t?? NPC<br>(???ep????? = ?de??)";
t['69'] = "Console Log Level<br><b>???? G?? ???G?????????S??S ? ???SF?????OS?</b><br>(???ep????? = 0)";
t['82.L'] = "??e?d?se t??? se??d?de??te? (????e ta d?a??af?, µeta????se p???/p?t? e?????d?a)";
t['82.U'] = "?e??e?d?se t??? se??d?de??te? (de??e ta d?a??af?, µeta????se p???/p?t? e?????d?a)";
t['U.2'] = "F???";
t['U.3'] = "???µa p??te???sa?<br><b>??? t? pe????e??, a?' a?t?? ep?s????? t? p??f?? s??</b>";
t['U.6'] = "S??teta?µ??e? p??te???sa?<br><b>??? t? pe????e??, a?' a?t?? ep?s????? t? p??f?? s??</b>";
t['SIM'] = "???s?µ???t?? µ????";
t['QSURE'] = "??sa? s???????;";
t['LOSS'] = "??µ??";
t['PROFIT'] = "???d??";
t['EXTAV'] = "??a??s?µ? a?aß??µ?s?";
t['PLAYER'] = "?a??t??";
t['VILLAGE'] = "?????";
t['POPULATION'] = "?????sµ??";
t['COORDS'] = "S??teta?µ??e?";
t['MAPTBACTS'] = "?????e?e?";
t['SAVED'] = "?p????e?t??e";
t['YOUNEED'] = "??e???esa?";
t['TODAY'] = "s?µe?a";
t['TOMORROW'] = "a????";
t['DAYAFTERTOM'] = "µe?a????";
t['MARKET'] = "?????";
t['BARRACKS'] = "St?at?ped?";
t['RAP'] = "??ate?a s???e?t??se??";
t['STABLE'] = "St?ß???";
t['WORKSHOP'] = "???ast????";
t['SENDRES'] = "?p?st??? p??t?? ????";
t['BUY'] = "????ase";
t['SELL'] = "?????se";
t['SENDIGM'] = "?p?st??? µ???µat??";
t['LISTO'] = "??a??s?µ?";
t['ON'] = "t??";
t['AT'] = "st??";
t['EFICIENCIA'] = "?????t?ta";
t['NEVER'] = "??t?";
t['ALDEAS'] = "?????(?)";
t['TIEMPO'] = "??????";
t['OFREZCO'] = "???sf??e?";
t['BUSCO'] = "??a??te?";
t['TIPO'] = "??p??";
t['DISPONIBLE'] = "???? d?a??s?µa";
t['CUALQUIERA'] = "??a";
t['YES'] = "?a?";
t['NO'] = "???";
t['LOGIN'] = "S??des?";
t['MARCADORES'] = "??ap?µ??a";
t['ANYADIR'] = "???s????";
t['UBU'] = "??? a?ap?µ??? URL";
t['UBT'] = "?e?µe??";
t['DEL'] = "??a??af?";
t['MAXTIME'] = "????st?? ??????";
t['ARCHIVE'] = "???e??";
t['SUMMARY'] = "S?????";
t['TROPAS'] = "St?ate?µata";
t['CHKSCRV'] = "??aß??µ?s? TBeyond";
t['ACTUALIZAR'] = "??a???se p????f???e? ??????";
t['VENTAS'] = "?p????e?µ??e? ???sf????";
t['MAPSCAN'] = "S???s? t?? ???t?";
t['BIC'] = "?µf???s? µe????? e?????d???";
t['SAVE'] = "?p????e?s?";
t['AT2'] = "???s??se??";
t['AT3'] = "?p??es?: ??sß???";
t['AT4'] = "?p??es?: ??sß??? a?pa???";
t['NBSA'] = "??t?µat?";
t['NBSN'] = "?a?????? (µ????)";
t['NBSB'] = "?e???? ????? (µe????)";
t['NBHK'] = "???ep??e?µ??? ????";
t['NPCSAVETIME'] = "?e?d??e??: ";
t['TOTALTROOPS'] = "S??????? st?ate?µata ??????";
t['SELECTALLTROOPS'] = "?p????? ???? t?? st?ate?µ?t??";
t['PARTY'] = "???tast???? e?d???se??";
t['CPPERDAY'] = "???t?? ????t?sµ??/µ??a";
t['SLOT'] = "??a??s?µ?? ?????";
t['TOTAL'] = "S?????";
t['SELECTSCOUT'] = "?????e?s?";
t['SELECTFAKE'] = "??t?pe??spasµ??";
t['ALL'] = "??a";
t['SH2'] = "Sta ped?a ???µ?t?? µp??e?? ?a ß??e??:<br>- <b>green</b> ? <b>reb</b> ? <b>orange</b>, ?t?.<br>- ??d??a HEX ??a ???µµata ?p?? <b>#004523</b><br>- ?f?se ?e?? ??a p??ep??e?µ??? ???µa";
t['SOREP'] = "?e??e ?a?????? a?af??? (??a p?st???sµa)";
t['WSIMO1'] = "?s?te????? (pa???eta? ap? t? pa????d?)";
t['WSIMO2'] = "???te????? (pa???eta? ap? t? kirilloid.ru)";
t['NONEWVER'] = "??e?? t?? ?e?te?? d??at? ??d?s?";
t['BVER'] = "??e?? d???µast??? ??d?s?";
t['NVERAV'] = "??a??s?µ? ??a ??d?s?";
t['UPDSCR'] = "?a e??µe???e? t? scipt t??a;";
t['CHECKUPDATE'] = "??e???? ??a e??µ???s? t?? script.<br>?a?a?a?? pe??µ??ete...";
t['AVPPV'] = "??s?? p????sµ?? a?a ?????";
t['AVPPP'] = "??s?? p????sµ?? a?? pa??t?";
t['MAX'] = "????st?";
t['TOTTRTR'] = "S??????? st?ate?µata se e?pa?de?s?";
t['TB3SL'] = "$1 ???µ?se??";
t['UPDALLV'] = "???µ???se ??a ta ?????. ???S???????S? ?? ?? ??G??? ???S??? ??TOS ?????? ?? ??????T??S !!!";
t['LARGEMAP'] = "?e????? ???t??";
t['USETHEMPR'] = "???s?µ?p???se ta (a?a??????)";
t['USETHEMEQ'] = "???s?µ?p???se ta (?sa)";
t['TOWNHALL'] = "??µa??e??";
t['GSRVT'] = "Server ?a????d???";
t['ACCINFO'] = "?????f???e? ???a??asµ??";
t['NBO'] = "S?µe??µat????";
t['MNUL'] = "?e??? st? a??ste?? µ????";
t['STAT'] = "Stat?st???";
t['RESF'] = "????f?a p??t?? ????";
t['VLC'] = "???t?? ??????";
t['MAPO'] = "?p?????? ???t?";
t['COLO'] = "?p?????? ???µ?t??";
t['DBGO'] = "?p?????? apasfa?µ?t?s??";
t['HEROSMANSION'] = "?e????? ?????";
t['BLACKSMITH'] = "?p??p??e??";
t['ARMOURY'] = "?a??p??p??e??";
t['NOW'] = "???a";
t['CLOSE'] = "??e?s?µ?";
t['USETHEM1H'] = "???s?µ?p???se ta (1 ???a?a pa?a????)";
t['OVERVIEW'] = "?p?s??p?s?";
t['FORUM'] = "F????µ (Forum)";
t['ATTACKS'] = "?p???se??";
t['NEWS'] = "??a";
t['ADDCRTPAGE'] = "???s?ese t?????sa se??da ?? se??d?de??t?";
t['SCRPURL'] = "TBeyond website";
t['SPACER'] = "???st?µa";
t['MEREO'] = "????µata & ??af????";
t['ATTABLES'] = "???a?e? st?ate?µ?t??";
t['MTW'] = "??s?µ?";
t['MTX'] = "?p??ßas?";
t['MTC'] = "?????? f??t??";
t['ALFL'] = "Link se e??te???? f????µ<br>(’f?se t? ?de?? ??a t? es?te???? f????µ)";
t['MTCL'] = "?a?a??sµ??";
t['CKSORT'] = "???? ??a ta????µ?s?";
t['MIN'] = "Min";
t['SVGL'] = "????? se ??a ta ?????";
t['VGL'] = "??sta ??????";
t['UPDATEPOP'] = "???µ???se t?? p????sµ?";
t['EDIT'] = "?pe?e??as?a";
t['NPCO'] = "?p?????? t?? NPC ß?????";
t['NEWVILLAGEAV'] = "?µe??µ???a/??a";
t['TIMEUNTIL'] = "?????? ?a pe??µ??e??";
t['CENTERMAP'] = "?p????t??s? ???t? se a?t? t? ?????";
t['SENDTROOPS'] = "?p?st??? st?ate?µ?t??";
t['PALACE'] = "?a??t?";
t['RESIDENCE'] = "???a??";
t['ACADEMY'] = "??ad?µ?a";
t['TREASURY'] = "T?sa???f??????";
t['USE'] = "???s?";
t['RESIDUE'] = "?p????p? a? ?t?se??";
t['RESOURCES'] = " ??e?";
break;

case 'es': //contributors: Psicothika
t['1'] = "Servidor de Travian v2.x?";
t['2'] = "Eliminar anuncios";
t['3'] = "Forzar T3.1 Legionnaire & Phalanx capacity calculation<br>(para servidores mixtos T3.1 & T3.5)";
t['4'] = "Mercado";
t['5'] = "Plaza de reuniones/Cuartel/Taller/Establo";
t['6'] = "Ayuntamiento/Hogar del Héroe/Armería/Herrería";
t['7'] = "Palacio/Residencia/Academia/Tesoro";
t['8'] = "Alianza";
t['9'] = "Mostrar enlaces adicionales en el menú de la izquierda<br>(Traviantoolbox, World Analyser, Travilog, Map, etc.)";
t['10'] = "¿Qué simulador de ataque deseas usar?:<br>(menú izquierdo)";
t['11'] = "Enlace para la publicación de informes";
t['12'] = "Mostrar enlaces 'dorf1.php' y 'dorf2.php'";
t['13'] = "Mostrar icono \"Centrar mapa sobre esta aldea\"";
t['14'] = "Mostrar icono 'Enviar tropas/Enviar recursos' en lista de aldeas";
t['15'] = "Mostrar la produccion por hora de madera, barro, hierro y cereal en el listado de aldeas";
t['16'] = "Mostrar eficacia de producción de cereal en el listado de aldeas";
t['17'] = "Mostrar población en el listado de aldeas";
t['18'] = "Muestra en 2 columnas una lista de aldeas en una ventana flotante";
t['19'] = "Mostrar información sobre los avances en los edificios y los movimientos de tropas en el listado de aldeas";
t['20'] = "Mostrar marcadores";
t['21'] = "Ver tabla de 'Enlaces' en una ventana flotante";
t['22'] = "Mostrar block de notas";
t['23'] = "Ver 'Block de notas' en una ventana flotante";
t['24'] = "Tamaño del block de notas";
t['25'] = "Altura del block de notas";
t['26'] = "Mostrar Asistente de NPC para calculadora/enlaces";
t['27'] = "¿Qué Analizador de estadísticas deseas usar?";
t['28'] = "Mostrar enlaces del analizador de estadísticas<br>(icono de la bola del mundo al lado de usuarios/alianzas)";
t['29'] = "Usar el analizador del mapa";
t['30'] = "Mostrar mapa de enlaces para usuarios";
t['31'] = "Mostrar mapa de enlaces para alianzas";
t['32'] = "Mostrar 'Barra de Búsqueda'";
t['33'] = "Ver 'Barra de Búsqueda' en una ventana flotante";
t['34'] = "Ver información de CP por día en la actualización de las tablas";
t['35'] = "Mostrar actualizaciones en las tablas de consumo de cereal.";
t['36'] = "Mostrar los cálculos de 'Hasta entonces/Excedentes'<br>en las tablas de entrenamiento/mejora";
t['37'] = "Mostrar la tabla de actualización de recursos";
t['38'] = "Mostrar colores en el nivel de los recursos";
t['39'] = "Ver tabla de 'Recursos'";
t['40'] = "Ver tabla de 'Recursos' en una ventana flotante";
t['41'] = "Mostrar la tabla de actualización de las construcciones";
t['42'] = "Ordenar edificios por su nombre en la tabla de actualizaciones";
t['43'] = "Mostrar el nivel de las construcciones en el centro de la aldea";
t['44'] = "Mostrar colores en el nivel de las construcciones";
t['45'] = "Mostrar nivel parpadeando en los edificios que están siendo ampliados";
t['48'] = "Páginas mostradas en la sección 'Comprar' del mercado<br>(Valor por defecto = 1)";
t['49'] = "Opción por defecto para el envió de tropas";
t['50'] = "N° de espías para seleccionar por defecto en<br>\"Seleccionar espías\"";
t['53'] = "Mostrar información de las tropas en mensajes emergentes";
t['54'] = "Mostrar tiempos y distancias a aldeas en mensajes emergentes";
t['56'] = "Mostar la descripción del tipo de casilla/oasis<br>al pasar el mouse por encima de la casilla.";
t['57'] = "Mostrar distancias y tiempos en un mensaje emergente";
t['58'] = "Mostrar tabla de Jugadores/Aldeas/Oasis ocupados";
t['59'] = "Número de páginas de mensajes/reportes precargados<br>(Valor por defecto = 1)";
t['60'] = "Mostrar vínculos para abrir los mensajes e informes en ventanas emergentes";
t['61'] = "Mostar \"Borrar todo\" en la página de informes";
t['62'] = "Mostrar icono \"Enviar IGM\" para mitambién";
t['63'] = "Mostar TB3 en los informes de batalla";
t['64'] = "Mostrar detalles estadísticos en los reportes";
t['65'] = "Color para las actualizaciones disponibles <br>(Defecto = En blanco)";
t['66'] = "Color para los niveles máximos<br>(Defecto = En blanco)";
t['67'] = "Color para las actualizaciones no disponibles<br>(Defecto = En blanco)";
t['68'] = "Color para actualizar por medio de NPC<br>(Defecto = En blanco)";
t['69'] = "Nivel de Registro de la Consola<br>SOLO PARA PROGRAMADORES O DEPURACIÓN<br>(Valor por defecto = 0)";
t['82.L'] = "Bloquear marcadores (Ocultar iconos de eliminar, subir, bajar)";
t['82.U'] = "Desbloquear marcadores (Mostrar iconos de eliminar, subir, bajar)";
t['U.2'] = "Raza";
t['U.3'] = "Nombre de tu capital<br>Entra en tu perfil para actualizarla";
t['U.6'] = "Coordenadas de tu capital<br>Entra en tu perfil para actualizarlas";
t['SIM'] = "Simulador de combate";
t['QSURE'] = "¿Estás seguro?";
t['LOSS'] = "Pérdidas";
t['PROFIT'] = "Ganancias";
t['EXTAV'] = "Subir nivel";
t['PLAYER'] = "Jugador";
t['VILLAGE'] = "Aldea";
t['POPULATION'] = "Población";
t['COORDS'] = "Coordenadas";
t['MAPTBACTS'] = "Acciones";
t['SAVED'] = "Guardado";
t['YOUNEED'] = "Te falta";
t['TODAY'] = "hoy";
t['TOMORROW'] = "mañana";
t['DAYAFTERTOM'] = "pasado mañana";
t['MARKET'] = "Mercado";
t['BARRACKS'] = "Cuartel";
t['RAP'] = "Plaza de reuniones";
t['STABLE'] = "Establo";
t['WORKSHOP'] = "Taller";
t['SENDRES'] = "Enviar recursos";
t['BUY'] = "Comprar";
t['SELL'] = "Vender";
t['SENDIGM'] = "Enviar IGM";
t['LISTO'] = "Disponible";
t['ON'] = "el";
t['AT'] = "a las";
t['EFICIENCIA'] = "Eficacia";
t['NEVER'] = "Nunca";
t['ALDEAS'] = "Aldea(s)";
t['TIEMPO'] = "Tiempo";
t['OFREZCO'] = "Ofrezco";
t['BUSCO'] = "Busco";
t['TIPO'] = "Tipo";
t['DISPONIBLE'] = "Solo disponible";
t['CUALQUIERA'] = "Cualquiera";
t['YES'] = "Si";
t['NO'] = "No";
t['LOGIN'] = "Identificarse";
t['MARCADORES'] = "Marcadores";
t['ANYADIR'] = "Añadir";
t['UBU'] = "URL del nuevo Marcador";
t['UBT'] = "Nombre del nuevo Marcador";
t['DEL'] = "Eliminar";
t['MAPA'] = "Mapa";
t['MAXTIME'] = "Tiempo máximo";
t['ARCHIVE'] = "Archivar";
t['SUMMARY'] = "Resumen";
t['TROPAS'] = "Tropas";
t['CHKSCRV'] = "Actualizar TBeyond";
t['ACTUALIZAR'] = "Actualizar información sobre la aldea";
t['VENTAS'] = "Guardar ofertas";
t['MAPSCAN'] = "Escanear el Mapa";
t['BIC'] = "Mostrar iconos de acceso rápido";
t['SAVE'] = "Guardar";
t['AT2'] = "Refuerzos";
t['AT3'] = "Ataque: Normal";
t['AT4'] = "Ataque: Atraco";
t['NBSA'] = "Automático";
t['NBSN'] = "Normal (pequeño)";
t['NBSB'] = "Grande (alargado)";
t['NBHAX'] = "Expandir altura automáticamente";
t['NBHK'] = "Altura por defecto";
t['NPCSAVETIME'] = "Tiempo ahorrado: ";
t['TOTALTROOPS'] = "Total de tropas de la aldea";
t['SELECTALLTROOPS'] = "Seleccionar todas las tropas";
t['PARTY'] = "Fiesta";
t['CPPERDAY'] = "PC por día";
t['SLOT'] = "Espacio disponible";
t['TOTAL'] = "Total";
t['SELECTSCOUT'] = "Seleccionar espías";
t['SELECTFAKE'] = "Seleccionar unidad para fake (Engaño)";
t['ALL'] = "Todo";
t['SH2'] = "Puedes modificar o personalizar los colores, escribiendo en los campos destinados al color:<br>- Green, Red, orange, etc.<br>- El código Hexadecimal del color como por ejemplo #004523.<br>- Dejar en blanco para usar el color por defecto.";
t['SOREP'] = "Mostrar el reporte original (para poner en foros)";
t['WSIMO1'] = "Interno (el que trae travian por defecto)";
t['WSIMO2'] = "Externo (promovido por kirilloid.ru)";
t['NONEWVER'] = "Usted tiene la última versión disponible";
t['BVER'] = "Usted dispone de una versión de prueba";
t['NVERAV'] = "Una nueva versión del script está disponible";
t['UPDSCR'] = "¿Actualizar el script?";
t['CHECKUPDATE'] = "Buscando una nueva versión del script.<br>Por favor espere...";
t['AVPPV'] = "Promedio de población por aldea";
t['AVPPP'] = "Promedio de población por jugador";
t['MAX'] = "Máximo.";
t['TOTTRTR'] = "Tropas totales que se están creando";
t['TB3SL'] = "Configurar TBeyond";
t['UPDALLV'] = "Actualizar todas las aldeas. USAR CON MUCHO CUIDADO, PUEDE LLEVAR A QUE BORREN TU CUENTA!";
t['LARGEMAP'] = "Mapa grande";
t['USETHEMPR'] = "Repartir la cantidad de recursos de los almacenes (de manera proporcional)";
t['USETHEMEQ'] = "Repartir la cantidad de recursos de los almacenes (equitativa=misma cantidad)";
t['TOWNHALL'] = "Ayuntamiento";
t['GSRVT'] = "Versión del servidor";
t['ACCINFO'] = "Información de la Cuenta";
t['NBO'] = "Block de notas";
t['MNUL'] = "Menú en el lado izquierdo";
t['STAT'] = "Estadísticas";
t['RESF'] = "Campos de recursos";
t['VLC'] = "Centro de la aldea";
t['MAPO'] = "Opciones del mapa";
t['COLO'] = "Opciones de color";
t['DBGO'] = "Opciones de depuración (DEBUG MODE)";
t['HEROSMANSION'] = "Hogar del Héroe";
t['BLACKSMITH'] = "Herrería";
t['ARMOURY'] = "Armería";
t['NOW'] = "Ahora";
t['CLOSE'] = "Cerrar";
t['USETHEM1H'] = "Repartir materias primas de esta aldea (1 hora de producción)";
t['OVERVIEW'] = "Resumen";
t['FORUM'] = "Foro";
t['ATTACKS'] = "Ataques";
t['NEWS'] = "Noticias";
t['ADDCRTPAGE'] = "Añadir página actual";
t['SCRPURL'] = "Página de TBeyond";
t['SPACER'] = "Espacio";
t['MEREO'] = "Mensajes y Reportes";
t['ATTABLES'] = "Tabla de tropas";
t['MTW'] = "Disponible";
t['MTX'] = "Excedido";
t['MTC'] = "Carga actual";
t['ALFL'] = "Vínculo a foro externo<br>(Dejar en blanco para foro interno)";
t['MTCL'] = "Limpiar todo";
t['CKSORT'] = "Haga clic aquí para ordenar";
t['MIN'] = "Mínimo";
t['SVGL'] = "Repartir entre las aldeas";
t['VGL'] = "Lista de Aldeas";
t['UPDATEPOP'] = "Actualizar habitantes";
t['EDIT'] = "Editar";
t['NPCO'] = "Asistente de opciones del NPC";
t['NEWVILLAGEAV'] = "Fecha/Hora";
t['TIMEUNTIL'] = "Tiempo de espera";
t['CENTERMAP'] = "Centrar mapa sobre esta aldea";
t['SENDTROOPS'] = "Enviar tropas";
t['PALACE'] = "Palacio";
t['RESIDENCE'] = "Residencia";
t['ACADEMY'] = "Academia";
t['TREASURY'] = "Tesoro";
t['UPGTB'] = "Mostrar actualizaciones en las tablas de  recursos y edificios.";
t['RBTT'] = "Recursos";
t['USE'] = "Usar";
t['RESIDUE'] = "Excedentes si construyes ";
t['RESOURCES'] = "Recursos";
t['CROPFINDER'] = "Búsqueda 9c / 15c";
break;

case 'fi': //contributors: Syanidi, Haukka
t['1'] = "Travian v2.x serveri";
t['2'] = "Poista mainosbannerit";
t['3'] = "Pakota T3.1 Legioonalaisten ja Falangien kantomäärälaskenta<br />(sekoitetuille T3.1 ja T3.5 servereille)";
t['4'] = "Tori";
t['5'] = "Kokoontumispiste/Kasarmi/Työpaja/Talli";
t['6'] = "Kaupungintalo/Sankarinkartano/Haarniskapaja/Aseseppä";
t['7'] = "Palatsi/Virka-asunto/Akatemia/Aarrekammio";
t['8'] = "Liittouma";
t['9'] = "Näytä lisälinkit vasemmanpuoleisessa valikossa<br />(Traviantoolbox, World Analyser, Travilog, Map, jne.)";
t['10'] = "Taistelusimulaattorilinkki käytössä:<br />(Vasemmanpuoleinen valikko)";
t['11'] = "Valitse sivu mitä käytetään raporttien lähettämiseen";
t['12'] = "Näytä 'dorf1.php' ja 'dorf2.php' linkit";
t['13'] = "Näytä \"Keskitä kartta tähän kylään\" kuvake";
t['14'] = "Näytä 'Lähetä joukkoja/Lähetä resursseja' kuvakkeet kylälistassa";
t['15'] = "Näytä puun, saven ja raudan tuntituotannot kylälistassa";
t['16'] = "Näytä viljantuotanto kylälistassa";
t['17'] = "Näytä asukasluku kylälistassa";
t['18'] = "Näytä lisäksi kahden palstan kylälista siirrettävänä ikkunana";
t['19'] = "Näytä tiedot valmistuvista rakennuksista ja joukkojen liikkeistä <br />kylälistassa";
t['20'] = "Näytä kirjanmerkit";
t['21'] = "Näytä 'kirjanmerkit' siirrettävänä ikkunana";
t['22'] = "Näytä muistilappu";
t['23'] = "Näytä 'Muistilappu' siirrettävänä ikkunana";
t['24'] = "Muistilapun koko";
t['25'] = "Muistilapun korkeus";
t['26'] = "Näytä NPC Avustajan laskelmat ja linkit";
t['27'] = "Valitse World Analyser";
t['28'] = "Näytä analyysitilastot linkkeinä";
t['29'] = "Mitä kartta-analysoijaa käytetään";
t['30'] = "Näytä pelaajien linkit karttaan";
t['31'] = "Näytä liittojen linkit karttaan";
t['32'] = "Näytä Hakupalkki";
t['33'] = "Näytä 'Hakupalkki' siirrettävänä ikkunana";
t['34'] = "Näytä KP/päivä päivitystaulukoissa";
t['35'] = "Näytä viljan kulutus päivitystaulukoissa";
t['36'] = "Näytä 'Siihen mennessä/Ylijäävät' laskelma, päivitys ja koulutus taulukoissa";
t['37'] = "Näytä resurssikenttien päivitystaulukko";
t['38'] = "Näytä resurssipeltojen tasovärit";
t['39'] = "Näytä 'Resurssipalkki'";
t['40'] = "Näytä 'Resurssipalkki' siirrettävänä ikkunana";
t['41'] = "Näytä rakennusten päivitystaulukko";
t['42'] = "Järjestä rakennukset päivityslistassa nimen perusteella";
t['43'] = "Näytä rakennuksien tasonumerot";
t['44'] = "Näytä rakennuksien tasovärit";
t['45'] = "Näytä rakennuksien tasot vilkkuvina, kun niitä päivitetään";
t['46'] = "Näytä lisätiedot kaikille saapuville kauppiaille";
t['47'] = "Näytä viimeisin resurssilähetys";
t['48'] = "Tarjoussivujen latautumismäärä<br />ollessasi torilla => Osta sivu<br />(Oletus = 1)";
t['49'] = "Kokoontumispisteen oletustoiminto";
t['50'] = "Tiedustelijoiden määrä<br />\"Valitse tiedustelija\" ominaisuudelle";
t['51'] = "Näytä viimeisin hyökkäykseni";
t['52'] = "Näytä/käytä viimeisimmän hyökkäyksen koordinaatteja";
t['53'] = "Näytä joukkotiedot vihjeissä";
t['54'] = "Näytä välimatka ja ajat vihjeissä";
t['55'] = "Täytä simulaattori automaattisesti kylässä olevien joukkojen perusteella";
t['56'] = "Näytä kylätyypit ja keitaat<br />liikutellessasi hiirtä kartalla";
t['57'] = "Näytä matkat ja ajat";
t['58'] = "Näytä taulukko pelaajista/kylistä/varatuista keitaista";
t['59'] = "Esiladattujen viesti- ja raporttisivujen määrä<br />(Oletus = 1)";
t['60'] = "Näytä linkki ponnahdusikkunaan";
t['61'] = "Näytä \"Poista kaikki\"-painike raporttisivulla";
t['62'] = "Näytä \"Lähetä viesti\" kuvake myös itselleni";
t['63'] = "Näytä TB3 parannellut taisteluraportit";
t['64'] = "Näytä yksityiskohdat raporttitilastoissa";
t['65'] = "\"Päivitys mahdollinen\" väri<br />(Oletus = Tyhjä)";
t['66'] = "\"Korkein mahdollinen taso\" väri<br />(Oletus = Tyhjä)";
t['67'] = "\"Päivitys ei mahdollista\" väri<br />(Oletus = Tyhjä)";
t['68'] = "\"Päivitys mahdollinen NPC:llä\" väri<br />(Oletus = Tyhjä)";
t['69'] = "Kirjautumistaso konsoliin<br>VAIN OHJELMOIJILLE JA TESTAAJILLE<br>(Oletus = 0)";
t['82.L'] = "Lukitse kirjanmerkit (Piilottaa: poista, siirrä ylös, siirrä alas ja muokkaa -painikkeet)";
t['82.U'] = "Avaa kirjanmerkit (Näyttää: poista, siirrä ylös, siirrä alas ja muokkaa -painikkeet)";
t['U.2'] = "Rotu";
t['U.3'] = "Pääkaupunkisi nimi<br /><b>Käy profiilissa päivittääksesi</b>";
t['U.6'] = "Pääkaupunkisi koordinaatit<br /><b>Käy profiilissa päivittääksesi</b>";
t['SIM'] = "Taistelusimulaattori";
t['QSURE'] = "Oletko varma?";
t['LOSS'] = "Menetys";
t['PROFIT'] = "Hyöty";
t['EXTAV'] = "Päivitys mahdollista ";
t['PLAYER'] = "Pelaaja";
t['VILLAGE'] = "Kylä";
t['POPULATION'] = "Asukasluku";
t['COORDS'] = "Koordinaatit";
t['MAPTBACTS'] = "Toiminnot";
t['SAVED'] = "Tallennettu";
t['YOUNEED'] = "Tarvitset";
t['TODAY'] = "tänään";
t['TOMORROW'] = "huomenna";
t['DAYAFTERTOM'] = "ylihuomenna";
t['MARKET'] = "Tori";
t['BARRACKS'] = "Kasarmi";
t['RAP'] = "Kokoontumispiste";
t['STABLE'] = "Talli";
t['WORKSHOP'] = "Työpaja";
t['SENDRES'] = "Lähetä resursseja";
t['SELL'] = "Myy";
t['SENDIGM'] = "Lähetä viesti";
t['LISTO'] = "Saatavilla";
t['ON'] = "Saatavilla";
t['AT'] = "kello";
t['EFICIENCIA'] = "Hyötysuhde";
t['NEVER'] = "Ei koskaan";
t['ALDEAS'] = "Kylä(t)";
t['TIEMPO'] = "Aika";
t['OFREZCO'] = "Tarjonnut minulle";
t['BUSCO'] = "Pyytänyt minulta";
t['TIPO'] = "Suhde";
t['DISPONIBLE'] = "Vain saatavilla olevat";
t['CUALQUIERA'] = "Mikä tahansa";
t['YES'] = "Kyllä";
t['NO'] = "Ei";
t['LOGIN'] = "Kirjaudu sisään";
t['MARCADORES'] = "Kirjanmerkit";
t['ANYADIR'] = "Lisää";
t['UBU'] = "Uusi kirjanmerkin URL";
t['UBT'] = "Uusi kirjanmerkkiteksti";
t['DEL'] = "Poista";
t['MAPA'] = "Kartta";
t['MAXTIME'] = "Enimmäisaika";
t['ARCHIVE'] = "Arkisto";
t['SUMMARY'] = "Yhteenveto";
t['TROPAS'] = "Joukot";
t['ACTUALIZAR'] = "Päivitä kylän tiedot";
t['VENTAS'] = "Tallennetut tarjoukset";
t['MAPSCAN'] = "Tutki kartta";
t['BIC'] = "Näytä laajennetut kuvakkeet";
t['SAVE'] = "Tallenna";
t['AT2'] = "Vahvistus";
t['AT3'] = "Hyökkäys: Normaali";
t['AT4'] = "Hyökkäys: Ryöstö";
t['NBSA'] = "Automaattinen";
t['NBSN'] = "Normaali";
t['NBSB'] = "Laaja";
t['NBHAX'] = "Automaattinen korkeuden säätö";
t['NBHK'] = "Oletus korkeus";
t['NPCSAVETIME'] = "Säästä: ";
t['TOTALTROOPS'] = "Kylän joukkojen kokonaismäärä";
t['SELECTALLTROOPS'] = "Valitse kaikki joukot";
t['PARTY'] = "Juhlat";
t['CPPERDAY'] = "KP/päivä";
t['SLOT'] = "Kyliä";
t['TOTAL'] = "Yhteensä";
t['SELECTSCOUT'] = "Valitse tiedustelija";
t['SELECTFAKE'] = "Valitse hämy";
t['ALL'] = "Kaikki";
t['SH2'] = "Värikentissä voit käyttää:<br />- <b>Green</b> , <b>red</b> , <b>orange</b> jne.<br />- HEX värikoodeja kuten <b>#004523</b><br />- Oletus: tyhjä";
t['SOREP'] = "Näytä alkuperäinen raportti";
t['WSIMO1'] = "Sisäinen (Pelin tarjoama)";
t['WSIMO2'] = "Ulkoinen (kirilloid.ru tarjoama)";
t['NONEWVER'] = "Sinulla on uusin saatavilla oleva versio";
t['BVER'] = "Sinulla saattaa olla beta-versio";
t['NVERAV'] = "Scriptistä on saatavilla uusi versio";
t['UPDSCR'] = "Päivitä scripti nyt ?";
t['CHECKUPDATE'] = "Tarkistetaan päivitystä scriptille.<br />Odota hetki...";
t['AVPPV'] = "Kylien keskimääräinen asukasluku";
t['AVPPP'] = "Pelaajien keskimääräinen asukasluku";
t['MAX'] = "Enintään";
t['TOTTRTR'] = "Koulutuksessa olevien joukkojen kokonaismäärä";
t['TB3SL'] = "$1 Asetukset";
t['UPDALLV'] = "Päivitä kaikki kylät. HUOMIOI: SAATTAA JOHTAA TILIN JÄÄDYTTÄMISEEN!!";
t['LARGEMAP'] = "Iso kartta";
t['USETHEMPR'] = "Käytä ne (Prosentuaalisesti)";
t['USETHEMEQ'] = "Käytä ne (tasaisesti)";
t['TOWNHALL'] = "Kaupungintalo";
t['GSRVT'] = "Serveri";
t['ACCINFO'] = "Tilin tiedot";
t['NBO'] = "Muistilappu";
t['MNUL'] = "Vasemmanpuoleinen valikko";
t['STAT'] = "Tilastot";
t['RESF'] = "Resurssikentät";
t['VLC'] = "Kylän keskusta";
t['MAPO'] = "Kartta asetukset";
t['COLO'] = "Väri asetukset";
t['DBGO'] = "Debug asetukset";
t['HEROSMANSION'] = "Sankarinkartano";
t['BLACKSMITH'] = "Aseseppä";
t['ARMOURY'] = "Haarniskapaja";
t['NOW'] = "Nyt";
t['CLOSE'] = "Sulje";
t['USETHEM1H'] = "Käytä ne (Tunnin tuotto)";
t['OVERVIEW'] = "Yleiskatsaus";
t['FORUM'] = "Foorumi";
t['ATTACKS'] = "Hyökkäykset";
t['NEWS'] = "Uutiset";
t['ADDCRTPAGE'] = "Lisää nykyinen";
t['SPACER'] = "Väliviiva";
t['MEREO'] = "Viestit ja Raportit";
t['ATTABLES'] = "Joukko taulukot";
t['MTW'] = "Tuhlattu";
t['MTX'] = "Ylittää";
t['MTC'] = "Nykyinen määrä";
t['ALFL'] = "Linkki pelin ulkopuoliselle foorumille<br />(Jätä tyhjäksi kun käytät pelinsisäistä foorumia)";
t['MTCL'] = "Tyhjennä kaikki";
t['CKSORT'] = "Klikkaa järjestääksesi";
t['MIN'] = "Vähintään";
t['SVGL'] = "Jaa kylien välillä";
t['VGL'] = "Kylälista";
t['UPDATEPOP'] = "Päivitä asukasluku";
t['EDIT'] = "Muokkaa";
t['NPCO'] = "NPC Avustajan asetukset";
t['NEWVILLAGEAV'] = "Päivä ja aika";
t['TIMEUNTIL'] = "Aikaa jäljellä";
t['CENTERMAP'] = "Keskitä kartta tähän kylään";
t['SENDTROOPS'] = "Lähetä joukkoja";
t['PALACE'] = "Palatsi";
t['RESIDENCE'] = "Virka-asunto";
t['ACADEMY'] = "Akatemia";
t['TREASURY'] = "Aarrekammio";
t['UPGTB'] = "Resurssikentät/Rakennukset";
t['RBTT'] = "Resurssipalkki";
t['USE'] = "Käytä";
t['RESIDUE'] = "Ylijäävät resurssit jos rakennat";
t['RESOURCES'] = "Resurssit";
t['SH1'] = "Automaattinen kaupunki ja koordinaatti tunnistus, kun käyt profiilissasi<br />Automaattinen rotu tunnistus, kun rakennat ja avaat kasarmin";
t['RESEND'] = "Lähetä uudelleen?";
t['WSI'] = "Pelin sisäinen taistelusimulaattori";
t['TTT'] = "Yleiset joukko ja matka vihjeet";
t['CROPFINDER'] = "Crop finder";
break;

case 'fr': //contributors: fr3nchlover, britch, sp4m4me
t['1'] = "Serveur Travian v2.x";
t['3'] = "Forcer le calcul des Légionnaires & Phalanges T3.1<br>(pour les serveurs mixtes 3.1 et 3.5)";
t['4'] = "Marché";
t['5'] = "Rassemblement/Caserne/Atelier/Etable";
t['6'] = "Hotel de ville/Manoir héros/Armurerie/Usine";
t['7'] = "Palais/Residence/Academie/Tresor";
t['9'] = "Ajouter liens dans menu gauche<br>(Traviantoolbox, World Analyser, Travilog, Map, etc.)";
t['10'] = "Simulateur de combat à utiliser :<br>(menu gauche)";
t['12'] = "Afficher liens 'Global' et 'Centre' sur liste des Villages";
t['13'] = "Afficher l icone \"Centrer sur ce village\"";
t['14'] = "Afficher icones 'Envoyer troupes/Envoyer ressources' dans la liste des villages";
t['16'] = "Afficher la production de cereales dans la liste des villages";
t['17'] = "Afficher la population dans la liste des villages";
t['18'] = "Afficher en plus une liste des villages (2 colonnes) en fenêtre flottante";
t['19'] = "Afficher les informations sur les constructions et les mouvements de troupes<br>dans la liste de villages";
t['20'] = "Afficher les liens favoris";
t['21'] = "Afficher 'Liens favoris' comme une fenetre flotante";
t['22'] = "Afficher le bloc-notes";
t['23'] = "Afficher 'Bloc note' comme une fenetre flotante";
t['24'] = "Taille Bloc-notes";
t['25'] = "Hauteur Bloc-notes";
t['26'] = "Afficher options NPC Assistant";
t['27'] = "Analyseur à utiliser ";
t['28'] = "Afficher liens Analyseur";
t['29'] = "Analyser de carte a utiliser";
t['30'] = "Afficher un lien vers la carte pour les joueurs";
t['31'] = "Afficher un lien vers la carte pour les alliances";
t['32'] = "Afficher 'Rechercher'";
t['33'] = "Afficher 'Rechercher' dans fenêtre flottante";
t['34'] = "Afficher PC/jour dans le tableau";
t['35'] = "Afficher la consommation de cereales dans le tableau";
t['37'] = "Afficher tableau sur page ressources";
t['38'] = "Afficher les ressources en couleur";
t['39'] = "Afficher le tableau de 'Barre de ressource'";
t['40'] = "Afficher le tableau de 'Barre de ressource' comme une fenetre flotante";
t['41'] = "Afficher tableau sur page batiments";
t['42'] = "Classer les batiments par nom dans le tableau";
t['43'] = "Afficher nombres";
t['44'] = "Afficher les batiments en couleur";
t['45'] = "Afficher niveau clignotant sur batiment constructible";
t['48'] = "Nombre de pages des offres marché ('Marché => Offre')<br>à charger/consulter (Défaut = 1)";
t['49'] = "Action par défaut sur place de rassemblement";
t['50'] = "Nb. d'éclaireurs lors du clic sur \"Eclaireur\"";
t['53'] = "Afficher info troupes dans info-bulle";
t['54'] = "Afficher distance temps dans info bulle";
t['56'] = "Affiche le type de case (sur carte)<br>lorsdu survol du curseur";
t['57'] = "Afficher distance & temps";
t['58'] = "Afficher tableau joueurs/villages/oasis";
t['59'] = "Nb. de pages message/rapport à charger<br>(Défaut = 1)";
t['60'] = "Montrer liens pour ouvrir les messages/rapports dans une popup";
t['61'] = "Afficher \"Tout supprimer\" dans page de rapports";
t['62'] = "Afficher icone \"Envoi message\" pour moi aussi";
t['63'] = "Montrer les RC ameliores TB3";
t['64'] = "Afficher detail Statistiques dans rapport";
t['65'] = "Couleur pour Construction possible<br>(Vide = couleur par défaut)";
t['66'] = "Couleur pour 'Niveau max'<br>(Vide = couleur par défaut)";
t['67'] = "Couleur pour 'Construction impossible'<br>(Vide = couleur par défaut)";
t['68'] = "Couleur pour 'Construction avec NPC'<br>(Vide = défaut)";
t['69'] = "Console Log - RÉSERVÉ aux DEVELOPPEURS et DEBUGGEURS<br>(Défaut = 0)";
t['82.L'] = "Verrouiller (Cache icones pour gérer les liens)";
t['82.U'] = "Déverrouiller (Affiche icones pour gérer les liens)";
t['U.2'] = "Peuple";
t['U.3'] = "Nom de la Capitale";
t['U.6'] = "Coordonnées de la Capitale";
t['SIM'] = "Simulateur";
t['QSURE'] = "Es-tu certain ?";
t['LOSS'] = "Pertes en matériels";
t['PROFIT'] = "Rentabilité";
t['EXTAV'] = "Tu peux déjà augmenter son niveau";
t['PLAYER'] = "Joueur";
t['POPULATION'] = "Population";
t['COORDS'] = "Coordonnées";
t['SAVED'] = "Sauvegarde";
t['YOUNEED'] = "Il manque";
t['TODAY'] = "aujourd'hui";
t['TOMORROW'] = "demain";
t['DAYAFTERTOM'] = "après-demain";
t['MARKET'] = "Place du marché";
t['BARRACKS'] = "Caserne";
t['RAP'] = "Place de rassemblement";
t['STABLE'] = "Ecurie";
t['WORKSHOP'] = "Atelier";
t['SENDRES'] = "Envoyer des ressources";
t['BUY'] = "Acheter des ressources";
t['SELL'] = "Vendre des ressources";
t['SENDIGM'] = "Envoyer MSG";
t['LISTO'] = "Prêt";
t['ON'] = "le";
t['AT'] = "à";
t['EFICIENCIA'] = "Efficacité";
t['NEVER'] = "Jamais";
t['TIEMPO'] = "Temps";
t['OFREZCO'] = "Offre";
t['BUSCO'] = "Recherche";
t['DISPONIBLE'] = "Disponible";
t['CUALQUIERA'] = "Toutes";
t['YES'] = "Oui";
t['NO'] = "Non";
t['MARCADORES'] = "Liens";
t['ANYADIR'] = "Ajouter";
t['UBU'] = "URL du nouveau lien";
t['UBT'] = "Texte du nouveau lien";
t['DEL'] = "Supprimer";
t['MAPA'] = "Carte";
t['MAXTIME'] = "Temps maximum";
t['SUMMARY'] = "Résumé";
t['TROPAS'] = "Troupes";
t['CHKSCRV'] = "MàJ TBeyond";
t['ACTUALIZAR'] = "Mise a jour informations village";
t['VENTAS'] = "Paramètres Vente";
t['MAPSCAN'] = "Analyse de la carte - ATTENTION NE PAS UTILISER- RISQUE BLOCAGE OP !";
t['BIC'] = "Afficher les icones étendues";
t['SAVE'] = "Sauver";
t['AT2'] = "Assistance";
t['AT3'] = "Attaque: Normal";
t['AT4'] = "Attaque: Pillage";
t['NBSN'] = "Normal";
t['NBSB'] = "Large";
t['NBHAX'] = "Hauteur Auto";
t['NBHK'] = "Hauteur par défaut";
t['NPCSAVETIME'] = "Sauver : ";
t['TOTALTROOPS'] = "Troupes totales du village";
t['SELECTALLTROOPS'] = "Tout sélectionner";
t['PARTY'] = "Festivités";
t['CPPERDAY'] = "PC/jour";
t['SELECTSCOUT'] = "Eclaireur";
t['SELECTFAKE'] = "Diversion";
t['ALL'] = "Tout";
t['SH2'] = "Dans case 'Couleur' vous pouvez saisir :<br>-red ou orange, etc.<br>- ou une couleur HEX exemple :#004523<br>- Laisser vide pour couleur par défaut";
t['SOREP'] = "Rapport original (A cocher obligatoirement avant diffusion du RC)";
t['WSIMO1'] = "Interne (celui du jeu)";
t['WSIMO2'] = "Externe (fourni par kirilloid.ru)";
t['NONEWVER'] = "Pas de mise à jour disponible";
t['BVER'] = "Tu as une version Beta du script (supérieure à version officielle) - Mise à jour impossible";
t['NVERAV'] = "Une nouvelle version du script est disponible";
t['UPDSCR'] = "Mettre à jour le script ?";
t['CHECKUPDATE'] = "Recherche de nouvelle version du script.<br>Veuillez patienter...";
t['AVPPV'] = "Population moyenne par village";
t['AVPPP'] = "Population moyenne par joueur";
t['TOTTRTR'] = "Total troupes en fabrication ";
t['UPDALLV'] = "Actualiser tous les villages. ATTENTION : NE PAS UTILISER - RISQUE BLOCAGE OP. !";
t['LARGEMAP'] = "Carte étendue";
t['USETHEMPR'] = "Calculer (proportionnel)";
t['USETHEMEQ'] = "Calculer (égalité)";
t['TOWNHALL'] = "Hotel de ville";
t['GSRVT'] = "Type de serveur";
t['ACCINFO'] = "Données personnelles";
t['NBO'] = "Bloc-notes";
t['MNUL'] = "Menu à gauche";
t['STAT'] = "Statistiques";
t['RESF'] = "Vue globale";
t['VLC'] = "Centre village";
t['MAPO'] = "options Carte";
t['COLO'] = "options Couleur";
t['DBGO'] = "options Debug";
t['HEROSMANSION'] = "Manoir Héros";
t['BLACKSMITH'] = "Armurerie";
t['ARMOURY'] = "Usine armure";
t['NOW'] = "Maintenant";
t['CLOSE'] = "Fermer";
t['USETHEM1H'] = "Calculer 1h de Prod.";
t['OVERVIEW'] = "Vue globale";
t['FORUM'] = "Forum";
t['ATTACKS'] = "Attaques";
t['NEWS'] = "Nouvelles";
t['ADDCRTPAGE'] = "Marquer cette page";
t['SCRPURL'] = "Page TBeyond";
t['SPACER'] = "Séparateur";
t['MEREO'] = "Messages & Rapports";
t['ATTABLES'] = "Liste troupes";
t['MTW'] = "Non utilisé";
t['MTX'] = "En trop";
t['MTC'] = "Transporté";
t['ALFL'] = "Lien vers forum externe<br>(Laisser vide pour forum interne)";
t['MTCL'] = "Tout effacer";
t['CKSORT'] = "Cliquer pour trier";
t['SVGL'] = "Sauver pour tous";
t['VGL'] = "Liste des Villages";
t['UPDATEPOP'] = "MaJ pop.";
t['EDIT'] = "Editer";
t['NPCO'] = "Options assistant NPC";
t['NEWVILLAGEAV'] = "Date/Heure";
t['TIMEUNTIL'] = "Temps d attente";
t['CENTERMAP'] = "Centrer la carte sur ce village";
t['SENDTROOPS'] = "Envoyer troupes";
t['PALACE'] = "Palais";
t['RESIDENCE'] = "Résidence";
t['ACADEMY'] = "Académie";
t['TREASURY'] = "Trésor";
t['UPGTB'] = "Tableau de mise a jour des batiments/champs";
t['RBTT'] = "Barre de ressource";
t['USE'] = "Utiliser";
t['CROPFINDER'] = "Recherche 15C";
break;

case 'hk': //contributors: MarioCheng, chihsun
case 'tw':
t['1'] = "Travian v2.x ???";
t['2'] = "?????";
t['3'] = "???????????????<br>(?????? T3.1 & T3.5 ????)";
t['4'] = "??";
t['5'] = "???/??/??/??";
t['6'] = "???/???/??/???";
t['7'] = "??/??/???/???";
t['8'] = "??";
t['9'] = "????????????<br>(Traviantoolbox, World Analyser, Travilog, Map, ??.)";
t['10'] = "????????????";
t['11'] = "???????????";
t['12'] = "?????? 'dorf1.php'?'dorf2.php'???";
t['13'] = "?????? '????'???";
t['14'] = "?????? '???/????'???";
t['15'] = "?????? ??????????????";
t['16'] = "?????? ????";
t['17'] = "?????? ????";
t['18'] = "??????????????(????)";
t['19'] = "?????? ?????????????";
t['20'] = "????";
t['21'] = "?????????";
t['22'] = "?????";
t['23'] = "??????????";
t['24'] = "?????";
t['25'] = "?????";
t['26'] = "??NPC????????";
t['27'] = "????????";
t['28'] = "?????????????";
t['29'] = "????????";
t['30'] = "?????????????";
t['31'] = "?????????????";
t['32'] = "?? '???'";
t['33'] = "??????????";
t['34'] = "??????? ?????";
t['35'] = "??????? ????";
t['36'] = "??????? ???????????????";
t['37'] = "??????????";
t['38'] = "?????????";
t['39'] = "???????";
t['40'] = "????????????";
t['41'] = "??????????";
t['42'] = "??????? ??????????";
t['43'] = "???????";
t['44'] = "?????????";
t['45'] = "???????????";
t['46'] = "???????????????";
t['48'] = "???????<br>'?? ? ??' ????<br>(?? = 1, ?? = 5)";
t['49'] = "????????";
t['50'] = "??\"??????\"?<br>?????????";
t['53'] = "?tooltip???????";
t['54'] = "?tooltip????????";
t['56'] = "??????<br>???????????";
t['57'] = "???????";
t['58'] = "????? ??/??/?? ??";
t['59'] = "???????<br> ????? ????<br>(?? = 1, ?? = 5)";
t['60'] = "???????????IGM???";
t['61'] = "??????? \"????\" ??";
t['62'] = "?? \"?IGM???\" ???";
t['63'] = "?????????";
t['64'] = "??????????";
t['65'] = "???????<br>(?? = ??)";
t['66'] = "?????????<br>(?? = ??)";
t['67'] = "???????<br>(?? = ??)";
t['68'] = "???NPC????????<br>(?? = ??)";
t['69'] = "??????<br>????????? ? ????<br>(?? = 0)";
t['82.L'] = "???? (?? ??, ??, ?????)";
t['82.U'] = "???? (?? ??, ??, ?????)";
t['U.2'] = "??";
t['U.3'] = "??????<br>??????????????,????????";
t['U.6'] = "??????<br>??????????????,????????";
t['SIM'] = "?????";
t['QSURE'] = "?????";
t['LOSS'] = "??";
t['PROFIT'] = "??";
t['EXTAV'] = "????!";
t['PLAYER'] = "??";
t['VILLAGE'] = "??";
t['POPULATION'] = "??";
t['COORDS'] = "??";
t['MAPTBACTS'] = "??";
t['SAVED'] = "??";
t['YOUNEED'] = "??";
t['TODAY'] = "??";
t['TOMORROW'] = "??";
t['DAYAFTERTOM'] = "??";
t['MARKET'] = "??";
t['BARRACKS'] = "??";
t['RAP'] = "???";
t['STABLE'] = "??";
t['WORKSHOP'] = "??";
t['SENDRES'] = "????";
t['BUY'] = "??";
t['SELL'] = "??";
t['SENDIGM'] = "??IGM";
t['LISTO'] = "????";
t['ON'] = "-";
t['AT'] = "-";
t['EFICIENCIA'] = "??";
t['NEVER'] = "??";
t['ALDEAS'] = "??";
t['TIEMPO'] = "??";
t['OFREZCO'] = "??";
t['BUSCO'] = "??";
t['TIPO'] = "??";
t['DISPONIBLE'] = "??????";
t['CUALQUIERA'] = "??";
t['YES'] = "?";
t['NO'] = "?";
t['LOGIN'] = "??";
t['MARCADORES'] = "??";
t['ANYADIR'] = "??";
t['UBU'] = "?????";
t['UBT'] = "?????(???????)";
t['DEL'] = "??";
t['MAPA'] = "?? (TravMap)";
t['MAXTIME'] = "??????";
t['ARCHIVE'] = "??";
t['SUMMARY'] = "??";
t['TROPAS'] = "??";
t['CHKSCRV'] = "??????";
t['ACTUALIZAR'] = "????????";
t['VENTAS'] = "????";
t['MAPSCAN'] = "?????";
t['BIC'] = "????????";
t['SAVE'] = "??";
t['AT2'] = "??";
t['AT3'] = "??:??";
t['AT4'] = "??:??";
t['NBSA'] = "??";
t['NBSN'] = "?? (?)";
t['NBSB'] = "??? (?)";
t['NBHAX'] = "??????";
t['NBHK'] = "????";
t['NPCSAVETIME'] = "??????:";
t['TOTALTROOPS'] = "????????";
t['SELECTALLTROOPS'] = "??????";
t['PARTY'] = "??";
t['CPPERDAY'] = "???(??)";
t['SLOT'] = "???";
t['TOTAL'] = "??";
t['SELECTSCOUT'] = "??????";
t['SELECTFAKE'] = "??????";
t['ALL'] = "??";
t['SH2'] = "????,????:<br>- green ? red ? orange, ??...<br>- ???????16???,? #004523<br>- ??????????????";
t['SOREP'] = "??????? (????)";
t['WSIMO1'] = "?? (??????)";
t['WSIMO2'] = "?? (?kirilloid.ru??)";
t['NONEWVER'] = "?????????";
t['BVER'] = "?????????";
t['NVERAV'] = "?????????,";
t['UPDSCR'] = "???????";
t['CHECKUPDATE'] = "????????,???...";
t['AVPPV'] = "??????";
t['AVPPP'] = "???????";
t['MAX'] = "??";
t['TOTTRTR'] = "?????????";
t['TB3SL'] = "?? TBeyond ML&CN";
t['UPDALLV'] = "?????????(?????????)";
t['LARGEMAP'] = "???";
t['USETHEMPR'] = "?????? (???????)";
t['USETHEMEQ'] = "?????? (????)";
t['TOWNHALL'] = "???";
t['GSRVT'] = "?????";
t['ACCINFO'] = "????";
t['NBO'] = "???";
t['MNUL'] = "????";
t['STAT'] = "??";
t['RESF'] = "???";
t['VLC'] = "????";
t['MAPO'] = "????";
t['COLO'] = "????";
t['DBGO'] = "????";
t['HEROSMANSION'] = "???";
t['BLACKSMITH'] = "??";
t['ARMOURY'] = "???";
t['NOW'] = "??";
t['CLOSE'] = "??";
t['USETHEM1H'] = "?????? (??1????)";
t['OVERVIEW'] = "??";
t['FORUM'] = "??";
t['ATTACKS'] = "??";
t['NEWS'] = "??";
t['ADDCRTPAGE'] = "????";
t['SCRPURL'] = "TB ML&CN ??";
t['SPACER'] = "???";
t['MEREO'] = "?????";
t['ATTABLES'] = "????";
t['MTW'] = "????";
t['MTX'] = "???";
t['MTC'] = "??????";
t['ALFL'] = "?????????<br>(?????????????)";
t['MTCL'] = "????";
t['CKSORT'] = "?????";
t['MIN'] = "??";
t['SVGL'] = "?????????";
t['VGL'] = "????";
t['UPDATEPOP'] = "????";
t['EDIT'] = "??";
t['NPCO'] = "NPC????";
t['NEWVILLAGEAV'] = "??/??";
t['TIMEUNTIL'] = "???????";
t['CENTERMAP'] = "????????";
t['SENDTROOPS'] = "????";
t['PALACE'] = "??";
t['RESIDENCE'] = "??";
t['ACADEMY'] = "???";
t['TREASURY'] = "???";
t['UPGTB'] = "???/???????";
t['RBTT'] = "???";
t['USE'] = "??";
t['RESIDUE'] = "???????";
t['RESOURCES'] = "???????";
t['SH1'] = "?????????????????<br>??????????????,??????????";
t['CROPFINDER'] = "????";
break;

case 'hu': //contributors: geo
t['1'] = "Travian v2.x kiszolgáló";
t['4'] = "Piac";
t['5'] = "Gyülekezõtér/Kaszárnya/Mûhely/Istálló";
t['6'] = "Tanácsháza/Hõsök háza/Páncélkovács/Fegyverkovács";
t['7'] = "Palota/Rezidencia/Akadémia/Kincstár";
t['8'] = "Klán";
t['9'] = "További linkek bal oldalon<br>(Traviantoolbox, World Analyser, Travilog, Térkép, stb.)";
t['10'] = "Harcszimulátor link:<br>(bal oldali menü)";
t['12'] = "'dorf1.php' és 'dorf2.php' linkek mutatása";
t['13'] = "Mutasd a \"Térkép központosítása\" ikont";
t['20'] = "Könyvjelzõk mutatása";
t['22'] = "Jegyzettömb mutatása";
t['24'] = "Jegyzettömb mérete";
t['25'] = "Jegyzettömb magassága";
t['26'] = "NPC segítõ számítások és linkek mutatása";
t['27'] = "World Analyser választása";
t['28'] = "Linkek a statisztika elemzõhöz";
t['37'] = "Külterület fejlesztési táblája";
t['38'] = "Külterület színjelzése";
t['41'] = "Épületek fejlesztési táblája";
t['43'] = "Épület szintek mutatása";
t['44'] = "Épületek színjelzése";
t['45'] = "Villogó szintjelzés az éppen fejlesztett épületekhez";
t['48'] = "Piaci ajánlatoknál több oldal elõre betöltése<br>A Piac -Vásárlás- oldalán<br>(Alap = 1)";
t['49'] = "Gyülekezõtér alapmûvelet";
t['50'] = "Kémek száma a<br>\"Kémek választása\" funkcióhoz";
t['53'] = "Egység információ mutatása gyorstippben";
t['54'] = "Távolság és idõ mutatása falvakhoz";
t['56'] = "Mezõ-típus, oázis infó mutatása<br>az egérmutató alatt";
t['57'] = "Távolság/idõ mutatása";
t['58'] = "Játékosok/falvak/oázisok mutatása a térképnél";
t['59'] = "Üzenetek/jelentések elõre betöltött oldalainak száma<br>(Default = 1)";
t['60'] = "Linkek az üzenetek felugró ablakban mutatásához";
t['61'] = "\"Mindet törölni\" mutatása a jelentésekhez";
t['62'] = "\"Üzenet küldése\" mutatása magam részére is";
t['64'] = "Jelentés statisztika részletezése";
t['65'] = "Szín, ha fejleszthetõ<br>(az alaphoz hagyd üresen)";
t['66'] = "Szín, ha teljesen ki van építve<br>(az alaphoz hagyd üresen)";
t['67'] = "Szín, ha nem elérhetõ a fejlesztés<br>(az alaphoz hagyd üresen)";
t['68'] = "Szín, ha NPC-vel fejleszthetõ<br>(az alaphoz hagyd üresen)";
t['69'] = "Konzol naplózási szint<br>CSAK PROGRAMOZÓKNAK VAGY HIBAKERESÉSHEZ<br>(Alap = 0)";
t['82.L'] = "Könyvjelzõk lezárása (Törlés és mozgatás ikonok eltüntetése)";
t['82.U'] = "Könyvjelzõk feloldása (Törlés és mozgatás ikonok mutatása)";
t['U.2'] = "Nép";
t['U.3'] = "Fõfalud neve<br><a href=\"spieler.php\">Nézd meg a profilodat a frissítéshez</a>";
t['U.6'] = "Fõfalud koordinátái<br><a href=\"spieler.php\">Nézd meg a profilodat a frissítéshez</a>";
t['SIM'] = "Harc szimulátor";
t['QSURE'] = "Biztos vagy benne?";
t['LOSS'] = "Veszteség";
t['PROFIT'] = "Nyereség";
t['EXTAV'] = "Fejlesztés elérhetõ";
t['PLAYER'] = "Játékos";
t['VILLAGE'] = "Falu";
t['POPULATION'] = "Népesség";
t['COORDS'] = "Koordináták";
t['MAPTBACTS'] = "Mozgás:";
t['SAVED'] = "Mentve";
t['YOUNEED'] = "Kell";
t['TODAY'] = "ma";
t['TOMORROW'] = "holnap";
t['DAYAFTERTOM'] = "holnapután";
t['MARKET'] = "Piac";
t['BARRACKS'] = "Kaszárnya";
t['RAP'] = "Gyülekezõtér";
t['STABLE'] = "Istálló";
t['WORKSHOP'] = "Mûhely";
t['SENDRES'] = "Nyersanyag küldése";
t['BUY'] = "Vétel";
t['SELL'] = "Eladás";
t['SENDIGM'] = "Üzenet küldése";
t['LISTO'] = "Elérhetõ";
t['ON'] = "ezen a napon:";
t['AT'] = "ekkor:";
t['EFICIENCIA'] = "Hatékonyság";
t['NEVER'] = "Soha";
t['ALDEAS'] = "Falvak";
t['TIEMPO'] = "Idõ";
t['OFREZCO'] = "Felajánlás";
t['BUSCO'] = "Keresés";
t['TIPO'] = "Típus";
t['DISPONIBLE'] = "Csak elfogadhatót";
t['CUALQUIERA'] = "Mind";
t['YES'] = "Igen";
t['NO'] = "Nem";
t['LOGIN'] = "Bejelentkezés";
t['MARCADORES'] = "Könyvjelzõk";
t['ANYADIR'] = "Hozzáad";
t['UBU'] = "Könyvjelzõ URL";
t['UBT'] = "Könyvjelzõ szövege";
t['DEL'] = "Törlés";
t['MAPA'] = "Térkép";
t['MAXTIME'] = "Maximum idõ";
t['ARCHIVE'] = "Archívum";
t['SUMMARY'] = "Összefoglalás";
t['TROPAS'] = "Egységek";
t['CHKSCRV'] = "TBeyond frissítése";
t['ACTUALIZAR'] = "Falu információ frissítése";
t['VENTAS'] = "Mentett ajánlatok";
t['MAPSCAN'] = "Térkép vizsgálata";
t['BIC'] = "Bõvített ikonok";
t['SAVE'] = "Mentés";
t['AT2'] = "Támogatás";
t['AT3'] = "Normál támadás";
t['AT4'] = "Rablótámadás";
t['NBSA'] = "Automatikus";
t['NBSN'] = "Normál (kicsi)";
t['NBSB'] = "Nagy képernyõ (nagy)";
t['NBHAX'] = "Magasság automatikus bõvítése";
t['NBHK'] = "Alap magasság";
t['NPCSAVETIME'] = "Spórolsz: ";
t['TOTALTROOPS'] = "A faluban képzett egységek";
t['SELECTALLTROOPS'] = "Minden egység kiválasztása";
t['PARTY'] = "Ünnepségek";
t['CPPERDAY'] = "KP/nap";
t['SLOT'] = "Hely";
t['TOTAL'] = "Teljes";
t['SELECTSCOUT'] = "Kémek kiválasztása";
t['SELECTFAKE'] = "Fake kiválasztása";
t['ALL'] = "Mind";
t['SH2'] = "A színeket így add meg:<br>- green vagy red vagy  orange stb.<br>- vagy HEX színkóddal #004523<br>- hagyd üresen az alapértelmezett színhez";
t['SOREP'] = "Eredeti jelentés (küldéshez)";
t['WSIMO1'] = "Beépített";
t['WSIMO2'] = "Külsõ (kirilloid.ru által)";
t['NONEWVER'] = "A legújabb verziót használod";
t['BVER'] = "Lehet hogy BETA verziód van";
t['NVERAV'] = "A szkript új verziója elérhetõ";
t['UPDSCR'] = "Frissíted most?";
t['CHECKUPDATE'] = "Szkript-frissítés keresése.<br>Kérlek várj...";
t['AVPPV'] = "Falunkénti átlag népesség";
t['AVPPP'] = "Játékosonkénti átlag népesség";
t['TOTTRTR'] = "Összes kiképzés alatt álló egység";
t['TB3SL'] = "$1 Beállítások";
t['UPDALLV'] = "Minden falu frissítése. HASZNÁLD ÓVATOSAN, TILTÁS JÁRHAT ÉRTE!";
t['LARGEMAP'] = "Nagy térkép";
t['USETHEMPR'] = "Arányos elosztás";
t['USETHEMEQ'] = "Egyenlõ elosztás";
t['TOWNHALL'] = "Tanácsháza";
t['GSRVT'] = "Játék kiszolgáló";
t['ACCINFO'] = "Felhasználó információ";
t['NBO'] = "Jegyzettömb";
t['MNUL'] = "Baloldali menü";
t['STAT'] = "Statisztikák";
t['RESF'] = "Külterület";
t['VLC'] = "Faluközpont";
t['MAPO'] = "Térkép beállítások";
t['COLO'] = "Szín beállítások";
t['DBGO'] = "Hibakeresési beállítások";
t['HEROSMANSION'] = "Hõsök háza";
t['BLACKSMITH'] = "Fegyverkovács";
t['ARMOURY'] = "Páncélkovács";
t['NOW'] = "Most";
t['CLOSE'] = "Bezárás";
t['USETHEM1H'] = "Egy órai termelés";
t['OVERVIEW'] = "Áttekintés";
t['FORUM'] = "Fórum";
t['ATTACKS'] = "Támadások";
t['NEWS'] = "Hírek";
t['ADDCRTPAGE'] = "Jelenlegi hozzáadása";
t['SCRPURL'] = "TBeyond oldal";
t['SPACER'] = "Elválasztó";
t['MEREO'] = "Üzenetek & Jelentések";
t['ATTABLES'] = "Egység tábla";
t['MTW'] = "Elpazarolva";
t['MTX'] = "Meghaladja";
t['MTC'] = "Jelenlegi rakomány";
t['ALFL'] = "Link külsõ fórumhoz<br>(belsõhöz hagyd üresen)";
t['MTCL'] = "Mindet törölni";
t['CKSORT'] = "Rendezéshez kattints";
t['MIN'] = "Min";
t['SVGL'] = "Minden faluhoz menteni";
t['VGL'] = "Falu lista";
t['UPDATEPOP'] = "Népesség frissítése";
t['EDIT'] = "Szerkesztés";
t['NPCO'] = "NPC segítõ beállításai";
t['NEWVILLAGEAV'] = "Dátum/Idõ";
t['TIMEUNTIL'] = "Várakozás";
t['CENTERMAP'] = "Térkép középpontjába ezt a falut";
t['SENDTROOPS'] = "Egységek kiküldése";
t['PALACE'] = "Palota";
t['RESIDENCE'] = "Rezidencia";
t['ACADEMY'] = "Akadémia";
t['TREASURY'] = "Kincstár";
t['USE'] = "Használat";
t['CROPFINDER'] = "Búzakeresõ";
break;

case 'id': //contributors: CuPliz13, adudutz
t['1'] = "Server Travian v2.x";
t['4'] = "Pasar";
t['5'] = "Titik temu|Barak|Bengkel|Istal";
t['6'] = "Balai desa|Padepokan|Pabrik perisai|Pandai besi";
t['7'] = "Istana|Kastil|Akademi|Gudang Ilmu";
t['8'] = "Aliansi";
t['9'] = "Tampilkan link tambahan di menu kiri<br>(Travian Toolbox, World Analyser, Travilog, Map, dll.)";
t['10'] = "Link simulator perang untuk dipakai:<br>(menu kiri)";
t['12'] = "tampilkan link 'Peninjauan Desa' dan 'Pusat Desa'";
t['13'] = "Tampilkan ikon \"Desa ini sebagai tengah-tengah peta\"";
t['14'] = "Tampilkan ikon 'Kirim Sumberdaya/Kirim Pasukkan' di daftar desa";
t['16'] = "Tampilkan produksi gandum efektif di daftar desa";
t['17'] = "Tampilkan populasi di daftar desa";
t['18'] = "Tampilkan daftar desa tambahan (2 kolom) sebagai jendela terpisah";
t['19'] = "Tampilkan informasi tentang pembangunan dan pergerakan pasukkan<br>di daftar desa";
t['20'] = "Tampilkan bookmark";
t['21'] = "Tampilkan bookmark sebagai jendela terpisah";
t['22'] = "Tampilkan blok catatan";
t['23'] = "Tampilkan blok catatan sebagai jendela terpisah";
t['24'] = "Ukuran blok catatan";
t['25'] = "Lebar blok catatan";
t['26'] = "Tampilkan link kalkulasi dari NPC Assistant";
t['27'] = "World Analyser untuk dipakai";
t['28'] = "Tampilkan link Analyser Statistic";
t['29'] = "Map Analyser yang dipakai";
t['30'] = "Tampilkan link ke Map Analyser untuk pemain";
t['31'] = "Tampilkan link ke Map Analyser untuk aliansi";
t['32'] = "Tampilkan 'Tabel Pencarian'";
t['33'] = "Tampilkan 'Tabel Pencarian' sebagai jendela terpisah";
t['34'] = "Tampilkan informasi NB/hari di tabel tingkatan";
t['35'] = "Tampilkan informasi penggunaan gandum di tabel tingkatan";
t['36'] = "Tampilkan penghitungan sisa Sumberdaya di tabel tingkatan/pelatihan";
t['37'] = "Tampilkan tabel tingkatan lahan sumberdaya";
t['38'] = "Tampilkan warna tingkatan sumberdaya";
t['39'] = "Tampilkan 'Tabel Sumberdaya'";
t['40'] = "Tampilkan 'Tabel Sumberdaya' sebagai jendela terpisah";
t['41'] = "Tampilkan tabel tingkatan bangunan";
t['42'] = "Urutkan bangunan berdasarkan nama di tabel tingkatan";
t['43'] = "Tampilkan angka pusat";
t['44'] = "Tampilkan warna tingkatan bangunan";
t['45'] = "Tampilkan kedipan untuk bangunan yang sedang ditingkatkan";
t['48'] = "Jumlah halaman penawaran untuk ditampilkan<br>saat ada di halaman 'Pasar => Beli'<br>(Default = 1)";
t['49'] = "Aksi default dari titik temu";
t['50'] = "Jumlah pengintai untuk<br>fungsi \"Pilih pengintai\"";
t['53'] = "Tampilkan info pasukan di tooltip";
t['54'] = "Tampilkan jarak dan waktu ke desa-desa di tooltip";
t['56'] = "Tampilkan tipe info bidang/oasis<br>saat kursor mouse berada di atas peta";
t['57'] = "Tampilkan jarak & waktu";
t['58'] = "Tampilkan tabel pemain, desa dan oasis yang dikuasai";
t['59'] = "Jumlah halaman pesan/laporan untuk ditampilkan<br>(Default = 1)";
t['60'] = "Tampilkan link untuk membuka pesan dalam popup";
t['61'] = "Tampilkan tabel \"Hapus semua\" di halaman Laporan";
t['62'] = "Tampilkan ikon \"Kirim Pesan\"";
t['63'] = "Tampilkan laporan penyerangan TB3 yang disempurnakan";
t['64'] = "Tampilkan detail pada Laporan Statistik";
t['65'] = "Upgrade tersedia<br>(Default = Kosong)";
t['66'] = "Warna level maks<br>(Default = Kosong)";
t['67'] = "Upgrade tidak tersedia<br>(Default = Kosong)";
t['68'] = "Upgrade lewat NPC<br>(Default = Kosong)";
t['69'] = "Console Log Level<br>HANYA UNTUK PROGRAMMERS SAAT DEBUGGING<br>(Default = 0)";
t['82.L'] = "Kunci bookmark (sembunyikan ikon hapus, naikkan, turunkan)";
t['82.U'] = "Buka bookmark (tampilkan ikon hapus, naikkan, turunkan)";
t['U.2'] = "Suku";
t['U.3'] = "Nama Ibukota<br><b>Kunjungi profil Anda untuk perubahan</b>";
t['U.6'] = "Koordinat Ibukota Anda<br><b>Kunjungi profil Anda untuk perubahan</b>";
t['SIM'] = "Simulator Perang";
t['QSURE'] = "Apakah Anda yakin?";
t['LOSS'] = "Kerugian";
t['PROFIT'] = "Laba";
t['EXTAV'] = "Naikkan tingkat";
t['PLAYER'] = "Pemain";
t['VILLAGE'] = "Desa";
t['POPULATION'] = "Populasi";
t['COORDS'] = "Koordinat";
t['MAPTBACTS'] = "Aksi";
t['SAVED'] = "Disimpan";
t['YOUNEED'] = "Anda butuh";
t['TODAY'] = "hari ini";
t['TOMORROW'] = "besok";
t['DAYAFTERTOM'] = "lusa";
t['MARKET'] = "Pasar";
t['BARRACKS'] = "Barak";
t['RAP'] = "Titik Temu";
t['STABLE'] = "Istal";
t['WORKSHOP'] = "Bengkel";
t['SENDRES'] = "Kirim sumberdaya";
t['BUY'] = "Beli";
t['SELL'] = "Jual";
t['SENDIGM'] = "Kirim Pesan";
t['LISTO'] = "Tersedia";
t['ON'] = "pada";
t['AT'] = "pukul";
t['EFICIENCIA'] = "Efisiensi";
t['NEVER'] = "jika gudang ditingkatkan";
t['ALDEAS'] = "Desa";
t['TIEMPO'] = "Waktu";
t['OFREZCO'] = "Penawaran";
t['BUSCO'] = "Cari";
t['TIPO'] = "Tipe";
t['DISPONIBLE'] = "Hanya tersedia";
t['CUALQUIERA'] = "Apapun";
t['YES'] = "Ya";
t['NO'] = "Tidak";
t['LOGIN'] = "Login";
t['MARCADORES'] = "Bookmark";
t['ANYADIR'] = "Tambah";
t['UBU'] = "URL Bookmark";
t['UBT'] = "Nama Bookmark";
t['DEL'] = "Hapus";
t['MAPA'] = "Peta";
t['MAXTIME'] = "Waktu maks";
t['ARCHIVE'] = "Arsip";
t['SUMMARY'] = "Laporan";
t['TROPAS'] = "Pasukan";
t['ACTUALIZAR'] = "Informasi Desa diubah";
t['VENTAS'] = "Simpan penawaran";
t['MAPSCAN'] = "Pindai peta";
t['BIC'] = "Tampilkan ikon tambahan";
t['SAVE'] = "Simpan";
t['AT2'] = "Bantuan";
t['AT3'] = "Serangan: Normal";
t['AT4'] = "Serangan: Raid";
t['NBSA'] = "Otomatis";
t['NBSN'] = "Normal (kecil)";
t['NBSB'] = "Layar lebar (besar)";
t['NBHAX'] = "Lebar menyesuaikan otomatis";
t['NBHK'] = "Lebar asal";
t['NPCSAVETIME'] = "Simpan: ";
t['TOTALTROOPS'] = "Jumlah pasukan";
t['SELECTALLTROOPS'] = "Pilih semua pasukan";
t['PARTY'] = "Festivalitas";
t['CPPERDAY'] = "NB/hari";
t['SLOT'] = "Slot";
t['TOTAL'] = "Total";
t['SELECTSCOUT'] = "Pilih pengintai";
t['SELECTFAKE'] = "Pilih penipu";
t['ALL'] = "Seluruh";
t['SH2'] = "Di kolom warna Anda bisa mengisi:<br>- <b>green</b> atau <b>red</b> atau <b>orange</b>, dll.<br>- warna menggunakan kode heksadesilmal (HEX), seperti <b>#004523</b><br>- kosongkan untuk warna default";
t['SOREP'] = "Tampilkan laporan asli (untuk posting dalam forum)";
t['WSIMO1'] = "Internal (dari permainan)";
t['WSIMO2'] = "Eksternal (dari kirilloid.ru)";
t['NONEWVER'] = "Anda memiliki versi terakhir yang tersedia";
t['BVER'] = "Anda memiliki versi beta";
t['NVERAV'] = "Versi script terbaru telah tersedia";
t['UPDSCR'] = "Update script sekarang?";
t['CHECKUPDATE'] = "Mengecek update script.<br>Harap tunggu...";
t['AVPPV'] = "Populasi rata-rata per desa";
t['AVPPP'] = "Populasi rata-rata per pemain";
t['MAX'] = "Maks";
t['TOTTRTR'] = "Total pelatihan pasukan";
t['UPDALLV'] = "Update semua desa. PEMAKAIAN MAKSIMUM BISA MENYEBABKAN AKUN ANDA DIHAPUS!";
t['LARGEMAP'] = "Peta lebar";
t['USETHEMPR'] = "Pakai (proporsional)";
t['USETHEMEQ'] = "Pakai (sama)";
t['TOWNHALL'] = "Balai Desa";
t['GSRVT'] = "Server permainan";
t['ACCINFO'] = "Informasi Akun";
t['NBO'] = "Catatan";
t['MNUL'] = "Menu di sebelah kanan";
t['STAT'] = "Statistik";
t['RESF'] = "Lahan Sumberdaya";
t['VLC'] = "Pusat desa";
t['MAPO'] = "Opsi peta";
t['COLO'] = "Opsi warna";
t['DBGO'] = "Opsi debug";
t['HEROSMANSION'] = "Padepokan";
t['BLACKSMITH'] = "Pandai besi";
t['ARMOURY'] = "Pabrik perisai";
t['NOW'] = "Sekarang";
t['CLOSE'] = "Tutup";
t['USETHEM1H'] = "Pakai (1 jam produksi)";
t['OVERVIEW'] = "Peninjauan";
t['FORUM'] = "Forum";
t['ATTACKS'] = "Serangan";
t['NEWS'] = "Berita";
t['ADDCRTPAGE'] = "Tambahkan halaman ini";
t['SCRPURL'] = "TBeyond Home";
t['SPACER'] = "Penjeda";
t['MEREO'] = "Pesan & Laporan";
t['ATTABLES'] = "Tabel pasukan";
t['MTW'] = "Sisa muatan";
t['MTX'] = "Melampaui";
t['MTC'] = "Muatan saat ini";
t['ALFL'] = "Link ke forum luar<br>(kosongkan untuk memakai forum internal)";
t['MTCL'] = "Kosongkan Semua";
t['CKSORT'] = "Klik untuk mengurutkan";
t['MIN'] = "Min";
t['SVGL'] = "Pembagian diantara desa-desa";
t['VGL'] = "Daftar Desa";
t['UPDATEPOP'] = "Update populasi";
t['EDIT'] = "Ubah";
t['NPCO'] = "Opsi NPC Assistant";
t['NEWVILLAGEAV'] = "Tanggal/Waktu";
t['TIMEUNTIL'] = "Waktu untuk menunggu";
t['CENTERMAP'] = "Desa ini sebagai tengah-tengah peta";
t['SENDTROOPS'] = "Kirim Pasukan";
t['PALACE'] = "Istana";
t['RESIDENCE'] = "Kastil";
t['ACADEMY'] = "Akademi";
t['TREASURY'] = "Gudang Ilmu";
t['UPGTB'] = "Tabel Tingkatan Sumberdaya/Bangunan";
t['RBTT'] = "Tabel Sumberdaya";
t['USE'] = "Pakai";
t['RESIDUE'] = "Sisa Sumberdaya jika dibangun ";
t['RESOURCES'] = "Sumberdaya";
t['CROPFINDER'] = "Crop Finder";
break;

case 'il': //contributors: zZzMichel, BlueShark, yabash, removesoul, DMaster
t['1'] = "??? ??????? ????? 2.x";
t['2'] = "??? ??????";
t['3'] = "??? ?????? ????? ????? ?? ??????? ?????? ????? T3.1<br>(????? ????? T3.1 ?- T3.5 ??????? - ????? ????? ????? .de)";
t['4'] = "???";
t['5'] = "????? ????/????? ??????/???-?????/?????? ";
t['6'] = "????? ???????/????? ??????/??? ?????/??? ???";
t['7'] = "?????/??????/??????/????-?????";
t['8'] = "????";
t['9'] = "???? ?????? ?????? ?????? ?????<br>(Traviantoolbox, World Analyser, Travilog, ???, ???')";
t['10'] = "???????? ??? ?????? (?????? ?????)";
t['12'] = "??? ??????? 'dorf1.php' ?- 'dorf2.php' ?????? ??????";
t['13'] = "??? ??? \"???????? ??? ?? ????\" ?????? ??????";
t['14'] = "??? ?? ?????? '????? ?????/??????' ?????? ??????";
t['16'] = "??? ??? ????? ???? ?? ?? ??? ?????? ??????";
t['17'] = "??? ????????? ?????? ??????";
t['18'] = "??? ????? ????? ????? ????? ????? ?? (???? ???? ?????)";
t['19'] = "??? ??? ???? ????? ????? ????? ???????? ??????? ??????/????? ?????? ??????";
t['20'] = "???? ???????";
t['21'] = "??? ?? ?'???????' ????? ????";
t['22'] = "??? ???? ?????";
t['23'] = "??? ?? '???? ???????' ????? ??";
t['24'] = "???? ???? ?????";
t['25'] = "???? ???? ?????";
t['26'] = "??? ??????? ??????? ?? ????????? ?- NPC";
t['27'] = "???? ?????? ??????";
t['28'] = "??? ?????? ????????? ????? ??????";
t['29'] = "???? ??? ??????";
t['30'] = "??? ?????? ???? - ??????? ??????";
t['31'] = "??? ?????? ???? - ??????? ??????";
t['32'] = "??? ????? ?????'";
t['33'] = "??? '????? ?????' ????? ??";
t['34'] = "??? ?????? ????? ???? ?????? ?????????";
t['35'] = "??? ????? ???? ?????? ?????????";
t['36'] = "??? ??????? ????? ??????? ?????? ??????? ?????? ????? ?????? ??????";
t['37'] = "???? ???? ????? ???? ??????";
t['38'] = "??? ??? ???? ?????? ????";
t['39'] = "??? ????? '??? ?????'";
t['40'] = "??? ????? '??? ?????' ????? ??";
t['41'] = "???? ???? ????? ?????";
t['42'] = "??? ?? ?????? ????? ?????? ?????? ??? ????";
t['43'] = "??? ???? ?????";
t['44'] = "??? ??? ????? ????";
t['45'] = "??? ?????? ??????? ?????? ??????? ??????";
t['46'] = "??? ???? ???? ??? ?? ???? ?????";
t['48'] = "???? ??? ????? ?????? ???? ??????? ????? '??? => ?????'<br>(????? ???? = 1)";
t['49'] = "????? ????? ???? ?????? ?????";
t['50'] = "???? ??????? ????? ?????? ???????? '??? ????'";
t['53'] = "??? ???? ?? ??????? ?????? ????? ?? ?????????";
t['54'] = "??? ?????? ?????? ?????? ????? ?? ???? ?????";
t['56'] = "???? ??? ??? ????/???? ???? ???? ????? ????? ????? ????";
t['57'] = "??? ?????? ??????";
t['58'] = "??? ???? ?? ??????/?????/????? ??????";
t['59'] = "???? ??? ???????/????? ??????? ?????<br>(?????-???? = 1)";
t['60'] = "??? ????? ?????? ?????? ????? ?????";
t['61'] = "??? ?? ???? ?????? ?????? ???? ??????";
t['62'] = "??? ?? ??? '????? ?????' ?? ??? ?? ?????? ???";
t['63'] = "??? ????????? ?????? ???? ??????";
t['64'] = "??? ???? ????????? ?????? ???? ??????";
t['65'] = "??? ????? ???? (????? ???? = ???)";
t['66'] = "??? ??? ???????? (????? ???? = ???)";
t['67'] = "??? ???? ????? ?? ????? (????? ???? = ???)";
t['68'] = "??? ????? ?\"? NPC (????? ???? = ???)";
t['69'] = "Console Log Level<br>?? ????? ??????? ?? ????? ?????, (????? ???? = 0)";
t['82.L'] = "??? ??????? (????? ?? ???? ?????? ??????)";
t['82.U'] = "??? ????? ??????? (???? ?? ???? ?????? ??????)";
t['U.2'] = "<b>???</b><br>?? ?????? ?????/???, ??? ???? ?????? ???????";
t['U.3'] = "<b>?? ?????</b><br>?? ?????? ?????/???, ??? ???? ??? ???????";
t['U.6'] = "<b>??????????? ?????</b><br>?? ?????? ?????/???, ??? ???? ??? ???????";
t['SIM'] = "???????? ??? ";
t['QSURE'] = "??? ??? ?????";
t['LOSS'] = "????";
t['PROFIT'] = "????";
t['EXTAV'] = "?????? ????";
t['PLAYER'] = "????";
t['VILLAGE'] = "???";
t['POPULATION'] = "?????????";
t['COORDS'] = "???????????";
t['MAPTBACTS'] = "??????";
t['SAVED'] = "????";
t['YOUNEED'] = "??/? ????/?";
t['TODAY'] = "????";
t['TOMORROW'] = "???";
t['DAYAFTERTOM'] = "???????";
t['MARKET'] = "???";
t['BARRACKS'] = "????? ??????";
t['RAP'] = "????? ????";
t['STABLE'] = "??????";
t['WORKSHOP'] = "??? ?????";
t['SENDRES'] = "??? ??????";
t['BUY'] = "???";
t['SELL'] = "????";
t['SENDIGM'] = "??? ?????";
t['LISTO'] = "????";
t['ON'] = "????";
t['AT'] = "?";
t['EFICIENCIA'] = "??????";
t['NEVER'] = "?? ???";
t['ALDEAS'] = "???(??)";
t['TIEMPO'] = "???";
t['OFREZCO'] = "????";
t['BUSCO'] = "????";
t['TIPO'] = "??? ??????";
t['DISPONIBLE'] = "?? ?????? ??????? ?";
t['CUALQUIERA'] = "?? ???";
t['YES'] = "??";
t['NO'] = "??";
t['LOGIN'] = "?????";
t['MARCADORES'] = "???????";
t['ANYADIR'] = "????";
t['UBU'] = "????";
t['UBT'] = "??";
t['DEL'] = "???";
t['MAPA'] = "???";
t['MAXTIME'] = "??????? ??? ?????";
t['ARCHIVE'] = "??????";
t['SUMMARY'] = "?????";
t['TROPAS'] = "?????";
t['CHKSCRV'] = "???? TBeyond";
t['ACTUALIZAR'] = "???? ???? ?? ????";
t['VENTAS'] = "????? ??????";
t['MAPSCAN'] = "???? ???";
t['BIC'] = "??? ???????? ???????";
t['SAVE'] = "????";
t['AT2'] = "??????";
t['AT3'] = "????? ?????";
t['AT4'] = "????? ?????";
t['NBSA'] = "????????";
t['NBSN'] = "???? (???)";
t['NBSB'] = "??? ???";
t['NBHAX'] = "???? ???? ?????????";
t['NBHK'] = "???? ????? ????";
t['NPCSAVETIME'] = "????: ";
t['TOTALTROOPS'] = "??\"? ????? ??? ???? ??";
t['SELECTALLTROOPS'] = "??? ?? ?? ???????";
t['PARTY'] = "??????";
t['CPPERDAY'] = "?????? ????? ????";
t['SLOT'] = "???? ????";
t['TOTAL'] = "??\"?";
t['SELECTSCOUT'] = "??? ????";
t['SELECTFAKE'] = "????? ??????";
t['ALL'] = "???";
t['SH2'] = "?????? ?????? ??? ???? ??????:<br>- <b>green</b> ?? <b>red</b> ??  <b>orange</b> ???'<br>- ??? HEX  ??? <b>#004523</b><br>- ???? ??? ????? ????? ?????";
t['SOREP'] = "???? ??? ???? (??????)";
t['WSIMO1'] = "????? (????? ?? ??? ?????)";
t['WSIMO2'] = "?????? (????? ?? ??? kirilloid.ru)";
t['NONEWVER'] = "?? ?? ?? ?????? ??????? ?????";
t['BVER'] = "??? ???? ?????? ?? ????? ????";
t['NVERAV'] = "????? ????? ???? ???????";
t['UPDSCR'] = "???? ?? ?????? ??????";
t['CHECKUPDATE'] = "???? ??????? ???????. ??? ????...";
t['AVPPV'] = "????? ????????? ????";
t['AVPPP'] = "????? ????????? ?????";
t['MAX'] = "???";
t['TOTTRTR'] = "??\"? ?????? ??????";
t['TB3SL'] = "?????? $1";
t['UPDALLV'] = "???? ???? ?? ?? ??????. ?????? ??????? ?? ???? ???? ?????? ????? ???!";
t['LARGEMAP'] = "??? ?????";
t['USETHEMPR'] = "??? ?????? (????? ???????????)";
t['USETHEMEQ'] = "??? ?????? (????? ????)";
t['TOWNHALL'] = "????? ???????";
t['GSRVT'] = "??? ????";
t['ACCINFO'] = "???? ?????";
t['NBO'] = "???? ???????";
t['MNUL'] = "?????? ?????? ???? ????";
t['STAT'] = "??????????";
t['RESF'] = "???? ??????";
t['VLC'] = "???? ????";
t['MAPO'] = "???????? ???";
t['COLO'] = "???????? ?????";
t['DBGO'] = "???? ??????";
t['HEROSMANSION'] = "????? ??????";
t['BLACKSMITH'] = "??? ???";
t['ARMOURY'] = "??? ?????";
t['NOW'] = "???";
t['CLOSE'] = "????";
t['USETHEM1H'] = "??? ?????? (???? ?? ???)";
t['OVERVIEW'] = "???-??";
t['FORUM'] = "?????";
t['ATTACKS'] = "??????";
t['NEWS'] = "?????";
t['ADDCRTPAGE'] = "???? ?? ?????";
t['SCRPURL'] = "??? ???????";
t['SPACER'] = "?? ?????";
t['MEREO'] = "?????? ??????";
t['ATTABLES'] = "?????? ??????";
t['MTW'] = "???? ????";
t['MTX'] = "?? ???? ?????";
t['MTC'] = "??\"? ??????";
t['ALFL'] = "????? ?????? ???? ?????? (???? ??? ??? ?????? ?????? ????? ?????)";
t['MTCL'] = "??? ???";
t['CKSORT'] = "??? ??? ?????";
t['MIN'] = "???????";
t['SVGL'] = "??? ?? ????? ?????? ??? ?????? ???";
t['VGL'] = "????? ??????";
t['UPDATEPOP'] = "???? ?????????";
t['NPCO'] = "???????? ????????? ?- NPC";
t['NEWVILLAGEAV'] = "??? ?";
t['TIMEUNTIL'] = "??? ??? ??? ?";
t['CENTERMAP'] = "???????? ??? ?? ????";
t['SENDTROOPS'] = "??? ?????";
t['PALACE'] = "?????";
t['RESIDENCE'] = "?????? ????????";
t['ACADEMY'] = "??????";
t['TREASURY'] = "????-?????";
t['UPGTB'] = "?????? ?????? ??????/?????";
t['RBTT'] = "???? ??????";
t['USE'] = "?????";
t['RESIDUE'] = "?????? ?????? ?? ?? ???? ";
t['RESOURCES'] = "??????";
t['SH1'] = "??? ?? ??????? ??? ?????? ??? ????/??????????<br>??? ????? ?????? ????? ????? ??? ??????? ??? ??? ????? ????";
t['CROPFINDER'] = "???? ???????";
break;

case 'ir': //contributors: mohammad6006, Reza_na
t['1'] = "??????? ????*.2";
t['2'] = "??? ???? ???????";
t['3'] = "????? ???? ?????? ?????? T3.1 ????? ????? ? ????? ?????(????? ???? ????? ???? ??? T3.1 ? T3.5)";
t['4'] = "?????";
t['5'] = "???????/?????????/??????/?????";
t['6'] = "????? ???/????? ??????/??? ????/????? ????";
t['7'] = "???/????????/?????????/?????";
t['8'] = "?????";
t['9'] = "????? ????? ??? ????? ?? ????? ??? ????<br>(???? ????? ???????? ??????? ????? ??? ????? ????? ???? ? ????.)";
t['10'] = "????? ?? ???? ??? ???? ???? ???????:<br>(????? ??? ????)";
t['11'] = "????? ???? ??????? ?? ?????? ??? ??? ?????(????)";
t['12'] = "????? ????? ??? 'dorf1.php' ? 'dorf2.php'";
t['13'] = "????? ???? \"???? ???? ???? ??? ?????\"";
t['14'] = "?????  ???? '????? ?????/????? ?????' ?? ????? ?????";
t['15'] = "????? ????? ????? ?? ???? ???? ???? ??? ?? ????? ?????";
t['16'] = "????? ????? ???? ???? ?? ????? ?????";
t['17'] = "????? ????? ?? ????? ?????";
t['18'] = "????? ????? ????? ????? (2 ????) ?? ???? ?????";
t['19'] = "????? ??????? ?????? ??????? ??? ?? ??? ????? ? ??????? ?? ????<br>?? ????? ?????";
t['20'] = "???????? ????? ??";
t['21'] = "????? '????? ??? ?????' ?? ???? ????? ?????";
t['22'] = "????? ?????? ???????";
t['23'] = "????? '?????? ???????' ?? ???? ?????";
t['24'] = "?????? ?????? ???????";
t['25'] = "?????? ?????? ???????";
t['26'] = "????? ??????? ? ????? ?? ?????? ????? ?????";
t['27'] = "??????? ???? ???? ???????";
t['28'] = "????? ????? ??????? ?????";
t['29'] = "??????? ???? ???? ???????";
t['30'] = "????? ????? ?? ???? ???? ???????";
t['31'] = "????? ????? ?? ???? ???? ????? ?? ";
t['32'] = "????? '???? ?????'";
t['33'] = "????? '???? ?????' ?? ???? ????? ?????";
t['34'] = "????? ??????? '?????? ?????? ?? ???' ?? ???? ????? ????? ? ??????? ??";
t['35'] = "????? ????? ???? ???? ?? ???? ?????";
t['36'] = "????? ??????? '???/?? ?????' ?? ???? ??? ?????/??????";
t['37'] = "????? ???? ????? ?????";
t['38'] = "???????? ??? ??? ??? ?????";
t['39'] = "????? ???? '???? ?????'";
t['40'] = "????? ???? '???? ?????' ?? ???? ????? ?????";
t['41'] = "????? ???? ????? ??????? ??";
t['42'] = "???????? ??????? ?? ?? ???? ??? ?? ???? ?????";
t['43'] = "???? ???? ????? ??? ?????";
t['44'] = "???? ???? ??? ??? ??? ??????? ??";
t['45'] = "????? ??? ??????? ? ????? ?? ???? ?????? ???? ??????? ?? ?? ????? ?? ??? ??????";
t['46'] = "????? ??????? ????? ???? ?? ??????? ?? ????";
t['47'] = "???????? ????? ????? ?????";
t['48'] = "????? ????? ??????? ???? ??? ????????<br>?? ?? ???? '????? => ????' ???? ????<br>(?????? = 1)";
t['49'] = "?????? ?????? ???????";
t['50'] = "????? ??????? ??????? ????<br>???? \"?????? ????? ???????\"";
t['51'] = "????? ????? ????";
t['52'] = "????????/??????? ?????? ???? ????? ????";
t['53'] = "????? ??????? ??????? ?? ??????? ?? ??? (tooltip)";
t['54'] = "????? ????? ? ???? ????? ?? ????? ?? ??????? ?? ??? (tooltip)";
t['55'] = "?? ???? ?????? ???? ??? ???? ????? ?? ??????? ?????";
t['56'] = "???? ?? ??? ??? ???? ???<br>??????? ??? ?????? ?? ????? ????? ???? ???";
t['57'] = "????? ????? ? ????";
t['58'] = "????? ????? ?????? ??/????? ??/?????? ??? ???? ???";
t['59'] = "????? ????? ?? ?? ??????? ???? ??? ??? ?????<br>(?????? = 1)";
t['60'] = "????? ????? ???? ??? ???? ????? ??/????? ?? ?? ????? ?????";
t['61'] = "????? ???? '??? ???' ?? ???? ???????";
t['62'] = "???? ???? ???? ????? ???? ????? ???? ??";
t['63'] = "????? ??????? ????? ???? ?????????? 3 (TB3)";
t['64'] = "????? ?????? ?? ??????? ?????";
t['65'] = "??? ???? ?????<br>(?????? = ????)";
t['66'] = "??? ?????? ???<br>(?????? = ????)";
t['67'] = "??? ??? ????? ?????<br>(?????? = ????)";
t['68'] = "??? ????? ????? ?? ????? ?????<br>(?????? = ????)";
t['69'] = "Console Log Level<br>??? ???? ?????? ???? ?? ? ???????<br>(?????? = 0)";
t['82.L'] = "??? ????? ?? (????? ???? ???? ??? ???? ?????? ?? ????? ?????? ?? ?????)";
t['82.U'] = "??? ???? ??? ????? ?? (???????? ???? ???? ?????? ?? ????? ?????? ?? ?????)";
t['85'] = "???????? ????? '????? ???????/????? ?????'";
t['87'] = "?? ??? ????? ????? ????? ??? '1/2/3 ?????' ????? ????? (?? ???? ???????)";
t['U.2'] = "????";
t['U.3'] = "??? ?????? ??? <br>???? ???? ????? ?? ??????? ??? ?????";
t['U.6'] = "?????? ?????? ???<br>???? ?? ??? ????? ?? ??????? ??? ?????";
t['SIM'] = "???? ??? ????";
t['QSURE'] = "??? ????? ??????";
t['LOSS'] = "????";
t['PROFIT'] = "???";
t['EXTAV'] = "???? ?????";
t['PLAYER'] = "??????";
t['VILLAGE'] = "?????";
t['POPULATION'] = "?????";
t['COORDS'] = "??????";
t['MAPTBACTS'] = "???????";
t['SAVED'] = "????? ??";
t['YOUNEED'] = "???? ????";
t['TODAY'] = "?????";
t['TOMORROW'] = "????";
t['DAYAFTERTOM'] = "?? ????";
t['MARKET'] = "?????";
t['BARRACKS'] = "?????????";
t['RAP'] = "???????";
t['STABLE'] = "?????";
t['WORKSHOP'] = "??????";
t['SENDRES'] = "????? ?????";
t['BUY'] = "????";
t['SELL'] = "????";
t['SENDIGM'] = "????? ???? ?????";
t['LISTO'] = "?? ?????";
t['ON'] = "??";
t['AT'] = "??";
t['EFICIENCIA'] = "??????";
t['NEVER'] = "????";
t['ALDEAS'] = "?????(??)";
t['TIEMPO'] = "????";
t['OFREZCO'] = "?????? ???????";
t['BUSCO'] = "?????";
t['TIPO'] = "???";
t['DISPONIBLE'] = "??? ?? ?????";
t['CUALQUIERA'] = "???";
t['YES'] = "???";
t['NO'] = "???";
t['LOGIN'] = "????";
t['MARCADORES'] = "????? ??";
t['ANYADIR'] = "????? ????";
t['UBU'] = "????? ????? ????";
t['UBT'] = "??? ????? ????";
t['DEL'] = "??? ????";
t['MAPA'] = "????";
t['MAXTIME'] = "?????? ????";
t['ARCHIVE'] = "???????";
t['SUMMARY'] = "?????";
t['TROPAS'] = "???????";
t['CHKSCRV'] = "???? ????? TBeyond";
t['ACTUALIZAR'] = "???? ????? ??????? ?????";
t['VENTAS'] = "??????? ??? ????? ???";
t['MAPSCAN'] = "???? ???? ????";
t['BIC'] = "????? ????? ??? (icon) ??? ???";
t['SAVE'] = "?????";
t['AT2'] = "????? ????";
t['AT3'] = "????: ????";
t['AT4'] = "????: ????";
t['NBSA'] = "??????";
t['NBSN'] = "???? (????)";
t['NBSB'] = "???? ???? (????)";
t['NBHAX'] = "????? ?????? ??????";
t['NBHK'] = "?????? ??????";
t['NPCSAVETIME'] = "?????: ";
t['TOTALTROOPS'] = "??????? ????? ?? ?????";
t['SELECTALLTROOPS'] = "?????? ???? ???????";
t['PARTY'] = "??? ??";
t['CPPERDAY'] = "?????? ?????? ?? ???";
t['SLOT'] = "????";
t['TOTAL'] = "?????";
t['SELECTSCOUT'] = "?????? ????? ???????(?????)";
t['SELECTFAKE'] = "?????? ???? ????";
t['ALL'] = "???";
t['SH2'] = "?? ???? ??? ??? ?? ?????? ???? ????:<br>- green ?? red ??  orange ? ????.<br>- ??? ??? ?? ????? 16 ????? #004523<br>- ???? ??? ??? ???? ??? ????";
t['SOREP'] = "????? ????? ???? (???? ????? ?????)";
t['WSIMO1'] = "????? (???? ??? ?? ????? ????)";
t['WSIMO2'] = "????? (???? ??? ?? ????? ? kirilloid.ru-?? ?????? ?????)";
t['NONEWVER'] = "??? ????? ???? ? ????? ?? ?? ?????? ?????";
t['BVER'] = "???? ??? ??? ???? ??????? ?? ?? ?????? ????? ?????";
t['NVERAV'] = "???? ???? ??????? ????? ?? ????";
t['UPDSCR'] = "?? ????? ?? ??? ????? ????";
t['CHECKUPDATE'] = "????? ???? ???? ?????. ???? ??? ????...";
t['AVPPV'] = "??????? ?????? ???? ?? ?????";
t['AVPPP'] = "??????? ?????? ???? ?? ??????";
t['MAX'] = "??????";
t['TOTTRTR'] = "????? ??????? ?? ??? ?????";
t['TB3SL'] = "??????? ?????????? $1";
t['UPDALLV'] = "???? ????? ???? ????? ??. ?? ??? ???? ?? ??? ????? ??????? ???? ???? ???? ??? ???? ????? ???? ??? ???!";
t['LARGEMAP'] = "???? ????";
t['USETHEMPR'] = "??????? ?? ???? (?? ????)";
t['USETHEMEQ'] = "??????? ?? ???? (?????)";
t['TOWNHALL'] = "????? ?????";
t['GSRVT'] = "????? ???? ????(????)";
t['ACCINFO'] = "??????? ????";
t['NBO'] = "?????? ???????";
t['MNUL'] = "????? ??? ????";
t['STAT'] = "????";
t['RESF'] = "?????";
t['VLC'] = "???? ?????";
t['MAPO'] = "??????? ????";
t['COLO'] = "??????? ???";
t['DBGO'] = "??????? ??? ????";
t['HEROSMANSION'] = "????? ??????";
t['BLACKSMITH'] = "????? ????";
t['ARMOURY'] = "??? ????";
t['NOW'] = "?????";
t['CLOSE'] = "????";
t['USETHEM1H'] = "??????? ?? ???? ( ????? 1 ????)";
t['OVERVIEW'] = "??? ???";
t['FORUM'] = "????? ??????";
t['ATTACKS'] = "?????";
t['NEWS'] = "?????";
t['ADDCRTPAGE'] = "????? ???? ???? ???? ?? ????? ??";
t['SCRPURL'] = "???? TBeyond";
t['SPACER'] = "?????? (????? ????)";
t['MEREO'] = "????? ?? ? ???????";
t['ATTABLES'] = "????? ??????? (??? ?? ???? ????)";
t['MTW'] = "??? ???";
t['MTX'] = "??? ?? ??";
t['MTC'] = "??? ????? ?????";
t['ALFL'] = "????? ?? ????? ?????? ?????<br>(???? ????? ?????? ????? ???? ??? ???)";
t['MTCL'] = "??? ???? ???";
t['CKSORT'] = "???? ???? ???? ???? ????";
t['MIN'] = "?????";
t['SVGL'] = "???? ???? (?? ??? ?? ???? ????) ???? ????? ??";
t['VGL'] = "????? ????? ??";
t['UPDATEPOP'] = "???? ????? ?????";
t['EDIT'] = "??????";
t['NPCO'] = "??????? ?????? ????? ?????";
t['NEWVILLAGEAV'] = "???/????";
t['TIMEUNTIL'] = "??? ???? ??????";
t['CENTERMAP'] = "???? ???? ???? ??? ?????";
t['SENDTROOPS'] = "????? ???????";
t['PALACE'] = "???";
t['RESIDENCE'] = "????????";
t['ACADEMY'] = "?????????";
t['TREASURY'] = "?????";
t['UPGTB'] = "???? ????? ????? ? ??????? ??";
t['RBTT'] = "???? ?????";
t['USE'] = "???????";
t['RESIDUE'] = "?? ????? ??? ??? ?? ?? ?????? ";
t['RESOURCES'] = "?????";
t['SH1'] = "??? ???? ?????? ??? ???? ??????? ?????? ??????/??????<br>???? ?????? ???? ?????? ???? ????????? ?????? ? ??? ???? ????? ?? ??? ????";
t['RESEND'] = "????? ???????";
t['WSI'] = "???? ??? ???? ???? ??? ?? ????? ????";
t['TTT'] = "??????? ????? ????? ??? ???????/?????";
t['CROPFINDER'] = "?????? ???????";
break;

case 'it': //contributors: IcEye, rosfe y Danielle, Lello, Zippo, Nux, ns65, Acr111, onetmt, matteo466
t['1'] = "Server Travian v2.x";
t['2'] = "Rimuovi banner pubblicitari";
t['3'] = "Forza il calcolo della capacitÃ  di legionari e lancieri gallici<br>come nella versione 3.1<br>(per server con versione mista 3.1 & 3.5 - per adesso solo per server .de)";
t['4'] = "Mercato";
t['5'] = "Caserma/Campo d'addestramento/Officina/Scuderia";
t['6'] = "Municipio/Circolo degli eroi/Armeria/Fabbro";
t['7'] = "Castello/Residence/Accademia/Camera del tesoro";
t['8'] = "Alleanza";
t['9'] = "Mostra links aggiuntivi nel menu di sinistra<br>(Traviantoolbox, World Analyser, Travilog, Map, etc.)";
t['10'] = "Simulatore di combattimento da usare:<br>(nel menu a sinistra)";
t['12'] = "Mostra i collegamenti a 'dorf1.php' e 'dorf2.php'";
t['13'] = "Mostra l'icona 'Centra la mappa su questo villaggio'";
t['14'] = "Mostra le icone 'Invia truppe/Invia risorse'";
t['15'] = "Mostra la produzione oraria di legno, argilla e ferro";
t['16'] = "Mostra la produzione di grano netta";
t['17'] = "Mostra la popolazione";
t['18'] = "Mostra una lista dei villaggi aggiuntiva (su 2 colonne) in una finestra";
t['19'] = "Mostra informazioni su ampliamenti di costruzioni e movimenti di truppe";
t['20'] = "Mostra segnalibri";
t['21'] = "Mostra i segnalibri in una finestra";
t['22'] = "Mostra blocco note";
t['23'] = "Mostra il blocco note in una finestra";
t['24'] = "Larghezza blocco note";
t['25'] = "Altezza blocco note";
t['26'] = "Mostra calcoli/links per il Mercato Nero";
t['27'] = "World Analyser da utilizzare";
t['28'] = "Mostra link statistiche World Analyser";
t['29'] = "Map Analyser da usare";
t['30'] = "Mostra il link alla mappa per gli utenti";
t['31'] = "Mostra il link alla mappa per le alleanze";
t['32'] = "Mostra la 'barra di ricerca'";
t['33'] = "Mostra la 'barra di ricerca' in una finestra";
t['34'] = "Mostra PC/giorno nelle tabelle";
t['35'] = "Mostra consumo di grano nelle tabelle";
t['36'] = "Mostra i calcoli 'Risorse il/Residue' nelle tabelle di ampliamento/addestramento";
t['37'] = "Mostra tabella ampliamento campi";
t['38'] = "Mostra colori livelli campi";
t['39'] = "Mostra grafici a barre delle risorse";
t['40'] = "Mastra i grafici a barre delle risorse in una finestra";
t['41'] = "Mostra tabella ampliamento edifici";
t['42'] = "Ordina le strutture per nome nella tabella di ampliamento";
t['43'] = "Mostra livelli edifici";
t['44'] = "Mostra colori livelli edifici";
t['45'] = "Mostra il livello delle strutture in costruzione lampeggiante";
t['46'] = "Mostra informazioni aggiuntive sui mercanti in arrivo";
t['48'] = "Numero di pagine di offerte da precaricare<br>nella pagina 'Mercato => Visualizza offerte'<br>(Default = 1)";
t['49'] = "Azione predefinita per 'Invia truppe'";
t['50'] = "Numero di spie per l'invio di spiate";
t['53'] = "Mostra i tooltip con le informazioni sulle truppe";
t['54'] = "Mostra tooltip con tempi e distanza dai villaggi";
t['56'] = "Mostra informazioni sul tipo di terreno/oasi<br>mentre il mouse passa sulla mappa";
t['57'] = "Mostra distanze e tempi";
t['58'] = "Mostra tabella dei giocatori/villaggi/oasi occupate";
t['59'] = "Numero di pagine di messaggi/report da precaricare<br>(Default = 1)";
t['60'] = "Mostra links per aprire i messaggi in un pop-up";
t['61'] = "Mostra tabella \"Eliminare\" nella pagina dei report";
t['62'] = "Mostra l'icona 'Invia messaggio' anche per me";
t['63'] = "Mostra report avanzati di TB3";
t['64'] = "Mostra dettagli nelle statistiche dei Reports";
t['65'] = "Colore ampliamento disponibile <br>(Vuoto = default)";
t['66'] = "Colore livello massimo raggiunto <br>(Vuoto = default)";
t['67'] = "Colore ampliamento non disponibile <br>(Vuoto = default)";
t['68'] = "Colore ampliamento col mercato nero <br> (Vuoto = default)";
t['69'] = "Livello di logging della console<br>SOLO PER SVILUPPATORI O PER DEBUGGING<br>(Default = 0)";
t['82.L'] = "Blocca segnalibri (Nasconde le icone cancella, sposta in alto e sposta in basso)";
t['82.U'] = "Sblocca segnalibri (Mostra le icone cancella, sposta in alto e sposta in basso)";
t['U.2'] = "Popolo";
t['U.3'] = "Nome del villaggio capitale<br><b>Vai alla pagina del tuo Profilo per aggiornare i dati</b>";
t['U.6'] = "Coordinate del villaggio capitale<br><b>Vai alla pagina del tuo Profilo per aggiornare i dati</b>";
t['SIM'] = "Simulatore di combattimento";
t['QSURE'] = "Sei sicuro?";
t['LOSS'] = "Perdita in materiale";
t['PROFIT'] = "Guadagno";
t['EXTAV'] = "Ampliamento disponibile";
t['PLAYER'] = "Proprietario";
t['VILLAGE'] = "Villaggio";
t['POPULATION'] = "Popolazione";
t['COORDS'] = "Coordinate";
t['MAPTBACTS'] = "Azioni";
t['SAVED'] = "Salvato";
t['YOUNEED'] = "Mancano";
t['TODAY'] = "oggi";
t['TOMORROW'] = "domani";
t['DAYAFTERTOM'] = "dopodomani";
t['MARKET'] = "Mercato";
t['BARRACKS'] = "Campo d'addestramento";
t['RAP'] = "Caserma";
t['STABLE'] = "Scuderia";
t['WORKSHOP'] = "Officina";
t['SENDRES'] = "Invia risorse";
t['BUY'] = "Compra risorse";
t['SELL'] = "Vendi risorse";
t['SENDIGM'] = "Invia messaggio";
t['LISTO'] = "Disponibile";
t['ON'] = "il";
t['AT'] = "alle";
t['EFICIENCIA'] = "Efficienza";
t['NEVER'] = "Mai";
t['ALDEAS'] = "Villaggi";
t['TIEMPO'] = "Tempo";
t['OFREZCO'] = "Offerta";
t['BUSCO'] = "Richiesta";
t['TIPO'] = "Percentuale di scambio";
t['DISPONIBLE'] = "Disponibile";
t['CUALQUIERA'] = "Tutti";
t['YES'] = "Si";
t['NO'] = "No";
t['LOGIN'] = "Login";
t['MARCADORES'] = "Segnalibri";
t['ANYADIR'] = "Aggiungi";
t['UBU'] = "URL segnalibro";
t['UBT'] = "Nome segnalibro";
t['DEL'] = "Eliminare";
t['MAPA'] = "Mappa";
t['MAXTIME'] = "Tempo massimo";
t['ARCHIVE'] = "Archivio";
t['SUMMARY'] = "Riepilogo";
t['TROPAS'] = "Truppe";
t['CHKSCRV'] = "Verifica Aggiornamenti";
t['ACTUALIZAR'] = "Aggiorna le informazioni sul villaggio";
t['VENTAS'] = "Offerte salvate";
t['MAPSCAN'] = "Scansiona la mappa";
t['BIC'] = "Icone aggiuntive per accesso rapido";
t['SAVE'] = "Salva";
t['AT2'] = "Rinforzo";
t['AT3'] = "Attacco: Normale";
t['AT4'] = "Attacco: Raid";
t['NBSA'] = "Automatica";
t['NBSN'] = "Normale (Piccolo)";
t['NBSB'] = "Schermi grandi (Grande)";
t['NBHAX'] = "Adatta l'altezza automaticamente";
t['NBHK'] = "Altezza predefinita";
t['NPCSAVETIME'] = "Tempo guadagnato: ";
t['TOTALTROOPS'] = "Truppe del villaggio complessive";
t['SELECTALLTROOPS'] = "Seleziona tutte le truppe";
t['PARTY'] = "Party";
t['CPPERDAY'] = "PC/giorno";
t['TOTAL'] = "Totale";
t['SELECTSCOUT'] = "Spiata";
t['SELECTFAKE'] = "Fake";
t['ALL'] = "Tutto";
t['SH2'] = "Nei campi dei colori puoi inserire:<br>- il nome (in inglese) <b>green</b> o <b>red</b> o <b>orange</b>, etc.<br>- il codice esadecimale del colore <b>#004523</b><br>- lasciare vuoto per usare i colori predefiniti";
t['SOREP'] = "Mostra report originale (per postare sul forum)";
t['WSIMO1'] = "Interno (quello presente nel gioco)";
t['WSIMO2'] = "Esterno (fornito da kirilloid.ru)";
t['NONEWVER'] = "Ã‰ giÃ  installata l'ultima versione disponibile";
t['BVER'] = "Potresti avere una versione Beta";
t['NVERAV'] = "Ã‰ disponibile una nuova versione";
t['UPDSCR'] = "Aggiornare ora lo script?";
t['CHECKUPDATE'] = "Controllo dell'ultima versione disponibile.<br>Attendere prego...";
t['AVPPV'] = "Popolazione media villaggi";
t['AVPPP'] = "Popolazione media giocatori";
t['TOTTRTR'] = "Totale truppe in addestramento";
t['TB3SL'] = "Impostazioni $1";
t['UPDALLV'] = "Aggiorna tutti i villaggi.  USARE CON CAUTELA, potrebbe comportare il BAN dell`account!";
t['LARGEMAP'] = "Mappa estesa";
t['USETHEMPR'] = "Completa proporzionalmente";
t['USETHEMEQ'] = "Completa equamente";
t['TOWNHALL'] = "Municipio";
t['GSRVT'] = "Server di gioco";
t['ACCINFO'] = "Informazioni Account";
t['NBO'] = "Blocco note";
t['MNUL'] = "Menu di sinistra";
t['STAT'] = "Statistiche";
t['RESF'] = "Campi di risorse";
t['VLC'] = "Centro del villaggio";
t['MAPO'] = "Opzioni mappa";
t['COLO'] = "Opzioni colori";
t['DBGO'] = "Opzioni di debug";
t['HEROSMANSION'] = "Circolo degli eroi";
t['BLACKSMITH'] = "Fabbro";
t['ARMOURY'] = "Armeria";
t['NOW'] = "Adesso";
t['CLOSE'] = "Chiudi";
t['USETHEM1H'] = "Completa con la produzione oraria";
t['OVERVIEW'] = "Riepilogo";
t['FORUM'] = "Forum";
t['ATTACKS'] = "Attacchi";
t['NEWS'] = "News";
t['ADDCRTPAGE'] = "Aggiungi pagina corrente";
t['SPACER'] = "Separatore";
t['MEREO'] = "Messaggi e Report";
t['ATTABLES'] = "Tabella truppe";
t['MTW'] = "Sprecate";
t['MTX'] = "In eccesso";
t['MTC'] = "Carico corrente";
t['ALFL'] = "Link al forum esterno<br>(Lasciare vuoto per il forum interno)";
t['MTCL'] = "Cancella tutto";
t['CKSORT'] = "Clicca per ordinare";
t['MIN'] = "Min";
t['SVGL'] = "Condivisa tra i villaggi";
t['VGL'] = "Elenco villaggi";
t['UPDATEPOP'] = "Aggiorna popolazione";
t['EDIT'] = "Modifica";
t['NPCO'] = "Opzioni Mercato Nero";
t['NEWVILLAGEAV'] = "Data/Ora";
t['TIMEUNTIL'] = "Tempo di attesa";
t['CENTERMAP'] = "Centra la mappa su questo villaggio";
t['SENDTROOPS'] = "Invia truppe";
t['PALACE'] = "Castello";
t['RESIDENCE'] = "Residence";
t['ACADEMY'] = "Accademia";
t['TREASURY'] = "Camera del tesoro";
t['UPGTB'] = "Tabella risorse/costruzioni";
t['RBTT'] = "Grafici a barre delle risorse";
t['USE'] = "Usa";
t['RESIDUE'] = "Risorse residue se costruisci";
t['RESOURCES'] = "Risorse";
t['SH1'] = "Apri il Profilo per il riconoscimento automatico delle informazioni sulla capitale<br>Costruisci il Campo di addestramento per il riconoscimento automatico del popolo e dopo apri il centro del villaggio";
t['CROPFINDER'] = "Crop finder";
break;

case 'jp': //contributors: Jackie Jack, baan
t['2'] = "?????????????????????";
t['3'] = "??????·??????T3.1???????<br>(for mixed T3.1 & T3.5 servers)jp1~jp3";
t['4'] = "??";
t['5'] = "???/??/???/??";
t['6'] = "???/????/????/???";
t['7'] = "??/??/??/??";
t['8'] = "??";
t['9'] = "?????????????????<br>(Traviantoolbox, World Analyser, Travilog, Map, etc.)";
t['10'] = "?????????????<br>(?????)";
t['12'] = "????·???????????";
t['13'] = "????????????????????";
t['14'] = "????????·?????????????";
t['15'] = "????????(?·??·?)???????";
t['16'] = "?????????????";
t['17'] = "??????????";
t['18'] = "??????2???????????????????";
t['19'] = "????????????????????";
t['20'] = "???????????";
t['21'] = "??????????????????????";
t['22'] = "????????";
t['23'] = "???????????????????????";
t['24'] = "???????";
t['25'] = "??????";
t['26'] = "NPC????????????";
t['27'] = "World Analyser???";
t['28'] = "analyser????????";
t['29'] = "Map Analyser ???";
t['30'] = "??????MAP????????????";
t['31'] = "????MAP????????????";
t['32'] = "????????";
t['33'] = "?????????????????????";
t['34'] = "????????????CP???????";
t['35'] = "????????????????????";
t['36'] = "???????/???????????????????";
t['37'] = "??????????????????????";
t['38'] = "?????????????";
t['39'] = "???????????";
t['40'] = "??????????????????????????";
t['41'] = "???????????????????";
t['42'] = "??????????????????";
t['43'] = "??????????";
t['44'] = "???????????";
t['45'] = "????????????????LV?????";
t['46'] = "????????????";
t['48'] = "???????????????????<br>(Default = 1)";
t['49'] = "???????????";
t['50'] = "????????????????";
t['53'] = "???????????????????";
t['54'] = "????????????·???????";
t['56'] = "???????????/?????????????";
t['57'] = "??????????";
t['58'] = "???????????(?·????)";
t['59'] = "???????????????????<br>(Default = 1)";
t['60'] = "?????/??????????????????????";
t['61'] = "????????????????????";
t['63'] = "??????????????";
t['64'] = "?????????????????";
t['69'] = "??????????<br>???????????????<br>(Default = 0)";
t['82.L'] = "?????????? (??,??,???,??????????)";
t['82.U'] = "???????????? (??,??,???,??????????)";
t['U.3'] = "????????<br><b>Visit your Profile for an update</b>";
t['U.6'] = "????????<br><b>Visit your Profile for an update</b>";
t['SIM'] = "????????";
t['QSURE'] = "??????????";
t['LOSS'] = "??";
t['PROFIT'] = "??";
t['EXTAV'] = "????";
t['PLAYER'] = "?????";
t['VILLAGE'] = "??";
t['POPULATION'] = "??";
t['COORDS'] = "??";
t['MAPTBACTS'] = "?????";
t['SAVED'] = "??????";
t['YOUNEED'] = "??";
t['TODAY'] = "??";
t['TOMORROW'] = "??";
t['DAYAFTERTOM'] = "???";
t['MARKET'] = "??";
t['BARRACKS'] = "??";
t['RAP'] = "???";
t['STABLE'] = "??";
t['WORKSHOP'] = "???";
t['SENDRES'] = "?????";
t['BUY'] = "??";
t['SELL'] = "??";
t['SENDIGM'] = "????????";
t['LISTO'] = "??????";
t['ON'] = "on";
t['AT'] = "at";
t['EFICIENCIA'] = "??";
t['NEVER'] = "????";
t['ALDEAS'] = "?";
t['TIEMPO'] = "??";
t['OFREZCO'] = "??";
t['BUSCO'] = "??";
t['TIPO'] = "???";
t['DISPONIBLE'] = "????";
t['CUALQUIERA'] = "??";
t['YES'] = "??";
t['NO'] = "???";
t['LOGIN'] = "????";
t['MARCADORES'] = "??????";
t['ANYADIR'] = "?????????";
t['UBU'] = "???????????URL";
t['UBT'] = "???????????????";
t['DEL'] = "??";
t['MAPA'] = "TravMap";
t['MAXTIME'] = "????";
t['ARCHIVE'] = "?????";
t['SUMMARY'] = "??";
t['TROPAS'] = "??";
t['CHKSCRV'] = "????????????";
t['MAPSCAN'] = "????????";
t['BIC'] = "???????????";
t['SAVE'] = "??";
t['AT2'] = "??";
t['AT3'] = "????";
t['AT4'] = "??";
t['NPCSAVETIME'] = "?????:";
t['TOTALTROOPS'] = "?????";
t['SELECTALLTROOPS'] = "?????????";
t['SELECTSCOUT'] = "???????";
t['SELECTFAKE'] = "???????";
t['SOREP'] = "????????????";
t['NONEWVER'] = "???????????????????";
t['NVERAV'] = "???????";
t['UPDSCR'] = "?????????????????";
t['CHECKUPDATE'] = "?????????????????...";
t['AVPPV'] = "?????????";
t['AVPPP'] = "?????????????";
t['MAX'] = "??";
t['TB3SL'] = "$1???????";
t['LARGEMAP'] = "????????";
t['USETHEMPR'] = "??";
t['USETHEMEQ'] = "??";
t['TOWNHALL'] = "???";
t['GSRVT'] = "???????";
t['ACCINFO'] = "???????";
t['NBO'] = "??????";
t['MNUL'] = "???????????";
t['STAT'] = "??";
t['RESF'] = "?????????";
t['VLC'] = "????";
t['MAPO'] = "???????";
t['COLO'] = "????????";
t['DBGO'] = "?????????";
t['HEROSMANSION'] = "????";
t['BLACKSMITH'] = "???";
t['ARMOURY'] = "????";
t['CLOSE'] = "???";
t['USETHEM1H'] = "1?????";
t['OVERVIEW'] = "??";
t['FORUM'] = "?????";
t['ATTACKS'] = "??";
t['NEWS'] = "????";
t['ADDCRTPAGE'] = "?????????????????";
t['SPACER'] = "?????";
t['MEREO'] = "?????·????";
t['ATTABLES'] = "????";
t['MTW'] = "?????";
t['MTX'] = "?????";
t['MTC'] = "????";
t['ALFL'] = "?????????????<br>(???????????????????????)";
t['MTCL'] = "??????";
t['SVGL'] = "???????";
t['VGL'] = "?????";
t['UPDATEPOP'] = "????????";
t['EDIT'] = "??";
t['NPCO'] = "NPC?????????";
t['NEWVILLAGEAV'] = "??/??";
t['TIMEUNTIL'] = "????";
t['CENTERMAP'] = "?????MAP??";
t['SENDTROOPS'] = "?????";
t['PALACE'] = "??";
t['RESIDENCE'] = "??";
t['ACADEMY'] = "??";
t['TREASURY'] = "??";
t['UPGTB'] = "???????????";
t['RESIDUE'] = "???";
t['RESOURCES'] = "?????";
break;

case 'kr': //contributors: Daniel Cliff, Sapziller
t['1'] = "Travian v2.x ??";
t['2'] = "?? ?? ??";
t['3'] = "Force T3.1 Legionnaire & Phalanx capacity calculation<br>(for mixed T3.1 & T3.5 servers)";
t['4'] = "??";
t['5'] = "???/??/??/???";
t['6'] = "????/?? ??/???/???";
t['7'] = "??/??/???/????";
t['8'] = "??";
t['9'] = "?? ??? ?? ?? ??? <br>(Traviantoolbox, World Analyser, Travilog, Map, ?.)";
t['10'] = "??? ?? ?????:<br>(????)";
t['11'] = "? ??? ?? ??? ??? ???";
t['12'] = "'dorf1.php(?? ????)' ? 'dorf2.php(?? ??)' ?? ???";
t['13'] = "?? ?? ??? ???";
t['14'] = "?? ??? '?? ???/?? ???' ??? ???";
t['15'] = "?? ??? ??? ?? ??? ???";
t['16'] = "?? ??? ?? ??? ??? ???";
t['17'] = "?? ??? ?? ? ???";
t['18'] = "?? ?? ?? ?? ??? ??? ???";
t['19'] = "?? ??? ?? ?? ??? ?? ?? ?? ???";
t['20'] = "??? ???";
t['21'] = "'???'? ?? ??? ??? ???";
t['22'] = "?? ???";
t['23'] = "'??'? ?? ??? ??? ???";
t['24'] = "?? ??";
t['25'] = "?? ??";
t['26'] = "NPC ?? ?? ? ??? ???";
t['27'] = "??? World Analyser";
t['28'] = "World Analyser ?? ?? ???";
t['29'] = "??? Map Analyser";
t['30'] = "???? ?? ? ?? ?? ???";
t['31'] = "???? ?? ? ?? ?? ???";
t['32'] = "'?? ?' ???";
t['33'] = "'?? ?'? ?? ??? ??? ???";
t['34'] = "????? ???? ?? ? ???? ?? ?? ???";
t['35'] = "????? ???? ?? ??? ?? ???";
t['36'] = "?????/?? ???? ?? ??? ??/????? ? ?? ?? ?? ??";
t['37'] = "?? ??? ????? ??? ???";
t['38'] = "???? ?? ? ???";
t['39'] = "'?? ?' ??? ???";
t['40'] = "'?? ?' ???? ?? ??? ??? ???";
t['41'] = "??? ????? ??? ???";
t['42'] = "????? ???? ?? ??? ????? ??";
t['43'] = "?? ??? ?? ???";
t['44'] = "?? ?? ? ???";
t['45'] = "????? ?? ??? ?? ????";
t['46'] = "??? ???? ? ? ?? ?? ???";
t['47'] = "????? ??? ??? ???";
t['48'] = "'?? => ??' ??? ?? ???? ?? ??? ? (??? = 1)";
t['49'] = "??? ?? ?? ??";
t['50'] = "??? ??? ??? ? ?? ???? ?";
t['51'] = "??? ?? ?? ???";
t['52'] = "??? ?? ?? ?? ???/????";
t['53'] = "??? ?? ?? ???";
t['54'] = "??? ????? ??? ?? ???";
t['55'] = "?? ?? ?????? ?? ??? ?? ??? ???? ???";
t['56'] = "?? ?? ???? ??? ??? ??? ???? ?? ???";
t['57'] = "??? ?? ???";
t['58'] = "???/??/??? ????? ?? ?? ???";
t['59'] = "?? ???? ???? ??? ???? ? (??? = 1)";
t['60'] = "???/???? ????? ?? ?? ??? ???";
t['61'] = "??? ???? \"???? ??\" ???";
t['62'] = "?? ????? \"??? ???\" ??? ??";
t['63'] = "TB3 ?? ????? ???";
t['64'] = "??? ??? ?? ?? ???";
t['65'] = "? : ????? ??(??? = ? ?)";
t['66'] = "? : ?? ?? (??? = ? ?)";
t['67'] = "? : ????? ???(??? = ? ?)";
t['68'] = "? : NPC?? ? ????? ??(??? = ? ?)";
t['69'] = "Console Log ?? ?? ??<br>??: ???? ??? ???? ???? ?(??? = 0)";
t['82.L'] = "??? ??(??, ?? ??, ??? ?? ??? ??)";
t['82.U'] = "??? ?? ??(??, ?? ??, ??? ?? ??? ???)";
t['U.2'] = "??";
t['U.3'] = "?? ??<br>????? ?? ??? ???? ??? ???";
t['U.6'] = "??? ??<br>????? ?? ??? ???? ??? ???";
t['SIM'] = "?? ?????";
t['QSURE'] = "??????";
t['LOSS'] = "??";
t['PROFIT'] = "??";
t['EXTAV'] = "?? ??";
t['PLAYER'] = "????";
t['VILLAGE'] = "??";
t['POPULATION'] = "??";
t['COORDS'] = "??";
t['MAPTBACTS'] = "??";
t['SAVED'] = "???";
t['YOUNEED'] = "??";
t['TODAY'] = "??";
t['TOMORROW'] = "??";
t['DAYAFTERTOM'] = "??";
t['MARKET'] = "??";
t['BARRACKS'] = "??";
t['RAP'] = "???";
t['STABLE'] = "???";
t['WORKSHOP'] = "??";
t['SENDRES'] = "?? ???";
t['BUY'] = "??";
t['SELL'] = "??";
t['SENDIGM'] = "??? ???";
t['LISTO'] = "???";
t['ON'] = "??";
t['AT'] = "??";
t['EFICIENCIA'] = "??";
t['NEVER'] = "???";
t['ALDEAS'] = "??(?)";
t['TIEMPO'] = "??";
t['OFREZCO'] = "??";
t['BUSCO'] = "??";
t['TIPO'] = "??";
t['DISPONIBLE'] = "??? ??? ??";
t['CUALQUIERA'] = "??";
t['YES'] = "?";
t['NO'] = "???";
t['LOGIN'] = "???";
t['MARCADORES'] = "???";
t['ANYADIR'] = "??";
t['UBU'] = "? ??? ??";
t['UBT'] = "? ??? ??";
t['DEL'] = "??";
t['MAPA'] = "??";
t['MAXTIME'] = "?? ??";
t['ARCHIVE'] = "??";
t['SUMMARY'] = "??";
t['TROPAS'] = "??";
t['CHKSCRV'] = "TBeyond ????";
t['ACTUALIZAR'] = "?? ?? ????";
t['VENTAS'] = "??? ?????";
t['MAPSCAN'] = "?? ??";
t['BIC'] = "?? ?? ?? ??? ???";
t['SAVE'] = "??";
t['AT2'] = "??";
t['AT3'] = "??: ??";
t['AT4'] = "??: ??";
t['NBSA'] = "??";
t['NBSN'] = "?? (??)";
t['NBSB'] = "? ??? (?)";
t['NBHAX'] = "?? ?? ??";
t['NBHK'] = "?? ??";
t['NPCSAVETIME'] = "??: ";
t['TOTALTROOPS'] = "?? ?? ?? ??";
t['SELECTALLTROOPS'] = "?? ?? ??";
t['PARTY'] = "??";
t['CPPERDAY'] = "????/?";
t['SLOT'] = "??";
t['TOTAL'] = "??";
t['SELECTSCOUT'] = "??? ??";
t['SELECTFAKE'] = "?? ??";
t['ALL'] = "??";
t['SH2'] = "?? ??? ??? ? ?? ?:<br>- green, red ?? orange ?? ?? ?? ??.<br>- #004523 ?? HEX ?? ??<br>- ? ??? ?? ?? ?? ??";
t['SOREP'] = "??? ??? ???? ???(????)";
t['WSIMO1'] = "?? (???? ??)";
t['WSIMO2'] = "?? (kirilloid.ru ?? ??)";
t['NONEWVER'] = "?? ?? ??? ???? ????.";
t['BVER'] = "?? ??? ???? ????.";
t['NVERAV'] = "? ??? ????? ???? ? ????.";
t['UPDSCR'] = "?? ????? ????? ???????";
t['CHECKUPDATE'] = "???? ????? ???? ????.<br> ??? ????...";
t['AVPPV'] = "?? ? ?? ?? ?";
t['AVPPP'] = "??? ? ?? ?? ?";
t['MAX'] = "??";
t['TOTTRTR'] = "?? ?? ?? ?";
t['TB3SL'] = "$1 ??";
t['UPDALLV'] = "?? ?? ?? ??. <br>??: ? ??? ??? ? ?? ? ???? ???? ???!";
t['LARGEMAP'] = "? ??";
t['USETHEMPR'] = "??";
t['USETHEMEQ'] = "??? ?";
t['TOWNHALL'] = "????";
t['GSRVT'] = "?? ??";
t['ACCINFO'] = "?? ??";
t['NBO'] = "??";
t['MNUL'] = "?? ??";
t['STAT'] = "??";
t['RESF'] = "?? ??";
t['VLC'] = "?? ??";
t['MAPO'] = "?? ??";
t['COLO'] = "?? ??";
t['DBGO'] = "??? ??";
t['HEROSMANSION'] = "?? ??";
t['BLACKSMITH'] = "???";
t['ARMOURY'] = "???";
t['NOW'] = "??";
t['CLOSE'] = "Close";
t['USETHEM1H'] = "1?? ???";
t['OVERVIEW'] = "??";
t['FORUM'] = "??";
t['ATTACKS'] = "?? ??";
t['NEWS'] = "??";
t['ADDCRTPAGE'] = "?? ???? ??";
t['SCRPURL'] = "TBeyond ????";
t['SPACER'] = "??? ??";
t['MEREO'] = "??? & ???";
t['ATTABLES'] = "?? ???";
t['MTW'] = "??";
t['MTX'] = "??";
t['MTC'] = "?? ???";
t['ALFL'] = "?? ??? ??<br>(? ??? ?? ?? ??? ??)";
t['MTCL'] = "?? ???";
t['CKSORT'] = "??";
t['MIN'] = "??";
t['SVGL'] = "??? ??";
t['VGL'] = "?? ??";
t['UPDATEPOP'] = "?? ????";
t['EDIT'] = "??";
t['NPCO'] = "NPC ?? ??";
t['NEWVILLAGEAV'] = "??/??";
t['TIMEUNTIL'] = "?? ??";
t['CENTERMAP'] = "?? ??";
t['SENDTROOPS'] = "?? ???";
t['PALACE'] = "??";
t['RESIDENCE'] = "??";
t['ACADEMY'] = "???";
t['TREASURY'] = "????";
t['UPGTB'] = "?? ??/?? ????? ???";
t['RBTT'] = "?? ?";
t['USE'] = "??";
t['RESIDUE'] = "?? ?? ? ?? ? ?? ?? ";
t['RESOURCES'] = "?? ?? ??";
t['SH1'] = "?? ? ? ?? ?? ?? ??? ?? ???? ??? ???<br>?? ?? ??? ?? ??? ?? ? ?? ??? ?? ???";
t['RESEND'] = "?? ???";
t['WSI'] = "???? ???? ?? ?????";
t['TTT'] = "General troops/distance tooltips";
t['CROPFINDER'] = "Crop finder";
break;

case 'lt': //contributors: Domas, Zrip, Vykintas
t['1'] = "Travian v2.x serveris";
t['4'] = "Turgaviete";
t['5'] = "Susiburimo vieta/Kareivines/Dirbtuves/Arklide";
t['6'] = "Rotuše/Karžygio namai/Šarvu kalve/Ginklu kalve";
t['7'] = "Valdomu rumai/Rezidencija/Akademija/Iždine";
t['8'] = "Aljansas";
t['9'] = "Rodyti papildomas nuorodas kairiajame meniu<br>(Traviantoolbox, World Analyser, Travilog, žemelapis ir t.t.)";
t['10'] = "Naudojama nuoroda kovos simuliatoriui:<br>(kairiajame meniu)";
t['12'] = "Rodyti 'dorf1.php' ir 'dorf2.php' nuorodas";
t['13'] = "Rodyti nuoroda \"Centruoti šia gyvenviete žemelapyje\"";
t['14'] = "Rodyti 'Siusti karius/Siusti resursus' nuorodas";
t['16'] = "Rodyti efektyvia grudu gamyba";
t['20'] = "Rodyti žymas";
t['22'] = "Rodyti užrašu knygele";
t['24'] = "Užrašu knygeles dydis";
t['25'] = "Užrašu knygeles aukštis";
t['26'] = "Rodyti NPC asistento skaiciavimus/nuorodas";
t['27'] = "Naudojamas statistikos tiekejas";
t['28'] = "Rodyti statistikos nuorodas";
t['34'] = "Lygiu kelimo lentelese rodyti KT per diena";
t['35'] = "Rodyti grudu sunaudojima";
t['37'] = "Rodyti resursu lauku lygiu kelimo lentele";
t['38'] = "Rodyti resursu lygiu spalvas";
t['39'] = "Rodyti resursu lentele";
t['41'] = "Rodyti pastatu lygiu kelimo lentele";
t['43'] = "Rodyti gyvenvietes centro lygius";
t['44'] = "Rodyti pastatu lygiu spalvas";
t['45'] = "Rodyti mirksincius statomu pastatu lygius";
t['48'] = "Pasiulymu puslapiu skaicius užkrovimui<br>esant puslapyje 'Turgaviete => Pirkti'<br>(Numatyta = 1)";
t['49'] = "Susiburimo vietos pagrindinis veiksmas";
t['50'] = "Žvalgu kiekis<br>Funkcijai \"Pasirinkti žvalgus\"";
t['53'] = "Pranešimu lenteleje rodyti kariu informacija";
t['54'] = "Atstuma ir laikus iki gyvenvietes rodyti pranešimu lenteleje";
t['56'] = "Rodyti lauku/oaziu informacija,<br>kai pele rodo i žemelapio laukeli";
t['57'] = "Rodyti atstuma ir laika";
t['58'] = "Rodyti žaideju/gyvenvieciu/oaziu lentele";
t['59'] = "Užkraunamu pranešimu/ataskaitu puslapiu skaicius<br>(Numatyta = 1)";
t['60'] = "Rodyti nuorodas laišku atidarymui iškylanciajame lange";
t['61'] = "Rodyti \"Trinti viska\" lentele ataskaitu puslapyje";
t['62'] = "Rodyti \"Siusti IGM\" piktograma ir man";
t['64'] = "Ataskaitu statistikoje rodyti detales";
t['65'] = "Galimo lygio kelimo spalva<br>(Tušcia = pradine)";
t['66'] = "Aukšciausio lygio spalva<br>(Tušcia = pradine)";
t['67'] = "Negalimo lygio kelimo spalva<br>(Tušcia = pradine)";
t['68'] = "Galimo lygio kelimo per NPC prekeivi spalva<br>(Tušcia = pradine)";
t['69'] = "Konsoles registro lygis<br>TIK PROGRAMUOTOJAMS ARBA KLAIDU PAIEŠKAI<br>(Numatyta = 0)";
t['82.L'] = "Fiksuoti žymas (nerodyti trynimo, perkelimo aukštyn bei žemyn ikonu)";
t['82.U'] = "Nefiksuoti žymu (rodyti trynimo, perkelimo aukštyn bei žemyn ikonas)";
t['U.2'] = "Gentis";
t['U.3'] = "Jusu sostines pavadinimas";
t['U.6'] = "Jusu sostines koordinates";
t['SIM'] = "Mušiu simuliat.";
t['QSURE'] = "Tikrai pašalinti?";
t['LOSS'] = "Nuostoliai";
t['PROFIT'] = "Pelnas";
t['EXTAV'] = "Galima kelti lygi";
t['PLAYER'] = "Žaidejas";
t['VILLAGE'] = "Gyvenvietes pavadinimas";
t['POPULATION'] = "Populiacija";
t['COORDS'] = "Koordinates";
t['MAPTBACTS'] = "Veiksmai";
t['SAVED'] = "Išsaugota";
t['YOUNEED'] = "Jums reikia";
t['TODAY'] = "šiandien";
t['TOMORROW'] = "rytoj";
t['DAYAFTERTOM'] = "poryt";
t['MARKET'] = "Turgaviete";
t['BARRACKS'] = "Kareivines";
t['RAP'] = "Susiburimo vieta";
t['STABLE'] = "Arklide";
t['WORKSHOP'] = "Dirbtuves";
t['SENDRES'] = "Siusti resursus";
t['BUY'] = "Pirkti";
t['SELL'] = "Parduoti";
t['SENDIGM'] = "Siusti žinute";
t['LISTO'] = "Resursu bus";
t['ON'] = "";
t['AT'] = "";
t['EFICIENCIA'] = "Efektyvumas";
t['NEVER'] = "Niekada";
t['ALDEAS'] = "Gyvenviete(-s)";
t['TIEMPO'] = "Laikas";
t['OFREZCO'] = "Siuloma";
t['BUSCO'] = "Ieškoma";
t['TIPO'] = "Santykis";
t['DISPONIBLE'] = "Tik imanomi";
t['CUALQUIERA'] = "Nesvarbu";
t['YES'] = "Taip";
t['NO'] = "Ne";
t['LOGIN'] = "Prisijungti";
t['MARCADORES'] = "Žymos";
t['ANYADIR'] = "Prideti";
t['UBU'] = "Nauja URL nuoroda";
t['UBT'] = "Nauja tekstine nuoroda";
t['DEL'] = "Ištrinti";
t['MAPA'] = "Žemelapis";
t['MAXTIME'] = "Gabenimo laikas (iki)";
t['ARCHIVE'] = "Archyvas";
t['SUMMARY'] = "Santrauka";
t['TROPAS'] = "Kariai";
t['CHKSCRV'] = "Atnaujinti TB";
t['ACTUALIZAR'] = "Atnaujinti gyvenvietes informacija";
t['VENTAS'] = "Išsaugoti pasiulymai";
t['MAPSCAN'] = "Skanuoti žemelapi";
t['BIC'] = "Išplesti naršymo juosta";
t['SAVE'] = "Išsaugoti";
t['AT2'] = "Pastiprinimas";
t['AT3'] = "Puolimas: ataka";
t['AT4'] = "Puolimas: reidas";
t['NBSA'] = "Automatinis";
t['NBSN'] = "Normalus (maža)";
t['NBSB'] = "Dideliems ekranams (didele)";
t['NBHAX'] = "Automatiškai išsiplecianti";
t['NBHK'] = "Fiksuoto dydžio";
t['NPCSAVETIME'] = "Bus sukaupta po: ";
t['TOTALTROOPS'] = "Visi gyvenvietes kariai";
t['SELECTALLTROOPS'] = "Pasirinkti visus karius";
t['PARTY'] = "Taškai";
t['CPPERDAY'] = "KT per diena";
t['SLOT'] = "Vietos";
t['TOTAL'] = "Iš viso";
t['SELECTSCOUT'] = "Pasirinkti žvalgus";
t['SELECTFAKE'] = "Pasirinkti netikra ataka";
t['ALL'] = "Visi";
t['SH2'] = "Spalvu laukuose galite ivesti:<br>- green arba red arba orange, ir t.t.<br>- taip pat HEX spalvu koda, pvz.: #004523<br>- jei norite palikti standartine spalva, laukeli palikite tušcia";
t['SOREP'] = "Rodyti originalia ataskaita (kopijavimui)";
t['WSIMO1'] = "Vidine (siuloma žaidimo)";
t['WSIMO2'] = "Išorine (siuloma kirilloid.ru)";
t['NONEWVER'] = "Jus turite naujausia versija";
t['BVER'] = "Jus galite tureti beta versija";
t['NVERAV'] = "Dabartine versija";
t['UPDSCR'] = "Atnaujinti dabar?";
t['CHECKUPDATE'] = "Ieškoma atnaujinimu.<br>Prašome palaukti...";
t['AVPPV'] = "Gyventoju vidurkis gyvenvietei";
t['AVPPP'] = "Gyventoju vidurkis žaidejui";
t['MAX'] = "Daugiausiai";
t['TOTTRTR'] = "Iš viso treniruojamu kariu";
t['TB3SL'] = "$1 nustatymai";
t['UPDALLV'] = "Atnaujinti visas gyvenvietes.  NAUDOTI ITIN ATSARGIAI, NES DEL TO GALI BUTITE BUTI UŽBLOKUOTAS !";
t['LARGEMAP'] = "Didelis žemelapis";
t['USETHEMPR'] = "Naudoti (proporcingai)";
t['USETHEMEQ'] = "Naudoti (lygiai)";
t['TOWNHALL'] = "Rotuše";
t['GSRVT'] = "Žaidimo serveris";
t['ACCINFO'] = "Registracijos informacija";
t['NBO'] = "Užrašine";
t['MNUL'] = "Meniu kaireje puseje";
t['STAT'] = "Statistika";
t['RESF'] = "Resursu laukai";
t['VLC'] = "Gyvenvietes centras";
t['MAPO'] = "Žemelapio parinktys";
t['COLO'] = "Spalvu parinktys";
t['DBGO'] = "Debug'inimo parinktys";
t['HEROSMANSION'] = "Karžygio namai";
t['BLACKSMITH'] = "Ginklu kalve";
t['ARMOURY'] = "Šarvu kalve";
t['NOW'] = "Dabar";
t['CLOSE'] = "Atšaukti";
t['USETHEM1H'] = "Naudoti (1 valandos produkcija)";
t['OVERVIEW'] = "Apžvalga";
t['FORUM'] = "Forumas";
t['ATTACKS'] = "Puolimai";
t['NEWS'] = "Naujienos";
t['ADDCRTPAGE'] = "Prideti ši puslapi";
t['SCRPURL'] = "TB puslapis";
t['SPACER'] = "Prideti skirtuka";
t['MEREO'] = "Pranešimai ir ataskaitos";
t['ATTABLES'] = "Kariu lentele";
t['MTW'] = "Neišnaudota";
t['MTX'] = "Viršyta";
t['MTC'] = "Esamas pakrovimas";
t['ALFL'] = "Nuoroda i išorini foruma<br>(jei naudojate vidini, nerašykite nieko)";
t['MTCL'] = "Viska išvalyti";
t['CKSORT'] = "Rušiuoti";
t['MIN'] = "Mažiausiai";
t['SVGL'] = "Visose gyvenvietese";
t['VGL'] = "Gyvenvieciu sarašas";
t['UPDATEPOP'] = "Atnaujinti populiacija";
t['EDIT'] = "Redaguoti";
t['NPCO'] = "NPC asistentas";
t['NEWVILLAGEAV'] = "Data/Laikas";
t['TIMEUNTIL'] = "Laukimo laikas";
t['CENTERMAP'] = "Centruoti šia gyvenviete žemelapyje";
t['SENDTROOPS'] = "Siusti karius";
t['PALACE'] = "Valdovu rumai";
t['RESIDENCE'] = "Rezidencija";
t['ACADEMY'] = "Akademija";
t['TREASURY'] = "Iždine";
t['UPGTB'] = "Resursu lauku ir pastatu lygiu kelimo lenteles";
t['RBTT'] = "Resursu lentele";
t['USE'] = "Naudoti";
t['CROPFINDER'] = "Crop Finder";
break;

case 'lv': //contributors: anonymous
t['1'] = "Travian v2.x server";
t['4'] = "Tirgus";
t['5'] = "Mitina vieta/Kazarmas/Darbnica/Stallis";
t['6'] = "Ratsnams/Varonu Savrupmaja/Ierocu kaltuve/Brunu kaltuve";
t['8'] = "Alianse";
t['9'] = "Radit papildus saites kreisaja izvelnes josla<br>(Traviantoolbox, World Analyser, Travilog, Map, etc.)";
t['10'] = "Kaujas simulatora saite:<br>(kreisa izvelnes josla)";
t['12'] = "Radit 'dorf1.php' un 'dorf2.php' saites";
t['20'] = "Radit saglabatas saites";
t['22'] = "Radit pierakstu blocinu";
t['24'] = "Piezimju blocina izmers";
t['25'] = "Pierakstu blocina augstums";
t['27'] = "Pasaules analize";
t['28'] = "Radit analizes ikonu pie saitem";
t['37'] = "Radit resursu limenu tabulu";
t['38'] = "Radit resursu limenu krasas";
t['41'] = "Radit celtnu limenu tabulu";
t['43'] = "Numurus radit centretus";
t['44'] = "Radit celtnu limenu krasas";
t['48'] = "Piedavajumu lapu skaits <br>kamer ‘Tirgus => Pirkt' page<br>(Noklusetais = 1)";
t['49'] = "Mitina vietas nokluseta darbiba";
t['50'] = "Skautu skaits priekš <br>\"Izveleties skautus\" funkcijas";
t['53'] = "Radit karaspeka informaciju Tooltip’os";
t['56'] = "Radit sunas tipu/oazes informacijuShow <br>while kamer peles kursors ir uz kartes";
t['57'] = "Radit distanci un laiku";
t['59'] = "Zinojumu skaits <br>(Noklusetais = 1)";
t['65'] = "Krasa: Iespejams uzlabot<br>(Noklusetais = Tukšs)";
t['66'] = "Krasa: Maksimala limena krasa l<br>(Noklusetais = Tukšs)";
t['67'] = "Krasa: Limeni nevar uzlabot<br>( Noklusetais = Tukšs)";
t['68'] = "Krasa: Uzlabošana caur NPC<br>( Noklusetais = Tukšs)";
t['69'] = "Konsules Log limenis<br>TIKAI PRIEKŠ PROGRAMETAJIEM  VAI KLUDU NOVERŠANAS<br>(Noklusetais = 0)";
t['82.L'] = "Slegt saites (Slept dzest, parvietot uz augšu, uz leju ikonas)";
t['82.U'] = "Atslegt saites ( Radit dzest, parvietot uz augšu, uz leju ikonas)";
t['U.2'] = "Rase";
t['U.3'] = "Galvaspilsetas nosaukums<br><b>Apmekle savu profilu</b>";
t['U.6'] = "Galvaspilsetas koordinates<br><b> Apmekle savu profilu</b>";
t['SIM'] = "Kaujas simulators";
t['QSURE'] = "Vai esi parliecinats?";
t['LOSS'] = "Zaudejumi";
t['PROFIT'] = "Guvums";
t['EXTAV'] = "Celšana pieejama";
t['PLAYER'] = "Speletajs";
t['VILLAGE'] = "Ciems";
t['POPULATION'] = "Populacija";
t['COORDS'] = "Koordinates";
t['MAPTBACTS'] = "Notikumi";
t['SAVED'] = "Saglabats";
t['YOUNEED'] = "Nepieciešams";
t['TODAY'] = "šodien";
t['TOMORROW'] = "ritdien";
t['DAYAFTERTOM'] = "aizparit";
t['MARKET'] = "Tirgus";
t['BARRACKS'] = "Kazarmas";
t['RAP'] = "Mitina vieta";
t['STABLE'] = "Stallis";
t['WORKSHOP'] = "Darbnica";
t['SENDRES'] = "Sutit resursus";
t['BUY'] = "Pirkt";
t['SELL'] = "Pardot";
t['SENDIGM'] = "Sutit zinu";
t['LISTO'] = "Pieejams";
t['ON'] = "ap";
t['AT'] = "ap";
t['EFICIENCIA'] = "Lietderiba";
t['NEVER'] = "Ne tagad";
t['ALDEAS'] = "Ciemi";
t['TIEMPO'] = "Laiks";
t['OFREZCO'] = "Piedavajumi";
t['BUSCO'] = "Mekle";
t['TIPO'] = "Tips";
t['DISPONIBLE'] = "Tikai pieejamos";
t['CUALQUIERA'] = "Jebkurš";
t['YES'] = "Ja";
t['NO'] = "Ne";
t['LOGIN'] = "Ieiet";
t['MARCADORES'] = "Saglabatas saites";
t['ANYADIR'] = "Pievienot";
t['UBU'] = "Jaunas saites URL";
t['UBT'] = "Jaunas saites nosaukums";
t['DEL'] = "Dzest";
t['MAPA'] = "Karte";
t['MAXTIME'] = "Maksimalais laiks";
t['ARCHIVE'] = "Arhivs";
t['SUMMARY'] = "Parskats";
t['TROPAS'] = "Karaviri";
t['CHKSCRV'] = "Atjaunot versiju";
t['ACTUALIZAR'] = "Atjaunot ciema informaciju";
t['VENTAS'] = "Saglabatie piedavajumi";
t['MAPSCAN'] = "Meklet karte";
t['BIC'] = "Radit papildus ikonas";
t['SAVE'] = "Saglabat";
t['AT2'] = "Papildspeki";
t['AT3'] = "Uzbrukums: Parasts";
t['AT4'] = "Uzbrukums: Iebrukums";
t['NBSA'] = "Automatisks";
t['NBSN'] = "Normals (mazais)";
t['NBSB'] = "Platiem ekraniem (lielais)";
t['NBHAX'] = "Automatiski izstiepts augstums";
t['NBHK'] = "Noklusetais augstums";
t['NPCSAVETIME'] = "Saglabat:";
t['TOTALTROOPS'] = "Kopejais karaspeka skaits";
t['SELECTALLTROOPS'] = "Izveleties visu karaspeku";
t['PARTY'] = "Svinibas";
t['CPPERDAY'] = "Kulturas punkti/Diena";
t['SLOT'] = "Vieta";
t['TOTAL'] = "Kopa";
t['SELECTSCOUT'] = "Izvelieties izluku";
t['SELECTFAKE'] = "Izvelieties ne-isto";
t['ALL'] = "Visi";
t['SH2'] = "Krasu laukumos varat ievadit šadas krasas:<br>- <b>green</b> vai <b>red</b> vai  <b>orange</b>, utt.<br>- ka ari krasu kodus <b>#004523</b><br>- vai ari atstajat tukšu, lai izmantotu noklusetas krasas";
t['SOREP'] = "Radit originalo zinojumu (priekš kopešanas utt)";
t['WSIMO1'] = "Iekšejais (nodrošinajusi spele)";
t['WSIMO2'] = "Arejais (nodršinajis kirilloid.ru)";
t['NONEWVER'] = "Jus jau lietojat pedejo versiju";
t['BVER'] = "Jus varat lietot ari Beta versiju";
t['NVERAV'] = "Jaunaka skripta versija ir pieejama";
t['UPDSCR'] = "Atjaunot skriptu tagad?";
t['CHECKUPDATE'] = "Mekleju skripta jauninajumu.<br>Ludzu uzgaidiet...";
t['AVPPV'] = "Videja populacija pret ciemu";
t['AVPPP'] = "Videja populacija pret speletaju";
t['MAX'] = "Maksimalais";
t['TOTTRTR'] = "Kopejais karaspeka skaits, kas tiek trenets";
t['TB3SL'] = "$1 opcijas";
t['UPDALLV'] = "Uzlabot visus ciemus. ŠO LABAK NEIZMANTOT, JO TAS VAR NOVEST PIE KONTA BLOKEŠANAS";
t['LARGEMAP'] = "Liela karte";
t['USETHEMPR'] = "Lietot tos (proporcionali)";
t['USETHEMEQ'] = "Lietot tos (vienlidzigi)";
t['TOWNHALL'] = "Ratsnams";
t['GSRVT'] = "Speles serveris";
t['NBO'] = "Pierakstu blocins";
t['MNUL'] = "Kreisas puses izveles josla";
t['STAT'] = "Statistika";
t['RESF'] = "Resursu lauki";
t['VLC'] = "Ciema centrs";
t['MAPO'] = "Kastes iestatijumi";
t['COLO'] = "Krasu iestatijumi";
t['DBGO'] = "Kludu zinojumu iestatijumi";
t['HEROSMANSION'] = " Varonu Savrupmaja";
t['BLACKSMITH'] = " Ierocu kaltuve ";
t['ARMOURY'] = "Brunu kaltuve ";
t['NOW'] = "Tagad";
t['CLOSE'] = "Aizvert";
t['USETHEM1H'] = "Lietot tos (1 stundas produkcija)";
t['OVERVIEW'] = "Parskats";
t['FORUM'] = "Forums";
t['ATTACKS'] = "Uzbrukumi";
t['NEWS'] = "Zinojumi";
t['ADDCRTPAGE'] = "Pievienot atverto lapu";
t['SCRPURL'] = "TBeyond majaslapa";
t['SPACER'] = "Starp";
t['MEREO'] = "Sanemtas zinas un zinojumi";
t['ATTABLES'] = "Karaspeka saraksti";
t['MTW'] = "Izniekots";
t['MTX'] = "Parmerigs";
t['MTC'] = "Pašreizeja krava";
t['ALFL'] = "Saite uz arejo Travian forumu<br>(atstaj tukšu, lai saite butu uz starptautisko forumu)";
t['MTCL'] = "Nodzest visu";
t['VGL'] = "Ciemu saraksts";
t['USE'] = "Lietot";
t['CROPFINDER'] = "Labibas lauku mekletajs";
break;

case 'my': //contributors: Light@fei, dihaz06-47
t['1'] = "Server Travian v2.x";
t['4'] = "Pasar";
t['5'] = "Titik perhimpunan/Berek/Bengkel/Kandang kuda";
t['6'] = "Dewan perbandaran/Rumah agam wira/Kedai perisai/Kedai senjata";
t['7'] = "Istana/Residen/Akademi/Perbendaharaan";
t['8'] = "Persekutuan";
t['9'] = "Tunjukkan link tambahan di menu sebelah kiri<br>(Traviantoolbox, World Analyser, Travilog, Map, etc.)";
t['10'] = "Link simulator peperangan untuk digunakan:<br>(menu disebelah kiri)";
t['12'] = "Tunjukkan link 'dorf1.php' and 'dorf2.php'";
t['13'] = "Tunjukkan ikon \"Ketengahkan peta untuk kampung ini\" ";
t['14'] = "Tunjukkan ikon 'Hantar askar-askar/Hantar sumber-sumber' didalam list kampung";
t['16'] = "Tunjukkan produksi tanaman efektif di dalam list kampung";
t['20'] = "Tunjukkan bookmarks";
t['22'] = "Tunjukkan blok nota";
t['24'] = "Saiz blok nota";
t['25'] = "Ketinggian blok nota";
t['26'] = "Tunjukkan pengiraan/link Pembantu NPC";
t['27'] = "World Analyser untuk digunakan";
t['28'] = "Tunjukkan link penganalisa statistik";
t['34'] = "Tunjukkan informasi MB/Hari di dalam jadual naiktaraf";
t['35'] = "Tunjukkan penggunaan makanan didalam jadual naik taraf";
t['37'] = "Tunjukkan jadual naiktaraf tapak sumber";
t['38'] = "Tunjukkan warna-warna tahap sumber";
t['39'] = "Tunjukkan jadual bar sumber";
t['41'] = "Tunjukkan jadual naiktaraf bangunan";
t['43'] = "Tunjukkan nombor-nombor di pusat kampung";
t['44'] = "Tunjukkan warna-warna tahap bangunan";
t['45'] = "Tunjukkan level berkedip untuk bangunan yang sedang dinaiktaraf";
t['48'] = "Jumlah mukasurat tawaran untuk dipreload<br>Semasa di 'Pasar => Mukasurat beli' <br>(Default = 1)";
t['49'] = "Aksi Titik perhimpunan";
t['50'] = "Bilangan peninjau untuk fungsi<br>\"Pilihkan peninjau\"";
t['53'] = "Tunjukkan informasi askar-askar di tooltips";
t['54'] = "Tunjukkan jarak dan masa kepada sesuatu kampung di tooltips";
t['56'] = "Tunjukkan informasi jenis petak/oasis <br>semasa meletakkan cursor diatas peta";
t['57'] = "Tunjukkan jarak & masa";
t['58'] = "Tunjukkan jadual pemain/kampung/oasis berpenduduk";
t['59'] = "Bilangan mukasurat mesej/laporan untuk dipreload<br>(Default = 1)";
t['60'] = "Tunjukkan link untuk membuka mesej sebagai pop-up";
t['61'] = "Tunjukkan jadual \"Padam semua\" di mukasurat laporan";
t['62'] = "Tunjukkan ikon \"Hantar IGM\" kepada saya juga";
t['64'] = "Tunjukkan detail di dalam Statistic Laporan";
t['65'] = "Warna naiktaraf ada<br>(Default = Kosong)";
t['66'] = "Warna tahap maksimum<br>(Default = Kosong)";
t['67'] = "Warna naiktaraf tak mungkin<br>(Default = Kosong)";
t['68'] = "Warna naiktaraf menggunakan NPC<br>(Default = Kosong)";
t['82.L'] = "Kunci bookmark (Sorokkan ikon padam, keatas, kebawah)";
t['82.U'] = "Buka kunci bookmark (Tunjukkan ikon padam, keatas, kebawah)";
t['U.2'] = "Puak";
t['U.3'] = "Namakan ibukota anda<br><b>Lawat Profile anda untuk kemaskini</b>";
t['U.6'] = "Koordinat ibukota<br><b>Lawat Profile anda untuk kemaskini</b>";
t['SIM'] = "Simulator Peperangan";
t['QSURE'] = "Adakah anda pasti?";
t['LOSS'] = "Kerugian";
t['PROFIT'] = "Keuntungan";
t['EXTAV'] = "Boleh dibesarkan";
t['PLAYER'] = "Pemain";
t['VILLAGE'] = "Kampung";
t['POPULATION'] = "Populasi";
t['COORDS'] = "Koordinat";
t['MAPTBACTS'] = "Aksi";
t['SAVED'] = "Disimpan";
t['YOUNEED'] = "Anda Perlu";
t['TODAY'] = "Hari ini";
t['TOMORROW'] = "Esok";
t['DAYAFTERTOM'] = "Lusa";
t['MARKET'] = "Pasar";
t['BARRACKS'] = "Berek";
t['RAP'] = "Titik Perhimpunan";
t['STABLE'] = "Kandang Kuda";
t['WORKSHOP'] = "Bengkel";
t['SENDRES'] = "Hantarkan Sumber-sumber";
t['BUY'] = "Beli";
t['SELL'] = "Tawar";
t['SENDIGM'] = "Hantar IGM";
t['LISTO'] = "Ada";
t['ON'] = "pada";
t['AT'] = "di";
t['EFICIENCIA'] = "Kecekapan";
t['NEVER'] = "Tidak pernah";
t['ALDEAS'] = "Kampung(-kampung)";
t['TIEMPO'] = "Masa";
t['OFREZCO'] = "Menawar";
t['BUSCO'] = "Mencari";
t['TIPO'] = "Jenis";
t['DISPONIBLE'] = "Hanya Ada";
t['CUALQUIERA'] = "Mana-mana";
t['YES'] = "Ya";
t['NO'] = "Tidak";
t['LOGIN'] = "Log Masuk";
t['MARCADORES'] = "Bookmark";
t['ANYADIR'] = "Tambah";
t['UBU'] = "URL Bookmark Baru";
t['UBT'] = "Teks Bookmark Baru";
t['DEL'] = "Padam";
t['MAPA'] = "Peta";
t['MAXTIME'] = "Masa Maksimum";
t['ARCHIVE'] = "Arkib";
t['SUMMARY'] = "Rumusan";
t['TROPAS'] = "Askar-askar";
t['CHKSCRV'] = "Kemaskini TBeyond";
t['ACTUALIZAR'] = "Kemaskini informasi kampung";
t['VENTAS'] = "Tawaran tersimpan";
t['MAPSCAN'] = "Imbaskan Peta";
t['BIC'] = "Tunjukkan lebih ikon";
t['SAVE'] = "Simpan";
t['AT2'] = "Bantuan";
t['AT3'] = "Serangan: Normal";
t['AT4'] = "Serangan: Serbuan";
t['NBSA'] = "Auto";
t['NBSN'] = "Normal (kecil)";
t['NBSB'] = "Skrin besar (besar)";
t['NBHAX'] = "Laras Tinggi Automatik";
t['NBHK'] = "Ketinggian Default";
t['NPCSAVETIME'] = "Jimat: ";
t['TOTALTROOPS'] = "Jumlah askar-askar dalam kampung";
t['SELECTALLTROOPS'] = "Pilihkan semua askar";
t['PARTY'] = "Perayaan";
t['CPPERDAY'] = "MB/hari";
t['SLOT'] = "Slot";
t['TOTAL'] = "Jumlah";
t['SELECTSCOUT'] = "Pilihkan peninjau";
t['SELECTFAKE'] = "Pilihkan fake";
t['ALL'] = "Semua";
t['SH2'] = "Didalam ruang warna anda boleh memasuskkan:<br>- <b>green</b> or <b>red</b> or  <b>orange</b>, etc.<br>-  Kod warna HEX seperti<b>#004523</b><br>- Tinggalkan kosong untuk warna default";
t['SOREP'] = "Tunjukkan laporan original (untuk dipost)";
t['WSIMO1'] = "Dalaman (disediakan oleh permainan)";
t['WSIMO2'] = "Luaran (disediakan oleh kirilloid.ru)";
t['NONEWVER'] = "Anda mempunyai versi yang terbaru";
t['BVER'] = "Anda mempunyai versi beta";
t['NVERAV'] = "A Terdapat versi skrip yang lebih baru";
t['UPDSCR'] = "Kemaskini skrip sekarang ?";
t['CHECKUPDATE'] = "Memeriksa untuk kemaskini skrip.<br>Sila tunggu...";
t['AVPPV'] = "Populasi purata per kampung";
t['AVPPP'] = "Populasi purata per pemain";
t['MAX'] = "Maksimum";
t['TOTTRTR'] = "Jumlah askar sedang dilatih";
t['TB3SL'] = "Setup $1";
t['UPDALLV'] = "Kemaskini semua kampung.  GUNAKAN DENGAN BERHATI-HATI KERANA INI BOLEH MEMBAWA KEPADA PEMBEKUAN AKAUN ANDA !";
t['LARGEMAP'] = "Peta Besar";
t['USETHEMPR'] = "Guna (Dalam Peratus)";
t['USETHEMEQ'] = "Guna (Samarata)";
t['TOWNHALL'] = "Dewan Perbandaran";
t['GSRVT'] = "Server dunia permainan";
t['ACCINFO'] = "Informasi Akaun";
t['NBO'] = "Tiadablok";
t['MNUL'] = "Menu di sebelah kiri";
t['STAT'] = "Statistik";
t['RESF'] = "Tapak sumber";
t['VLC'] = "Pusat Kampung";
t['MAPO'] = "Pilihan peta";
t['COLO'] = "Pilihan warna";
t['DBGO'] = "Pilihan debug";
t['HEROSMANSION'] = "Rumah Agam Wira";
t['BLACKSMITH'] = "Kedai Senjata";
t['ARMOURY'] = "Kedai Perisai";
t['NOW'] = "Sekarang";
t['CLOSE'] = "Tutup";
t['USETHEM1H'] = "Guna (Produksi sejam)";
t['OVERVIEW'] = "Keseluruhan";
t['FORUM'] = "Forum";
t['ATTACKS'] = "Serangan";
t['NEWS'] = "Berita";
t['ADDCRTPAGE'] = "Tambahkan mukasurat sekarang";
t['SCRPURL'] = "Mukasurat TBeyond";
t['SPACER'] = "Penambah jarak";
t['MEREO'] = "Mesej & Laporan";
t['ATTABLES'] = "Jadual askar-askar";
t['MTW'] = "Dibazirkan";
t['MTX'] = "Melebihi";
t['MTC'] = "Kapasiti sekarang";
t['ALFL'] = "Linkkan ke forum luaran<br>(Tinggalkan kosong untuk forum dalaman)";
t['MTCL'] = "Padamkan semua";
t['CKSORT'] = "Klikkan untuk membahagi";
t['MIN'] = "Minimum";
t['SVGL'] = "Kongsikan antara kampung";
t['VGL'] = "List kampung-kampung";
t['UPDATEPOP'] = "Kemaskini populasi";
t['EDIT'] = "Edit";
t['NPCO'] = "Pilihan Pembantu NPC";
t['NEWVILLAGEAV'] = "Tarikh/Masa";
t['TIMEUNTIL'] = "Masa untuk menunggu";
t['CENTERMAP'] = "Ketengahkan peta untuk kampung ini";
t['SENDTROOPS'] = "Hantarkan askar-askar";
t['PALACE'] = "Istana";
t['RESIDENCE'] = "Residen";
t['ACADEMY'] = "Akademi";
t['TREASURY'] = "Perbendaharaan";
t['UPGTB'] = " Jadual naiktaraf Tapak sumber/Bangunan";
t['RBTT'] = "Bar Sumber";
t['USE'] = "Guna";
t['CROPFINDER'] = "Crop finder";
break;

case 'nl': //contributors: anonymous author, Boeruh, TforAgree, Dakkie
t['1'] = "Travian v2.x server";
t['3'] = "Forceer T3.1 Phalanx en Legionair Capaciteits berekening.<br>(Voor gemixte T3.1 & T3.5 servers - meestal .de servers)";
t['4'] = "Marktplaats";
t['5'] = "Verzamelplaats/Barakken/Werkplaatsen/Stal";
t['6'] = "Raadhuis/Heldenhof/Uitrustingssmederij/Wapensmid";
t['7'] = "Paleis/Residentie/Academie/Schatkamer";
t['8'] = "Alliantie";
t['9'] = "Extra link laten zien in linker menu<br>(Traviantoolbox, World Analyser, Travilog, Map, etc.)";
t['10'] = "Veldslagsimulator link gebruiken:<br>(in menu links)";
t['12'] = "Laat de 'dorf1.php' en 'dorf2.php' links zien";
t['13'] = "Icoon voor \"Centreer map op dit dorp\" laten zien";
t['14'] = "Laat \"Stuur troepen/Stuur Handelaren\" Icoon zien in de dorpen lijst";
t['16'] = "Laat netto graanproductie zien in de dorpen lijst zien";
t['17'] = "Laat de Populatie zien in de dorpen lijst zien";
t['18'] = "Laat extra (2 Kolommen) dorpenlijst zien als zwevend venster";
t['20'] = "Links laten zien";
t['21'] = "Laat \"Gebruikers Links\" als zwevend venster zien";
t['22'] = "Kladblok zichtbaar";
t['23'] = "Laat \"Kladblok\" als zwevend venster zien";
t['24'] = "Kladblok grote";
t['25'] = "Kladblok hoogte";
t['26'] = "NPC Handelaar links en info laten zien";
t['27'] = "World Analyser gebruiken";
t['28'] = "Laat Analyser statistieken links zien";
t['29'] = "Welke map analyser te gebruiken:";
t['30'] = "Laat links naar de kaart zien voor spelers";
t['31'] = "Laat links naar de kaart zien voor allianties";
t['34'] = "Laat CP/dag zien in de uitbreidingstabel";
t['35'] = "Laat graanverbruik zien in de uitbreidingstabel";
t['37'] = "Grondstofvelden uitbreidings tabel weergeven";
t['38'] = "Grondstof kleur niveau weergeven";
t['39'] = "Laat het \"Grondstof productie venster\" zien";
t['40'] = "Laat het \"Grondstof productie venster\" als zwevend venster zien";
t['41'] = "Gebouwen uitbereidings tabel weergeven";
t['43'] = "Dorp nummers weergeven";
t['44'] = "Gebouwen kleur niveau weergeven";
t['45'] = "Laat knipperend icoon zien voor gebouwen die worden gebouwd";
t['48'] = "Aantal pagina's voorladen<br>bij 'Marktplaats => kopen'<br>(Standaard = 1)";
t['49'] = "Verzamelplaats standaard aktie";
t['50'] = "Aantal scouts voor de<br>\"Selecteer verkenners\" functie";
t['53'] = "Troepen info laten zien bij muis op plaatjes.";
t['54'] = "Afstand en tijd laten zien naar dorp in tooltip";
t['55'] = "Automatisch aanwezige troepen invullen";
t['56'] = "Laat veld type/oase info zien<br>bij muisover het veld";
t['57'] = "Afstanden en tijden laten zien";
t['58'] = "Laat de tabel zien van Spelers/Dorpen/Oases";
t['59'] = "Aantal paginas voorladen<br>(Standaard = 1)";
t['61'] = "Tabel met \"Verwijder\" laten zien op raporten pagina";
t['62'] = "Ook mijn \"Stuur IGM\" icoon laten zien";
t['63'] = "Laat TB3.5 Uitgebreide Aanvalsrapporten zien";
t['64'] = "Laat uitgebreide details zien in de statistieken";
t['65'] = "Kleur voor uitbreidbaar<br>(Standaard leeg)";
t['66'] = "Kleur max level<br>(Standaard leeg)";
t['67'] = "Kleur niet uitbreidbaar<br>(Standaard leeg)";
t['68'] = "Kleur uitbreidbaar via NPC<br>(Standaard leeg)";
t['69'] = "Console Log Niveau (Standaard = 0)<br>(alleen voor programeurs of debugging)";
t['82.L'] = "Bladwijzers vast zetten (Verberg de verwijder en verplaats iconen)";
t['U.2'] = "Ras";
t['U.3'] = "Naam van hoofddorp<br><b>Niet bewerken, ga hiervoor naar je profiel</b>";
t['U.6'] = "Coordinaten van hoofddorp<br><b>Niet bewerken, ga hiervoor naar je profiel</b>";
t['SIM'] = "Gevecht simulator";
t['QSURE'] = "Weet je het zeker?";
t['LOSS'] = "Verlies";
t['PROFIT'] = "Winst";
t['EXTAV'] = "Uitbreiding beschikbaar";
t['PLAYER'] = "Speler";
t['VILLAGE'] = "Dorp";
t['POPULATION'] = "Populatie";
t['COORDS'] = "Co&ouml;rd";
t['MAPTBACTS'] = "Acties";
t['SAVED'] = "Bewaard";
t['YOUNEED'] = "Nog nodig";
t['TODAY'] = "vandaag";
t['TOMORROW'] = "morgen";
t['DAYAFTERTOM'] = "overmorgen";
t['MARKET'] = "Marktplaats";
t['BARRACKS'] = "Barakken";
t['RAP'] = "Verzamelpunt";
t['STABLE'] = "Stal";
t['WORKSHOP'] = "Werkplaats";
t['SENDRES'] = "Stuur grondstoffen";
t['BUY'] = "Koop";
t['SELL'] = "Verkoop";
t['SENDIGM'] = "Stuur IGM";
t['LISTO'] = "Uitbreiding beschikbaar";
t['ON'] = "om";
t['AT'] = "om";
t['EFICIENCIA'] = "Effici&euml;ntie";
t['NEVER'] = "Nooit";
t['ALDEAS'] = "Dorp(en)";
t['TIEMPO'] = "Tijd";
t['OFREZCO'] = "Bieden";
t['BUSCO'] = "Zoeken";
t['TIPO'] = "Type";
t['DISPONIBLE'] = "Alleen beschikbaar";
t['CUALQUIERA'] = "Elke";
t['YES'] = "Ja";
t['NO'] = "Nee";
t['LOGIN'] = "Login";
t['MARCADORES'] = "Links";
t['ANYADIR'] = "Toevoegen";
t['UBU'] = "Nieuwe link URL";
t['UBT'] = "Nieuwe link Text";
t['DEL'] = "Verwijder";
t['MAPA'] = "Map";
t['MAXTIME'] = "Max. tijd";
t['ARCHIVE'] = "Archiveer";
t['SUMMARY'] = "Samenvatting";
t['TROPAS'] = "Troepen";
t['CHKSCRV'] = "Update TBeyond";
t['ACTUALIZAR'] = "Update dorp informatie";
t['VENTAS'] = "Opgeslagen verkopen";
t['MAPSCAN'] = "Scan de map";
t['BIC'] = "Uitgebreide iconen zichtbaar";
t['SAVE'] = "Opslaan";
t['AT2'] = "Versterking";
t['AT3'] = "Aanval";
t['AT4'] = "Overval";
t['NBSA'] = "Auto";
t['NBSN'] = "Normaal (klein)";
t['NBSB'] = "Groot";
t['NBHAX'] = "Automatisch groter maken";
t['NBHK'] = "Standaard hoogte";
t['NPCSAVETIME'] = "Bespaar: ";
t['TOTALTROOPS'] = "Totaal dorp troepen";
t['SELECTALLTROOPS'] = "Selecteer alle troepen";
t['PARTY'] = "Feest";
t['CPPERDAY'] = "CP/dag";
t['SLOT'] = "Slot";
t['TOTAL'] = "Totaal";
t['SELECTSCOUT'] = "Selecteer verkenners";
t['SELECTFAKE'] = "Selecteer fake";
t['ALL'] = "Alles";
t['SH2'] = "In de kleur velen mag je invullen:<br>- <b>green</b>, <b>red</b> or <b>orange</b>, etc.<br>- de HEX kleur code zoals <b>#004523</b><br>- leeg laten voor standaard kleur";
t['SOREP'] = "Laat orgineel bericht zien (voor verzenden)";
t['WSIMO1'] = "Die van het spel";
t['WSIMO2'] = "Externe (door kirilloid.ru)";
t['NONEWVER'] = "Je hebt de laatste versie";
t['BVER'] = "Je hebt waarschijnlijk een beta versie";
t['NVERAV'] = "Er is een nieuwe versie beschikbaar";
t['UPDSCR'] = "Update script nu ?";
t['CHECKUPDATE'] = "Voor updates controleren... Een moment.";
t['AVPPV'] = "Gemiddelde populatie per dorp";
t['AVPPP'] = "Gemiddelde populatie per speler";
t['TOTTRTR'] = "Totaal aantal troepen";
t['UPDALLV'] = "Update alle dorpen. LETOP: Bij vaak gebruik kan dit lijden tot een ban van travain!";
t['LARGEMAP'] = "Grote map";
t['USETHEMPR'] = "Verdeel (procentueel)";
t['USETHEMEQ'] = "Verdeel (Gelijkmatig)";
t['TOWNHALL'] = "Raadhuis";
t['GSRVT'] = "Server versie";
t['ACCINFO'] = "Account info";
t['NBO'] = "Kladblok";
t['MNUL'] = "Linker menu";
t['STAT'] = "Statistieken";
t['RESF'] = "Grondstof velden";
t['VLC'] = "Dorp centrum";
t['MAPO'] = "Map opties";
t['COLO'] = "Kleur opties";
t['DBGO'] = "Debug opties";
t['HEROSMANSION'] = "Heldenhof";
t['BLACKSMITH'] = "Wapensmid";
t['ARMOURY'] = "Uitrustingssmederij";
t['NOW'] = "Nu";
t['CLOSE'] = "Sluit";
t['USETHEM1H'] = "Verdeel (1 uur productie)";
t['OVERVIEW'] = "Overzicht";
t['FORUM'] = "Forum";
t['ATTACKS'] = "Aanvallen";
t['NEWS'] = "Nieuws";
t['ADDCRTPAGE'] = "Huidige pagina";
t['SCRPURL'] = "TBeyond pagina";
t['SPACER'] = "Scheidingsteken";
t['MEREO'] = "Berichten & Raportages";
t['ATTABLES'] = "Troepen tabellen";
t['MTW'] = "Ruimte over";
t['MTX'] = "Te veel";
t['MTC'] = "Huidige lading";
t['ALFL'] = "Link naar extern forum<br>(Leeg laten voor intern forum)";
t['MTCL'] = "Leeg alle velden";
t['CKSORT'] = "Klik voor sorteren";
t['SVGL'] = "Voor elk dorp gebruiken";
t['VGL'] = "Dorpen lijst";
t['EDIT'] = "Bewerk";
t['NPCO'] = "NPC Handel opties";
t['NEWVILLAGEAV'] = "Datum/Tijd";
t['TIMEUNTIL'] = "Wacht tijd";
t['CENTERMAP'] = "Centreer map op dit dorp";
t['USE'] = "Verdeel het";
t['WSI'] = "In-game gevechts simulator";
t['CROPFINDER'] = "Graanvelden zoeker";
break;

case 'no': //contributors: ThePirate
t['1'] = "Travian v2.x server";
t['8'] = "Allianse";
t['9'] = "Vis flere lenker i menyen til venstre<br>(Traviantoolbox, World Analyser, Travilog, Map, etc.)";
t['10'] = "Kampsimulator link:<br>(menyen til venstre)";
t['20'] = "Vis bokmerker";
t['22'] = "Vis notatblokk";
t['24'] = "Notisblokk størrelse";
t['25'] = "Notisblokk høyde";
t['28'] = "Show analyser statistic links";
t['37'] = "Vis utvidelseshjelp for ressursfelt";
t['38'] = "Vi farge på ressurs nivået";
t['41'] = "Vis utvidelseshjelp for bygninger";
t['43'] = "Vis bygnings nivå";
t['44'] = "Vis bygnings nivå farger";
t['48'] = "Mengde av 'tilbyr' sider som skal lastes<br>i 'Marked => Kjøp' side<br>(Standard = 1)";
t['49'] = "Møteplass standard handling ";
t['56'] = "Vis rute/oase type<br>ved musepekeren over kartet";
t['57'] = "Vis avstand og tid";
t['65'] = "Farge utvidelse tilgjengelig<br>(Standard = Tom)";
t['66'] = "Farge maksimalt nivål<br>(Standard = Tom)";
t['67'] = "Farge utvidelse ikke tilgjengelig<br>(Standard = Tom)";
t['68'] = "Farge utvidelse via NPC<br>(Standard = Tom)";
t['69'] = "Console Log Level<br>ONLY FOR PROGRAMMERS OR DEBUGGING<br>(Default = 0)";
t['U.2'] = "Stamme";
t['U.3'] = "Navn på din hovedby<br><b>Ikke endre på dette, besøk profilen din!</b>";
t['U.6'] = "Koordinater til hovedbyen din<br><b>Ikke endre på dette, besøk profilen din!</b>";
t['SIM'] = "Kamp-simulator";
t['QSURE'] = "Er du sikker?";
t['LOSS'] = "Tap";
t['PROFIT'] = "Profit";
t['EXTAV'] = "Utvidelse tilgjengelig";
t['PLAYER'] = "Spiller";
t['VILLAGE'] = "By";
t['POPULATION'] = "Befolknong";
t['COORDS'] = "Koordinater";
t['MAPTBACTS'] = "Handlinger";
t['SAVED'] = "Lagret";
t['YOUNEED'] = "Du trenger";
t['TODAY'] = "idag";
t['TOMORROW'] = "imorgen";
t['DAYAFTERTOM'] = "dagen etter imorgen";
t['MARKET'] = "Markedsplass";
t['BARRACKS'] = "Kaserne";
t['RAP'] = "Møteplass";
t['STABLE'] = "Stall";
t['WORKSHOP'] = "Verksted";
t['SENDRES'] = "Send ressurser";
t['BUY'] = "Kjøp";
t['SELL'] = "Selg";
t['SENDIGM'] = "Send IGM";
t['LISTO'] = "Kan bygges";
t['ON'] = "den";
t['AT'] = "klokken";
t['EFICIENCIA'] = "Effektivitet";
t['NEVER'] = "Aldri";
t['ALDEAS'] = "By(er)";
t['TIEMPO'] = "Tid";
t['OFREZCO'] = "Tilbyr";
t['BUSCO'] = "Leter etter";
t['TIPO'] = "Type";
t['DISPONIBLE'] = "Kun tigjengelig";
t['CUALQUIERA'] = "Alle";
t['YES'] = "Ja";
t['NO'] = "Nei";
t['LOGIN'] = "Logg inn";
t['MARCADORES'] = "Bokmerker";
t['ANYADIR'] = "Legg til";
t['UBU'] = "Nytt bokmerke URL";
t['UBT'] = "Nytt nokmerke Text";
t['DEL'] = "Slett";
t['MAPA'] = "Kart";
t['MAXTIME'] = "Maximum tid";
t['ARCHIVE'] = "Arkiv";
t['SUMMARY'] = "Resume";
t['TROPAS'] = "Tropper";
t['CHKSCRV'] = "Oppdater TBeyond";
t['ACTUALIZAR'] = "Oppdater by-informasjon";
t['VENTAS'] = "Lagrede tilbud";
t['MAPSCAN'] = "Scan Kartet";
t['BIC'] = "Vis utvidede iconer";
t['SAVE'] = "Lagre";
t['AT2'] = "Forsterkninger";
t['AT3'] = "Angrep: Normalt";
t['AT4'] = "Angrep: Plyndringstokt";
t['NBSA'] = "Auto";
t['NBSN'] = "Normal (Liten)";
t['NBSB'] = "Større";
t['NBHAX'] = "Automatisk utvid høyde";
t['NBHK'] = "Standard høyde";
t['NPCSAVETIME'] = "Lagre: ";
t['TOTALTROOPS'] = "Totale tropper i byen";
t['SELECTALLTROOPS'] = "Velg alle tropper";
t['PARTY'] = "Fester";
t['CPPERDAY'] = "KP/dag";
t['SLOT'] = "Utvidelse";
t['TOTAL'] = "Totalt";
t['SELECTSCOUT'] = "Velg scout";
t['SELECTFAKE'] = "Velg fake";
t['ALL'] = "Alle";
t['SH2'] = "I farge-felt kan du skrive:<br>- <b>green</b> eller <b>red</b> eller  <b>orange</b>, etc.<br>- the HEX color code like <b>#004523</b><br>- leave empty for the default color";
t['SOREP'] = "Vis orginal rapport (for posting)";
t['NONEWVER'] = "Du har den siste versjonen tilgjengelig";
t['BVER'] = "Du har kansje en beta versjon";
t['NVERAV'] = "En ny versjon er tilgjengelig";
t['UPDSCR'] = "Oppdatere nå ?";
t['CHECKUPDATE'] = "Leter etter script oppdatering.<br>Venligst vent...";
t['AVPPV'] = "Gjennomsnittlig befolkning per by";
t['AVPPP'] = "Gjennomsnittlig befolkning per spiller";
t['TOTTRTR'] = "Total troppe utviklings tid";
t['UPDALLV'] = "Oppdater alle byer.  USE WITH MAXIMUM CARE AS THIS CAN LEAD TO A BANNED ACCOUNT !";
t['LARGEMAP'] = "Stort kart";
t['CROPFINDER'] = "Crop finder";
break;

case 'ph': //contributors: ahuks
t['5'] = "Pook Tipunan/Kwartel/Talyer/Kuwadra";
t['6'] = "Bulwagan ng Baryo/Mansyon ng Bayani/Balutian/Pandayan";
t['7'] = "Palasyo/Residensya/Akademya/Kaban-yaman";
t['8'] = "Alyansa";
t['13'] = "Show \"Gitnang Mapa ng Baryo\" icon";
t['37'] = "Show resource fields upgrade table";
t['41'] = "Show buildings upgrade table";
t['50'] = "Bilang ng Scout para sa<br>\"Piliin Scout\" function";
t['U.2'] = "Lahi";
t['QSURE'] = "Sigurado ka ba?";
t['LOSS'] = "Kawalan";
t['PROFIT'] = "Pakinabang";
t['EXTAV'] = "Maari ng Gawin";
t['PLAYER'] = "Manlalaro";
t['VILLAGE'] = "Baryo";
t['POPULATION'] = "Populasyon";
t['COORDS'] = "Coordinate";
t['MAPTBACTS'] = "Aksyon";
t['SAVED'] = "Saved";
t['YOUNEED'] = "Kailangan mo";
t['TODAY'] = "ngayon";
t['TOMORROW'] = "bukas";
t['DAYAFTERTOM'] = "kinabukasan";
t['MARKET'] = "Palengke";
t['BARRACKS'] = "Kwartel";
t['RAP'] = "Pook Tipunan";
t['STABLE'] = "Kuwadra";
t['WORKSHOP'] = "Talyer";
t['SENDRES'] = "Magpadala ng likas-yaman";
t['BUY'] = "Bumili";
t['SELL'] = "Alok";
t['SENDIGM'] = "Sumulat ng Mensahe";
t['LISTO'] = "Maari na";
t['ON'] = "ng";
t['AT'] = "sa";
t['EFICIENCIA'] = "Kahusayan";
t['NEVER'] = "Hindi Kailanman";
t['ALDEAS'] = "Baryo";
t['TIEMPO'] = "Oras";
t['OFREZCO'] = "Nag-aalok";
t['BUSCO'] = "Naghahanap";
t['TIPO'] = "Uri";
t['DISPONIBLE'] = "Ito'y Maari lamang";
t['CUALQUIERA'] = "Kahit Ano";
t['YES'] = "Oo";
t['NO'] = "Hindi";
t['MAPA'] = "Mapa";
t['MAXTIME'] = "Pinakamatagal na Oras";
t['SUMMARY'] = "Ulat";
t['TROPAS'] = "Mga Hukbo";
t['AT2'] = "Dagdag ng Hukbo";
t['AT3'] = "Salakay: Normal";
t['AT4'] = "Salakay: Pagnakaw";
t['TOTALTROOPS'] = "Kubuuan ng Hukbo";
t['SELECTALLTROOPS'] = "Piliin lahat ng Hukbo";
t['PARTY'] = "Kasiyahan";
t['CPPERDAY'] = "Pananim/Araw";
t['TOTAL'] = "Kabuuan";
t['SELECTSCOUT'] = "Piliin ang Scout";
t['SELECTFAKE'] = "Piliin ang Pekeng Atake";
t['ALL'] = "Lahat";
t['SOREP'] = "Ipakita ang Orihinal na Ulat";
t['AVPPV'] = "Average na Population sa bawat Baryo";
t['AVPPP'] = "Average na Population sa bawat Manlalaro";
t['TOWNHALL'] = "Bulwagan ng Baryo";
t['STAT'] = "Mga Estatistika";
t['RESF'] = "Likas-yaman";
t['VLC'] = "Gitna ng Baryo";
t['HEROSMANSION'] = "Mansyon ng Bayani";
t['BLACKSMITH'] = "Pandayan";
t['ARMOURY'] = "Balutian";
t['OVERVIEW'] = "Pananaw";
t['FORUM'] = "Porum";
t['ATTACKS'] = "Atake";
t['NEWS'] = "Ulat";
t['CENTERMAP'] = "Gitnang Mapa ng Baryo";
t['SENDTROOPS'] = "Magpadala ng Hukbo";
t['PALACE'] = "Palasyo";
t['RESIDENCE'] = "Residensya";
t['ACADEMY'] = "Akademya";
t['TREASURY'] = "Kaban-yaman";
break;

case 'pl': //contributors: Dzikuska, Signum, llameth
t['1'] = "Travian v2.x server";
t['3'] = "Wymus obliczanie liczby Legionistów i Falang wg. wersji T3.1<br>(dla mieszanych serwerów T3.1 & T3.5 – zwykle tylko serwery .de)";
t['4'] = "Rynek";
t['5'] = "Miejsce zbiórki/koszary/Warsztat/Stajnia";
t['6'] = "Ratusz/Dwór bohaterów/Kuznia/Zbrojownia";
t['7'] = "Palac/Rezydencja/Akademia/Skarbiec";
t['8'] = "Sojusz";
t['9'] = "Pokaz dodatkowe linki w menu po lewej stronie<br>(Traviantoolbox, World Analyser, Travilog, Map, itp.)";
t['10'] = "Symulator walki link do:<br>(menu z lewej strony)";
t['12'] = "Pokaz 'dorf1.php' i 'dorf2.php' linki";
t['13'] = "Pokaz ikonke \"Centruj mape na tej osadzie\"";
t['14'] = "W spisie osad pokaz ikonki 'Wyslij jednostki/Wyslij surowce'";
t['16'] = "Pokaz rzeczywista produkcje zboza na liscie osad";
t['17'] = "Pokaz liczbe ludnosci na liscie osad";
t['18'] = "Pokaz dodatkowa (2-kolumnowa) liste osad jako 'plywajace okno'";
t['20'] = "Pokaz zakladki";
t['21'] = "Pokaz 'Zakladki' jako 'plywajace' okno";
t['22'] = "Pokaz notatnik";
t['23'] = "Pokaz 'Notatnik' jako 'plywajace' okno";
t['24'] = "Notatnik - Rozmiar";
t['25'] = "Notatnik - wysokosc";
t['26'] = "Pokaz kalkulacje handlarza NPC /linki";
t['27'] = "Uzywany World Analyser ";
t['28'] = "Pokaz linki statystyki analysera";
t['29'] = "Jakiego analizatora map chcesz uzywac";
t['30'] = "Pokaz odwolania do mapy dla graczy";
t['31'] = " Pokaz odwolania do mapy dla sojuszy";
t['34'] = "Pokaz PK/dzien w tabelce rozbudowy";
t['35'] = "Pokaz zjadane zboze w tabelce rozbudowy";
t['37'] = "Pokaz tabelke rozbudowy surowców";
t['38'] = "Pokaz kolory poziomu surowców";
t['39'] = "Pokaz 'Tabele surowców'";
t['40'] = "Pokaz 'Tabele surowców' jako 'plywajace' okno";
t['41'] = "Pokaz tabelke rozbudowy budynków";
t['42'] = "Sortowanie budynków wg. nazwy w tabeli rozbudowy osady";
t['43'] = "Pokaz centrum osady";
t['44'] = "Pokaz kolory poziomu budynków";
t['45'] = "Pokaz poziom budynku który jest aktualnie budowany jako migajacy";
t['46'] = "Wyswietl dodatkowe informacje dla kazdego przybywajacego handlarza";
t['47'] = "Pokaz ostatni transport na rynku";
t['48'] = "Liczba stron ofert na rynku <br>w zakladce 'Rynek => Kupowanie' Stron<br>(Domyslnie = 1)";
t['49'] = "Miejsce zbiórki, domyslna akcja";
t['50'] = "Ilosc zwiadowców dla funkcji<br>\"Wybierz zwiadowców\"";
t['51'] = "Pokaz ostatni atak";
t['52'] = "Pokaz/uzyj wspólrzednych ostatniego ataku";
t['53'] = "Pokaz informacje o jednostkach w podpowiedziach";
t['54'] = "Pokaz odleglosc i czas dojscia do osady w podpowiedziach";
t['55'] = "Automatycznie uzyj dostepnych jednostek w wewnetrznym symulatorze bitwy";
t['56'] = "Pokaz zawartosc i typ doliny<br>kiedy wskazesz myszka";
t['57'] = "Pokaz odleglosci i czasy dojscia jednostek";
t['58'] = "Pokaz tabelke graczy/osad/zdobytych dolin";
t['59'] = "Liczba wiadomosci/raportów na stronie  <br>(Domyslnie = 1)";
t['60'] = "Pokaz ikonke pozwalajaca otwierac wiadomosci/raporty<br>w osobnym okienku (pop-up)";
t['61'] = "Pokaz tabele 'Usun wszystko' na stronie z raportami";
t['62'] = "Pokaz ikonke \"Wyslij PW\" równiez dla mnie";
t['63'] = "Pokaz rozszerzone Raporty Bitewne TB3";
t['64'] = "Pokaz szczególy statystyk w raporcie";
t['65'] = "Kolor: rozbudowa mozliwa<br>(Domyslnie  = Brak)";
t['66'] = "Kolor: poziomu maksymalnego<br>(Domyslnie  = Brak)";
t['67'] = "Kolor: rozbudowa niemozliwa<br>(Domyslnie  = Brak)";
t['68'] = "Kolor: rozbudowa przy pomocy NPC<br>(Domyslnie  = Brak)";
t['69'] = "Console Log Level<br>ONLY FOR PROGRAMMERS OR DEBUGGING<br>(Default = 0)";
t['82.L'] = "Zablokuj zakladki (Ukryj usun, do góry, na dól ikonki)";
t['82.U'] = "Odblokuj zakladki (Ukryj usun, do góry, na dól ikonki)";
t['U.2'] = "Rasa";
t['U.3'] = "Nazwa Twojej stolicy<br><b>Wejdz do swojego profilu w ustawieniach aby zaktualizowac</b>";
t['U.6'] = "Wspólrzedne Twojej stolicy<br><b>Wejdz do swojego profilu w ustawieniach aby zaktualizowac</b>";
t['SIM'] = "Symulator Walki";
t['QSURE'] = "Jestes pewien?";
t['LOSS'] = "Strata";
t['PROFIT'] = "Zysk";
t['EXTAV'] = "Rozbudowa mozliwa";
t['PLAYER'] = "Gracz";
t['VILLAGE'] = "Osada";
t['POPULATION'] = "Populacja";
t['COORDS'] = "Koordynaty";
t['MAPTBACTS'] = "Akcje";
t['SAVED'] = "Zapisane";
t['YOUNEED'] = "Potrzebujesz";
t['TODAY'] = "Dzisiaj";
t['TOMORROW'] = "Jutro";
t['DAYAFTERTOM'] = "Pojutrze";
t['MARKET'] = "Rynek";
t['BARRACKS'] = "Koszary";
t['RAP'] = "Miejsce Zbiórki";
t['STABLE'] = "Stajnia";
t['WORKSHOP'] = "Warsztat";
t['SENDRES'] = "Wyslij surowce";
t['BUY'] = "Kup";
t['SELL'] = "Sprzedaj";
t['SENDIGM'] = "Wyslij PW";
t['LISTO'] = "Mozliwe";
t['ON'] = "na";
t['AT'] = "o";
t['EFICIENCIA'] = "Efektywnosc";
t['NEVER'] = "Nigdy";
t['ALDEAS'] = "Osada(y)";
t['TIEMPO'] = "Czas";
t['OFREZCO'] = "Oferuje";
t['BUSCO'] = "Szukam";
t['TIPO'] = "Rodzaj";
t['DISPONIBLE'] = "Tylko mozliwe";
t['CUALQUIERA'] = "Jakikolwiek";
t['YES'] = "Tak";
t['NO'] = "Nie";
t['LOGIN'] = "Login";
t['MARCADORES'] = "Zakladki";
t['ANYADIR'] = "Dodaj";
t['UBU'] = "Nowa zakladka URL";
t['UBT'] = "Nowa zakladka Text";
t['DEL'] = "Usun";
t['MAPA'] = "Mapa";
t['MAXTIME'] = "Maksimum czasu";
t['ARCHIVE'] = "Archiwum";
t['SUMMARY'] = "Razem";
t['TROPAS'] = "Jednostki";
t['CHKSCRV'] = "Uaktualnij TBeyond";
t['ACTUALIZAR'] = "Aktualizuj informacje o osadzie";
t['VENTAS'] = "Zapisz oferte";
t['MAPSCAN'] = "Skanuj mape";
t['BIC'] = "Pokaz rozszerzone ikony";
t['SAVE'] = "Zapisz";
t['AT2'] = "Posilki";
t['AT3'] = "Atak: Normalny";
t['AT4'] = "Atak: Grabiez";
t['NBSA'] = "Auto";
t['NBSN'] = "Normalny (maly)";
t['NBSB'] = "Duzy obraz (duzy)";
t['NBHAX'] = "Automatycznie ustaw wysokosc";
t['NBHK'] = "Domyslna wysokosc";
t['NPCSAVETIME'] = "Zapisz: ";
t['TOTALTROOPS'] = "Wszystkie jednostki";
t['SELECTALLTROOPS'] = "Wybierz wszystkie jednostki";
t['PARTY'] = "Swieto";
t['CPPERDAY'] = "PK/dzien";
t['SLOT'] = "Miejsce";
t['TOTAL'] = "Razem";
t['SELECTSCOUT'] = "Wybierz zwiadowców";
t['SELECTFAKE'] = "Wybierz fejka";
t['ALL'] = "Wszystko";
t['SH2'] = "Jako kolor pól mozesz wpisac:<br>- <b>green</b> or <b>red</b> or  <b>orange</b>, etc.<br>- lub kod koloru w HEX np. <b>#004523</b><br>- zostaw puste dla domyslnych kolorów";
t['SOREP'] = "Pokaz oryginalny raport (do publikacji)";
t['WSIMO1'] = "Wewnetrzny (wbudowany w gre)";
t['WSIMO2'] = "Zewnetrzny (zrobiony przez kirilloid.ru)";
t['NONEWVER'] = "Masz najnowsza wersje";
t['BVER'] = "Masz wersje beta";
t['NVERAV'] = "Nowa wersja skryptu jest mozliwa do pobrania";
t['UPDSCR'] = "Uaktualnic skrypt teraz? ?";
t['CHECKUPDATE'] = "Sprawdzam aktualizacje skryptu.<br>Prosze czekac...";
t['AVPPV'] = "Srednia populacja wg osady";
t['AVPPP'] = "Srednia populacja wg gracza";
t['MAX'] = "Maks.";
t['TOTTRTR'] = "Suma szkolonych jednostek";
t['UPDALLV'] = "Uaktualnij wszystkie osady. UZYWAJ TEGO Z MAKSYMALNA ROZWAGA. MOZE DOPROWADZIC DO ZABLOKOWANIA KONTA !";
t['LARGEMAP'] = "Duza mapa";
t['USETHEMPR'] = "Uzyj je  (proporcjonalnie)";
t['USETHEMEQ'] = "Uzyj je (równe)";
t['TOWNHALL'] = "Ratusz";
t['GSRVT'] = "Serwer gry";
t['ACCINFO'] = "Informacje o koncie";
t['NBO'] = "Notatnik";
t['MNUL'] = "Menu po lewej stronie";
t['STAT'] = "Statystyki";
t['RESF'] = "Pola surowców";
t['VLC'] = "Centrum osady";
t['MAPO'] = "Opcje mapy";
t['COLO'] = "Opcje kolorów";
t['DBGO'] = "Debug options";
t['HEROSMANSION'] = "Dwór bohaterów";
t['BLACKSMITH'] = "Zbrojownia";
t['ARMOURY'] = "Kuznia";
t['NOW'] = "Teraz";
t['CLOSE'] = "Zamknij";
t['USETHEM1H'] = "Uzyj je (1 godzinna  produkcja)";
t['OVERVIEW'] = "Ogólne";
t['FORUM'] = "Forum";
t['ATTACKS'] = "Ataki";
t['NEWS'] = "Nowosci";
t['ADDCRTPAGE'] = "Dodaj biezaca";
t['SCRPURL'] = "Strona TBeyond";
t['SPACER'] = "Odstep";
t['MEREO'] = "Wiadomosci i raporty";
t['ATTABLES'] = "Tabela jednostek";
t['MTW'] = "Niewykorzystane";
t['MTX'] = "Przekroczenie";
t['MTC'] = "Bierzaca ladownosc";
t['ALFL'] = "Link do zewnetrznego forum<br>(Zostaw puste dla wewnetrznego forum)";
t['MTCL'] = "Wyczysc wszystko";
t['CKSORT'] = "Kliknij aby posortowac";
t['MIN'] = "Min";
t['SVGL'] = "Zapisz równiez dla innych osad";
t['VGL'] = "Lista Osad";
t['UPDATEPOP'] = "Aktualizuj populacje";
t['EDIT'] = "Edytuj";
t['NPCO'] = "Opcje handlarza NPC";
t['NEWVILLAGEAV'] = "Data/Czas";
t['TIMEUNTIL'] = "Pozostalo czasu";
t['CENTERMAP'] = "Centruj mape na tej osadzie";
t['SENDTROOPS'] = "Wyslij jednostki";
t['PALACE'] = "Palac";
t['RESIDENCE'] = "Rezydencja";
t['ACADEMY'] = "Akademia";
t['TREASURY'] = "Skarbiec";
t['UPGTB'] = "Tabelka rozbudowy Pola surowców/budynków";
t['RBTT'] = "Tabela surowców";
t['USE'] = "Uzyj";
t['RESIDUE'] = "Pozostale surowce (jesli wybudujesz)";
t['RESOURCES'] = "Surowce";
t['SH1'] = "Otwórz swój profil w celu automatycznego rozpoznania stolicy<br>Wybuduj koszary w celu rozpoznania nacji i przejdz do centrum osady";
t['RESEND'] = "Wyslac ponownie?";
t['WSI'] = "Symulator bitwy wbudowany w gre";
t['TTT'] = "Ogólne podpowiedzi n.t. jednostek/odleglosci";
t['CROPFINDER'] = "Crop finder";
break;

case 'pt': //contributors: sepacavi, Fujis, VicSilveira
t['1'] = "Travian v2.x server";
t['2'] = "Remover ad banners";
t['3'] = "Forçar cálculo da capacidade Legionário & Falange T3.1 <br>(para servers mistos T3.1 & T3.5)";
t['4'] = "Mercado";
t['5'] = "Ponto de Reunião Militar/Quartel/Oficina/Cavalariça";
t['6'] = "Casa do Povo/Mansão do Herói/Fábrica de Armaduras/Ferreiro";
t['7'] = "Palácio/Residência/Academia/Tesouraria";
t['8'] = "Aliança";
t['9'] = "Mostrar links adicionais no Menu à Esquerda<br>(Traviantoolbox, World Analyser, Travilog, Mapa, etc.)";
t['10'] = "Link para Simulador de Combates<br>(Menu Esquerdo)";
t['11'] = "Link para o site indicado para postar relatórios";
t['12'] = "Mostrar links 'dorf1.php' e 'dorf2.php'";
t['13'] = "Mostrar icon \"Centralizar Mapa nesta Aldeia\"";
t['14'] = "Mostrar icons 'Envio de Tropas' e 'Envio de Recursos' na Lista de Aldeias";
t['15'] = "Mostrar a produção por hora de madeira, de barro e de ferro na Lista de Aldeias";
t['16'] = "Mostrar Produção de Cereais na Lista de Aldeias";
t['17'] = "Mostrar População na Lista de Aldeias";
t['18'] = "Mostrar adicional (2 colunas) na Lista de Aldeias como janela flutuante";
t['19'] = "Mostrar informação sobre Edifícios a Evoluir e Movimentos de Tropas na Lista de Aldeias";
t['20'] = "Mostrar Favoritos";
t['21'] = "Mostrar 'Favoritos' como janela flutuante";
t['22'] = "Mostrar Bloco de Notas";
t['23'] = "Mostrar 'Bloco de Notas' como janela flutuante";
t['24'] = "Tamanho do Bloco de Notas";
t['25'] = "Altura do Bloco de Notas";
t['26'] = "Mostrar Assistente de Cálculos/Links do NPC";
t['27'] = "World Analyser";
t['28'] = "Mostrar links para Analisador de Estatísticas";
t['29'] = "Analisador de Mapa";
t['30'] = "Mostrar links para Mapa para Jogadores";
t['31'] = "Mostrar links para Mapa para Alianças";
t['32'] = "Mostrar 'Barra de Pesquisas (Estatísticas)'";
t['33'] = "Mostrar 'Barra de Pesquisas (Estatísticas)' como janela flutuante";
t['34'] = "Mostrar informação PsC/dia nas tabelas de evolução";
t['35'] = "Mostrar Consumo de Cereais na Tabela de Evolução de Edifícios";
t['36'] = "Mostrar o cálculo 'Até então/Excedente' nas Tabelas de Evolução/Treino";
t['37'] = "Mostrar Tabela de Evolução de Campos de Recursos";
t['38'] = "Mostrar Cores dos Níveis de Recursos";
t['39'] = "Mostrar 'Barra de Recursos'";
t['40'] = "Mostrar 'Barra de Recursos' como janela flutuante";
t['41'] = "Mostrar Tabela de Evolução de Edifícios";
t['42'] = "Ordenar Edifícios por nome na Tabela de Evolução de Edifícios";
t['43'] = "Mostrar Números no centro";
t['44'] = "Mostrar Cores dos Níveis dos Edifícios";
t['45'] = "Mostrar os níveis a piscar quando os Edifícios estão a evoluir";
t['46'] = "Mostrar informação adicional para cada chegada de mercadores";
t['47'] = "Mostrar o último transporte de Mercado";
t['48'] = "N.º de Páginas de Ofertas para Pré-Carregar enquanto 'Mercado => Comprar'<br>(Defeito = 1)";
t['49'] = "Acção por Defeito no Ponto de Reunião Militar";
t['50'] = "N.º de Espiões para a Função<br>\"Seleccionar Espiões\"";
t['51'] = "Mostrar o último ataque";
t['52'] = "Mostrar/usar as coordenadas do último ataque";
t['53'] = "Mostrar Informação de Tropas em Tooltips";
t['54'] = "Mostrar Distâncias e Tempos entre as Aldeias";
t['55'] = "Auto-preencher com as Tropas disponíveis para o Simulador de Combates interno";
t['56'] = "Mostrar Informação do Tipo de Vale/Oásis<br>quando o Rato passar por cima";
t['57'] = "Mostrar Distâncias e Tempos";
t['58'] = "Mostrar Tabela de Jogadores/Aldeias/Oásis ocupados";
t['59'] = "N.º Páginas de Relatórios/Mensagens para Pré-Carregar<br>(Defeito = 1)";
t['60'] = "Mostrar links para abrir as Mensagens e Relatórios numa janela pop-up";
t['61'] = "Mostrar \"Excluir tudo\" na Tabela da página Relatórios";
t['62'] = "Mostrar icon \"Enviar IGM\", também para mim";
t['63'] = "Mostrar Relatório de Batalhas TB3 desenvolvido";
t['64'] = "Mostrar detalhes no Relatório Estatísticas";
t['65'] = "Cor de Elevação de Nível Disponível<br>(Defeito = Vazio)";
t['66'] = "Cor do Nível Máximo<br>(Defeito = Vazio)";
t['67'] = "Cor de Elevação de Nível Impossível<br>(Defeito = Vazio)";
t['68'] = "Cor de Elevação de Nível via NPC<br>(Defeito = Vazio)";
t['69'] = "Console Log Level<br>APENAS PARA PROGRAMADORES OU DEBBUGING<br>(Defeito = 1)";
t['82.L'] = "Bloquear Favoritos (Mostrar icons: Esconder, Apagar, Mover Acima, Mover Abaixo)";
t['82.U'] = "Desbloquear Favoritos (Mostrar icons: Apagar, Mover Acima, Mover Abaixo)";
t['85'] = "Mostrar icons 'Enviar Tropas/Enviar Recursos'";
t['87'] = "Lembrar a última opção 1x/2x/3x de envio de Mercado (se disponível)";
t['U.2'] = "Tribo";
t['U.3'] = "Nome da tua Capital<br><b>Acede ao teu Perfil para actualizar</b>";
t['U.6'] = "Coordenadas da tua Capital<br><b>Acede ao teu Perfil para actualizar</b>";
t['SIM'] = "Simulador de Combates";
t['QSURE'] = "Tens a Certeza?";
t['LOSS'] = "Perdas";
t['PROFIT'] = "Lucro";
t['EXTAV'] = "Podes subir de nível";
t['PLAYER'] = "Jogador";
t['VILLAGE'] = "Aldeia";
t['POPULATION'] = "População";
t['COORDS'] = "Coordenadas";
t['MAPTBACTS'] = "Acções";
t['SAVED'] = "Guardado";
t['YOUNEED'] = "Precisa de";
t['TODAY'] = "Hoje";
t['TOMORROW'] = "Amanhã";
t['DAYAFTERTOM'] = "Depois de Amanhã";
t['MARKET'] = "Mercado";
t['BARRACKS'] = "Quartel";
t['RAP'] = "Ponto de Reunião Militar";
t['STABLE'] = "Cavalariça";
t['WORKSHOP'] = "Oficina";
t['SENDRES'] = "Enviar Recursos";
t['BUY'] = "Comprar";
t['SELL'] = "Vender";
t['SENDIGM'] = "Enviar IGM";
t['LISTO'] = "Disponível";
t['ON'] = "em";
t['AT'] = "às";
t['EFICIENCIA'] = "Eficiência";
t['NEVER'] = "Nunca";
t['ALDEAS'] = "Aldeia(s)";
t['TIEMPO'] = "Tempo";
t['OFREZCO'] = "Ofereço";
t['BUSCO'] = "Procuro";
t['TIPO'] = "Tipo";
t['DISPONIBLE'] = "Apenas Disponíveis";
t['CUALQUIERA'] = "Qualquer";
t['YES'] = "Sim";
t['NO'] = "Não";
t['LOGIN'] = "Login";
t['MARCADORES'] = "Favoritos";
t['ANYADIR'] = "Adicionar";
t['UBU'] = "URL de Novo Marcador";
t['UBT'] = "Novo Marcador de Texto";
t['DEL'] = "Apagar";
t['MAPA'] = "Mapa";
t['MAXTIME'] = "Tempo Máximo";
t['ARCHIVE'] = "Arquivo";
t['SUMMARY'] = "Resumo";
t['TROPAS'] = "Tropas";
t['CHKSCRV'] = "Actualizar TBeyond";
t['ACTUALIZAR'] = "Actualizar Informação da Aldeia";
t['VENTAS'] = "Ofertas Guardadas";
t['MAPSCAN'] = "Procurar no Mapa";
t['BIC'] = "Mostrar Icons Avançados";
t['SAVE'] = "Guardar";
t['AT2'] = "Reforços";
t['AT3'] = "Ataque: Normal";
t['AT4'] = "Ataque: Assalto";
t['NBSA'] = "Automático";
t['NBSN'] = "Normal (pequeno)";
t['NBSB'] = "Ecrã Grande (largo)";
t['NBHAX'] = "Expandir Altura automaticamente";
t['NBHK'] = "Altura por defeito";
t['NPCSAVETIME'] = "Guardar: ";
t['TOTALTROOPS'] = "Total de Tropas da Aldeia";
t['SELECTALLTROOPS'] = "Seleccionar Todas as Tropas";
t['PARTY'] = "Celebrações";
t['CPPERDAY'] = "PsC/Dia";
t['SLOT'] = "Slot";
t['TOTAL'] = "Total";
t['SELECTSCOUT'] = "Seleccionar Espião";
t['SELECTFAKE'] = "Seleccionar Fake";
t['ALL'] = "Todas";
t['SH2'] = "Nas Cores de Campos pode utilizar:<br>- green or red or orange, etc.<br>- Código de Cor HEX#004523<br>- deixar Vazio para cor por defeito";
t['SOREP'] = "Mostrar Relatório Original (para postar)";
t['WSIMO1'] = "Interno (fornecido pelo Jogo)";
t['WSIMO2'] = "Externo (fornecido por kirilloid.ru)";
t['NONEWVER'] = "Tens a última Versão disponível";
t['BVER'] = "Talvez tenhas uma versão Beta";
t['NVERAV'] = "Uma Nova Versão do Script Está Disponível";
t['UPDSCR'] = "Actualizar Script Agora?";
t['CHECKUPDATE'] = "A procurar actualização para o Script.<br>Por Favor Esperar...";
t['AVPPV'] = "População Média por Aldeia";
t['AVPPP'] = "População Média por Jogador";
t['MAX'] = "Máx";
t['TOTTRTR'] = "Total de Tropas em Treino";
t['UPDALLV'] = "Actualizar todas as Aldeias. MUITA ATENÇÃO: UTILIZAR COM A MÁXIMA PRECAUÇÃO. PODE LEVAR AO BAN DA CONTA!";
t['LARGEMAP'] = "Mapa Grande";
t['USETHEMPR'] = "Usar (Proporcional)";
t['USETHEMEQ'] = "Usar (Igual)";
t['TOWNHALL'] = "Casa do Povo";
t['GSRVT'] = "Servidor do Jogo";
t['ACCINFO'] = "Informação da Conta";
t['NBO'] = "Bloco de Notas";
t['MNUL'] = "Menu Esquerdo";
t['STAT'] = "Estatísticas";
t['RESF'] = "Campos de Recursos";
t['VLC'] = "Centro da Aldeia";
t['MAPO'] = "Opções do Mapa";
t['COLO'] = "Opções de Cores";
t['DBGO'] = "Opções de Debug";
t['HEROSMANSION'] = "Mansão do Herói";
t['BLACKSMITH'] = "Ferreiro";
t['ARMOURY'] = "Fábrica de Armaduras";
t['NOW'] = "Agora";
t['CLOSE'] = "Fechar";
t['USETHEM1H'] = "Usar (1 Hora de Produção)";
t['OVERVIEW'] = "Vista Geral";
t['FORUM'] = "Fórum";
t['ATTACKS'] = "Ataques";
t['NEWS'] = "Notícias";
t['ADDCRTPAGE'] = "Adicionar Página Actual";
t['SCRPURL'] = "Página TBeyond";
t['SPACER'] = "Spacer";
t['MEREO'] = "Mensagens e Relatórios";
t['ATTABLES'] = "Tabelas de Tropas";
t['MTW'] = "Carga desperdiçada";
t['MTX'] = "Carga em excesso";
t['MTC'] = "Carga Actual";
t['ALFL'] = "Link para Fórum Externo<br>(Deixar vazio para Fórum Interno)";
t['MTCL'] = "Limpar Tudo";
t['CKSORT'] = "Clique para Ordenar";
t['MIN'] = "Min";
t['SVGL'] = "Partilhar Entre Aldeias";
t['VGL'] = "Lista de Aldeias";
t['UPDATEPOP'] = "Actualizar População";
t['EDIT'] = "Editar";
t['NPCO'] = "Assistente de Opções do NPC";
t['NEWVILLAGEAV'] = "Data/Hora";
t['TIMEUNTIL'] = "Tempo de Espera";
t['CENTERMAP'] = "Centralizar Mapa nesta Aldeia";
t['SENDTROOPS'] = "Enviar Tropas";
t['PALACE'] = "Palácio";
t['RESIDENCE'] = "Residência";
t['ACADEMY'] = "Academia";
t['TREASURY'] = "Tesouraria";
t['UPGTB'] = "Tabelas de Evolução de Campos de Recursos/Edifícios";
t['RBTT'] = "Barra de Recursos";
t['USE'] = "Usar";
t['RESIDUE'] = "O Excedente se o construíres ";
t['RESOURCES'] = "Recursos";
t['SH1'] = "Abrir o Perfil para detectar automaticamente as coordenadas da Capital<br>Construir o Quartel para detectar a Tribo automaticamente e então abrir o Centro da Aldeia";
t['RESEND'] = "Enviar outra vez ?";
t['WSI'] = "Simulador de Combates fornecido pelo jogo";
t['TTT'] = "Tooltips geral para Tropas/Distância";
t['CROPFINDER'] = "Crop Finder";
break;

case 'ro': //contributors: ms99
t['1'] = "Server Travian v2.x";
t['2'] = "Elimina banere reclame";
t['3'] = "Utilizeaza capacitatea de transport din T3.1 (legionari & scutieri)<br>(servere mixte T3.1 & T3.5)";
t['4'] = "Târg";
t['5'] = "Adunare/Cazarma/Atelier/Grajd";
t['6'] = "Casa de cultura/Resedinta eroului/Armurarie/Fierarie";
t['7'] = "Palat/Vila/Academie/Trezorerie";
t['8'] = "Alianta";
t['9'] = "Afiseaza link-uri aditionale în meniul din stânga<br>(Traviantoolbox, World Analyser, Travilog, Map, etc.)";
t['10'] = "Link catre simulator lupta<br>";
t['11'] = "Link catre site-ul pentru postat rapoarte";
t['12'] = "Afiseaza icoanele pentru 'dorf1.php' si 'dorf2.php'";
t['13'] = "Afiseaza icon-ul \"Centreaza harta pe acest sat\"";
t['14'] = "Afiseaza icoanele 'Trimite trupe' si 'Trimite resurse'<br>în lista satelor";
t['15'] = "Afiseaza productia de lemn, lut, fier pe ora în lista satelor";
t['16'] = "Afiseaza productia efectiva de hrana în lista satelor";
t['17'] = "Afiseaza populatia în lista satelor";
t['18'] = "Afiseaza o lista aditionala a satelor (2 coloane)<br> ca fereastra separata (floating)";
t['19'] = "Afiseaza informatii despre cladirile în extindere si<br>miscarile de trupe în lista satelor";
t['20'] = "Afiseaza link-uri";
t['21'] = "Afiseaza 'Link-uri' ca fereastra separata (floating)";
t['22'] = "Afiseaza bloc-notes";
t['23'] = "Afiseaza 'Bloc-notes' ca fereastra separata (floating)";
t['24'] = "Latime bloc-notes";
t['25'] = "Înaltime bloc-notes";
t['26'] = "Afiseaza calcule/link-uri NPC Assistant";
t['27'] = "Utilizeaza World Analyser";
t['28'] = "Afiseaza link-uri catre World Anlyser";
t['29'] = "Utilizeaza \"Map Analyser\"";
t['30'] = "Afiseaza link-uri catre harta - jucatori";
t['31'] = "Afiseaza link-uri catre harta - aliante";
t['32'] = "Afiseaza 'Bara cautare'";
t['33'] = "Afiseaza 'Bara cautare' ca fereastra separata (floating)";
t['34'] = "Afiseaza PC/zi în tabelele de upgrade";
t['35'] = "Afiseaza consumul de hrana în tabelele de upgrade";
t['36'] = "Afiseaza calcule 'Resurse la/Rest' în tabelele de <br>upgrade/instruire trupe";
t['37'] = "Afiseaza tabel upgrade câmpuri de resurse";
t['38'] = "Afiseaza culori nivel câmpuri resurse";
t['39'] = "Afiseaza tabela 'Bara resurse'";
t['40'] = "Afiseaza 'Bara resurse' ca fereastra separata (floating)";
t['41'] = "Afiseaza tabel upgrade cladiri";
t['42'] = "Sorteaza dupa nume cladirile în tabelul upgrade cladiri";
t['43'] = "Afiseaza nivel cladiri";
t['44'] = "Afiseaza culori nivel cladiri";
t['45'] = "Nivelul cladirilor aflate în constructie clipeste";
t['46'] = "Afiseaza informatii suplimentare pentru fiecare negustor care soseste";
t['48'] = "Numarul paginilor de oferte pre-încarcate pe pagina 'Târg => Cumpara'<br>(Standard = 1)";
t['49'] = "Actiune standard adunare";
t['50'] = "Numar de spioni pentru functia \"Selecteaza spioni\"";
t['53'] = "Afiseaza informatii despre trupe în tooltips";
t['54'] = "Afiseaza distante/timpi catre sate în tooltips";
t['56'] = "Afiseaza tip celula/info vale parasita (mousing over)";
t['57'] = "Afiseaza distante si timpi de deplasare";
t['58'] = "Afiseaza tabel jucatori/sate/oaze ocupate";
t['59'] = "Numarul paginilor de mesaje/rapoarte pre-încarcate<br>(Standard = 1)";
t['60'] = "Afiseaza icoane pentru a deschide mesajele/rapoartele într-un pop-up";
t['61'] = "Afiseaza tabela \"Sterge toate\" pe pagina de rapoarte";
t['62'] = "Afiseaza icon-ul \"Trimite IGM\" si pentru mine";
t['63'] = "Afiseaza rapoarte extinse TB3";
t['64'] = "Afiseaza detalii in statistica raport";
t['65'] = "Culoare upgrade posibil (Nimic = standard)";
t['66'] = "Culoare nivel maxim (Nimic = standard)";
t['67'] = "Culoare upgrade imposibil (Nimic = standard)";
t['68'] = "Culoare upgrade posibil via NPC (Nimic = standard)";
t['69'] = "Log level consola (DOAR PENTRU PROGRAMATORI)<br>(Standard = 0)";
t['82.L'] = "Ascunde icoanele \"Sterge\", \"în sus\", \"în jos\"";
t['82.U'] = "Afiseaza icoanele \"Sterge\", \"în sus\", \"în jos\"";
t['U.2'] = "Rasa";
t['U.3'] = "Numele capitalei<br><b>Deschide Profilul pentru actualizare automata</b>";
t['U.6'] = "Coordonatele capitalei<br><b>Deschide Profilul pentru actualizare automata</b>";
t['SIM'] = "Simulator lupta";
t['QSURE'] = "Esti sigur?";
t['LOSS'] = "Pierderi";
t['PROFIT'] = "Profit";
t['EXTAV'] = "Upgrade posibil acum";
t['PLAYER'] = "Jucator";
t['VILLAGE'] = "Sat";
t['POPULATION'] = "Populatie";
t['COORDS'] = "Coordonate";
t['MAPTBACTS'] = "Actiuni";
t['SAVED'] = "Salvat";
t['YOUNEED'] = "Ai nevoie de";
t['TODAY'] = "azi";
t['TOMORROW'] = "mâine";
t['DAYAFTERTOM'] = "poimâine";
t['MARKET'] = "Târg";
t['BARRACKS'] = "Cazarma";
t['RAP'] = "Adunare";
t['STABLE'] = "Grajd";
t['WORKSHOP'] = "Atelier";
t['SENDRES'] = "Trimite resurse";
t['BUY'] = "Cumpara";
t['SELL'] = "Vinde";
t['SENDIGM'] = "Trimite mesaj";
t['LISTO'] = "Upgrade posibil";
t['ON'] = "în";
t['AT'] = "la";
t['EFICIENCIA'] = "Eficienta";
t['NEVER'] = "Niciodata";
t['ALDEAS'] = "Sat(e)";
t['TIEMPO'] = "Timp";
t['OFREZCO'] = "Ofera";
t['BUSCO'] = "Cauta";
t['TIPO'] = "Tip";
t['DISPONIBLE'] = "Doar cele disponibile";
t['CUALQUIERA'] = "Oricare";
t['YES'] = "Da";
t['NO'] = "Nu";
t['LOGIN'] = "Login";
t['MARCADORES'] = "Link-uri";
t['ANYADIR'] = "Adauga";
t['UBU'] = "URL";
t['UBT'] = "Text";
t['DEL'] = "Sterge";
t['MAPA'] = "Harta";
t['MAXTIME'] = "Timp maxim";
t['ARCHIVE'] = "Arhiva";
t['SUMMARY'] = "Rezumat";
t['TROPAS'] = "Trupe";
t['CHKSCRV'] = "Update TBeyond";
t['ACTUALIZAR'] = "Actualizeaza informatie sat";
t['VENTAS'] = "Oferte salvate";
t['MAPSCAN'] = "Scaneaza harta";
t['BIC'] = "Afiseaza icoane suplimentare";
t['SAVE'] = "Salveaza";
t['AT2'] = "Întariri";
t['AT3'] = "Atac: Normal";
t['AT4'] = "Atac: Raid";
t['NBSA'] = "Auto";
t['NBSN'] = "Normal (ingust)";
t['NBSB'] = "Ecran lat (lat)";
t['NBHAX'] = "Mareste inaltimea automat";
t['NBHK'] = "Înaltime normala";
t['NPCSAVETIME'] = "Timp economisit";
t['TOTALTROOPS'] = "Total trupe sat";
t['SELECTALLTROOPS'] = "Selecteaza toate trupele";
t['PARTY'] = "Festivitati";
t['CPPERDAY'] = "PC/zi";
t['SLOT'] = "Slot";
t['TOTAL'] = "Total";
t['SELECTSCOUT'] = "Selecteaza spioni";
t['SELECTFAKE'] = "Selecteaza trupe fake";
t['ALL'] = "Tot";
t['SH2'] = "În câmpurile de culori puteti introduce:<br>- <b>green</b> sau <b>red</b> sau <b>orange</b>, etc.<br>- codul HEX al culorii, ex. <b>#004523</b><br>- loc liber = culoare standard";
t['SOREP'] = "Afiseaza raport original (pentru forumuri)";
t['WSIMO1'] = "Intern (inclus in joc)";
t['WSIMO2'] = "Extern (pus la dispozitie de catre kirilloid.ru)";
t['NONEWVER'] = "Ultima versiune disponibila este instalata";
t['BVER'] = "Se poate sa aveti o versiune beta instalata";
t['NVERAV'] = "O versiune noua a scriptului este disponibila";
t['UPDSCR'] = "Doriti sa actualizati acum ?";
t['CHECKUPDATE'] = "Verific existenta unei versiuni noi a scriptului...";
t['AVPPV'] = "Populatie medie/sat";
t['AVPPP'] = "Populatie medie/jucator";
t['TOTTRTR'] = "Total trupe antrenate";
t['TB3SL'] = "Optiuni $1";
t['UPDALLV'] = "Actualizeaza toate satele.  Utilizeaza cu maxima atentie.  Urmarea ar putea fi un cont banat !";
t['LARGEMAP'] = "Harta mare";
t['USETHEMPR'] = "Use them (proportional)";
t['USETHEMEQ'] = "Use them (egal)";
t['TOWNHALL'] = "Casa de cultura";
t['ACCINFO'] = "Informatii cont";
t['NBO'] = "Bloc-notes";
t['MNUL'] = "Meniu stânga";
t['STAT'] = "Statistica";
t['RESF'] = "Câmpuri resurse";
t['VLC'] = "Centrul satului";
t['MAPO'] = "Optiuni harta";
t['COLO'] = "Optiuni culori";
t['DBGO'] = "Optiuni Debug";
t['HEROSMANSION'] = "Resedinta eroului";
t['BLACKSMITH'] = "Fierarie";
t['ARMOURY'] = "Armurarie";
t['NOW'] = "Acum";
t['CLOSE'] = "Inchide";
t['USETHEM1H'] = "Use them (productia/ora)";
t['OVERVIEW'] = "Perspectiva";
t['FORUM'] = "Forum";
t['ATTACKS'] = "Atacuri";
t['NEWS'] = "Stiri";
t['ADDCRTPAGE'] = "Pagina curenta";
t['SCRPURL'] = "Pagina TBeyond";
t['SPACER'] = "Delimitator";
t['MEREO'] = "Mesaje & Rapoarte";
t['ATTABLES'] = "Tabele trupe";
t['MTW'] = "Risipa";
t['MTX'] = "Excedent";
t['MTC'] = "Transport actual";
t['ALFL'] = "Link catre forum extern (Forum intern = loc liber)";
t['MTCL'] = "Sterge tot";
t['CKSORT'] = "Click pentru sortare";
t['SVGL'] = "Valabila în toate satele";
t['VGL'] = "Lista satelor";
t['UPDATEPOP'] = "Actualizeaza populatia satelor";
t['EDIT'] = "Modifica";
t['NPCO'] = "Optiuni NPC Assistant";
t['NEWVILLAGEAV'] = "Data/Ora";
t['TIMEUNTIL'] = "Timp de asteptare";
t['CENTERMAP'] = "Centreaza harta pe acest sat";
t['SENDTROOPS'] = "Trimite trupe";
t['PALACE'] = "Palat";
t['RESIDENCE'] = "Vila";
t['ACADEMY'] = "Academie";
t['TREASURY'] = "Trezorerie";
t['UPGTB'] = "Tabele Upgrade campuri de resurse/cladiri";
t['RBTT'] = "Bara resurse";
t['USE'] = "Use";
t['RESIDUE'] = "Rest în cazul constructiei ";
t['RESOURCES'] = "Resurse";
t['SH1'] = "Deschide Profilul pentru recunoasterea automata a capitalei/coordonatelor<br>Construieste cazarma si deschide centrul satului pentru recunoasterea automata a rasei";
t['CROPFINDER'] = "Crop finder";
break;

case 'rs': //contributors: David Macej, rsinisa
t['1'] = "??????? 2.x ??????";
t['4'] = "??????";
t['5'] = "????? ????????/???????/?????????/?????";
t['6'] = "???????/?????? ??????/????????? ??????/????????? ??????";
t['7'] = "??????/???????????/?????????/???????";
t['8'] = "?????";
t['9'] = "??????? ??????? ??????? ? ?????? ????<br>(Traviantoolbox, World Analyser, Travilog, Map, ???.)";
t['10'] = "??????? ??????? ????????? ?????:<br>(? ?????? ????)";
t['12'] = "??????? ??????? ?? 'dorf1.php' ? 'dorf2.php'";
t['13'] = "??????? \"?????????? ???? ?? ???? ????\" ?????";
t['20'] = "??????? ???????";
t['22'] = "??????? ?????????";
t['24'] = "???????? ?????????";
t['25'] = "?????? ?????????";
t['26'] = "??????? NPC ?????????";
t['27'] = "??????? ??????????";
t['28'] = "??????? ?????????? ??? ????";
t['37'] = "??????? ?????? ?????????? ???????";
t['38'] = "??????? ????? ??????? ? ????";
t['41'] = "??????? ?????? ?????????? ?????????";
t['43'] = "??????? ??????? ? ?????? ????";
t['44'] = "??????? ????? ????????? ? ????";
t['48'] = "???? ?????? ?? ???????? ?? ??????<br>?? ?????? => ?????? ?? ????????<br>(??????? = 1)";
t['49'] = "??????? ?????? ?? ????? ????????";
t['50'] = "???? ???????? ??<br>\"????????\" ????????";
t['53'] = "??????? ??????????? ? ???????? ??? ??? ????? ????? ??";
t['54'] = "??????? ?????? ? ??????? ?? ???? ??? ??? ????? ?????";
t['56'] = "??????? ??? ????/??????????? ? ????<br>??? ?? ??? ????? ????? ????";
t['57'] = "??????? ?????? ? ???????";
t['58'] = "??????? ?????? ??????/????/????????? ??????";
t['59'] = "???? ?????? ??????/????????? ?? ??????<br>(??????? = 1)";
t['60'] = "??????? ???? ?? ???????? ?????? ? ???????? ???????";
t['61'] = "??????? \"?????? ???\" ?????? ? ???????????";
t['62'] = "??????? \"?????? ??????\" ????? ? ?? ??? ?????";
t['64'] = "??????? ?????????? ? ???????????";
t['65'] = "???? ?? ?????????? ??????<br>(??????? = ??????)";
t['66'] = "???? ?? ?????????? ????<br>(??????? = ??????)";
t['67'] = "???? ?? ?????????? ???? ??????<br>(??????? = ??????)";
t['68'] = "???? ?? ?????????? ?????? ???<br>(??????? = ??????)";
t['69'] = "Console Log Level<br>???? ?? ?????????? ??? ??????? ???????<br>(??????? = 0)";
t['82.L'] = "???????? ??????? (??????, ??????, ????, ???? ?????)";
t['82.U'] = "???????? ??????? (??????, ??????, ????, ???? ?????)";
t['U.2'] = "?????";
t['U.3'] = "????? ??????? ?????<br>????? ? ??????";
t['U.6'] = "?????????? ??????? ?????<br>????? ? ??????";
t['SIM'] = "????????? ?????";
t['QSURE'] = "?? ?? ??? ????????";
t['LOSS'] = "???????";
t['PROFIT'] = "?????";
t['EXTAV'] = "?????????? ??????";
t['PLAYER'] = "?????";
t['VILLAGE'] = "????";
t['POPULATION'] = "??????????";
t['COORDS'] = "??????????";
t['MAPTBACTS'] = "??????";
t['SAVED'] = "????????";
t['YOUNEED'] = "???????? ??";
t['TODAY'] = "?????";
t['TOMORROW'] = "?????";
t['DAYAFTERTOM'] = "??????????";
t['MARKET'] = "??????";
t['BARRACKS'] = "???????";
t['RAP'] = "????? ????????";
t['STABLE'] = "?????";
t['WORKSHOP'] = "?????????";
t['SENDRES'] = "?????? ???????";
t['BUY'] = "????";
t['SELL'] = "??????";
t['SENDIGM'] = "?????? ??????";
t['LISTO'] = "????????";
t['ON'] = "";
t['AT'] = "?";
t['EFICIENCIA'] = "??????????";
t['NEVER'] = "??????";
t['ALDEAS'] = "????(?)";
t['TIEMPO'] = "?????";
t['OFREZCO'] = "????";
t['BUSCO'] = "?????";
t['TIPO'] = "?????";
t['DISPONIBLE'] = "???? ????????";
t['CUALQUIERA'] = "???";
t['YES'] = "??";
t['NO'] = "??";
t['LOGIN'] = "??????? ??";
t['MARCADORES'] = "???????";
t['ANYADIR'] = "?????";
t['UBU'] = "?????? ????? ?????";
t['UBT'] = "????? ????? ?????";
t['DEL'] = "??????";
t['MAPA'] = "????";
t['MAXTIME'] = "?????????? ?????";
t['ARCHIVE'] = "??????";
t['SUMMARY'] = "????";
t['TROPAS'] = "??????";
t['CHKSCRV'] = "???????? TBeyond";
t['ACTUALIZAR'] = "?????? ??????????? ? ??????";
t['VENTAS'] = "??????? ??????";
t['MAPSCAN'] = "???????? ????";
t['BIC'] = "??????? ??????? ?????";
t['SAVE'] = "???????";
t['AT2'] = "????????";
t['AT3'] = "?????";
t['AT4'] = "??????";
t['NBSA'] = "??????????";
t['NBSN'] = "????????";
t['NBSB'] = "??????";
t['NBHAX'] = "?????????? ??????? ??????";
t['NBHK'] = "??????? ??????";
t['NPCSAVETIME'] = "?????? ??: ";
t['TOTALTROOPS'] = "??? ?????? ?? ????";
t['SELECTALLTROOPS'] = "??? ??????";
t['PARTY'] = "??????";
t['CPPERDAY'] = "??/???";
t['SLOT'] = "????? ?? ?????????";
t['TOTAL'] = "??????";
t['SELECTSCOUT'] = "????????";
t['SELECTFAKE'] = "????? ?????";
t['ALL'] = "???";
t['SH2'] = "? ???? ?? ????? ???? ?????? ?????:<br>- green ??? red ??? orange, ???.<br>- ??? HEX ??????? ??? ???. #004523<br>- ???????? ?????? ?? ??????? ????.";
t['SOREP'] = "??????? ?????????? ???????? (?? ?????????)";
t['WSIMO1'] = "?? ????";
t['WSIMO2'] = "?? ????? kirilloid.ru";
t['NONEWVER'] = "????? ???????? ??????? ???????!";
t['BVER'] = "????? ????? ??????????? ???????";
t['NVERAV'] = "??????? ???? ??????? ???????";
t['UPDSCR'] = "?? ?? ????????? ??????? ?????";
t['CHECKUPDATE'] = "?????????? ?? ?? ??????? ???? ???????.<br>????? ?????????...";
t['AVPPV'] = "???????? ?????????? ?? ????";
t['AVPPP'] = "???????? ?????????? ?? ??????";
t['MAX'] = "????????";
t['TOTTRTR'] = "?????? ???? ???????? ?? ?????";
t['TB3SL'] = "$1 ??????????";
t['UPDALLV'] = "?????? ??? ????. ????????? ?? ???????, ?????? ?? ?????? ????????!!!";
t['LARGEMAP'] = "?????? ????";
t['USETHEMPR'] = "?????????????? ??????";
t['USETHEMEQ'] = "??????? ??????";
t['TOWNHALL'] = "???????";
t['GSRVT'] = "??????";
t['NBO'] = "?????????";
t['MNUL'] = "???? ?? ???? ??????";
t['STAT'] = "??????????";
t['RESF'] = "???????? ????";
t['VLC'] = "?????? ????";
t['MAPO'] = "????";
t['COLO'] = "????";
t['DBGO'] = "??????? ???????";
t['HEROSMANSION'] = "?????? ??????";
t['BLACKSMITH'] = "????????? ??????";
t['ARMOURY'] = "????????? ??????";
t['NOW'] = "????";
t['CLOSE'] = "???????";
t['USETHEM1H'] = "???????????? ??????????";
t['OVERVIEW'] = "???????";
t['FORUM'] = "?????";
t['ATTACKS'] = "??????";
t['NEWS'] = "?????";
t['ADDCRTPAGE'] = "????? ???????? ?????? ??? ????";
t['SCRPURL'] = "TBeyond ????";
t['SPACER'] = "??????";
t['MEREO'] = "?????? ? ?????????";
t['ATTABLES'] = "??????? ??????";
t['MTW'] = "?????????????";
t['MTX'] = "??? ????";
t['MTC'] = "???????? ?? ????";
t['ALFL'] = "???? ?? ??????? ??????<br>(???????? ?????? ?? ????? ?? ????)";
t['MTCL'] = "?????? ???";
t['CKSORT'] = "?????? ?? ?????????";
t['MIN'] = "???????";
t['SVGL'] = "???? ?? ??? ????";
t['VGL'] = "?????? ????";
t['UPDATEPOP'] = "?????? ??????????";
t['EDIT'] = "?????";
t['NPCO'] = "NPC ????????";
t['NEWVILLAGEAV'] = "?????/?????";
t['TIMEUNTIL'] = "????? ??????";
t['CENTERMAP'] = "?????????? ???? ?? ???? ????";
t['SENDTROOPS'] = "?????? ??????";
t['PALACE'] = "??????";
t['RESIDENCE'] = "???????????";
t['ACADEMY'] = "?????????";
t['TREASURY'] = "???????";
t['USE'] = "???????";
t['CROPFINDER'] = "???? ???????";
break;

case 'ru': //contributors: millioner,MMIROSLAV,EXEMOK,AHTOH,d00mw01f,npocmu
t['1'] = "Travian ?????? ?????? v2.x";
t['2'] = "?????? ???????";
t['3'] = "???????? ??????? ???????????????? ????????? ? ??????? T3.1<br>(??? T3.1 ? T3.5 ????????)";
t['4'] = "?????";
t['5'] = "????? ?????/???????/??????????/???????";
t['6'] = "??????/???????/??????? ????????/??????? ??????";
t['7'] = "??????/??????????/????????/????????????";
t['8'] = "??????";
t['9'] = "?????????? ?????????????? ?????? ? ????? ????<br>(Traviantoolbox, World Analyser, Travilog, Map ? ?.?.)";
t['10'] = "???????????? ????????? ???:<br>(????? ????)";
t['11'] = "???? ??? ???????? ???????";
t['12'] = "?????????? ?????? ?? 'dorf1.php' ? 'dorf2.php'";
t['13'] = "?????????? ?????? \"???????????? ??????? ?? ?????\"";
t['14'] = "?????????? ?????? '????????? ??????', '????????? ???????' ? ?????? ????????";
t['15'] = "?????????? ???????????? ??????, ????? ? ?????? ? ??? ? ?????? ????????";
t['16'] = "?????????? ??????? ????? ? ?????? ????????";
t['17'] = "?????????? ????????? ? ?????? ????????";
t['18'] = "?????????? ????????????? ?????? ???????? (2 ???????) ? ????????? ????";
t['19'] = "?????????? ?????????? ? ???????, ??????? ??????????? ? ?????? ??????<br>? ??????, ??????? ?????? ? ?????? ? ?????? ????????";
t['20'] = "?????????? ????????";
t['21'] = "?????????? ???????? ? ????????? ????";
t['22'] = "?????????? ???? ???????";
t['23'] = "?????????? ??????? ? ????????? ????";
t['24'] = "?????? ???? ???????";
t['25'] = "?????? ???? ???????";
t['26'] = "?????????? ??????? ??? NPC ????????? / ?????? ?? NPC ?????????";
t['27'] = "????? ?????????? ???? ????????????";
t['28'] = "?????????? ?????? ?? ?????????? ???????????";
t['29'] = "???????????? ?????????? ?????";
t['30'] = "?????????? ?????? ?? ????? ??? ???????";
t['31'] = "?????????? ?????? ?? ????? ??? ????????";
t['32'] = "?????????? '?????'";
t['33'] = "?????????? '?????' ? ????????? ????";
t['34'] = "?????????? ?????? ????????(??)/???? ? ???????? ????????";
t['35'] = "?????????? ??????????? ????? ? ???????? ????????";
t['36'] = "?????????? ??????? '? ???? ???????/???????' ? ??????? ???????? ????????";
t['37'] = "???????? ??????? ???????? ????????? ?????";
t['38'] = "?????????? ?????? ????????? ????? ???????";
t['39'] = "?????????? ??????? ????????";
t['40'] = "?????????? ??????? ???????? ? ????????? ????";
t['41'] = "?????????? ??????? ???????? ??????";
t['42'] = "??????????? ?????? ?? ???????? ? ???????? ????????";
t['43'] = "?????????? ?????? ?????? ? ??????";
t['44'] = "?????????? ?????? ?????? ???????";
t['45'] = "??????? ??????????? ?????? ????? ??????";
t['46'] = "?????????? ?????????????? ?????????? ??? ??????? ???????????? ????????";
t['47'] = "?????????? ????????? ???????";
t['48'] = "?????????? ??????? ???????????? ? ???????<br>'????? => ???????' ???????<br>(?? ????????? =1)";
t['49'] = "???????? ?????? ?????, ?? ?????????:";
t['50'] = "?????????? ??????????? ??? ???????<br>\"?????????\"";
t['51'] = "?????????? ????????? ?????";
t['52'] = "??????????/???????????? ?????????? ??? ????????? ?????";
t['53'] = "?????????? ?????????? ? ??????? ? ??????????";
t['54'] = "?????????? ?????????? ? ????? ?? ????????? ? ??????????";
t['55'] = "??????????????? ????????? ????? ??? ??????????? ?????????? ????????";
t['56'] = "?????????? ??? ??????<br>?? ????? ???????????? ????? ??? ?????? ";
t['57'] = "?????????? ?????????? ? ?????";
t['58'] = "???????? ??????? ??????? / ???????? / ?????????? ???????";
t['59'] = "?????????? ???????????? ???????????? ???????<br>(?????????? = 1)";
t['60'] = "?????????? ?????? ??? ???????? ? ????? ????";
t['61'] = "?????????? \"??????? ???\" ?? ???????? ???????";
t['62'] = "??? ???? ????? ?????????? ?????? \"????????? ?????????\"";
t['63'] = "?????????? ??????????? ?????? ???? (TB3)";
t['64'] = "?????????? ??????????? ? ?????????? ???????";
t['65'] = "????, ???? ???????? ????????<br>(?? ????????? = ?????)";
t['66'] = "???? ????????????? ?????? ????????<br>(?? ????????? = ?????)";
t['67'] = "????, ???? ???????? ?????????? ??-?? ???????? ????????<br>(?? ????????? = ?????)";
t['68'] = "????, ????? ???????? ???????? ??????????? NPC ?????????<br>(?? ????????? = ?????)";
t['69'] = "Console Log Level<br>?????? ??? ????????????? ? ??????????<br>(?? ????????? = 0)";
t['82.L'] = "????????????? ???????? (???????? ?????? '???????', '??????????? ?????', '??????????? ????)'";
t['82.U'] = "?????????????? ???????? (???????? ?????? '???????', '??????????? ?????', '??????????? ????)'";
t['85'] = "?????????? ?????? '??????? ??????/??????? ?????????'";
t['87'] = "?????????? ????????? ????? 1x/2x/3x (???? ????????)";
t['91'] = "????????? ?????? ??????? ???????? ? ?????? ? ???????? ?? ???????????";
t['92.L'] = "????????????? ?????? ???????? (???????? ?????? '??????????? ?????', '??????????? ????)'";
t['92.U'] = "?????????????? ?????? ???????? (???????? ?????? '??????????? ?????', '??????????? ????)'";
t['U.2'] = "????";
t['U.3'] = "???????? ????? ???????<br>???????? ???? ??????? ??? ??????????";
t['U.6'] = "?????????? ????? ???????<br>???????? ???? ??????? ??? ??????????";
t['SIM'] = "????????? ???";
t['QSURE'] = "?? ????????";
t['LOSS'] = "??????";
t['PROFIT'] = "???????";
t['EXTAV'] = "???????? ????????";
t['PLAYER'] = "?????";
t['VILLAGE'] = "???????";
t['POPULATION'] = "?????????";
t['COORDS'] = "??????????";
t['MAPTBACTS'] = "????????";
t['SAVED'] = "?????????";
t['YOUNEED'] = "?? ???????";
t['TODAY'] = "???????";
t['TOMORROW'] = "??????";
t['DAYAFTERTOM'] = "???????????";
t['MARKET'] = "?????";
t['BARRACKS'] = "???????";
t['RAP'] = "????? ?????";
t['STABLE'] = "???????";
t['WORKSHOP'] = "??????????";
t['SENDRES'] = "??????? ???????";
t['BUY'] = "??????";
t['SELL'] = "???????";
t['SENDIGM'] = "??????? ?????????";
t['LISTO'] = "???????? ????? ????????";
t['ON'] = "??";
t['AT'] = "?";
t['EFICIENCIA'] = "?????????????";
t['NEVER'] = "???????";
t['ALDEAS'] = "???????";
t['TIEMPO'] = "?????";
t['OFREZCO'] = "???????";
t['BUSCO'] = "???????";
t['TIPO'] = "???????????";
t['DISPONIBLE'] = "?????? ????????? ??? ???????";
t['CUALQUIERA'] = "???";
t['YES'] = "??";
t['NO'] = "???";
t['LOGIN'] = "?????";
t['MARCADORES'] = "????????";
t['ANYADIR'] = "????????";
t['UBU'] = "???????? ????? (Http://***) ? ????????";
t['UBT'] = "???????? ????????";
t['DEL'] = "???????";
t['MAPA'] = "?????";
t['MAXTIME'] = "????. ?????";
t['ARCHIVE'] = "?????";
t['SUMMARY'] = "????????";
t['TROPAS'] = "??????";
t['CHKSCRV'] = "?????????, ?? ????????? ?? ????? ?????? TBeyond";
t['ACTUALIZAR'] = "???????? ?????????? ? ???????";
t['VENTAS'] = "??????????? ???????????";
t['MAPSCAN'] = "??????????? ?????";
t['BIC'] = "??????????? ?????????????? ??????";
t['SAVE'] = "?????????";
t['AT2'] = "????????????";
t['AT3'] = "?????????: ???????";
t['AT4'] = "?????????: ?????";
t['NBSA'] = "?????????????";
t['NBSN'] = "?????????? (?????????)";
t['NBSB'] = "?? ???? ????? (???????)";
t['NBHAX'] = "?????????? ??????";
t['NBHK'] = "?? ?????????";
t['NPCSAVETIME'] = "?????: ";
t['TOTALTROOPS'] = "??????????? ?????? ? ???????";
t['SELECTALLTROOPS'] = "??????? ??? ??????";
t['PARTY'] = "?????????";
t['CPPERDAY'] = "??/????";
t['SLOT'] = "????";
t['TOTAL'] = "?????";
t['SELECTSCOUT'] = "??????? ????????";
t['SELECTFAKE'] = "??????? ????";
t['ALL'] = "???";
t['SH2'] = "? ????? ????? ?????? ????? ?????? ???? ????????:<br>- green (???????), red (???????) ??? orange (?????????), ? ?.?.<br> - HEX-??? ????? #004523<br>- ???????? ?????? ??? ???????? ?? ?????????";
t['SOREP'] = "?????? ???????? (??? ????????)";
t['WSIMO1'] = "?????????? (???????????? ?????)";
t['WSIMO2'] = "??????? (???????????? kirilloid.ru)";
t['NONEWVER'] = "? ??? ????????? ??????";
t['BVER'] = "???????? ? ??? ??????????? ???? ??????";
t['NVERAV'] = "???????? ????? ?????? ???????";
t['UPDSCR'] = "?? ?????? ???????? ?????? ?????? ?";
t['CHECKUPDATE'] = "????? ?????????? ???????.<br>??????????, ?????????...";
t['AVPPV'] = "??????? ????????? ????? ????????";
t['AVPPP'] = "??????? ????????? ????? ???????";
t['MAX'] = "????????";
t['TOTTRTR'] = "????? ????? ????????? ?????";
t['TB3SL'] = "????????? $1";
t['UPDALLV'] = "???????? ??? ???????. ??????????? ? ??????? ?????????????. ?????? ??? ??? ????? ???????? ? ???? ???????? !";
t['LARGEMAP'] = "??????? ?????";
t['USETHEMPR'] = "????????? ??????? ??????????????? ?? ?????????? ?? ???????/???????";
t['USETHEMEQ'] = "????????? ??????? ??????????";
t['TOWNHALL'] = "??????";
t['GSRVT'] = "??????? ??????";
t['ACCINFO'] = "?????????? ????????";
t['NBO'] = "???? ???????";
t['MNUL'] = "???? ? ????? ???????";
t['STAT'] = "??????????";
t['RESF'] = "????????? ????";
t['VLC'] = "????? ???????";
t['MAPO'] = "????????? ?????";
t['COLO'] = "???????? ?????????";
t['DBGO'] = "????? ??????? ???????";
t['HEROSMANSION'] = "???????";
t['BLACKSMITH'] = "??????? ??????";
t['ARMOURY'] = "??????? ????????";
t['NOW'] = "??????";
t['CLOSE'] = "???????";
t['USETHEM1H'] = "????????? ??????? ??????????????? ?? ??????? ???????";
t['OVERVIEW'] = "?????";
t['FORUM'] = "?????";
t['ATTACKS'] = "?????????";
t['NEWS'] = "???????";
t['ADDCRTPAGE'] = "???????? ???????";
t['SCRPURL'] = "???????? TBeyond";
t['SPACER'] = "???????????";
t['MEREO'] = "????????? ? ??????";
t['ATTABLES'] = "??????? ?????";
t['MTW'] = "????????";
t['MTX'] = "???????";
t['MTC'] = "?????????";
t['ALFL'] = "?????? ?? ??????? ?????<br>(???????? ?????? ??? ?????????-???????? ??????)";
t['MTCL'] = "???????? ???";
t['CKSORT'] = "???????? ??? ??????????";
t['MIN'] = "???????";
t['SVGL'] = "????? ??? ???? ????????";
t['VGL'] = "?????? ????????";
t['UPDATEPOP'] = "???????? ?????????";
t['EDIT'] = "?????????????";
t['NPCO'] = "????? NPC ?????????";
t['NEWVILLAGEAV'] = "????/?????";
t['TIMEUNTIL'] = "???????? ???????";
t['CENTERMAP'] = "???????????? ??????? ?? ?????";
t['SENDTROOPS'] = "???????? ?????";
t['PALACE'] = "??????";
t['RESIDENCE'] = "??????????";
t['ACADEMY'] = "????????";
t['TREASURY'] = "????????????";
t['UPGTB'] = "??????????? ????????/?????? ? ???????? ????????";
t['RBTT'] = "??????? ????????";
t['USE'] = "????????????";
t['RESIDUE'] = "??????? ????????, ????? ????????? ???";
t['RESOURCES'] = "???????";
t['SH1'] = "???????? ??? ??????? ??? ??????????????? ??????????? ??????? ? ?? ?????????<br>????????? ??????? ??? ??????????????? ??????????? ????, ? ????? ???????? ????? ???????";
t['RESEND'] = "???????";
t['WSI'] = "????????? ???????? ???????????? ?????";
t['TTT'] = "????????? ? ???????/??????????";
t['MTR'] = "?????????";
t['MTRMIN'] = "(?? ?????? ???? ?????? 0.50)";
t['FINDREP'] = "????? ?????????";
t['IREPORT1'] = "?????? ??? ?????, ??? ??????";
t['IREPORT2'] = "?????? ??? ?????, ? ????????";
t['IREPORT3'] = "????????? ??? ?????";
t['IREPORT4'] = "?????? ??? ??????, ??? ??????";
t['IREPORT5'] = "?????? ??? ??????, ? ????????";
t['IREPORT6'] = "????????? ??? ??????, ? ????????";
t['IREPORT7'] = "????????? ??? ??????, ??? ??????";
t['VLISTUP'] = "??????????? ??????? ???? ? ??????";
t['VLISTDOWN'] = "??????????? ??????? ???? ? ??????";
t['VLISTSEP'] = "????????/??????? ?????????????? ??????????? ??? ??????? ????????";
t['VLISTEDIT'] = "????????? ??????????? ???????";
t['VLISTOPTIONS'] = "????????? ?????? ?????? ????????";
t['REPTT'] = "???????? ????? ? ????????? ????";
t['WMIN'] = "?????????????? ????";
t['WMAX'] = "???????????? ??????? ????";
t['REFRESHP'] = "???????? ????????";
t['1H'] = "???";
t['GENLNK'] = "????????? ??????";
t['11.TT'] = "???? ??? ???????? ???????";
t['27.TT'] = "?????????? ????";
t['29.TT'] = "?????????? ?????";
t['WSS'] = "?????????? ?? ???????";
t['WSP'] = "?????????? ?? ??????";
t['WSA'] = "?????????? ?? ???????";
t['TRAVIANDOPE'] = "Traviandope";
t['TRAVIANDOPE.TT'] = "????? ????????????, ??? ????????? ??-????";
t['TOOLBOX'] = "Toolbox";
t['TOOLBOX.TT'] = "????????? ??????, ????????? ???, ????????????, ????????? ???????? ??? ??????? ? ????????";
t['CRYTOOLS'] = "Cry's Tools";
t['CRYTOOLS.TT'] = "????????? ?? ????????, ???????? ? ???????. ???? ?????????? ?? ????? ??? ????????????? ????????!";
t['KIRILLOID'] = "?????????";
t['KIRILLOID.TT'] = "???? ???????? ?????? ? ?????????????, ????? ?????? ????????? ???";
t['CROPFINDER'] = "????? ?????";
t['CROPFINDER.TT'] = "?????????? ??? ?????? ???????? ??????";
t['ERRUPDATE'] = "?????? ??? ?????? ????? ?????? ???????!";
t['TRADEBAL.TT'] = "?????? ?????? ???????? ? ???? ???????";
t['100'] = "?????????? ?????? ?? ?????????? ??????? ???????? ??? ???????";
t['101'] = "????, ???? ???????? ?????????? ??-?? ????????????? ??????????? ??????? ?/??? ???????<br>(?? ????????? = ?????)";
t['102'] = "?????????? ?????????? ????????? ????? ? ??????? ????????";
t['RESNEED'] = "??? ??????????? ???????? ?? ???????:";
t['NPCNEED'] = "??? ???????? ????? NPC ?? ???????:";
t['RESREQ_TT'] = "??? ???????? ?????????: $1";
t['NPCLNK'] = "&raquo; ? NPC-????????";
t['USERES_TT'] = "?????????/????????? ????????? ??????? '$1' ??? ????????? ??? ????? ????????? ????????????";
t['USETRADERS_TT'] = "??? ?????????????? ????????????? ???????? ????? ?????????????? ?? ????? ?????????? ?????????? ?????????. ?? ????????? ???????????? ??? ????????? ????????.";
t['USEUNIRES_TT'] = "??? ?????????????? ????????????? ???????? ????? ????????? ?? ????? ?????????? ?????????? ????????. ?? ????????? ???????????? ??? ????????? ???????.";
t['USEPPH_TT'] = "???????????? ??? ???? ??????? ? ???????? ????????????? ?????????? ????????.";
t['USEPPHALL_TT'] = "???????????? ??? ???? ???????? ? ???????? ????????????? ?????????? ????????.";
t['STAT_DISMISS'] = "?????????? ?? ??????????? ???????";
t['STAT_REMAINS'] = "?????????? ?? ?????????? ???????";
t['SELECTALL'] = "???????? ???";
break;

case 'si': //contributors: BmW
t['1'] = "Travian v2.x server";
t['2'] = "Odstrani reklame";
t['3'] = "Vsili T3.1 kapaciteto za Legionarje in Falange<br>(za razlicne T3.1 in T3.5 serverje)";
t['4'] = "Tržnica";
t['5'] = "Zbirališce/Barake/Konjušnica/Izdelovalec oblegovalnih naprav";
t['6'] = "Mestna hiša/Herojeva residenca<br>Izdelovalec oklepov/Izdelovalec orožja";
t['7'] = "Palaca/Rezidenca/Akademija/Zakladnica";
t['8'] = "Aliansa";
t['9'] = "Dodatne povezave v levem meniju<br>(Traviantoolbox, World Analyser, Travilog, Map.)";
t['10'] = "Simulator bitk:<br>(levi meni)";
t['12'] = "Prikaži 'dorf1' in 'dorf2' povezave";
t['13'] = "\"Centriraj zemljevid\" ikona";
t['14'] = "Prikaži ikone 'Pošlji enote/Pošlji surovine' v tabeli naselij";
t['16'] = "Efektivna proizvodnja žita v tabeli naselij";
t['17'] = "Populacija v listi naselij";
t['18'] = "Dodatna (stolpca) v listi naselij kot plavajoce okno";
t['19'] = "Prikaži informacije o zgradbah in premikanju enot<br>v listi naselij";
t['20'] = "Prikaži povezave";
t['21'] = "'Zaznamki' kot kot plavajoce okno";
t['22'] = "Prikaži beležko";
t['23'] = "'Beležka' as kot plavajoce okno";
t['24'] = "Velikost";
t['25'] = "Višina";
t['26'] = "NPC izracune/povezave";
t['27'] = "Uporabi World Analyser";
t['28'] = "Povezave Analyser statistike";
t['29'] = "Uporabi Map Analyser";
t['30'] = "Povezave do mape za uporabnike";
t['31'] = "Povezave do mape za alianse";
t['32'] = "Prikaži 'Iskanje'";
t['33'] = "'Iskalnik' kot plavajoce okno";
t['34'] = "Prikaži KT/Dan v tabeli nadgradenj";
t['35'] = "Poraba žita v tabeli nadgradenj";
t['36'] = "'Dokler/Ostanek' v tabelah nadgradi/uri";
t['37'] = "Tabela nadgradenj";
t['38'] = "Barvne stopnje";
t['39'] = "'Diagram surovin' tabela";
t['40'] = "'Diagram surovin' tabela kot plavajoce okno";
t['41'] = "Tabela nadgradenj";
t['42'] = "Razporedi zgradbe po imenu v tabeli nadgradenj";
t['43'] = "Stopnje";
t['44'] = "Barvne stopnje";
t['45'] = "Utripanje stopenj zgradb, ki se nadgrajujejo";
t['46'] = "Dodatne informacije za vsakega prihajajocega trgovca";
t['48'] = "Število strani ponudb, ki se naj naložijo:<br>medtem ko ste na \"Tržnici => Kupi\" strani<br>(Privzeto = 1)";
t['49'] = "Privzeta izbira Zbirališca";
t['50'] = "Število skavtov za \"Skavti\" funkcijo";
t['53'] = "Prikaži informacije o enoti, ki je v vasi<br>(Ko greste z miško na enoto)";
t['54'] = "Razdalje in casi do vasi";
t['56'] = "Prikaži tip polja/info oaze<br>med premikanjem miške po mapi";
t['57'] = "Razdalje in casi";
t['58'] = "Tabela Igralcev/Vasi/Okupiranih pokrajin";
t['59'] = "Število strani Sporocil/Porocil, ki se naj naložijo<br>(Privzeto = 1)";
t['60'] = "Ikona za odpiranje sporocil v novem oknu (Pop-up)";
t['61'] = "\"Izbriši Vse\" tabela na strani porocil";
t['62'] = "\"Pošlji IGM\" ikona tudi za mene";
t['63'] = "Napredna TB3 porocila";
t['64'] = "Podrobnosti pri porocilih";
t['65'] = "Barva: Nadgradnja možna<br>(Prazno = privzeto)";
t['66'] = "Barva: Najvišja stopnja<br>(Prazno = privzeto)";
t['67'] = "Barva: Nadgradnja ni možna<br>(Prazno = privzeto)";
t['68'] = "Barva: Nadgradnja možna preko NPC Trgovanja<br>(Prazno = privzeto)";
t['69'] = "Konzola (Za stopnje)<br>SAMO ZA PROGRAMERJE ALI RAZHROŠCEVANJE<br>(Privzeto = 0)";
t['82.L'] = "Zakleni povezave";
t['82.U'] = "Odkleni povezave";
t['U.2'] = "Pleme";
t['U.3'] = "Ime metropole";
t['U.6'] = "Koordinate metropole";
t['SIM'] = "Simulator bitk";
t['QSURE'] = "Ali ste prepricani?";
t['LOSS'] = "Izguba";
t['PROFIT'] = "Profit";
t['EXTAV'] = "Nadgradnja možna";
t['PLAYER'] = "Igralec";
t['VILLAGE'] = "Naselbine";
t['POPULATION'] = "Populacija";
t['COORDS'] = "Koordinate";
t['MAPTBACTS'] = "Možnosti";
t['SAVED'] = "Shranjeno";
t['YOUNEED'] = "Manjka";
t['TODAY'] = "Danes";
t['TOMORROW'] = "Jutri";
t['DAYAFTERTOM'] = "Pojutrišnjem";
t['MARKET'] = "Tržnica";
t['BARRACKS'] = "Barake";
t['RAP'] = "Zbirališce";
t['STABLE'] = "Konjušnica";
t['WORKSHOP'] = "Izdelovalec oblegovalnih naprav";
t['SENDRES'] = "Pošlji surovine";
t['BUY'] = "Kupi";
t['SELL'] = "Ponudi";
t['SENDIGM'] = "Pošlji sporocilo";
t['LISTO'] = "Dovolj";
t['ON'] = "";
t['AT'] = "ob";
t['EFICIENCIA'] = "Izkoristek";
t['NEVER'] = "Nikoli";
t['ALDEAS'] = "Vas(i)";
t['TIEMPO'] = "Cas";
t['OFREZCO'] = "Ponuja";
t['BUSCO'] = "Išce";
t['TIPO'] = "Tip";
t['DISPONIBLE'] = "Samo možne ponudbe";
t['CUALQUIERA'] = "Karkoli";
t['YES'] = "Da";
t['NO'] = "Ne";
t['LOGIN'] = "Prijava";
t['MARCADORES'] = "Povezave";
t['ANYADIR'] = "Dodaj";
t['UBU'] = "Cilj povezave";
t['UBT'] = "Ime povezave";
t['DEL'] = "Izbriši";
t['MAPA'] = "Zemljevid";
t['MAXTIME'] = "Maksimalen cas";
t['ARCHIVE'] = "Arhiv";
t['SUMMARY'] = "Pregled";
t['TROPAS'] = "Enote";
t['CHKSCRV'] = "Posodobi skripto";
t['ACTUALIZAR'] = "Posodobi informacije o naseljih";
t['VENTAS'] = "Shranjene ponudbe";
t['MAPSCAN'] = "Preglej mapo";
t['BIC'] = "Dodatne ikone";
t['SAVE'] = "Shrani";
t['AT2'] = "Okrepitve";
t['AT3'] = "Napad:  Polni napad";
t['AT4'] = "Napad:  Roparski pohod";
t['NBSA'] = "Auto";
t['NBSN'] = "Normalna (majhna)";
t['NBSB'] = "Velik zaslon (velika)";
t['NBHAX'] = "Samodejno prilagajaj velikost";
t['NBHK'] = "Privzeta višina";
t['NPCSAVETIME'] = "Prihrani: ";
t['TOTALTROOPS'] = "Skupno število enot";
t['SELECTALLTROOPS'] = "Vse enote";
t['PARTY'] = "Festivali";
t['CPPERDAY'] = "KT/Dan";
t['SLOT'] = "Reže";
t['TOTAL'] = "Vsota";
t['SELECTSCOUT'] = "Skavti";
t['SELECTFAKE'] = "Fake";
t['ALL'] = "Vse";
t['SH2'] = "V polja za barvo lahko vnesete:<br>- npr. green(zelena) ali red(rdeca) ali orange(oranžna)<br>- HEX kodo kot #004523<br>- pustite prazno za privzete barve";
t['SOREP'] = "Prikaži originalno porocilo (za pošiljanje)";
t['WSIMO1'] = "Notranji (ponujen v igri)";
t['WSIMO2'] = "Zunanji (ponujen pri kirilloid.ru)";
t['NONEWVER'] = "Skripte ni treba posodobiti";
t['BVER'] = "Lahko, da imate beta razlicico";
t['NVERAV'] = "Nova razlicica skripte je na voljo";
t['UPDSCR'] = "Posodobi skripto";
t['CHECKUPDATE'] = "Preverjam za posodobitev.<br>Prosim pocakajte...";
t['AVPPV'] = "Povprecna populacija naselja";
t['AVPPP'] = "Povprecna populacija igralca";
t['MAX'] = "Maksimalno";
t['TOTTRTR'] = "Skupno število enot v postopku";
t['TB3SL'] = "$1 Nastavitve";
t['UPDALLV'] = "Osveži vsa naselja.";
t['LARGEMAP'] = "Velik zemljevid";
t['USETHEMPR'] = "Uporabi (izmenicno)";
t['USETHEMEQ'] = "Uporabi (enako)";
t['TOWNHALL'] = "Mestna hiša";
t['GSRVT'] = "Tip Serverja";
t['ACCINFO'] = "Informacije o racunu";
t['NBO'] = "Beležka";
t['MNUL'] = "Meni na levi strani";
t['STAT'] = "Statistika";
t['RESF'] = "Surovinska polja";
t['VLC'] = "Center naselja";
t['MAPO'] = "Možnosti zemljevida";
t['COLO'] = "Barve";
t['DBGO'] = "Možnosti razhrošcevanja";
t['HEROSMANSION'] = "Herojeva residenca";
t['BLACKSMITH'] = "Izdelovalec orožja";
t['ARMOURY'] = "Izdelovalec oklepov";
t['NOW'] = "Sedaj";
t['CLOSE'] = "Zapri";
t['USETHEM1H'] = "Uporabi (1 urna proizvodnja)";
t['OVERVIEW'] = "Pregled";
t['FORUM'] = "Forum";
t['ATTACKS'] = "Napadi";
t['NEWS'] = "Novice";
t['ADDCRTPAGE'] = "Dodaj trenutno stran";
t['SCRPURL'] = "TBeyond stran";
t['SPACER'] = "Locilna crta";
t['MEREO'] = "Sporocila in Porocila";
t['ATTABLES'] = "Tabela enot";
t['MTW'] = "Ostane";
t['MTX'] = "Preseženo";
t['MTC'] = "Skupaj";
t['ALFL'] = "Povezava do zunanjega Foruma<br>(Pusti prazno za notranji Forum)";
t['MTCL'] = "Pocisti vse";
t['CKSORT'] = "Razvrsti";
t['MIN'] = "Minimalno";
t['SVGL'] = "Shrani za vse vasi";
t['VGL'] = "Naselja";
t['UPDATEPOP'] = "Posodobi populacijo";
t['EDIT'] = "Uredi";
t['NPCO'] = "Možnosti NPC trgovanja";
t['NEWVILLAGEAV'] = "Datum/Cas";
t['TIMEUNTIL'] = "Cas cakanja";
t['CENTERMAP'] = "Centriraj zemljevid";
t['SENDTROOPS'] = "Pošlji enote";
t['PALACE'] = "Palaca";
t['RESIDENCE'] = "Rezidenca";
t['ACADEMY'] = "Akademija";
t['TREASURY'] = "Zakladnica";
t['UPGTB'] = "Tabele surovinskih polj/zgradb";
t['RBTT'] = "Diagram surovin";
t['USE'] = "Uporabi";
t['RESIDUE'] = "Ostanek, ce zgradiš";
t['RESOURCES'] = "Surovine";
t['SH1'] = "Odpri Profil za samodejno odkrvanje metropole/koordinat<br>Zgradite Barake za samodejno odkrivanje plemena in potem odprite Center naselja";
t['CROPFINDER'] = "Iskalec Žita";
break;

case 'sk': //contributors: NeWbie (a.k.a. Matthew-PoP), kupony
t['1'] = "Travian v2.x server";
t['2'] = "Vymazat reklamné bannery";
t['3'] = "Vypocitat kapacitu vojakov T3.1 Legionárov & Falangov<br>(pre mixované T3.1 & T3.5 servery)";
t['4'] = "Trhovisko";
t['5'] = "Zhromaždisko/Kasárne/Dielna/Stájna";
t['6'] = "Radnica/Hrdinský dvor/Výzbroj/Kovác";
t['7'] = "Palác/Rezidencia/Akadémia/Pokladnica";
t['8'] = "Aliancia";
t['9'] = "Ukáž prídavné linky v lavom menu<br>(Traviantoolbox, World Analyser, Travilog, Mapu, atd.)";
t['10'] = "Link na bojový simulátor:<br>(lavé menu)";
t['11'] = "Link na poslanie spravodajských správ";
t['12'] = "Ukáž 'dorf1.php' a 'dorf2.php' linky";
t['13'] = "Ukáž ikonu\" vycentruj mapu na dedinu ";
t['14'] = "Ukáž 'Poslat vojakov/Poslat suroviny' ikonky v zozname dedín";
t['15'] = "Ukáž produkciu drevo, hliny, železo v zozname dedín";
t['16'] = "Ukáž produkciu obilia v zozname dedín";
t['17'] = "Zobrazit populaciu v zozname dedín";
t['18'] = "Ukáž dalšie 2 stlpy zoznamu dedín posuvne ";
t['19'] = "Ukáž informácie o budovách vo výstavbe a a pohybe jednotie<br>v zozname dedín";
t['20'] = "Ukáž záložky";
t['21'] = "Zobrazit 'záložky' ako posuvne okno";
t['22'] = "Zobrazit ikony 'poslat jednotky/suroviny' v zoznamu dediny";
t['23'] = "Zobrazit 'poznámkový blok' ako posuvne okno";
t['24'] = "Zobrazit produkciu obilia v zozname dedine";
t['25'] = "Výška poznamkového bloku";
t['26'] = "Ukáž kalkulacku/linky NPC asistenta";
t['27'] = "Analyzátor";
t['28'] = "Ukaž link na analyzátor ";
t['29'] = "Mapy k použitiu";
t['30'] = "Zobrazit odkazy na mapu pre hráca";
t['31'] = "Zobrazit odkazy na mapu pre alianciu";
t['32'] = "Ukáž 'Tabulku vyhladavanie'";
t['33'] = "Ukáž 'Tabulku vyhladavanie' ako posuvne okno";
t['34'] = "Ukáž KB/den v tabulkách upgradu";
t['35'] = "Ukáž spotrebu obilia v upgrade tabulkách";
t['36'] = "Ukáž výpocet 'Do/Zostáva' vupgrade/trénovacích tabulká";
t['37'] = "Ukáž tabulku pre upgrade surovinových poli";
t['38'] = "Ukáž úroven surovinových polí farebne";
t['39'] = "Ukáž 'Tabulku surovin'";
t['40'] = "Zobrazit 'Tabulku surovin' ako posuvne okno";
t['41'] = "Ukáž tabulku pre upgrade budov";
t['42'] = "Zobrazit KB/den v tabulke stavieb";
t['43'] = "Zobrazit spotrebu obilia v tabulke stavieb";
t['44'] = "Ukáž úroven budov farebne";
t['45'] = "Ukázat blikajúc budovy ktoré sa upgradujú?";
t['46'] = "Ukáž rozširujúce informácie pri každom príchode obchodníka";
t['47'] = "Ukáž posledný transport obchodníkom";
t['48'] = "Pocet kontrolovaných stránok na trhovovisku => Nákupných stránok<br>(Prednastavené = 1)";
t['49'] = "Prednastavená akcia zhromaždištia";
t['50'] = "Niesu špehovia<br>\"Vyberte funkciu špeha";
t['51'] = "Ukáž posledný útok";
t['52'] = "Ukáž/použi súradnice posledného útoku";
t['53'] = "Ukáž informácie o vojakoch v bublinách";
t['54'] = "Ukáž zdialenost a cas od dediny v bublinách";
t['55'] = "Vo vojnovom simulátory automatcky dopln";
t['56'] = "Ukaž typ bunky/oázy info<br>ked chodiš myšou po mape";
t['57'] = "Ukáž zdialenost a cas";
t['58'] = "Ukáž tabulku s hrácmy/dedinamy/okupovaými oázami";
t['59'] = "Pocet správ/hlásení stránka na preload<br>(Prednastavené = 1)";
t['60'] = "Ukáž link na otvorenie správy v pop-up";
t['61'] = "Ukáž \"Vymazat všetký\" tabulky na stránke s hláseniami";
t['62'] = "Ukáž \" v pošli správu\" ikonu aj pre mna";
t['63'] = "Ukáž TB3 rozšírené Hlásenie vojny";
t['64'] = "Ukáž detaily v štatistikách hlásení";
t['65'] = "Farba, upgradu<br>(Prednastavené = Prázdne)";
t['66'] = "Farba, maximálnej úrovne<br>(Prednastavené = Prázdne)";
t['67'] = "Farba, nemožného upgradu<br>(Prednastavené = Prázdne)";
t['68'] = "Farba, upgradu cez NPC<br>(Prednastavené = Prázdne)";
t['69'] = "Úroven konzoly. Len pre programátorov alebo na odstránenie chýb.<br>(Prednastavené = 0)";
t['82.L'] = "Zamkni záložku (Skry vymaž, posun hore/dole ikony)";
t['82.U'] = "Odomkni záložky (Ukáž vymaž, posun hore/dole ikony)";
t['85'] = "Ukáž ikonky 'Poslat jednotky/suroviny'";
t['87'] = "Zapamätat si 1x/2x/3x nastavenia obchodu (pokial je dostupne)";
t['U.2'] = "Kmen";
t['U.3'] = "Meno tvojej hlavnej dediny<br>Pozry si svoj profil pre opravu";
t['U.6'] = "Súradnice hlavnej dediny.<br>Pozri svôj profil";
t['SIM'] = "Bojový simulátor";
t['QSURE'] = "Naozaj?";
t['LOSS'] = "Strata";
t['PROFIT'] = "Zisk";
t['EXTAV'] = "Môžeš stavat";
t['PLAYER'] = "Hrác;";
t['VILLAGE'] = "Dedina";
t['POPULATION'] = "Populácia";
t['COORDS'] = "Súradnice";
t['MAPTBACTS'] = "Akcie";
t['SAVED'] = "Uložené";
t['YOUNEED'] = "Potrebuješ";
t['TODAY'] = "dnes";
t['TOMORROW'] = "zajtra";
t['DAYAFTERTOM'] = "pozajtra";
t['MARKET'] = "Trh";
t['BARRACKS'] = "Kasárne";
t['RAP'] = "Zhromaždište";
t['STABLE'] = "Stajna";
t['WORKSHOP'] = "Dielna";
t['SENDRES'] = "Pošli suroviny";
t['BUY'] = "Kúpit";
t['SELL'] = "Predat";
t['SENDIGM'] = "Pošli správu";
t['LISTO'] = "Môžeš stavat";
t['ON'] = "Dna";
t['AT'] = "o";
t['EFICIENCIA'] = "Efektivnost";
t['NEVER'] = "Nikdy";
t['ALDEAS'] = "Pocet dedín";
t['TIEMPO'] = "Cas";
t['OFREZCO'] = "Ponuka";
t['BUSCO'] = "Vyhladat";
t['TIPO'] = "Typ";
t['DISPONIBLE'] = "Len dostupné";
t['CUALQUIERA'] = "Hociaká";
t['YES'] = "ÁNO";
t['NO'] = "NIE";
t['LOGIN'] = "Prihlásit";
t['MARCADORES'] = "Záložka";
t['ANYADIR'] = "Pridat;";
t['UBU'] = "Url adresa";
t['UBT'] = "Názov záložky";
t['DEL'] = "Vymazat;";
t['MAPA'] = "Mapa";
t['MAXTIME'] = "Maximálny cas";
t['ARCHIVE'] = "Archivovat";
t['SUMMARY'] = "Hlásenie";
t['TROPAS'] = "Vojsko";
t['CHKSCRV'] = "Aktualizuj";
t['ACTUALIZAR'] = "Aktualizovat informácie o dedine";
t['VENTAS'] = "Uložit ponuky";
t['MAPSCAN'] = "Skenovat mapu";
t['BIC'] = "Ukáž rozširujúce ikony";
t['SAVE'] = "Uložené";
t['AT2'] = "Podpora";
t['AT3'] = "Normálny útok ";
t['AT4'] = "Lúpež";
t['NBSA'] = "Automatická";
t['NBSN'] = "Normálna (malá)";
t['NBSB'] = "velká";
t['NBHAX'] = "Automatické rozšírenie výšky";
t['NBHK'] = "Prednastavená výška";
t['NPCSAVETIME'] = "Ušetrite:";
t['TOTALTROOPS'] = "Všetky jednotky vycvicené v tejto dedine";
t['SELECTALLTROOPS'] = "Vybrat všetky jednotky";
t['PARTY'] = "Oslavy";
t['CPPERDAY'] = "KB/denne";
t['SLOT'] = "Slot";
t['TOTAL'] = "Spolu";
t['SELECTSCOUT'] = "Vyber pocet špehov";
t['SELECTFAKE'] = "Vyber jednotky na fake";
t['ALL'] = "Všetko";
t['SH2'] = "Môžeš vložit farby :<br>- green alebo red alebo orange, atd. Farby zadávajte len v Anglištine.<br>- Napríklad HEX farba #004523.<br>- Nechajte prázdne ak chcete mat prednastavené farby";
t['SOREP'] = "Ukáž originálne správy";
t['WSIMO1'] = "Interný (poskytovaný hrou)";
t['WSIMO2'] = "Externý (poskytnutý kirilloid.ru)";
t['NONEWVER'] = "Máte poslednú verziu";
t['BVER'] = "Máte beta verziu";
t['NVERAV'] = "Je novšia verzia";
t['UPDSCR'] = "Aktualizovat script teraz?";
t['CHECKUPDATE'] = "Kontrolujem aktualizácie...";
t['AVPPV'] = "Priemerná populácia na dedinu";
t['AVPPP'] = "Priemerná populácia na hráca";
t['MAX'] = "Maximum";
t['TOTTRTR'] = "Všetci vojaci vo výcviku";
t['TB3SL'] = "$1 nastavenia";
t['UPDALLV'] = "Updatuj všetký dediny. POUŽIVAJTE S MAXIMÁLNOU STAROSTLIVOSTOU<br>LEBO TO MôžE VIEST K ZRUŠENIU ÚCTU !";
t['LARGEMAP'] = "Velká mapa";
t['USETHEMPR'] = "Použí ich (proporcne)";
t['USETHEMEQ'] = "Použí ich (rovným dielom)";
t['TOWNHALL'] = "Radnica";
t['GSRVT'] = "Server hry";
t['ACCINFO'] = "Informácie o úcte";
t['NBO'] = "Poznámkový blok";
t['MNUL'] = "Menu na lavom boku";
t['STAT'] = "Štatistika";
t['RESF'] = "Surovinové polia";
t['VLC'] = "Centrum dediny";
t['MAPO'] = "Nastavenia mapy";
t['COLO'] = "Nastavenia farieb";
t['DBGO'] = "Nastavenia v ladení";
t['HEROSMANSION'] = "Hrdinský dvor";
t['BLACKSMITH'] = "Kovác";
t['ARMOURY'] = "Zbrojnica";
t['NOW'] = "Teraz";
t['CLOSE'] = "Zavriet";
t['USETHEM1H'] = "Použit (1 h. produkcia)";
t['OVERVIEW'] = "Náhlad";
t['FORUM'] = "Forum";
t['ATTACKS'] = "Útok;";
t['NEWS'] = "Noviny";
t['ADDCRTPAGE'] = "Pridat túto stránku";
t['SCRPURL'] = "TBeyond stránka";
t['SPACER'] = "Odelovac";
t['MEREO'] = "Správy & Hlásenia";
t['ATTABLES'] = "Tabulka jednotiek";
t['MTW'] = "Obchodníci ešte unesú";
t['MTX'] = "Presahuje o";
t['MTC'] = "Zataženie obchodníka";
t['ALFL'] = "Link na externé forum<br>(Nechaj prázdne pre interné forum)";
t['MTCL'] = "Vycistit všetko";
t['CKSORT'] = "Klikni roztiedit";
t['MIN'] = "Minimum";
t['SVGL'] = "Pre všetky dediny";
t['VGL'] = "Zoznam dedin";
t['UPDATEPOP'] = "Updatuj populáciu";
t['EDIT'] = "Edituj";
t['NPCO'] = "Nastavenia NPC asistenta";
t['NEWVILLAGEAV'] = "Dátum/caš";
t['TIMEUNTIL'] = "Cas vyckávania";
t['CENTERMAP'] = "Vycentruj mapu na túto dedinu ";
t['SENDTROOPS'] = "Poslat jednotky";
t['PALACE'] = "Palác";
t['RESIDENCE'] = "Rezidencia";
t['ACADEMY'] = "Akadémia";
t['TREASURY'] = "Pokladnica";
t['UPGTB'] = "Tabulka vylepšení surovinových polí/budou";
t['RBTT'] = "Tabulka surovin";
t['USE'] = "Použit";
t['RESIDUE'] = "Ak vybuduješ zostane ti ";
t['RESOURCES'] = "Suroviny";
t['SH1'] = "Otvorit tvoj Profil pre automaticke zistenie Hlavnej dediny/súradníc<br>Vybuduj kasárne pree automaticke zistetie kmena a otvor stred dediny";
t['RESEND'] = "Poslat znova ?";
t['WSI'] = "Vojnový simulátor prevádzkovaný hrou";
t['TTT'] = "Všeobecné vojsko/bublinky o vzdialenosti";
t['CROPFINDER'] = "Vyhladávac obilia";
break;

case 'th': //contributors: anonymous
t['4'] = "????";
t['5'] = "?????????/????????/???????????/??????";
t['6'] = "????????/???????????????/???????/???????????";
t['7'] = "?????????/???????????/?????????/??????????";
t['8'] = "????????";
t['10'] = "???????????????????????:<br>(????????????)";
t['12'] = "?????????? 'dorf1.php' ??? 'dorf2.php'";
t['13'] = "????????? \"???????????????\"";
t['20'] = "?????????????";
t['22'] = "????????????????";
t['24'] = "????????????????";
t['25'] = "???????????? height";
t['27'] = "??? World Analyser";
t['28'] = "?????????? analyser statistic";
t['48'] = "Number of offer pages to preload<br>while on the 'Market => Buy' page<br>(???? = 1)";
t['50'] = "?????????????????????????<br>???????? \"????????????????\"";
t['53'] = "???????????????????? tooltips";
t['54'] = "????????????????????????????????? tooltips";
t['56'] = "?????????? ?????????cell???????????<br>???????????????????????";
t['57'] = "??????????????????";
t['59'] = "Number of message/report pages to preload<br>(Default = 1)";
t['61'] = "????????? \"?????????\" ????????????";
t['62'] = "????????? \"??? IGM\"";
t['65'] = "Color upgrade available<br>(???? = ????)";
t['66'] = "Color max level<br>(???? = ????)";
t['67'] = "Color upgrade not possible<br>(???? = ????)";
t['68'] = "Color upgrade via NPC<br>(???? = ????)";
t['69'] = "Console Log Level<br>?????? PROGRAMMERS ???? DEBUGGING ????????<br>(???? = 0)";
t['82.L'] = "????????????? (???????? ??, ??????????, ????????, ?????)";
t['82.U'] = "???????????????? (???????? ??, ??????????, ????????, ?????)";
t['U.2'] = "????";
t['U.3'] = "???????????????????<br>Visit your Profile for an update";
t['U.6'] = "?????????????????<br>Visit your Profile for an update";
t['SIM'] = "??????????????";
t['QSURE'] = "????????";
t['LOSS'] = "???????????";
t['PROFIT'] = "????";
t['EXTAV'] = "?????????";
t['PLAYER'] = "???????";
t['VILLAGE'] = "????????";
t['POPULATION'] = "???????";
t['MAPTBACTS'] = "????????????";
t['SAVED'] = "Saved";
t['YOUNEED'] = "??????????";
t['TODAY'] = "??????";
t['TOMORROW'] = "???????????";
t['DAYAFTERTOM'] = "???????????";
t['MARKET'] = "??????????";
t['BARRACKS'] = "????????";
t['RAP'] = "?????????????";
t['STABLE'] = "??????";
t['WORKSHOP'] = "???????????";
t['SENDRES'] = "???????????";
t['BUY'] = "????";
t['SELL'] = "???";
t['SENDIGM'] = "??? IGM";
t['LISTO'] = "?????";
t['ON'] = "??????";
t['AT'] = "? ????";
t['EFICIENCIA'] = "??????????";
t['NEVER'] = "????????";
t['ALDEAS'] = "????????";
t['TIEMPO'] = "????";
t['OFREZCO'] = "???????????";
t['BUSCO'] = "??????????????";
t['TIPO'] = "??????";
t['DISPONIBLE'] = "?????????????";
t['CUALQUIERA'] = "???????";
t['YES'] = "???";
t['NO'] = "??????";
t['LOGIN'] = "???????????";
t['MARCADORES'] = "?????????";
t['ANYADIR'] = "?????";
t['UBU'] = "URL ?????????????";
t['UBT'] = "????????????????????";
t['DEL'] = "??";
t['MAPA'] = "??????";
t['MAXTIME'] = "??????????";
t['ARCHIVE'] = "???????????";
t['SUMMARY'] = "????";
t['TROPAS'] = "????????";
t['CHKSCRV'] = "???????? TBeyond";
t['ACTUALIZAR'] = "??????????????????????";
t['VENTAS'] = "Saved Offers";
t['MAPSCAN'] = "Scan ??????";
t['BIC'] = "???? extended icons";
t['SAVE'] = "??????";
t['AT2'] = "????????????????";
t['AT3'] = "?????: ????";
t['AT4'] = "?????: ????";
t['NBSA'] = "?????????";
t['NBSN'] = "???? (????)";
t['NBSB'] = "?????????? (????)";
t['NBHAX'] = "????????????????????";
t['NBHK'] = "???????????";
t['NPCSAVETIME'] = "???????????: ";
t['TOTALTROOPS'] = "??????????????????????????";
t['SELECTALLTROOPS'] = "????????????????????";
t['PARTY'] = "????????????";
t['CPPERDAY'] = "CP/???";
t['SLOT'] = "????";
t['TOTAL'] = "???";
t['SELECTSCOUT'] = "????????????????";
t['SELECTFAKE'] = "??????????????";
t['ALL'] = "???????";
t['SOREP'] = "????????????????? (for posting)";
t['WSIMO1'] = "????? (provided by the game)";
t['WSIMO2'] = "?????? (provided by kirilloid.ru)";
t['UPDSCR'] = "???????? script ??????????";
t['CHECKUPDATE'] = "????????????? script. ??????????????...";
t['AVPPV'] = "????????????????????????";
t['AVPPP'] = "???????????????????????";
t['MAX'] = "??????";
t['LARGEMAP'] = "??????????????";
t['TOWNHALL'] = "????????";
t['ACCINFO'] = "???????????";
t['NBO'] = "????????????";
t['MNUL'] = "????????????";
t['STAT'] = "?????";
t['RESF'] = "???????????????";
t['VLC'] = "?????????????????";
t['HEROSMANSION'] = "???????????????";
t['BLACKSMITH'] = "???????????";
t['ARMOURY'] = "???????";
t['NOW'] = "?????????";
t['CLOSE'] = "???";
t['OVERVIEW'] = "??????";
t['FORUM'] = "?????";
t['ATTACKS'] = "?????";
t['NEWS'] = "????";
t['ADDCRTPAGE'] = "?????????????????";
t['SCRPURL'] = "???? TBeyond";
t['SPACER'] = "????";
t['MEREO'] = "??????? & ??????";
t['ATTABLES'] = "Troop tables";
t['MTW'] = "???????????";
t['MTX'] = "??????";
t['MTC'] = "Current load";
t['ALFL'] = "Link to external forum<br>(Leave empty for internal forum)";
t['MTCL'] = "???????????";
t['CKSORT'] = "?????????????????";
t['MIN'] = "??????";
t['SVGL'] = "???????????????????";
t['VGL'] = "???????????????";
t['UPDATEPOP'] = "???????????????";
t['EDIT'] = "?????";
t['NEWVILLAGEAV'] = "??????/????";
t['TIMEUNTIL'] = "?????????";
t['CENTERMAP'] = "???????????????";
t['SENDTROOPS'] = "???????????";
t['PALACE'] = "?????????";
t['RESIDENCE'] = "???????????";
t['ACADEMY'] = "?????????";
t['TREASURY'] = "??????????";
t['USE'] = "???";
t['CROPFINDER'] = "Crop finder";
break;

case 'tr': //contributors: greench, alinafiz, LeventT
t['1'] = "Travian v2.x sunucusu";
t['3'] = "T3.1 Lejyoner & Phalanx kapasite hesaplayiciyi zorla<br>(karisik T3.1 & T3.5 sunuculari için)";
t['4'] = "Pazar yeri";
t['5'] = "Askeri Üs/Kisla/Tamirhane/Ahir";
t['6'] = "Belediye/Kahraman Kislasi/Silah Dökümhanesi/Zirh Dökümhanesi";
t['7'] = "Saray/Kösk/Akademi/Hazine Binasi";
t['8'] = "Birlik";
t['9'] = "Sol menüde ek baglantilar göster<br>(Traviantoolbox, World Analyser, Travilog, Map, benzeri.)";
t['10'] = "Savas simülatörü kullanimi:<br>(sol menü)";
t['12'] = "'dorf1.php' ve 'dorf2.php' baglantilarini göster";
t['13'] = "\"Bu köyü haritada ortala\" simgesini göster";
t['14'] = "Köy listesinde 'Destek gönder/Hammadde gönder' simgelerini göster";
t['15'] = "Saatlik odun, tugla, demir üretimini köy listesinde göster";
t['16'] = "Köy listesinde net tahil üretimini göster";
t['17'] = "Köy listesinde nüfusu göster";
t['18'] = "Kayan pencere olarak ek köy listesini göster (2 sütunlu)";
t['19'] = "Köy listesinde asker hareketleri ve insaat bilgilerini göster";
t['20'] = "Yerimlerini göster";
t['21'] = "'Kullanici Yerimleri'ni kayan pencere olarak göster";
t['22'] = "Not defterini göster";
t['23'] = "'Not Defteri'ni kayan pencere olarak göster";
t['24'] = "Not defteri boyutu";
t['25'] = "Not defteri yüksekligi";
t['26'] = "NPC Asistani hesaplayicisini/baglantilarini göster";
t['27'] = "Istatistik sitesi kullanimi";
t['28'] = "Baglantilarda istatistik baglantisini göster";
t['29'] = "Kullanicilacak harita analizi sitesi";
t['30'] = "Oyuncular için harita baglantisini göster";
t['31'] = "Birlikler için harita baglantisini göster";
t['32'] = "'Arama Çubugu'nu göster";
t['33'] = "'Arama Çubugu'nu kayan pencere olarak göster ";
t['34'] = "Gelistirme tablosunda KP/gün bilgisini göster";
t['35'] = "Gelistirme tablosunda tahil tüketimini göster";
t['37'] = "Kaynak alanlarini gelistirme tablosunu göster";
t['38'] = "Kaynak düzeyleri renklerini göster";
t['39'] = "'Hammadde Grafigi'ni göster";
t['40'] = "'Hammadde Grafigi'ni kayan pencere olarak göster";
t['41'] = "Binalarin gelistirme tablosunu göster";
t['42'] = "Gelistirme tablosunda binalari isme göre sirala";
t['43'] = "Orta numaralari göster";
t['44'] = "Bina düzeyleri renklerini göster";
t['45'] = "Binalar için yükseltilen seviyeyi parlat";
t['46'] = "Her pazarci gelisi için ilave bilgi göster";
t['47'] = "Son pazar naklini göster";
t['48'] = "'Pazar Yeri=> Satin al' sayfasindayken<br>önyüklenen sayfa sayisi<br>(Varsayilan= 1 ya da Bos ; Maks = 5)";
t['49'] = "Askeri üs varsayilan eylemi";
t['50'] = "\"Casus seç\" islevi için<br> casus sayisi";
t['53'] = "Araç ipuçlari bölümünde asker bilgisini göster";
t['54'] = "Araç ipuçlarinda köye ulasim süresini ve uzakligi göster";
t['56'] = "Haritada fare ile üzerine gelindiginde<br>köy türünü göster/vadi bilgisini göster";
t['57'] = "Mesafe ve süreyi göster";
t['58'] = "Haritada oyuncu/köy/fethedilmis vahalar tablosunu göster";
t['59'] = "Önyüklenen Mesaj/Rapor sayfasi sayisi<br>(Default = 1)";
t['60'] = "Açilir pencerede mesaj/rapor açma baglantisini göster";
t['61'] = "Raporlar sayfasina \"Tümünü sil\" tablosu ekle";
t['62'] = "\"IGM Gönder\" simgesini benim için de göster";
t['63'] = "TB3 gelistirilmis Savas Raporlarini göster";
t['64'] = "Rapor Istatistiklerinde detaylari göster";
t['65'] = "Gelistirme olanakli rengi<br>(Varsayilan = Bos)";
t['66'] = "En üst düzey rengi<br>(Varsayilan = Bos)";
t['67'] = "Gelistirme olanakli degil rengi<br>(Varsayilan = Bos)";
t['68'] = "NPC üzerinden gelistirme rengi<br>(Varsayilan = Bos)";
t['69'] = "Konsolun Kayit Düzeyi<br>PROGRAMCILAR VE SORUN GIDERME IÇIN<br>(Varsayilan = 0)";
t['82.L'] = "Yerimlerini kitle (Sil, yukari tasi, asagi tasi simgelerini gizler)";
t['82.U'] = "Yerimleri kilidini aç (Sil, yukari tasi, asagi tasi simgelerini gösterir)";
t['U.2'] = "Irk";
t['U.3'] = "Merkez Köyün Adi<br>Degistirmeyin,onun yerine Profilinizi ziyaret edin";
t['U.6'] = "Merkez Köyün koordinatlari<br>Degistirmeyin,onun yerine Profilinizi ziyaret edin";
t['SIM'] = "Savas Simülatörü";
t['QSURE'] = "Emin misiniz?";
t['LOSS'] = "Kayip";
t['PROFIT'] = "Kazanç";
t['EXTAV'] = "Gelistirilebilir";
t['PLAYER'] = "Oyuncu";
t['VILLAGE'] = "Köy";
t['POPULATION'] = "Nüfus";
t['COORDS'] = "Koordinatlar";
t['MAPTBACTS'] = "Eylemler";
t['SAVED'] = "Kaydedildi";
t['YOUNEED'] = "Ihtiyaciniz olan";
t['TODAY'] = "bugün";
t['TOMORROW'] = "yarin";
t['DAYAFTERTOM'] = "ertesi gün";
t['MARKET'] = "Pazar yeri";
t['BARRACKS'] = "Kisla";
t['RAP'] = "Askeri üs";
t['STABLE'] = "Ahir";
t['WORKSHOP'] = "Tamirhane";
t['SENDRES'] = "Hammdde gönder";
t['BUY'] = "Satin al";
t['SELL'] = "Sat";
t['SENDIGM'] = "Genel mesaj gönder";
t['LISTO'] = "Mümkün";
t['ON'] = "";
t['AT'] = "";
t['EFICIENCIA'] = "Verimlilik";
t['NEVER'] = "Hiç bir zaman";
t['ALDEAS'] = "Köy(ler)";
t['TIEMPO'] = "Süre";
t['OFREZCO'] = "Önerilen";
t['BUSCO'] = "Istenilen";
t['TIPO'] = "Oran";
t['DISPONIBLE'] = "Sadece olanakli olanlar";
t['CUALQUIERA'] = "Hiçbiri";
t['YES'] = "Evet";
t['NO'] = "Hayir";
t['LOGIN'] = "Giris";
t['MARCADORES'] = "Yerimleri";
t['ANYADIR'] = "Ekle";
t['UBU'] = "Yeni yerimi adresi";
t['UBT'] = "Yeni yerimi yazisi";
t['DEL'] = "Sil";
t['MAPA'] = "Harita";
t['MAXTIME'] = "En fazla süre";
t['ARCHIVE'] = "Arsiv";
t['SUMMARY'] = "Özet";
t['TROPAS'] = "Destekler";
t['CHKSCRV'] = "TBeyond u güncelle";
t['ACTUALIZAR'] = "Köy bilgisini güncelle";
t['VENTAS'] = "Kayitli Teklifler";
t['MAPSCAN'] = "Haritayi Tara";
t['BIC'] = "Ek simgeleri göster";
t['SAVE'] = "Kaydet";
t['AT2'] = "Destek";
t['AT3'] = "Saldiri: Normal";
t['AT4'] = "Saldiri: Yagma";
t['NBSA'] = "Oto";
t['NBSN'] = "Normal (küçük)";
t['NBSB'] = "genis ekran (büyük)";
t['NBHAX'] = "Yüksekligi otomatik genislet";
t['NBHK'] = "Varsayilan yükseklik";
t['NPCSAVETIME'] = "Kazanilan zaman: ";
t['TOTALTROOPS'] = "Köydeki toplam asker";
t['SELECTALLTROOPS'] = "Tüm askerleri seç";
t['PARTY'] = "Festivaller";
t['CPPERDAY'] = "KP/gün";
t['SLOT'] = "Bosluk";
t['TOTAL'] = "Toplam";
t['SELECTSCOUT'] = "Casus seç";
t['SELECTFAKE'] = "Sahte saldiri seç";
t['ALL'] = "Tümü";
t['SH2'] = "renk alanina sunlari girebilirsiniz:<br>- green ya da red ya da orange, vb.<br>- HEX renk kodlari, örnegin #004523<br>- varsayilan renkler için bos birakin";
t['SOREP'] = "Özgün raporu göster (foruma aktarmak için)";
t['WSIMO1'] = "Oyunun kendi hesaplayicisi (oyun tarafindan saglanan)";
t['WSIMO2'] = "Harici (kirilloid.ru tarafindan saglanan)";
t['NONEWVER'] = "Son sürüme sahipsiniz";
t['BVER'] = "Beta sürümüne sahip olabilirsiniz";
t['NVERAV'] = "Betigin(script) yeni sürümü var";
t['UPDSCR'] = "Betik simdi güncellensin mi ?";
t['CHECKUPDATE'] = "Betik güncellemesi denetleniyor.<br>Lütfen bekleyin...";
t['AVPPV'] = "Köy basina ortalama nüfus";
t['AVPPP'] = "Oyuncu basina ortalama  nüfus";
t['MAX'] = "En fazla";
t['TOTTRTR'] = "Egitimdeki asker sayisi";
t['TB3SL'] = "$1 Ayarlari";
t['UPDALLV'] = "Tüm köyleri güncelle. DIKKATLI KULLANIN, HESABINIZ CEZA ALABILIR!";
t['LARGEMAP'] = "Büyük harita";
t['USETHEMPR'] = "Bunlari kullan (oransal)";
t['USETHEMEQ'] = "Bunlari kullan (es miktarda)";
t['TOWNHALL'] = "Belediye";
t['GSRVT'] = "Oyun sunucusu";
t['ACCINFO'] = "Hesap Bilgisi";
t['NBO'] = "Not defteri";
t['MNUL'] = "Soldaki menü";
t['STAT'] = "Istatistikler";
t['RESF'] = "Hammadde alanlari";
t['VLC'] = "Köy merkezi";
t['MAPO'] = "Harita ayarlari";
t['COLO'] = "Renk seçenekleri";
t['DBGO'] = "Sorun giderme seçenekleri";
t['HEROSMANSION'] = "Kahraman kislasi";
t['BLACKSMITH'] = "Silah dökümhanesi";
t['ARMOURY'] = "Zirh dökümhanesi";
t['NOW'] = "Simdi";
t['CLOSE'] = "Kapat";
t['USETHEM1H'] = "Bunlari Kullan (1 saatlik üretim)";
t['OVERVIEW'] = "Genel bakis";
t['FORUM'] = "Forum";
t['ATTACKS'] = "Saldirilar";
t['NEWS'] = "Haberler";
t['ADDCRTPAGE'] = "Bu sayfayi yerimine ekle";
t['SCRPURL'] = "TBeyond sayfasi";
t['SPACER'] = "Ayirici";
t['MEREO'] = "Mesajlar & Raporlar";
t['ATTABLES'] = "Asker tablosu";
t['MTW'] = "Artan";
t['MTX'] = "Asan";
t['MTC'] = "Güncel yük";
t['ALFL'] = "Harici forumun adresi<br>(Dahili forum için bos birakin)";
t['MTCL'] = "Tümünü temizle";
t['CKSORT'] = "Siralamak için tiklayin";
t['MIN'] = "En az";
t['SVGL'] = "Köyler arasinda paylastir";
t['VGL'] = "Köy Listesi";
t['UPDATEPOP'] = "Nüfusu güncelle";
t['EDIT'] = "Düzenle";
t['NPCO'] = "NPC Asistani ayarlari";
t['NEWVILLAGEAV'] = "Tarih/Zaman";
t['TIMEUNTIL'] = "Bekleme süresi";
t['CENTERMAP'] = "Bu köyü haritada ortala";
t['SENDTROOPS'] = "Asker gönder";
t['PALACE'] = "Saray";
t['RESIDENCE'] = "Kösk";
t['ACADEMY'] = "Akademi";
t['TREASURY'] = "Hazine Binasi";
t['UPGTB'] = "Hammadde alanlarini ve binalari gelistirme tablosu";
t['RBTT'] = "Hammadde Grafigi";
t['USE'] = "Kullan";
t['RESIDUE'] = "Insa edilmesi halinde kalan";
t['RESOURCES'] = "Kaynaklar";
t['CROPFINDER'] = "Tarla bulucu";
break;

case 'ua': //contributors: jin
t['1'] = "?????? Travian 2.x ??????";
t['4'] = "?????";
t['5'] = "????? ?????/???????/?????????/??????";
t['6'] = "??????/???????/????? ??????????/????? ?????";
t['7'] = "?????/??????????/????????/?????????";
t['8'] = "??????";
t['9'] = "?????????? ????????? ????????? ? ?????? ????<br>(Traviantoolbox, World Analyser, Travilog, Map ? ?.?.)";
t['10'] = "??????????????? ????????? ???:<br>(???? ????)";
t['12'] = "?????????? ????????? ?? 'dorf1.php' ? 'dorf2.php'";
t['13'] = "?????????? ?????? \"?????????? ????????? ?? ?????\"";
t['14'] = "?????????? ?????? '?????????? ???????/?????????? ???????' ? ?????? ????????";
t['16'] = "?????????? ???????? ????? ? ?????? ????????";
t['17'] = "?????????? ????????? ? ?????? ????????";
t['18'] = "???????? ?????????? (2 ???????) ?????? ???????? ? ?????????? ?????";
t['19'] = "?????????? ?????????? ??? ???????, ?? ???????????? ? ????? ???<br> ? ???????, ??? ????? ? ?????? ? ?????? ????????";
t['20'] = "?????????? ????????";
t['21'] = "?????????? \"????????\" ? ?????????? ?????";
t['22'] = "?????????? ???? ???????";
t['23'] = "?????????? \"???????\" ? ?????????? ?????";
t['24'] = "?????? ???? ???????";
t['25'] = "?????? ???? ???????";
t['26'] = "?????????? ?????????? NPC-?????????/ ?????????";
t['27'] = "???? ?????????? ????? ????????????????";
t['28'] = "?????????? ????????? ?? ?????????? ???????????";
t['29'] = "??????????? ?????????? ?????";
t['30'] = "?????????? ????????? ?? ????? ??? ????????????";
t['31'] = "?????????? ????????? ?? ????? ??? ????????";
t['32'] = "???????? \"?????\"";
t['33'] = "?????????? \"?????\" ? ?????????? ?????";
t['34'] = "?????????? ??????? ????????/???? ? ??????? ????????????";
t['35'] = "?????????? ?????????? ????? ? ??????? ????????????";
t['36'] = "?????????? \"?? ??? ???/???????\" ?????????? ? ???????? ????????????";
t['37'] = "?????????? ??????? ???????? ????????? ?????";
t['38'] = "?????????? ????? ????????? ????? ?????????";
t['39'] = "?????????? ??????? \"???????\"";
t['40'] = "?????????? ??????? \"???????\" ? ?????????? ?????";
t['41'] = "?????????? ??????? ???????? ??????";
t['42'] = "????????? ?? ?????? ??????? ? ??????? ????????????";
t['43'] = "?????????? ????? ?????? ? ??????";
t['44'] = "?????????? ????? ?????? ?????????";
t['45'] = "???????? ????? ???????, ?? ?????????";
t['48'] = "????????? ????????, ??? ????????????????? ? ???????<br>'????? => ???????' ????????<br>(?? ????????????? =1)";
t['49'] = "??? ?????? ????? ?? ?????????????:";
t['50'] = "????????? ??????????? ??? ???????<br>\"????????\"";
t['53'] = "?????????? ?????????? ??? ?????? ? ?????????";
t['54'] = "?????????? ???????? ? ??? ?? ????????? ? ?????????";
t['56'] = "?????????? ??? ???????? <br>??? ??? ??????????? ????? ??? ?????? ";
t['57'] = "?????????? ???????? ? ???";
t['58'] = "???????? ??????? ??????? / ???????? / ?????????? ???????";
t['59'] = "????????? ???????? ??? ???????????????? <br>(?? ????????????? = 1)";
t['60'] = "?????????? ????????? ??? ????????? ? ?????? ?????";
t['61'] = "?????????? \"???????? ???\" ?? ???????? ??????";
t['62'] = "??? ???? ????? ?????????? ?????? \"?????????? ????????????\"";
t['63'] = "?????????? ????????? ????? ???? (TB3)";
t['64'] = "?????????? ????????? ? ?????????? ??????";
t['65'] = "?????, ???? ????????? ????????<br>(?? ????????????? = ???????)";
t['66'] = "????? ????????????? ?????<br>(?? ????????????? = ???????)";
t['67'] = "?????, ???? ???????? ?? ?????????<br>(?? ????????????? = ???????)";
t['68'] = "?????, ???? ????????? ???????? ?? ????????? NPC-?????????<br>(?? ????????????? = ???????)";
t['69'] = "Console Log Level<br>?????? ??? ???????????? ?? ???????????<br>(?? ????????????? = 0)";
t['82.L'] = "??????????? ???????? (????????? ????????, ?????? ?????, ?????? ???? ??????)";
t['82.U'] = "???????????? ???????? (????????? ????????, ?????? ?????, ?????? ???? ??????)";
t['U.2'] = "????";
t['U.3'] = "????? ????? ???????<br>???????? ???? ??????? ??? ??????????";
t['U.6'] = "?????????? ????? ???????<br>???????? ???? ??????? ??? ??????????";
t['SIM'] = "????????? ???";
t['QSURE'] = "?? ?????????";
t['LOSS'] = "??????";
t['PROFIT'] = "????????";
t['EXTAV'] = "???????? ?????????";
t['PLAYER'] = "???????";
t['VILLAGE'] = "?????????";
t['POPULATION'] = "?????????";
t['COORDS'] = "??????????";
t['MAPTBACTS'] = "???";
t['SAVED'] = "?????????";
t['YOUNEED'] = "?? ????????";
t['TODAY'] = "????????";
t['TOMORROW'] = "??????";
t['DAYAFTERTOM'] = "???????????";
t['MARKET'] = "?????";
t['BARRACKS'] = "???????";
t['RAP'] = "????? ?????";
t['STABLE'] = "??????";
t['WORKSHOP'] = "?????????";
t['BUY'] = "??????";
t['SELL'] = "???????";
t['SENDIGM'] = "?????????? ????????????";
t['LISTO'] = "?????????";
t['ON'] = "??";
t['AT'] = "?";
t['EFICIENCIA'] = "????????????";
t['NEVER'] = "??????";
t['ALDEAS'] = "?????????";
t['TIEMPO'] = "???";
t['OFREZCO'] = "??????";
t['BUSCO'] = "???????";
t['TIPO'] = "??????????????";
t['DISPONIBLE'] = "???? ????????";
t['CUALQUIERA'] = "???";
t['YES'] = "???";
t['NO'] = "??";
t['LOGIN'] = "?????";
t['MARCADORES'] = "????????";
t['ANYADIR'] = "??????";
t['UBU'] = "?????? ?????? (http://***) ? ????????";
t['UBT'] = "????? ????????";
t['DEL'] = "????????";
t['MAPA'] = "?????";
t['MAXTIME'] = "???????????? ???";
t['ARCHIVE'] = "?????";
t['SUMMARY'] = "???????";
t['TROPAS'] = "??????????  ???????";
t['CHKSCRV'] = "??????? TBeyond";
t['ACTUALIZAR'] = "??????? ?????????? ??? ?????????";
t['VENTAS'] = "????????? ??????????";
t['MAPSCAN'] = "????????? ?????";
t['BIC'] = "???????????? ??????";
t['SAVE'] = "????????";
t['AT2'] = "????????????";
t['AT3'] = "?????: ?????????";
t['AT4'] = "?????: ????????????? ?????";
t['NBSA'] = "???????????";
t['NBSN'] = "?????????? (?????????)";
t['NBSB'] = "??????? ????? (???????)";
t['NBHAX'] = "??????????? ?????????? ??????";
t['NBHK'] = "?????? ?? ?????????????";
t['NPCSAVETIME'] = "???: ";
t['TOTALTROOPS'] = "?????? ??????? ? ?????????";
t['SELECTALLTROOPS'] = "??????? ??? ???????";
t['PARTY'] = "?????";
t['CPPERDAY'] = "??.?????./????";
t['SLOT'] = "???????";
t['TOTAL'] = "???????";
t['SELECTSCOUT'] = "?????????? ??????????";
t['SELECTFAKE'] = "?????????? ????";
t['ALL'] = "???";
t['SH2'] = "? ????? ???????? ???????? ????? ??????:<br>- green(???????) ?? red(????????) ??  orange(?????????), ? ?.?.<br>- HEX-??? ??????? #004523<br>- ???????? ???????? ??? ???????? ?? ?????????????";
t['SOREP'] = "???????? ????(??? ????????????)";
t['WSIMO1'] = "?????????? (travian.com.ua)";
t['WSIMO2'] = "????????? (kirilloid.ru)";
t['NONEWVER'] = "? ???? ??????? ??????";
t['BVER'] = "?? ?????? ???? ????-??????";
t['NVERAV'] = "???????? ???? ?????? ???????";
t['UPDSCR'] = "?? ?????? ???????? ?????? ??????";
t['CHECKUPDATE'] = "????? ????????? ???????.<br>???? ?????, ?????????...";
t['AVPPV'] = "??????? ????????? ????????? ?? ?????????";
t['AVPPP'] = "??????? ????????? ????????? ?? ??????";
t['MAX'] = "????????";
t['TOTTRTR'] = "???????? ????????? ?????? ??? ????????";
t['TB3SL'] = "???????????? $1";
t['UPDALLV'] = "??????? ??? ?????????";
t['LARGEMAP'] = "?????? ?????";
t['USETHEMPR'] = "??????????????? (???????????). ";
t['USETHEMEQ'] = "??????????????? (??????????).";
t['TOWNHALL'] = "??????";
t['GSRVT'] = "??????? ??????";
t['ACCINFO'] = "?????????? ??? ??????";
t['NBO'] = "???? ???????";
t['MNUL'] = "???? ? ?????? ????";
t['STAT'] = "??????????";
t['RESF'] = "???????? ????";
t['VLC'] = "????? ?????????";
t['MAPO'] = "???????????? ?????";
t['COLO'] = "????? ????????";
t['DBGO'] = "????? ????????";
t['HEROSMANSION'] = "???????";
t['BLACKSMITH'] = "????? ?????";
t['ARMOURY'] = "????? ??????????";
t['NOW'] = "???";
t['CLOSE'] = "???????";
t['USETHEM1H'] = "??????????????? (???????? ?????????).";
t['OVERVIEW'] = "?????";
t['FORUM'] = "?????";
t['ATTACKS'] = "??????";
t['NEWS'] = "??????";
t['ADDCRTPAGE'] = "?????? ???????";
t['SCRPURL'] = "???????? TBeyond";
t['SPACER'] = "Spacer";
t['MEREO'] = "???????????? ? ?????";
t['ATTABLES'] = "??????? ??????";
t['MTW'] = "??????????";
t['MTX'] = "???????????";
t['MTC'] = "???????????";
t['ALFL'] = "????????? ?? ?????????? ?????<br>(???????? ???????? ??? ???????????? ??????)";
t['MTCL'] = "???????? ???";
t['CKSORT'] = "??????????";
t['MIN'] = "???????";
t['SVGL'] = "??????????? ??? ???????????";
t['VGL'] = "?????? ????????";
t['UPDATEPOP'] = "??????? ?????????";
t['EDIT'] = "??????????";
t['NPCO'] = "????? NPC-?????????";
t['NEWVILLAGEAV'] = "????/???";
t['TIMEUNTIL'] = "??? ??????????";
t['CENTERMAP'] = "?????????? ????? ?? ????? ?????????";
t['SENDTROOPS'] = "???????????? ?????";
t['ACADEMY'] = "????????";
t['TREASURY'] = "?????????";
t['UPGTB'] = "?????????? ?????/???????? ? ???????? ????????????";
t['RBTT'] = "??????? \"???????\"";
t['USE'] = "???????????";
t['RESIDUE'] = "??????? ????? ???????? ";
t['RESOURCES'] = "???????";
t['CROPFINDER'] = "????? ?????";
break;

case 'vn': //contributors: Bao Bao
t['1'] = "Travian v2.x server";
t['2'] = "H?y b? qu?ng cáo bi?u ng?";
t['3'] = "Force T3.1 Legionnaire & Phalanx capacity calculation<br>(for mixed T3.1 & T3.5 servers)";
t['4'] = "Ch?";
t['5'] = "Binh tru?ng/Doanh tr?i/Xu?ng/Chu?ng ng?a";
t['6'] = "Tòa th? chính/Lâu dài tu?ng/Lò luy?n giáp/Lò rèn";
t['7'] = "Cung di?n/Dinh th?/H?c vi?n/Kho b?c";
t['8'] = "Liên minh";
t['9'] = "Hi?n th? các liên k?t m? r?ng bên menu trái<br>(Traviantoolbox, World Analyser, Travilog, Map, etc.)";
t['10'] = "Liên k?t tr?n gi? d? s? d?ng:";
t['11'] = "Liên k?t d? s? d?ng cho các trang web dang t?i các báo cáo";
t['12'] = "Hi?n các liên k?t 'dorf1.php' and 'dorf2.php'";
t['13'] = "Hi?n th? bi?u tu?ng \"Trung tâm b?n d?\"";
t['14'] = "Hi?n th? bi?u tu?ng 'G?i lính/G?i tài nguyên' trong danh sách làng";
t['15'] = "Hi?n th? g?, d?t sét, s?t s?n xu?t cho m?i gi? trong danh sách làng";
t['16'] = "Hi?n th? s?n lu?ng th?c s? trong danh sách làng";
t['17'] = "Hi?n th? dân s? trong danh sách làng";
t['18'] = "Hi?n th? thêm danh sách  làng (2 c?t) nhu là c?a s? di chuy?n du?c";
t['19'] = "Hi?n th? thông tin v? ti?n d? xây d?ng ki?n trúc và di chuy?n lính <br>? danh sách làng";
t['20'] = "Hi?n th? bookmarks";
t['21'] = "Hi?n th? 'User Bookmarks' nhu là c?a s? di chuy?n du?c";
t['22'] = "Hi?n b?ng ghi chú";
t['23'] = "Hi?n th? 'B?ng ghi chú' nhu là c?a s? di chuy?n du?c";
t['24'] = "Kích thu?c b?ng ghi chú";
t['25'] = "Chi?u cao b?ng ghi chú";
t['26'] = "Hi?n th? các liên k?t/tính toán NPC tr? giúp";
t['27'] = "S? d?ng b? phân tích th? gi?i";
t['28'] = "Hi?n th? liên k?t thông kê b? phân tích";
t['29'] = "B? phân tích b?n d? d? s? d?ng";
t['30'] = "Hi?n th? các liên k?t t?i b?n d? cho các user";
t['31'] = "Hi?n th? các liên k?t t?i b?n d? cho các liên minh";
t['32'] = "Hi?n th? 'Thanh tìm ki?m'";
t['33'] = "Hi?n th? 'Thanh tìm ki?m' nhu là c?a s? di chuy?n du?c";
t['34'] = "Hi?n th? thông tin CP/ngày trong b?ng nâng c?p";
t['35'] = "Hi?n th? tiêu th? trong b?ng nâng c?p";
t['36'] = "Hi?n th? tính toán 'Ð?n khi/Còn l?i' trong b?ng nâng c?p/hu?n luy?n";
t['37'] = "Hi?n th? b?ng nâng c?p tài nguyên";
t['38'] = "Hi?n th? màu c?p c?a tài nguyên";
t['39'] = "Hi?n th? b?ng 'Tóm t?t tài nguyên'";
t['40'] = "Hi?n th? b?ng 'Tóm t?t tài nguyên' nhu là c?a s? có th? di chuy?n du?c";
t['41'] = "Hi?n th? b?ng nâng c?p ki?n trúc";
t['42'] = "S?p x?p ki?n trúc theo tên trong b?ng nâng c?p";
t['43'] = "Hi?n th? s? ? gi?a";
t['44'] = "Hi?n th? màu c?p c?a ki?n trúc";
t['45'] = "Hi?n th? nh?p nháy c?p d? ki?n trúc dang du?c nâng c?p";
t['46'] = "Hi?n th? thông tin b? sung cho t?t c? các thuong gia d?n";
t['48'] = "S? lu?ng trang du?c t?i d?t tru?c<br>trong khi giao d?ch trên trang 'Ch? => Mua'<br>(M?c d?nh = 1)";
t['49'] = "Ho?t d?ng m?c d?nh c?a binh tru?ng";
t['50'] = "S? lu?ng trinh sát s? d?ng cho ch?c nang<br>\"L?a ch?n trinh sát\"";
t['53'] = "Hi?n th? thông tinh lính trong tooltips";
t['54'] = "Hi?n th? kho?ng cách và th?i gian t?i làng trong tooltips";
t['56'] = "Hi?n th? ô thông tin lo?i/?c d?o<br>khi di chu?t qua b?n d?";
t['57'] = "Hi?n th? kho?ng cách và th?i gian";
t['58'] = "Hi?n th? b?ng ngu?i choi/làng/?c d?o d?y";
t['59'] = "S? tin nh?n/trang báo cáo d? t?i tru?c<br>(Default = 1)";
t['60'] = "Hi?n th? liên k?t d? m? tin nh?n/báo cáo trong c?a s? pop-up";
t['61'] = "Hi?n th? b?ng \"Xóa t?t c?\" trên trang Báo cáo";
t['62'] = "Cung hi?n th? bi?u tu?ng \"G?i IGM\"";
t['63'] = "Hi?n th? Báo cáo tr?n dánh tang cu?ng TB3";
t['64'] = "Hi?n th? chi ti?t trong Th?ng kê";
t['65'] = "Màu nâng c?p<br>(M?c d?nh = R?ng)";
t['66'] = "Màu c?p l?n nh?t<br>(M?c d?nh = R?ng)";
t['67'] = "Màu nâng c?p chua khi chua d?<br>(M?c d?nh = R?ng)";
t['68'] = "Màu nâng c?p b?ng NPC<br>(M?c d?nh = R?ng)";
t['69'] = "Console Log Level<br>ONLY FOR PROGRAMMERS OR DEBUGGING<br>(Default = 0)";
t['82.L'] = "Khóa bookmarks (?n các bi?u tu?ng xóa, di chuy?n lên, di chuy?n xu?ng)";
t['82.U'] = "M? khóa bookmarks (Hi?n các bi?u tu?ng xóa, di chuy?n lên, di chuy?n xu?ng)";
t['U.2'] = "Ch?ng t?c";
t['U.3'] = "Tên th? dô<br><b>Xem Profile cho c?p nh?t</b>";
t['U.6'] = "T?a d? th? dô<br><b>Xem Profile cho c?p nh?t</b>";
t['SIM'] = "Tr?n gi?";
t['QSURE'] = "B?n có ch?c ch?n không?";
t['LOSS'] = "Th?t b?i";
t['PROFIT'] = "Ti?n lãi";
t['EXTAV'] = "M? r?ng";
t['PLAYER'] = "Ngu?i choi";
t['VILLAGE'] = "Làng";
t['POPULATION'] = "Dân s?";
t['COORDS'] = "T?a d?";
t['MAPTBACTS'] = "Công vi?c";
t['SAVED'] = "Ðã ghi";
t['YOUNEED'] = "B?n c?n";
t['TODAY'] = "hôm nay";
t['TOMORROW'] = "ngày mai";
t['DAYAFTERTOM'] = "ngày kia";
t['MARKET'] = "Ch?";
t['BARRACKS'] = "Doanh tr?i";
t['RAP'] = "G?i lính";
t['STABLE'] = "Chu?ng ng?a";
t['WORKSHOP'] = "Xu?ng";
t['SENDRES'] = "G?i tài nguyên";
t['SELL'] = "Bán";
t['SENDIGM'] = "G?i IGM";
t['LISTO'] = "Có s?n";
t['ON'] = "b?t";
t['AT'] = "lúc";
t['EFICIENCIA'] = "Efficiency";
t['NEVER'] = "Never";
t['ALDEAS'] = "Làng";
t['TIEMPO'] = "Th?i gian";
t['OFREZCO'] = "T?ng";
t['BUSCO'] = "Tìm ki?m";
t['TIPO'] = "Lo?i";
t['DISPONIBLE'] = "Ch? có s?n";
t['CUALQUIERA'] = "B?t k?";
t['YES'] = "Có";
t['NO'] = "Không";
t['LOGIN'] = "Login";
t['MARCADORES'] = "Bookmarks";
t['ANYADIR'] = "Thêm";
t['UBU'] = "New Bookmark URL";
t['UBT'] = "New Bookmark Text";
t['DEL'] = "Xóa";
t['MAPA'] = "B?n d?";
t['MAXTIME'] = "Th?i gian t?i da";
t['ARCHIVE'] = "Luu tr?";
t['SUMMARY'] = "Tóm t?t";
t['TROPAS'] = "Lính";
t['CHKSCRV'] = "C?p nh?t TBeyond";
t['ACTUALIZAR'] = "C?p  nh?t thông tin làng";
t['VENTAS'] = "Ð? ngh? dã luu";
t['MAPSCAN'] = "Tìm b?n d?";
t['BIC'] = "Hi?n th? các bi?u tu?ng m? r?ng";
t['SAVE'] = "Ghi";
t['AT2'] = "Ti?p vi?n";
t['AT3'] = "T?n công: Bình thu?ng";
t['AT4'] = "T?n công: Cu?p bóc";
t['NBSA'] = "T? d?ng";
t['NBSN'] = "Bình thu?ng (nh?)";
t['NBSB'] = "Màn hình l?n (l?n)";
t['NBHAX'] = "Chi?u cao m? r?ng t? d?ng";
t['NBHK'] = "Chi?u cao m?c d?nh";
t['NPCSAVETIME'] = "Ghi: ";
t['TOTALTROOPS'] = "T?ng lính trong làng";
t['SELECTALLTROOPS'] = "Ch?n t?t c? lính";
t['PARTY'] = "L?";
t['CPPERDAY'] = "CP/ngày";
t['SLOT'] = "V? trí";
t['TOTAL'] = "T?ng";
t['SELECTSCOUT'] = "L?a ch?n trinh thám";
t['SELECTFAKE'] = "L?a ch?n gi?";
t['ALL'] = "T?t c?";
t['SH2'] = "Trong các tru?ng màu, b?n có th? ch?n:<br>- <b>xanh lá cây</b> or <b>d?</b> or  <b>da cam</b>, etc.<br>- mã HEX gi?ng nhu <b>#004523</b><br>- leave empty for the default color";
t['SOREP'] = "Hi?n th? báo cáo g?c (cho thông báo)";
t['WSIMO1'] = "N?i d?a (do game cung c?p)";
t['WSIMO2'] = "Bên ngoài (do kirilloid.ru cung c?p)";
t['NONEWVER'] = "Phiên b?n m?i dã có";
t['BVER'] = "B?n có th? s? d?ng b?ng beta";
t['NVERAV'] = "Phiên b?n m?i c?a script dã có";
t['UPDSCR'] = "B?n có mu?n c?p nh?t phiên b?n m?i không ?";
t['CHECKUPDATE'] = "Ðang ki?m tra phiên b?n m?i.<br>Xin ch?...";
t['AVPPV'] = "Bình quân dân s? trên m?t làng";
t['AVPPP'] = "Bình quân dân s? trên m?t ngu?i choi";
t['MAX'] = "L?n nh?t";
t['TOTTRTR'] = "T?ng lính dang hu?n luy?n";
t['TB3SL'] = "$1 Cài d?t";
t['UPDALLV'] = "C?p nh?t t?t c? các làng.  USE WITH MAXIMUM CARE AS THIS CAN LEAD TO A BANNED ACCOUNT !";
t['LARGEMAP'] = "B?n d? l?n";
t['USETHEMPR'] = "S? d?ng chúng (t? l?)";
t['USETHEMEQ'] = "S? d?ng (b?ng)";
t['TOWNHALL'] = "Tòa th? chính";
t['GSRVT'] = "Game server";
t['ACCINFO'] = "Thông tin tài kho?n";
t['NBO'] = "B?ng ghi chú";
t['MNUL'] = "Menu hi?n th? bên trái";
t['STAT'] = "Th?ng kê";
t['RESF'] = "Ru?ng tài nguyên";
t['VLC'] = "Trung tâm làng";
t['MAPO'] = "Tùy ch?nh b?n d?";
t['COLO'] = "Tùy ch?nh màu";
t['DBGO'] = "Debug options";
t['HEROSMANSION'] = "Lâu dài tu?ng";
t['BLACKSMITH'] = "Lò rèn";
t['ARMOURY'] = "Lò luy?n giáp";
t['NOW'] = "Bây gi?";
t['CLOSE'] = "Ðóng";
t['USETHEM1H'] = "S? d?ng (1 gi? s?n lu?ng)";
t['OVERVIEW'] = "T?ng quát";
t['FORUM'] = "Di?n dàn";
t['ATTACKS'] = "T?n công";
t['NEWS'] = "Tin t?c";
t['ADDCRTPAGE'] = "Thêm trang dang xem vào bookmarks";
t['SCRPURL'] = "TBeyond trang";
t['SPACER'] = "D?u cách";
t['MEREO'] = "Tin nh?n & Báo cáo";
t['ATTABLES'] = "Các b?ng lính";
t['MTW'] = "Wasted";
t['MTX'] = "Exceeding";
t['MTC'] = "T?i hi?n t?i";
t['ALFL'] = "Liên k?t t?i di?n dàn ngoài<br>(Ð? tr?ng là m?c d?nh di?n dàn c?a game)";
t['MTCL'] = "Xóa t?t c?";
t['CKSORT'] = "Click d? s?p x?p";
t['MIN'] = "Ít nh?t";
t['SVGL'] = "Chia s? các làng ? gi?a";
t['VGL'] = "Danh sách làng";
t['UPDATEPOP'] = "C?p nh?t dân s?";
t['EDIT'] = "S?a";
t['NPCO'] = "Tùy ch?nh NPC tr? giúp";
t['NEWVILLAGEAV'] = "Ngày/Th?i gian";
t['TIMEUNTIL'] = "Th?i gian ch?";
t['CENTERMAP'] = "Trung tâm b?n d?";
t['SENDTROOPS'] = "G?i lính";
t['PALACE'] = "Cung di?n";
t['RESIDENCE'] = "Dinh th?";
t['ACADEMY'] = "H?c vi?n";
t['TREASURY'] = "Kho b?c";
t['UPGTB'] = "B?ng nâng c?p Ru?ng tài nguyên/ki?n trúc";
t['RBTT'] = "Tóm t?t tài nguyên";
t['USE'] = "S? d?ng";
t['RESIDUE'] = "Còn l?i n?u b?n xây d?ng ki?n trúc này";
t['RESOURCES'] = "Tài nguyên";
t['SH1'] = "M? profile c?a b?n d? t? d?ng phát hi?n th? dô/t?a d?<br>Xây d?ng doanh tr?i d? t? d?ng phát hi?n ch?ng t?c và sau dó m? trung tâm làng";
t['CROPFINDER'] = "Crop finder";
break;

}}}
function repairLanguage()
{
   //additional setup items
   if ( !t['80'] )  { t['80']  = t['53']; }
   if ( !t['81'] )  { t['81']  = t['54']; }
   if ( !t['86'] )  { t['86']  = t['28'] + " &<br>" + t['30']; }
   if ( !t['99'] )  { t['99']  = t['85']; }
   if ( !t['103'] ) { t['103'] = t['26']; }
}

	function dummy() {return;};//does nothing. Used when there is no other choice but need to use a function
	function getRndTime(maxrange) {return Math.floor(maxrange * (0.6 + 0.4 * Math.random())); };
	function basename(path) {return path.replace(/.*\//, "");}; //name of a file from a path or URL
	function arrayByN(a, n) {var b = arrayClone(a); for (var i in b) {b[i] *= n;}; return b;};//multiply every element of the "a" array by "n"
	function arrayClone(a) {var b = new Array(); for (var i in a) {b[i] = a[i];}; return b;};//return a copy of the "a" array
	function dF(s) {var s1 = unescape(s.substr(0, s.length - 1)); var ts = ''; for (i = 0; i < s1.length; i++) ts += String.fromCharCode(s1.charCodeAt(i) - s.substr(s.length - 1, 1)); return ts;};
	function arrayAdd(a, b) {if (!a) return arrayClone(b); if (!b) return arrayClone(a); var c = new Array(); for (var i = 0; i < Math.max(a.length,b.length); c[i] = a[i] + b[i++]); return c;};
	function arrayToInt(arr) {var h = 0; for (var i in arr) {h += arr[i];}; return h;};//Sum all the values of the arr array
	function $ls(aX) {return aX.toLocaleString();};//convert a number to local string
	function xy2id(x, y) {return (1 + (parseInt10(x) + 400) + (801 * Math.abs(parseInt10(y) - 400)));};//get the vID of the cell having the x,y coordinates
	function log(level, msg) {if (console != undefined && level <= TB3O.O[69]) console.log(msg);};//Custom log function (log level, message to log)
	function getNewdidFromLink(aLink) {aLink.search(/\?newdid=(\d+)/);return RegExp.$1;};
	function getDR(race) {var tt = 1;switch (race) {case "Teutons" : tt = 11; break; case "Gauls" : tt = 21; break;}; return tt;};
	function setOfferFilter(aOffer, aFilter) {$at(aOffer, [['style', 'display:none;'], ["filtro" + aFilter, "on"]]);};
	function isPostNPC() {return $xf('//p/following-sibling::*/img[starts-with(@class,"r")] | //p[@class="txt_menue"]/following-sibling::*/img[starts-with(@class,"r")] | //p[@class="txt_menue"]/following-sibling::*/img[@class="res"]', 'r').snapshotLength == 8;};//check if we are on the page where the NPC trade has been finished
	function toJSvoid() {aX = $xf("//a[@href='#']", 'l'); for (var i = 0; i < aX.snapshotLength; i++) aX.snapshotItem(i).href = jsVoid;};//convert # links to jsVoid
	function id2xy(vid) {var arrXY = new Array; var ivid = parseInt10(vid); arrXY[0] = (ivid%801?(ivid%801)-401:400); arrXY[1] = 400 - (ivid - 401 - arrXY[0]) / 801; return arrXY;};//Inverse function for xy2id(x,y) => id2xy(vid) - fr3nchlover
	function addFillTimeRow() {var tbe = $g('l4').parentNode.parentNode; var tbecn1 = tbe.childNodes[0]; var aRow = getFillTimeRow(); tbe.insertBefore(aRow, tbecn1);};//add the fill time row
	function getBootyCellInfo(booty) {iHTML = ''; for (var i = 0; i < 4; i++) {iHTML += gIc["r" + (i + 1)] + booty[i] + (i < 3 ? ' + ' : ' = ' + booty[4]);}; return iHTML;};
	function getRPDefAction() {switch (parseInt10(TB3O.O[49])) {case 1: dRPA = 'att_all_1'; break; case 2: dRPA = 'att_all_2'; break; default: dRPA = 'def1_1'; break;}; return dRPA;};
	function showDeleteAccount(){var aP = $xf("//*[@class='deltimer'] | //p[parent::div[@id='" + ID_LEFT + "'] and @style]"); if (aP) {moveElement(aP, document.body); $at(aP, [['class', 'delacc']]);};};
	function insertNPCHistoryLink() {var bname = getQueryParameters(urlNow, NPCbacklinkName); if (!bname) bname = "Go back"; var div = $g(ID_MID2); div.innerHTML += '<p>&nbsp;<a href="#" onclick="window.history.go(-2)"> &laquo; ' + bname + '</a></p>';};//insert the NPC assistant back link
	function pauseScript(ms) {var ms1 = getRndTime(ms); var aDate = new Date(); var crtDate = new Date(); do {crtDate = new Date();} while (crtDate - aDate < ms1);};
	
	function getLanguageAndPlusStatus() {
		var iP = $g("logo");
		var ahref;
		if (iP) {
			if (iP.nodeName == "A") {
				if (iP.firstChild && iP.firstChild.className == "logo_plus") TB3O.plAc = true;
				ahref = iP.href;
				TB3O.M35 = 2;
			} else if (iP.nodeName == "IMG") {
				if (iP.className && (iP.className == "plus" || iP.className == "logo_plus")) TB3O.plAc = true;
				ahref = iP.parentNode.href;
				TB3O.M35 = 1;
			};
			if (ahref) {
				aLang = ahref.split(".");
				TB3O.lng = aLang[aLang.length - 1].replace("/", "");
			};
			ahref = null;
		} else {
			//T3.1
			iP = $xf("//img[contains(@src, 'plus.gif')]");
			if (iP) {
				iP.src.search(/\/img\/([^\/]+)\//);
				TB3O.lng = RegExp.$1.substring(0,2);
			};
			if ($xf("//img[contains(@src, 'travian1.gif')]")) TB3O.plAc = true;
		};
		iP = null; ahref = null;
	};

	/**
	 * Create the path of the image, taking into account a local GP
	 * Params: ref Relative path of the image
	 * Returns: Absolute path of the image
	 */
	function img(ref, ld) {
		var imgPath = '';
		if (TB3O.T35 == true) imgPath = (!ld ? TB3O.localGP + "img/" + ref : TB3O.localGP + "img/lang/" + TB3O.lng + '/' + ref); else imgPath = (!ld ? TB3O.localGP + "img/un/" + ref : TB3O.localGP + "img/" + TB3O.lng + '/' + ref);
		return imgPath;
	};

	function calculateTime(needed){
		var maxTime = 0;
		var aTime = 0;
		for (var i = 0; i < 4; i++){
			restante = needed[i] - crtResUnits[i];
			if (restante > 0){
				aTime = Math.round(restante / (prodPerHour[i] / 3600));
				if (aTime > maxTime) maxTime = aTime;
				if (aTime < 0) maxTime = 'Infinity';
			};
		};
		if (maxTime > 0 && maxTime != 'Infinity') maxTime = formatTimeSpan(maxTime + 5, 0);//5 sec delay for JS timers
		return maxTime;
	};

	//change the browser title, get active village coords and coords for the cell/oasis/village opened from the map
	function getCrtLocation() {
		crtLocTitle = '';
		var locX;
		
		if (crtPage.indexOf('dorf3') != -1) {
			//the dorf3 page
			TB3O.xCrt = actV.vx;
			TB3O.yCrt = actV.vy;
			crtLocTitle = T("ALDEAS") + " (" + TB3O.xCrt + "|" + TB3O.yCrt + ")";
		} else {
			locX = $xf("//h1");
			locXx = $xf("//span[@id='x']");
			locXy = $xf("//span[@id='y']");

			if (locXx) TB3O.xCrt = parseInt10(locXx.textContent);
			if (locXy) TB3O.yCrt = parseInt10(locXy.textContent);

			if (locX && !locXx && !locXy) {
				aH = new Array();
				theName = locX.textContent;
				ipLast = theName.lastIndexOf(")");
				if (ipLast + 1 == theName.length || ipLast + 2 == theName.length) {
					if (ipLast > 0) theName = theName.substring(0, ipLast + 1);
					ipLast = theName.lastIndexOf("(");
					if (ipLast != -1) {
						aH[0] = theName.substring(0, ipLast);
						aH[1] = theName.substr(ipLast + 1);
					} else aH[0] = theName;
					crtLocTitle = aH[0];
					if (aH.length > 1) {
						strXY = aH[1].replace(")", "").replace(" ", "").replace(" ", "");
						aCoord = strXY.split("|");
						TB3O.xCrt = parseInt10(aCoord[0]);
						TB3O.yCrt = parseInt10(aCoord[1]);
						crtLocTitle += " (" + TB3O.xCrt + "|" + TB3O.yCrt + ")";
					} else {
						TB3O.xCrt = actV.vx;
						TB3O.yCrt = actV.vy;
						strXY = "(" + TB3O.xCrt + "|" + TB3O.yCrt + ")";
						if (crtLocTitle.indexOf(strXY) == -1) crtLocTitle += " " + strXY;
					};
				} else {
					TB3O.xCrt = actV.vx;
					TB3O.yCrt = actV.vy;
					crtLocTitle = theName + " (" + TB3O.xCrt + "|" + TB3O.yCrt + ")";
				};
			} else {
				if (locX != null) {
					crtLocTitle = locX.textContent;
					strXY = "(" + TB3O.xCrt + "|" + TB3O.yCrt + ")";
					if (crtLocTitle.indexOf(strXY) == -1) crtLocTitle += " " + strXY;
				};
			};
		};
		//change browser title
		TB3O.BrT = crtLocTitle.replace(/\n/g, "");
		document.title += " - " + TB3O.BrT;
		return true;
	};

	//just to add the time tables for troops and merchants
	function quickCity() {
		var formInput = $xf("//form[@name='snd']");
		if (!formInput) return;
		if (crtPage.indexOf('a2b.php') != -1 || crtPage.indexOf('karte.php?d=') != -1) {
			var x = null;
			var y = null;
			strSearch = "//form[@name='snd']";
			aForm = $xf(strSearch);
			if (aForm) {x = $xf(strSearch + "//input[@name='x']"); y = $xf(strSearch + "//input[@name='y']");};
			if (x) x.addEventListener('keyup', function() {captureDestination();}, 0);
			if (y) y.addEventListener('keyup', function() {captureDestination();}, 0);
			if (crtPage.indexOf('a2b.php?z=') != -1 || (crtPage.indexOf('a2b.php?newdid=') != -1 && crtPage.indexOf('z=') != -1)) captureDestination();
		};

		function captureDestination() {
			var xD = x.value;
			var yD = y.value;
			var parOK = null;
			var oldTb = $g("trooptimetable");
			if (xD != "" && yD != "") {
				if (oldTb) {parOK = oldTb.parentNode; oldTb.parentNode.removeChild(oldTb);};
				//compatibility to Travian Battle Analyser
				if (!parOK) {parOK = $xf("//form[@name='snd']/p[4] | //form[@name='snd']/p[3]"); if (!parOK) {bOK = $g("btn_ok"); if (bOK) {parOK = $e("P", ""); bOK.parentNode.appendChild(parOK);};};};
				createTimeTroopTable(parOK, xD, yD, true);
			} else {if (oldTb) oldTb.style.visibility = "hidden";};
			return;
		};
	};

	function sortTable(sTableID, iCol, sDataType) {
		return function(){
			var oTb = $g(sTableID);
			var oB = oTb.tBodies[0];
			var arR = oB.rows;
			var aTRs = new Array;
			for (var i = 0; i < arR.length; i++) aTRs[i] = arR[i];
			if (oTb.getAttribute("sortCol") == iCol) aTRs.reverse(); else aTRs.sort(generateCompareTRs(iCol, sDataType));
			var oFrg = document.createDocumentFragment();
			for (var i = 0; i < aTRs.length; i++) oFrg.appendChild(aTRs[i]);
			oB.appendChild(oFrg);
			$at(oTb, [['sortCol', iCol]]);
			aTRs = null; arR = null; oB = null; oTb = null;
		};
	};

	function convert(aE, sDataType) {
		switch(sDataType) {
			case "int": return ((aE.nodeValue == null) || !aE.nodeValue.match(/\d+/)) ? 0 : parseInt10(aE.nodeValue);
			case "float": return ((aE.nodeValue == null) || !aE.nodeValue.match(/\d+/)) ? 0 : parseFloat(aE.nodeValue);
			default: return (aE == null) ? '' : aE.textContent.toLowerCase();
		};
	};

	function generateCompareTRs(iCol, sDataType) {
		return function compareTRs(oTR1, oTR2) {
			var v1 = convert(oTR1.cells[iCol].firstChild, sDataType);
			var v2 = convert(oTR2.cells[iCol].firstChild, sDataType);
			if (v1 < v2) return -1; else if (v1 > v2) return 1; else return 0;
		};
	};

	function getTroopsDetails(qDist, xRace, evTS) {
		arX = [qDist, 0, 0, 1, 1];
		if (evTS == true) {if (TB3O.d2spB[6] != 0) {arX[2] = parseInt10(TB3O.d2spB[6]); if (qDist > 30) {arX[0] = 30; arX[1] = qDist - 30;};};};//get the tournament square level
		arX[3] = getDR(xRace);//troop image ZERO index
		arX[4] = TB3O.nTroopSpeedFactor[TB3O.nServerType]; //multiplier for speed servers
		return arX;
	};

	function createTimeTroopTable(pNode, x2, y2, bAR) {
		var aTb = $t([['id', 'mhtt'],['style', 'width:350px;']]);
		aTb.innerHTML = getTroopMerchantTooltipHTML(xy2id(x2, y2), true, true, true, bAR, false);
		var aD = $d("", [['id', 'trooptimetable']]);
		aD.appendChild(aTb);
		pNode.appendChild(aD);
	};

	function prepareDivDocking() {
		var dD = $g(ID_LRIGHT1);
		if (!dD){dD = $d("", [["id", ID_LRIGHT1]]); $g(ID_MID).appendChild(dD);};
		if (dD) {TB3O.nTAUb = dD; TB3O.nTANb = dD; TB3O.nTARbT = dD; TB3O.nTASb = dD;};
		dD = null;
	};
	
	function addVillageNamesScript() {
		//own villages for market & rally point send pages
		isAddV = $g("build");
		if (!isAddV) isAddV = $xf('//form[@name="snd" and @action="a2b.php"]');
		iDN = document.getElementsByName("dname");
		if (isAddV && iDN.length > 0) {
			dorfnamen = $e("script");
			dorfnamen.setAttribute("language", "JavaScript");
			iHTML = 'var dorfnamen = new Array(' + vNames.substring(0, vNames.lastIndexOf(',')) + ')';
			dorfnamen.innerHTML = iHTML;
			isAddV.appendChild(dorfnamen);
			iDN[0].setAttribute("onkeyup", "my_village()");
		};
	};
	
	function getTroopsAttDefInfoTable(tNTroops, bMap, bMin) {
		if (!tNTroops) return '';
		tNinfo = [0, 0, 0, 0];
		iHTML = '';
		bInfo = false;
		strMinInfo = '';
		strMinX = '';
		if (!tNTroops.rows) return iHTML;
		for (var i = 0; i < tNTroops.rows.length; i++) {
			aRow = tNTroops.rows[i];
			aImg = aRow.cells[0].firstChild;
			if (aImg.nodeName != 'IMG') aImg = aRow.cells[0].firstChild.firstChild;
			if (aImg && aImg.src) {
				index = getTroopIndexTitleFromImg(aImg)[0];
				if (!isNaN(index) && index > 0) {
					if (bMap) {
						imgHTML = '<img class="' + aImg.className + '" src="' + xGIF + '">';
						if (TB3O.T35 == false) imgHTML = "<img src=" + aRow.childNodes[0].firstChild.src + ">";
						iHTML += "<tr><td style='text-align:" + docDir[0] + ";'>" + imgHTML + "</td><td style='text-align:" + docDir[1] + ";'>" + aRow.cells[1].textContent + "</td></tr>";
					};
					tNo = parseInt10(aRow.cells[1].textContent);
					tNinfo[0] += tNo * uc[index][5];
					tNinfo[1] += tNo * uc[index][6];
					tNinfo[2] += tNo * uc[index][7];
					tNinfo[3] += tNo * uc[index][9];
					bInfo = true;
				} else tNinfo[3] += 6; //hero
			} else if (crtPage.indexOf("dorf1.php") != -1) iHTML += "<tr><td>" + aRow.cells[0].textContent + "</td></tr>";
		};
		if (bInfo == true) {
			if (tNinfo[0] != 0 + tNinfo[1] + tNinfo[2] > 0) {
				if (bMap == true) iHTML += "<tr><td>&nbsp;</td></tr>";
				if (bMin == true) {strMinInfo = "* = " + T('MIN'); strMinX = "*"; iHTML += "<tr><td colspan='2' style='font-weight:bold; text-align:center;'>" + T('STAT') + "</td></tr>";};
				iHTML += "<tr><td style='text-align:" + docDir[0] + ";'>" + gIc["att_all"] + strMinX + "</td><td style='text-align:" + docDir[1] + ";'>&nbsp;" + $ls(tNinfo[0]) + "</td></tr>";
				iHTML += "<tr><td style='text-align:" + docDir[0] + ";'>" + gIc["def_i"] + strMinX + "</td><td style='text-align:" + docDir[1] + ";'>&nbsp;" + $ls(tNinfo[1]) + "</td></tr>";
				iHTML += "<tr><td style='text-align:" + docDir[0] + ";'>" + gIc["def_c"] + strMinX + "</td><td style='text-align:" + docDir[1] + ";'>&nbsp;" + $ls(tNinfo[2]) + "</td></tr>";
				iHTML += "<tr><td style='text-align:" + docDir[0] + ";'>" + gIc["r5"] + "</td><td style='text-align:" + docDir[1] + ";'>&nbsp;" + $ls(tNinfo[3]) + "</td></tr>";
				if (bMin == true) iHTML += "<tr><td colspan='2' style='text-align:" + docDir[0] + "; font-size:8pt;'>" + strMinInfo + "</td></tr>";
			};
		};
		return iHTML;
	};

	function addTroopTimes() {
		//append the distance and time for the case the user opened a cell from the map
		if (TB3O.xCrt != -1000 && TB3O.yCrt != -1000 && TB3O.O[57] == "1") {
			lastRowActions = $g('options');
			if (!lastRowActions) {
				idType = '@id';
				if (TB3O.T35 == false) idType = '@class';
				lastRowActions = $xf("//div[" + idType + "='map_details_actions']");
			};
			if (lastRowActions) {
				createTimeTroopTable(lastRowActions, TB3O.xCrt, TB3O.yCrt, true);
				imgOasis = $xf("//img[starts-with(@class, 'w')] | //img[starts-with(@id, 'w')]");
				if (!imgOasis) imgOasis = $g("resfeld");
				if (imgOasis) {
					//we are probably inside an oasis
					if (TB3O.T35 == true) {
						tNTroops = $xf("//div[@id='map_details_troops']//table");
						if (tNTroops) {tNTroopsS = tNTroops.childNodes[1];} else {tNTroops = $xf("//table[@id='troop_info']"); if (tNTroops) tNTroopsS = tNTroops.childNodes[3];};
					} else {
						tNTroops = $xf("//table[@class='f10']");
						if (tNTroops) tNTroopsS = tNTroops.childNodes[0];
					};
					if (tNTroopsS) {
						tNInfo = getTroopsAttDefInfoTable(tNTroopsS, false);
						if (tNInfo != '') {
							if (tNTroops.id && tNTroops.id == 'troop_info') {
								//tNTroops.innerHTML += tNInfo;
								var aTb = $t([['id', 'mhtt'], ['style', 'width:150px;']]);
								aTb.innerHTML = tNInfo;
								tNTroops.parentNode.appendChild(aTb);
							} else {
								tNInfoT = $t([['class', 'b'], ['style', 'width:100px; border:0px none white']]);
								tNInfoT.innerHTML = tNInfo;
								aPar = $e("P", "");
								aPar.appendChild(tNInfoT);
								tNTroops.parentNode.appendChild(aPar);
							};
						};
					};
				};
			};
		};
	};

	function getTroopMerchantTooltipHTML(vID, addCoords, addMTime, addTTime, bAR, bDist) {
		var iHTML = "";
		xy = id2xy(vID);
		qDist = getDistance(xy[0], xy[1], actV.vx, actV.vy);
		//add dest coords
		if (bDist == true) {var xyRow = $r(); xyRow.appendChild($c("(" + xy[0] + "|" + xy[1] + ")", [['class', 'dec'], ['colspan', '2']])); iHTML = "<tr>" + xyRow.innerHTML + "</tr>";};
		//add the distance row
		strDist = '';
		aRow = $r();
		aCell = $c("", [['class', 'center']]);
		aCell.appendChild($img([['src', image["dist" + docDir[0].substr(0,1)]]]));
		aRow.appendChild(aCell);

		if (qDist != 0) {
			aRow.appendChild($c(qDist.toFixed(2), [['class', 'mCol']]));
			if (addCoords == true) strDist = "(" + actV.vx + "|" + actV.vy + ") " + "<img src= '" + image["dist" + docDir[0].substr(0,1)] + "'>" + " (" + xy[0] + "|" + xy[1] + ")";
			if (strDist != "") {
				c1Cell = $c("&nbsp;&nbsp;");
				cCell = $c(strDist, [['class', 'mCol'], ['colspan', bAR == true ? '5' : '1']]);
				aRow.appendChild(c1Cell);
				aRow.appendChild(cCell);
			};
			iHTML += "<tr>" + aRow.innerHTML + "</tr>";
		};
		if (strDist != '') strDist = "<td></td>";

		if (TB3O.U[1] != '' && qDist != 0) {
			switch (TB3O.U[1]) {
				case avRace[0]: arrRaces = [avRace[1], avRace[2]]; break;
				case avRace[1]: arrRaces = [avRace[0], avRace[2]]; break;
				case avRace[2]: arrRaces = [avRace[0], avRace[1]]; break;
			};
			aColspan = '';
			aAlign = '';
			if (addTTime == true) {aColspan = "colspan='2' "; aAlign = "class='center' ";};
			clockCell = "<td " + aColspan + aAlign + gIc["clock"] + "</td> ";
			if (addTTime == true) {
				//add the clock row
				iHTML += "<tr>" + clockCell;
				clockCell = '';
				if (bAR == true) iHTML += "<td colspan='6'</td>";
				iHTML += "</tr>";
			};
			if (addMTime == true) {
				//add the merchant row
				aTime = getMerchantTime(qDist, TB3O.U[1]);
				aMalign = docDir[1];
				iHTML += "<tr>" + clockCell + "<td class='ld'>" + gIc["merchant"] + "</td><td class='mCol'> " + formatTimeSpan(aTime, 0) + " h</td>" + strDist;
				if (bAR == true) {
					aTime = getMerchantTime(qDist, arrRaces[0]);
					iHTML += "<td class='ld'>" + gIc["merchant"] + "</td><td class='mCol'> " + formatTimeSpan(aTime, 0) + " h</td><td></td>";
					aTime = getMerchantTime(qDist, arrRaces[1]);
					iHTML += "<td class='ld'>" + gIc["merchant"] + "</td><td class='mCol'> " + formatTimeSpan(aTime, 0) + " h</td>";
				};
				iHTML += "</tr>";
			};
			if (addTTime == true) {
				//add the troop rows
				var arX = getTroopsDetails(qDist, TB3O.U[1], true);
				var arY = getTroopsDetails(qDist, arrRaces[0], false);
				var arZ = getTroopsDetails(qDist, arrRaces[1], false);
				for (var iTT = 0; iTT < 10; iTT++) {
					imgNo = iTT + arX[3];
					aTime = getTroopTime(iTT, TB3O.U[1], arX);
					iHTML += "<tr><td class='ld'><img " + (TB3O.T35 == true ? 'class="unit u' + imgNo + '" src="' + xGIF + '"' : "src='" + gIc["u" + imgNo] + "'") + "></td><td>" + "&nbsp;" + formatTimeSpan(aTime, 0) + " h</td>" + strDist;
					if (bAR == true) {
						imgNo = iTT + arY[3];
						aTime = getTroopTime(iTT, arrRaces[0], arY);
						iHTML += "<td class='ld'><img " + (TB3O.T35 == true ? 'class="unit u' + imgNo + '" src="' + xGIF + '"' : "src='" + gIc["u" + imgNo] + "'") + "></td><td>" + "&nbsp;" + formatTimeSpan(aTime, 0) + " h</td><td>&nbsp;&nbsp;&nbsp</td>";
						imgNo = iTT + arZ[3];
						aTime = getTroopTime(iTT, arrRaces[1], arZ);
						iHTML += "<td class='ld'><img " + (TB3O.T35 == true ? 'class="unit u' + imgNo + '" src="' + xGIF + '"' : "src='" + gIc["u" + imgNo] + "'") + "></td><td>" + "&nbsp;" + formatTimeSpan(aTime, 0) + " h</td>";
					};
					iHTML += "</tr>";
				};
			};
		};
		return iHTML;
	};

	//show hero extended status
	function showHeroStatus() {
		hmLink = $xf("//div[@id='" + ID_MID2 + "']//a[contains(@href, '&rename')]");
		if (!hmLink) return;
		hoT = hmLink.parentNode.parentNode.parentNode.parentNode;
		posType = hoT.rows[0].cells[0].textContent.indexOf(" (");
		hHeader = hoT.rows[0].cells[0].textContent.substr(0, posType);
		hABonus = hoT.rows[3].cells[1].textContent.replace("%", "");
		setGMcookie("heroV", hABonus, false);
		xLevel = "";
		notgata = true;
		for (xi = hHeader.length; xi > 0; xi--) {if (hHeader.charAt(xi) != " " && notgata) xLevel = hHeader.charAt(xi) + xLevel; else notgata = false;};
		hLevel = parseInt10(xLevel);
		hPercent = parseInt10(hoT.rows[hoT.rows.length - 1].cells[1].textContent);
		crtExp = (hLevel + 1) * 100;
		crtLevelExp = ((crtExp) / 2) * hLevel;
		nextLevelExp = crtLevelExp + crtExp;
		expGainedCrtLevel = (hLevel+1) * hPercent;
		expToLevelUp = (hLevel + 1) * (100 - hPercent);
		strLevel = hoT.rows[0].cells[0].childNodes[1].textContent;
		strLevel = strLevel.substr(0, strLevel.indexOf(hLevel) - 1);
		xRow = $r([['style', 'background-color:transparent;']]);
		hCell = $c("", [['colSpan', '5'], ['style', 'padding:1px 2px 1px 1px; margin:0px;']]);
		hTable = $t([['class', 'tb3tb'], ['style', 'border:1px solid silver; width:100%']]);
		aRow = $r();
		aRow.appendChild($c(strLevel + " " + hLevel, [['class', 'tb3cbt']]));
		aRow.appendChild($c("" + hPercent + "%", [['class', 'tb3cbt']]));
		aRow.appendChild($c("" + (100 - hPercent) + "%", [['class', 'tb3cbt']]));
		aRow.appendChild($c(strLevel + " " + (hLevel + 1), [['class', 'tb3cbt']]));
		bRow = $r();
		a1Cell = $c('', [['style', 'width:100px;'], ['class', 'tb3cbt']]);
		bRow.appendChild(a1Cell);
		b1Cell = $c('', [['colSpan', 2], ['style', 'padding:2px 2px 1px 2px; border:0px none transparent; margin:0px;']]);
		bRow.appendChild(b1Cell);
		graphBar = $t([['style', 'height:16px; width:100%; margin:0px; border:0px none transparent; border-collapse:collapse;']]);
		rX = $r([['style', 'border:0px none transparent; padding:0px; margin:0px;']]);
		x1Cell = $c('', [['style', 'width: ' + hPercent + '%; background-color:blue; padding:0px; border:0px none transparent; margin:0px;']]);
		x2Cell = $c('', [['style', 'width: ' + (100 - hPercent) + '%; background-color:lightgrey; padding:0px; border:0px none transparent; margin:0px']]);
		rX.appendChild(x1Cell);
		rX.appendChild(x2Cell);
		graphBar.appendChild(rX);
		b1Cell.appendChild(graphBar);
		c1Cell = $c('', [['colSpan', 2], ['class','tb3cbt']]);
		bRow.appendChild(c1Cell);
		cRow = $r();
		a2Cell = $c(crtLevelExp, [['class', 'tb3cbt']]);
		cRow.appendChild(a2Cell);
		b2Cell = $c(expGainedCrtLevel, [['title', "" + crtLevelExp + " + " + expGainedCrtLevel + " = " + (crtLevelExp + expGainedCrtLevel)], ['class', 'tb3cbt']]);
		cRow.appendChild(b2Cell);
		c2Cell = $c(expToLevelUp, [['class', 'tb3cbt']]);
		cRow.appendChild(c2Cell);
		d2Cell = $c(nextLevelExp, [['class', 'tb3cbt']]);
		cRow.appendChild(d2Cell);
		hTable.appendChild(aRow);
		hTable.appendChild(bRow);
		hTable.appendChild(cRow);
		hCell.appendChild(hTable);
		xRow.appendChild(hCell);
		hoT.appendChild(xRow);
	};

	//fill in the NPC Merchant fields
	function fillinNPCfields(aURL) {
		var sumRes = parseInt10(document.getElementById('org4').innerHTML);
		var rm1 = parseInt10(getQueryParameters(aURL, 'r1'));
		var rm2 = parseInt10(getQueryParameters(aURL, 'r2'));
		var rm3 = parseInt10(getQueryParameters(aURL, 'r3'));
		var rm4 = parseInt10(getQueryParameters(aURL, 'r4'));
		rm1_0 = rm1; rm2_0 = rm2; rm3_0 = rm3; rm4_0 = rm4;
		while(rm1_0 + rm2_0 + rm3_0 + rm4_0 + rm1 + rm2 + rm3 + rm4 < sumRes )  {
			rm1_0 += rm1;
			rm2_0 += rm2;
			rm3_0 += rm3;
			rm4_0 += rm4;
		}
		urlNPCback = addQueryParameter(NPCURL, 'bid', getQueryParameters(window.location.href,'bid'));
		urlNPCback = addQueryParameter(urlNPCback, 'r1', rm1_0);
		urlNPCback = addQueryParameter(urlNPCback, 'r2', rm2_0);
		urlNPCback = addQueryParameter(urlNPCback, 'r3', rm3_0);
		urlNPCback = addQueryParameter(urlNPCback, 'r4', rm4_0);

		document.getElementById("submitText").innerHTML += "<br><a href='"+urlNPCback+"'>Increse same Distribute resources :</a>";

		if (aURL.indexOf('&' + NPCResources) != NPCURL.length) return false;
		var needed = getQueryParameters(aURL, NPCResources).split(',');
		var inputs = document.getElementsByName('m2[]');
		for (var i = 0; i < 4; i++) {inputs[i].value = needed[i];};
		unsafeWindow.calculateRest();
	};

	function getTroopsToBeTrained() {
		var xp = $xf('//input[starts-with(@id, "inputTroopNo_")]', 'r');
		if (xp.snapshotLength > 0) {
			var inputs = new Array();
			for (var i = 0; i < xp.snapshotLength; i++) {
				var f = xp.snapshotItem(i).value;
				inputs.push(f.length == 0 || isNaN(f) ? 0 : parseInt10(f));
			};
			return inputs;
		} else return;
	};

	function parseURL(aURL) {
		var urlParts = aURL.split('?', 2);
		if (urlParts.length == 1) urlParts[1] = '';
		var parts = {path: urlParts[0], query: urlParts[1]};
		return parts;
	};

	function getQueryParameters(aURL, param) {
		var urlParts = parseURL(aURL).query.split('&');
		for (var i = 0; i < urlParts.length; i++) {
			var ki = urlParts[i].split('=');
			if (ki[0] == param) return decodeURIComponent(ki[1]);
		};
	};

	function addQueryParameter(aURL, param, aVal) {
		var add_pair = param + '=' + encodeURIComponent(aVal);
		var added = false;
		var urlParts = parseURL(aURL);
		var pairs = urlParts.query.split('&');
		for (var i = 0; i < pairs.length; i++) {
			var ki = pairs[i].split('=');
			if (ki[0] == param) {
				pairs[i] = add_pair;
				added = true;
				break;
			};
		};
		if (!added) pairs.push(add_pair);
		return urlParts.path + '?' + pairs.join('&');
	};

	function NPCUpdate() {
		var arrTrain = null;
		//NPC for buildings/resource fields/armoury/blacksmith/town hall/academy
		xpNeeded = $xf("//*[@id='npcXX_1']", 'r');
		if (xpNeeded.snapshotLength != 0) NPCAssistant(1, xpNeeded, arrTrain);
		if (TB3O.isTtB == true && document.getElementsByName('s1').length > 0) arrTrain = getTroopsToBeTrained();
		xpNeeded = $xf('//*[starts-with(@id, "npc_tt_r")]', 'r');
		if (xpNeeded.snapshotLength == 0) xpNeeded = $xf('//*[starts-with(@id,"NPCTT")]', 'r');
		if (xpNeeded.snapshotLength != 0) NPCAssistant(2, xpNeeded, arrTrain);
	};
	
	
	function setTroopsNPC() {
		var aX = $xf('//div[@id="' + ID_MID2 + '"]//table[@class="build_details"]//td[@class="desc"]', 'l');
		for (var i = 0; i < aX.snapshotLength; i++) {var tdX = aX.snapshotItem(i); $at(tdX, [['id', 'NPCTT_' + (i + 1)]]); getRequiredRes(tdX);};
	};

	
	//function for the NPC entries on pages where an NCP trade is possible
	function NPCAssistant(typeNPC, xpNeeded, arrTrain) {
		//Needed resources
		for (var i = 0; i < xpNeeded.snapshotLength; i++) {
			td = xpNeeded.snapshotItem(i);
			var arrayRes;
			if (typeNPC == 1) arrayRes = getRequiredRes(td); else if (typeNPC == 2) arrayRes = arrTtT[i].aRes;
			if (arrayRes == null || arrayRes.length < 4) continue;
			//Read needed resources and calculate total
			needRes = new Array();
			needResTotal = 0;
			for (var j = 0; j < 4; j++) {
				needRes.push(arrTrain ? arrayRes[j] * arrTrain[i] : arrayRes[j]);
				needResTotal += arrayRes[j];
			};
			//fr3nchlover
			neededTotal = (arrTrain && arrTrain[i] != 0 ? needResTotal * arrTrain[i] : needResTotal);
			//Get or create HTML container
			container_id = 'npcXX_' + typeNPC + '_' + i;
			container = $g(container_id);
			if (container == null) {
				if (td.nodeName == "DIV") td = td.parentNode;
				td.innerHTML += '<br>';
				if (needResTotal > 20000  && typeNPC == 2) td.innerHTML += "<br>";
				td.innerHTML += '<div id="' + container_id + '" class="npc-general"> </div>';
				container = $g(container_id);
			};
			//Show total & deficit/surplus
			r = crtResUnits[4] - neededTotal;
			r_s = '[' + r + ']';
			if (r < 0) r_s = '<span class="npc-red">[' + r + ']</span>'; else if (r > 0) r_s = '<span class="npc-green">[+' + r + ']</span>';
			container.innerHTML = '<b>' + T("TOTAL") + '</b>: ' + neededTotal + ' ' + r_s;

			// Show time estimate
			dtNow = new Date();
			dtEstimated = new Date();
			if (neededTotal > 0 && r < 0) {
				sEst = Math.ceil(Math.abs(r) / (prodPerHour[5] / 3600));
				dtEstimated.setTime(dtNow.getTime() + (sEst * 1000));
				formatDtEstimated =
					(dtEstimated.getDate() < 10 ? '0' + dtEstimated.getDate() : dtEstimated.getDate()) + '.' +
					(dtEstimated.getMonth() < 9 ? '0' + (dtEstimated.getMonth() + 1) : (dtEstimated.getMonth() + 1)) +
					(dtNow.getFullYear() < dtEstimated.getFullYear() ? dtEstimated.getYear() : '');
				if (dtEstimated.getDate() == dtNow.getDate() && dtEstimated.getMonth() == dtNow.getMonth()) formatDtEstimated = ""; else formatDtEstimated = '&nbsp;' + formatDtEstimated;
				formatTimeEstimated =
					(dtEstimated.getHours() < 10 ? '0' + dtEstimated.getHours() : dtEstimated.getHours()) + ':' +
					(dtEstimated.getMinutes() < 10 ? '0' + dtEstimated.getMinutes() : dtEstimated.getMinutes());
					container.innerHTML += ' | ' + T('LISTO') + '<span class="npc-red">' + formatDtEstimated + '&nbsp;' + '</span>' + T('AT') + '&nbsp;' + '<span class="npc-red">' + formatTimeEstimated + '</span>';
			};

			//Show time saved by NPC
			var time_saved = 0;

			if (neededTotal > 0) {
				for (var j = 0; j < 4; j++) {
					PpMt = prodPerHour[j] / 60;
					mUntilNPC = (dtEstimated.getTime() - dtNow.getTime()) / 1000 / 60;
					resAtNPCtime = parseInt10(crtResUnits[j]) + (mUntilNPC * PpMt);
					deficitUntilNPC = needRes[j] - resAtNPCtime;
					if (deficitUntilNPC <= 0) continue;
					if (PpMt <= 0) {time_saved = null; break;};
					diffCalc = Math.ceil(deficitUntilNPC / PpMt);
					if (diffCalc > time_saved) time_saved = diffCalc;
				};
			};

			if (time_saved == null) {
				container.innerHTML += ' | &#8734;';
			} else if (r < 0) {
			} else if (time_saved > 0) {
				diffHours = Math.floor(time_saved / 60);
				if (diffHours < 10) diffHours = "0" + diffHours;
				diffMinutes = time_saved % 60;
				if (diffMinutes < 10) diffMinutes = "0" + diffMinutes;
				delta_str = T('NPCSAVETIME') + '&nbsp;' + diffHours + ':' + diffMinutes + ' h';
				if (diffHours < 1) delta_str = '<span class="npc-red">' + delta_str + '</span>';
				container.innerHTML += ' | ' + delta_str;
			};
			// Show max.
			if (arrTrain) {
				maxY = Math.floor(crtResUnits[4] / needResTotal);
				container.innerHTML += ' | ' + T('MAX') + '. ';
				aLink = $a(maxY, [['href', jsVoid]]);
				aLink.addEventListener('click', clickOnNPCAssistant(i, maxY), false);
				container.appendChild(aLink);
			};
			// Show NPC link
			/*
			if (neededTotal > 0 && r >= 0 && (time_saved > 0 || time_saved == null) && TB3O.bIsNPCAvailable) {
				urlNPCback = addQueryParameter(NPCURL, NPCResources, needRes.join(','));
				urlNPCback = addQueryParameter(urlNPCback, NPCbacklinkName, TB3O.BrT);
				container.innerHTML += '&nbsp;<a href="' + urlNPCback + '"> &raquo; NPC</a>';
			};
			*/			
			if (neededTotal > 0 && r >= 0 && (time_saved > 0 || time_saved == null) && TB3O.bIsNPCAvailable) {
				//urlNPCback = addQueryParameter(NPCURL, NPCResources, needRes.join(','));
				//urlNPCback = addQueryParameter(urlNPCback, NPCbacklinkName, TB3O.BrT);
				var urlNPCback = addQueryParameter(NPCURL, 'bid', getQueryParameters(window.location.href,'id'));
				if(!getQueryParameters(window.location.href,'id'))  {urlNPCback = addQueryParameter(NPCURL, 'bid', getQueryParameters(window.location.href,'gid'));};
				for(var urli = 0; urli < needRes.length; urli++)  { urlNPCback = addQueryParameter(urlNPCback, 'r'+(urli+1), needRes[urli]);};
				container.innerHTML += '&nbsp;<a href="' + urlNPCback + '"> &raquo; NPC</a>';
			};
		};

		function clickOnNPCAssistant(i, maxY) {return function() {aI = $g("inputTroopNo_" + (i + 1)); if (aI) aI.value = maxY;};};
	};

	function getBootyFromTable(aTb) {
		retValue = [0,0,0,0,0];
		xi = 3;
		gata = false;
		while (xi < aTb.rows.length && !gata) {bootyCell = aTb.rows[xi].cells[1]; if (bootyCell.textContent.indexOf("|") != -1) gata = true; xi += 1;};
		if (gata) {
			resInfo = bootyCell;
			for (var xi = 0; xi < bootyCell.childNodes.length; xi++) {aChild = bootyCell.childNodes[xi]; if (aChild.className == "goods" || aChild.className == "res") resInfo = aChild;};
			aqBooty = resInfo.textContent.split("|");
			if (aqBooty.length > 1) {for (var i = 0; i < 4; i++) {retValue[i] = parseInt10(aqBooty[i].replace(" ", "").replace(" ", "")); retValue[4] += retValue[i];};};
			bootyCell.innerHTML = getBootyCellInfo(retValue);
		};
		return retValue;
	};
	
	function tableTotalVillageTroopsV3() {
		if (actV.vID != "") {
			//new search function
			//first search for tables, if search successfull then search for tables and oasis
			allTables = $xf("//div[@id='" + ID_MID2 + "']//table[@class='troop_details']//a[contains(@href, " + actV.vID + ")]/../../../..|//div[@id='" + ID_MID2 + "']/p[@class='b f16'] | //div[@id='" + ID_MID2 + "']//p[@class='info']", 'r');
			if (allTables.snapshotLength == 0) {
				allTables = $xf("//div[@id='" + ID_MID2 + "']//table[@class='std troop_details']//a[contains(@href, " + actV.vID + ")]/../../../..", 'r');
				if (allTables.snapshotLength == 0) {
					allTables = $xf("//div[@id='" + ID_MID2 + "']/table/tbody/tr/td[1]/a[contains(@href, " + actV.vID + ")]/../../../..", 'r');
					if (allTables.snapshotLength == 0) {allTables = $xf("//div[@id='" + ID_MID2 + "']/table/tbody/tr/td[1]/a[contains(@href, " + actV.vID + ")]/../../../..|//div[@id='" + ID_MID2 + "']/p[@class='b f16'] | //div[@id='" + ID_MID2 + "']//p[@class='info']", 'r');};
				} else {allTables = $xf("//div[@id='" + ID_MID2 + "']//table[@class='std troop_details']//a[contains(@href, " + actV.vID + ")]/../../../..|//div[@id='" + ID_MID2 + "']/p[@class='b f16'] | //div[@id='" + ID_MID2 + "']//p[@class='info']", 'r');};
			};

			if (allTables.snapshotLength > 0) {
				ntCc = 0;
				booty = [0,0,0,0,0];
				sumbooty = [0,0,0,0,0];
				ccLabel = getGMcookie("tvtccLabel", false);
				if (ccLabel == 'false') ccLabel = '';
				//horse drinking through level

				hdtLevel = 0;
				if (TB3O.d2spB.length > 8) TB3O.d2spB[8];
				//Search for first troop table from this village (david.macej)
				firstVillageTable = 0;
				while (allTables.snapshotItem(firstVillageTable).rows[0].cells[0].innerHTML.search(actV.vID) == -1) {firstVillageTable++;};

				tTable = allTables.snapshotItem(firstVillageTable).cloneNode(true);
				$at(tTable, [['class', 'allvtroops']]);
				booty = getBootyFromTable(allTables.snapshotItem(firstVillageTable));
				for (var xi = 0; xi < 5; xi++) {sumbooty[xi] += booty[xi];};
				tTable.rows[0].cells[1].innerHTML = '<b>' + T('TOTALTROOPS') + '</b>';
				tTable.rows[0].setAttribute("class", "cbgx");
				tTable.rows[0].cells[0].setAttribute('class', 'cbgx');
				tTable.rows[0].cells[1].setAttribute('class', 'cbgx');
				rowTrIcons = tTable.rows[1];
				rowTrUnits = tTable.rows[2];
				if (tTable.rows.length == 4) {
					rowCc = tTable.rows[3];
					rowB = $r();
					b1Cell = $c('<img src="' + image["capacity"] + '">', [['style', 'text-align:center;']]);
					strColspan = rowCc.cells[1].colSpan;
					b2Cell = $c("0", [['colspan', strColspan], ['id','tb3bountycell']]);
					rowB.appendChild(b1Cell);
					rowB.appendChild(b2Cell);
					rowCc.parentNode.insertBefore(rowB, rowCc);
				};
				rowB = tTable.rows[tTable.rows.length - 2];
				rowCc = tTable.rows[tTable.rows.length - 1];
				intCC = 0;

				for (var i = firstVillageTable + 1; i < allTables.snapshotLength; i++) {
					aTb = allTables.snapshotItem(i);
					if (aTb.nodeName == "P") break;

					//add the crop consumption label if found
					if (ccLabel == '') {
						lastCell = aTb.rows[aTb.rows.length - 1].cells[1];
						if (lastCell) {
							arrImg = lastCell.getElementsByTagName("IMG");
							if (arrImg.length > 0 && arrImg[0].className == 'r4') {ccLabel = aTb.rows[aTb.rows.length - 1].cells[0].innerHTML; setGMcookie("tvtccLabel", ccLabel, false);};
						};
					};

					//fix for the troops in oasis
					nSibling = aTb.nextSibling;
					if (nSibling && nSibling.nodeName == "P" && nSibling.className == 'b f16') i = allTables.snapshotLength;

					//fix provided by fr3nchlover
					allTroopCells = aTb.rows[2].cells;
					if (allTroopCells.length == 12) {
						heroIconCell = aTb.rows[1].cells[11];
						//add extra hero cell only if cell does not exist in total troop table (david.macej)
						if (rowTrIcons.cells.length == 11) {
							rowTrIcons.appendChild(heroIconCell.cloneNode(true)); //<= add a new cell to first line
							rowTrUnits.appendChild(allTroopCells[11].cloneNode(true)); //<= add a new cell to second line
							rowTrUnits.cells[11].innerHTML = ""; // clean new cell
							rowCc.cells[1].colSpan = 11; // add 1 to cols
							rowB.cells[1].colSpan = 11;
							$at(tTable.rows[0].cells[1], [['colspan', 12]]);
						};
					};

					 //if troops not in village stop summing (david.macej)
					if (aTb.rows[0].cells[0].innerHTML.search(actV.vID) == -1) continue;

					//add the troop units from the current table to the new created table
					if (aTb.rows[0].cells[0].textContent.indexOf(actV.vName) != -1) {
						for (var j = 1; j < allTroopCells.length; j++) {
							iHTML = rowTrUnits.cells[j].innerHTML;
							intTroops = parseInt10(allTroopCells[j].innerHTML);
							if (iHTML == "") rowTrUnits.cells[j].innerHTML = intTroops; else rowTrUnits.cells[j].innerHTML = parseInt10(iHTML) + intTroops;
						};
					} else {ntCc = 1;};
					booty = getBootyFromTable(aTb);
					for (var xi = 0; xi < 5; xi++) {sumbooty[xi] += booty[xi];};
				};
				//compute crop consumption
				arrTT = [0,0,0,0,0,0,0,0,0,0,0];
				for (var j = 1; j < rowTrUnits.cells.length; j++) {
					rowTrUnits.cells[j].className = (rowTrUnits.cells[j].innerHTML == "0") ? "c" : "";
					switch (j) {
						case 11: intCC += 6; arrTT[10] = 1; break;
						default:
							tImg = rowTrIcons.cells[j].getElementsByTagName("IMG");
							if (tImg[0]) {
								tType = getTroopIndexTitleFromImg(tImg[0])[0];
								arrTT[j - 1] = parseInt10(rowTrUnits.cells[j].textContent);
								ccCoef = 1;
								if (hdtLevel > 9 && tType == 4) ccCoef = 0.5;
								if (hdtLevel > 14 && tType == 5) ccCoef = 0.667;
								if (hdtLevel > 19 && tType == 6) ccCoef = 0.75;
								intCC += Math.ceil(uc[tType][9] * arrTT[j - 1] * ccCoef);
							} break;
					};
				};
				intCC += ntCc;
				setGMcookieV2("Troops", arrTT, actV.vNewdid);

				rowCc.cells[1].innerHTML = (intCC) + " " + gIc["r5"] + " / " + gIc["clock"];
				rowCc.cells[0].innerHTML = ccLabel;
				$at(rowCc.cells[0], [['style', 'background-color:#F3F3F3;']]);
				$at(rowCc.cells[1], [['style', 'background-color:#F3F3F3; text-align:' + docDir[0] + ';']]);

				if (sumbooty[4] != 0) rowB.cells[1].innerHTML = getBootyCellInfo(sumbooty); else rowB.style.display = 'none';

				if (TB3O.T35 == false) {
					p = $xf("//div[@id='" + ID_MID2 + "']/p[@class='txt_menue']", 'r').snapshotItem(0);
				} else {
					menu = $xf("//div[@id='" + ID_MID2 + "']/p/a", 'r');
					if (menu.snapshotLength > 0) p = menu.snapshotItem(0).parentNode; else p = $g("textmenu");
				};
				p.parentNode.insertBefore(tTable, p.nextSibling);

				newP = $e('P', '');
				newP.innerHTML += '<b>' + T('TOTALTROOPS') + '</b>';
				p.parentNode.insertBefore(newP, p.nextSibling);
				arrTT = null;
			};
		};
	};

	// TODO: i18n!
	function incomeAttackingFillter()	{
		var objH4 = document.getElementsByTagName('h4');
		var regt1 = new RegExp('Incoming troops');
		for (var i = 0; i < objH4.length; i++ )
		{
			if(regt1.test(objH4[i].innerHTML) ) {
						var ckLink = $a("&nbsp;"+gIc["att1"]+"&nbsp;", [['href', jsVoid],['title','Show only another incomming troops']]);
						ckLink.addEventListener('click', fillterIncommingAttack(), false);
						objH4[i].appendChild(ckLink);
						break;
			};
		};
	};

	// TODO: i18n!
	function fillterIncommingAttack() {
		return function() {
			var tableTags = document.getElementsByTagName('table');
			var regckt1= new RegExp('Return');
			//var regckt2 = new RegExp('Own troops');
			var regckt3 = /\u003f/;
			var regckt4 = new RegExp('Own troops');
			for (var i2=0; i2<tableTags.length; i2++) {
				//if (tableTags[i2].className == "troop_details" && regckt1.test(tableTags[i2].innerHTML)) {
				if (tableTags[i2].className == "troop_details" && regckt4.test(tableTags[i2].innerHTML)) {
					break;
				};
				if (tableTags[i2].className == "troop_details" && regckt1.test(tableTags[i2].innerHTML)) {
					tableTags[i2].style.display='none';
					//tableTags[i2].innerHTML = "";
				};
			};
			return false;
		};
	};

	function getDistance(sx1, sy1, sx2, sy2) {
		var x1 = parseInt10(sx1); var y1 = parseInt10(sy1); var x2 = parseInt10(sx2); var y2 = parseInt10(sy2);
		dX = Math.min(Math.abs(x2 - x1), Math.abs(801 - Math.abs(x2 - x1)));
		dY = Math.min(Math.abs(y2 - y1), Math.abs(801 - Math.abs(y2 - y1)));
		dist = Math.sqrt(Math.pow(dX, 2) + Math.pow(dY, 2));
		return dist;
	};

	//---
	//Modified by Lux
	function showMsgPage(aState) {
		scroll(0,0);
		var outerPane = $g('OuterMsgPage');
		var innerPane = $g('InnerMsgPage');
		if (aState) {
			diplayElements("none");
			outerPane.className = 'OuterMsgPageOn';
			innerPane.className = 'InnerMsgPageOn';
			var aButton = $g('ButtonCloseMsgPage');
			//ms99
			if (aButton) aButton.addEventListener("click", function(){showMsgPage(false)}, true);
		} else {
			outerPane.className = 'MsgPageOff';
			innerPane.className = 'MsgPageOff';
			diplayElements("");
		};
	};
	//---

	function addDiv() {
		div = $e("div");
		//ms99
		div.innerHTML = '<div id="OuterMsgPage" class="MsgPageOff"></div><div id="InnerMsgPage" class="MsgPageOff"></div>';
		document.body.insertBefore(div, document.body.firstChild);
	};

	function diplayElements(aType) {uTb = $g('upgTable'); mTb = $g('mapTable'); ttTb = $g('trooptimetable'); if (uTb) uTb.style.display = aType; if (mTb) mTb.style.display = aType;if (ttTb) ttTb.style.display = aType;};
	//---

	function adjustTtT() {
		var aTb = $xf("//table[@class='build_details']");
		if (aTb) {
			aTb.rows[0].appendChild($c(gIc["clock"] + " & " + gIc["r5"]));
			for (var xi = 1; xi < aTb.rows.length; xi++) aTb.rows[xi].appendChild($c("", [['id', 'TtT_' + xi]]));
			aTb.id = "selecttraintroops";
		};
	};
	
	function adjustTiT() {
		var titTb = $xf("//table[starts-with(@class, 'under')]");
		if (titTb) {
			var csp = titTb.rows[titTb.rows.length - 1].cells[0].getAttribute("colspan");
			//log(3, "csp = " + csp);
			var aCell = $c(T('TOTTRTR') + " & " + gIc["r5"], [['class', 'tb3chnb'], ["colspan", csp], ['style', 'text-align:center;']]);
			var aRow = $r();
			aRow.appendChild(aCell);
			titTb.appendChild(aRow);
			
			var arrTiT = new Array;
			
			for (var xi = 1; xi < titTb.rows.length - 2; xi++) {
				var aInf = titTb.rows[xi].cells[0];
				var aImg = aInf.getElementsByTagName("IMG")[0];
				var aX = getTroopIndexTitleFromImg(aImg);
				var intNo = parseInt10(aInf.textContent.replace(/\n/g, ""));
				gata = -1;
				for (var yi = 0; yi < arrTiT.length; yi++) {if (arrTiT[yi].tType == aX[0]) gata = yi;};
				if (gata > -1) arrTiT[gata].intNo += intNo; else {var aTiT = new yTiT(parseInt10(aX[0]), parseInt10(intNo), aX[1]); arrTiT[arrTiT.length] = aTiT;};
			};
			var TotCropCons = 0;
			var imgName;
			for (var xi = 0; xi < arrTiT.length; xi++) {
				TotCropCons += uc[arrTiT[xi].tType][9] * arrTiT[xi].intNo;//calculate the total crop consumtion for troops being trained		
				aRow = $r([['class', 'tb3rnb']]);
				if (TB3O.T35 != false) imgName = 'class="unit u' + arrTiT[xi].tType + '" src="' + xGIF + '"'; else imgName = "src='" + gIc["u" + arrTiT[xi].tType] + "'";
				aRow.appendChild($c("<img " + imgName + ">", [['style', 'background-color:' + TB3O.DFc[1] + '; border:0px none transparent;']]));
				aRow.appendChild($c(arrTiT[xi].strName, [['style', 'background-color:' + TB3O.DFc[1] + '; border:0px none transparent; font-size:8pt;']]));
				aRow.appendChild($c(arrTiT[xi].intNo, [['style', 'background-color:' + TB3O.DFc[1] + '; text-align:center; border:0px none transparent;']]));
				titTb.appendChild(aRow);
			};
			//crop consumption for training troops-matteo466
			var cRow = $r([['class', 'tb3rnb']]);
			cRow.appendChild($c(gIc["r5"] ,[["colspan", csp - 1], ['style', 'background-color:' + TB3O.DFc[1] + '; border:0px none transparent;']]));
			cRow.appendChild($c(TotCropCons, [['style', 'background-color:' + TB3O.DFc[1] + '; text-align:center; border:0px none transparent;']]));
			titTb.appendChild(cRow);
		};
	};
	
	function isThisTroopTrainingBuilding() {
		var retValue = false;
		var cValue = $xf("//input[starts-with(@name, 't') and (@type!='hidden')]", 'l');// | //input[starts-with(@name,'z')]");
		if (cValue.snapshotLength > 0) {
			var mValue = $xf("//td[@class='max']//a", 'l');
			var aValue = $xf("//div[@id='" + ID_MID2 + "']//img[starts-with(@class, 'unit')]");
			if ( aValue && mValue && 
			     cValue.snapshotLength === mValue.snapshotLength ) {
				for (var xi = 0; xi < cValue.snapshotLength; xi++) {
					var aInput = cValue.snapshotItem(xi);
					aInput.id = "inputTroopNo_" + (xi + 1);
					aInput.addEventListener("keyup", addTimeToTrainSelectedTroops, false);
					mValue.snapshotItem(xi).addEventListener("click", addTimeToTrainSelectedTroops, false);
				};
				adjustTtT();
				adjustTiT();
				retValue = true;
			};
		};
		return retValue;
	};

	function calculateResourceTime(need, pW, aLnk, cpB, ccB) {
		var maxTime = 0;
		var boolTb = false;
		var aTb = $t([['class', 'rNt'], ['style', 'width:' + pW + '%;']]);

		for (var i = 0; i < 4; i++){
			restante = parseInt10(need[i]) - crtResUnits[i];
			var sfz = restante > 100000 ? 'font-size:6pt;' : '';
			if (restante > 0) {
				tiempo = -1;
				if (prodPerHour[i] != 0) tiempo = Math.round(restante / (prodPerHour[i] / 3600));
				if (tiempo < 0 || capacity[i] - parseInt10(need[i]) < 0) {
					maxTime = 'Infinity';
					aCell = $c(gIc["r" + (i + 1)], [['class', 'center']]);
					bCell = $c(' ' + restante + ' ', [['id', 'timeout' + i], ['style', sfz]]);
					cCell = $c(' ' + T('NEVER') + ' ', [['style', sfz]]);
					boolTb = true;
				} else {
					if (tiempo > maxTime && maxTime !='Infinity') maxTime = tiempo;
					tiempo = formatTimeSpan(tiempo + 5, 0);
					aCell = $c(gIc["r" + (i + 1)], [['class', 'center']]);
					bCell = $c(' ' + restante +' ', [['id', 'timeout' + i], ['style', sfz]]);
					cCell = $c(' ' + tiempo + ' ', [['id', 'timeouta'], ['style', sfz]]);
					boolTb = true;
				};
				if (boolTb) {
					aRow = $r();
					aRow.appendChild(aCell);
					aRow.appendChild(bCell);
					aRow.appendChild(cCell);
					aTb.appendChild(aRow);
					aCell = null; bCell = null; cCell = null;
				};
			};
		};

		if (maxTime == 'Infinity'){
			xRow = $r();
			xRow.appendChild($c(T('LISTO'), [['colspan' ,"2"]]));
			xRow.appendChild($c(T('NEVER')));
			aTb.appendChild(xRow);
			boolTb = true;
		} else if (maxTime > 0) {
			tiempo2 = formatTimeSpan(maxTime + 5, 0); // a 5 seconds addition to compensate differences between JS timer and server
			aDate = new Date();
			aDate.setTime(aDate.getTime() + (maxTime * 1000));
			xRow = $r();
			txtDate = formatDateTimeRelative(maxTime, 0);
			xRow.appendChild($c(T('LISTO'), [['colspan', '2']]));
			xRow.appendChild($c(txtDate));
			aTb.appendChild(xRow);

			if (TB3O.O[36] == '1') {
				//added by Velonis Petros - start of addition - the until then row
				uthen = new Array(4);//obtained until the max time
				//residue row
				residue = new Array(4);//obtained until the max time
				for (var i = 0; i < 4; i++) {uthen[i] = crtResUnits[i] + Math.round(maxTime*prodPerHour[i]/3600); residue[i] = uthen[i] - parseInt10(need[i]);};
				uiHTML = createCRrows(T('RESOURCES') + " " + txtDate, uthen);
				riHTML = createCRrows(T('RESIDUE') + txtDate, residue);
				aTb.innerHTML += uiHTML;
				aTb.innerHTML += riHTML;
				//end of Velonis' addition
			};
			boolTb = true;
		};

		if (aLnk && boolTb == false) {
			var aRow = $r();
			aRow.appendChild($c('<a href="' + aLnk + '">' + T('EXTAV') + '</a>', [['class', 'center']]));
			aTb.appendChild(aRow);
			boolTb = true;
		};
		if (cpB && TB3O.O[34] == '1') {aTb.appendChild(getCpcRow(cpB, "cp")); boolTb = true;};
		if (ccB && TB3O.O[35] == '1') {aTb.appendChild(getCpcRow(ccB, "cc")); boolTb = true;};

		if (boolTb == true) return aTb; else return null;

		function getCpcRow(x, y) {
			var cxR = $r();
			switch (y) {case 'cp': strIn = T('CPPERDAY'); tColor = 'color:blue;'; break; case 'cc': strIn = gIc["r5"]; tColor = 'color:red;'; break;};
			cxR.appendChild($c(strIn + ": " + x[0] + " " + (docDir[0] == 'right' ? '?' : '?') + " " + x[1], [['class', 'center'], ['colspan', '3'], ['style', tColor]]));
			return cxR;
		};

		//added by Velonis Petros
		function createCRrows(aTitle, aV) {
			var cTb = $t();
			var xR = $r();
			xR.appendChild($c(aTitle, [['style', 'border-top:1px solid silver;'], ['colspan', '3']]));
			cTb.appendChild(xR);
			for (var i = 0; i < 4; i++) {
				var yR = $r();
				yR.appendChild($c(gIc["r" + (i + 1)], [['class', 'center']]));
				yR.appendChild($c(aV[i], [['colspan', '2']]));
				cTb.appendChild(yR);
			};
			return cTb.innerHTML;
		};
		//end of Velonis' addition
	};
	
	function addTimeToTrainSelectedTroops() {
		var aTb = $g("selecttraintroops");
		var arrInputs = $xf("//*[starts-with(@id, 'inputTroopNo_')]", 'l');
		var arrAddCells = $xf("//*[starts-with(@id, 'TtT_')]", 'l');
		var tCC = 0;
		var tTtT = 0;
		var sT = 0;
		var gHTML = '';
		for (var i = 0; i < arrInputs.snapshotLength; i++) {
			var vTtT = parseInt10(arrInputs.snapshotItem(i).value);
			if (isNaN(vTtT)) vTtT = 0;
			if (!isNaN(vTtT)) {
				var bTb = $t([['class', 'tb3tbnb']]);
				var xCell = arrAddCells.snapshotItem(i);
				var xaRow = $r([['class', 'tb3rnb']]);
				var xbRow = $r([['class', 'tb3rnb']]);
				var tT = toSeconds(arrTtT[i].tTime) * vTtT;
				tTtT += tT;
				var xaCell = $c(formatTimeSpan(tT, 0), [['class', 'tb3cnb'], ['style', 'font-size:8pt;']]);
				tCC += uc[arrTtT[i].tType][9] * vTtT;
				var xbCell = $c(gIc["r5"] + " " + uc[arrTtT[i].tType][9] * vTtT, [['class', 'tb3cnb'], ['style', 'font-size:8pt;']]);
				xaRow.appendChild(xaCell);
				xbRow.appendChild(xbCell);
				xCell.innerHTML = '';
				bTb.appendChild(xaRow);
				bTb.appendChild(xbRow);
				xCell.appendChild(bTb);
				sT += parseInt10(vTtT);

				imgName = 'class="unit u' + arrTtT[i].tType + '" src="' + xGIF + '"';
				if (TB3O.T35 == false) imgName = "src='" + gIc["u" + arrTtT[i].tType] + "'";
				gHTML += "<img " + imgName + "> " + vTtT;
				if (i < arrInputs.snapshotLength - 1) gHTML += " | ";
				if (vTtT != 0) {
					var ix = $g('trNPC_' + (i + 1));
					if (ix) removeElement(ix);
					var ex = calculateResourceTime(arrayByN(arrTtT[i].aRes, vTtT), "100");
					if (ex) {
						$at(ex, [['id', 'trNPC_' + (i + 1)]]);
						var nC = aTb.rows[i + 1].cells.length;
						var xNode = (nC > 4 ? aTb.rows[i + 1].cells[1] : aTb.rows[i + 1].cells[0]);
						xNode.appendChild(ex);
					};
				};
			};
		};
		var aRow = $g('aRselecttraintroops');
		if (!aRow) {
			var csp = aTb.rows[0].cells[0].getAttribute("colspan");
			var aCell = $c("", [['id', 'gTtT'], ['colspan', csp]]);
			aRow = $r([['id', 'aRselecttraintroops']]);
			aRow.appendChild(aCell);
			aRow.appendChild($c(sT, [['id', 'sTtT']]));
			aRow.appendChild($c(""));
			aRow.appendChild($c("", [['id', 'tTtT']]));
			aTb.appendChild(aRow);
		} else {
			var aCell = $g("gTtT");
			if (aCell) aCell.innerHTML = '';
			var bCell = $g("sTtT");
			if (bCell) bCell.innerHTML = sT;
			var dCell = $g("tTtT");
			if (dCell) dCell.innerHTML = '';
		};
		//graphic of troops to be trained
		aCell.innerHTML = gHTML;
		//total cell
		var tTb = $t([['class', 'tb3tbnb']]);
		var taRow = $r([['class', 'tb3rnb']]);
		var tbRow = $r([['class', 'tb3rnb']]);
		var taCell = $c(formatTimeSpan(tTtT, 0), [['class', 'tb3cnb'], ['style', 'font-size:8pt;']]);
		var tbCell = $c(gIc["r5"] + " " + tCC, [['class', 'tb3cnb'], ['style', 'font-size:8pt;']]);
		taRow.appendChild(taCell);
		tbRow.appendChild(tbCell);
		tTb.appendChild(taRow);
		tTb.appendChild(tbRow);
		if (dCell) dCell.appendChild(tTb);
	};

	function fillinwarsim() {
		if (TB3O.O[55] != '1') return;
		var aTb = $xf("//table[@id='attacker'] | //table[@class='fill_in']");
		if (!aTb) return;
   //DL
   if (TB3O.VillagesInfo[actV.vNewdid].pop) TB3O.AVP = TB3O.VillagesInfo[actV.vNewdid].pop;

		TB3O.hOffBonus = getGMcookie("heroV", false);
		if (TB3O.hOffBonus == "false") {setGMcookie("heroV", "0", false); TB3O.hOffBonus = 0;};
		tTc = getGMcookieV2("Troops");
		if (tTc && tTc[actV.vNewdid]) eT = tTc[actV.vNewdid]; else return;
		var aI = aTb.getElementsByTagName("INPUT");
		if (aI.length > 0) {
			j = 1;
			for (var i = 0; i < aI.length; i++) {
				if (aI[i].name == "a1_" + j) {
					//only the troop number input fields
					aI[i].value = (eT[j - 1] > 0 ? eT[j - 1] : "");
					j += 1;
				} else if (aI[i].name == "ew1") aI[i].value = TB3O.AVP; else if (aI[i].name = "h_off_bonus" & aI[i].value != "") aI[i].value = TB3O.hOffBonus;
			};
		};
		aTb = null; aI = null;
	};
	
	//© Copyright 2007 Richard Laffers (http://userscripts.org/scripts/show/35277)
	//Start of Drag-n-drop
	var mouseOffset = null;
	var iMouseDown = false;
	var lMouseState = false;
	var dragObject = null;
	var curTarget = null;

	function mouseCoords(ev) {return {x:ev.pageX, y:ev.pageY};};
	function getMouseOffset(target, ev){var docPos = getPosition(target); var mousePos = mouseCoords(ev); return {x:mousePos.x - docPos.x, y:mousePos.y - docPos.y};};
	function mouseDown(ev){var target = ev.target; iMouseDown = true; if (target.getAttribute('DragObj')) return false;};

	function getPosition(e) {
		var dx = 0;
		var dy = 0;
		while (e.offsetParent){
			dx += e.offsetLeft + (e.currentStyle?(parseInt10(e.currentStyle.borderLeftWidth)).NaN0():0);
			dy += e.offsetTop  + (e.currentStyle?(parseInt10(e.currentStyle.borderTopWidth)).NaN0():0);
			e = e.offsetParent;
		};
		dx += e.offsetLeft + (e.currentStyle?(parseInt10(e.currentStyle.borderLeftWidth)).NaN0():0);
		dy  += e.offsetTop  + (e.currentStyle?(parseInt10(e.currentStyle.borderTopWidth)).NaN0():0);
		return {x:dx, y:dy};
	};

	function mouseMove(ev) {
		var target = ev.target;
		var mousePos = mouseCoords(ev);
		if (dragObject) {
			oSpos = dragObject.style.position;
			dragObject.style.position = 'absolute';
			if ( ( mousePos.y - mouseOffset.y ) > - 10 )
			{
			   dragObject.style.top = (mousePos.y - mouseOffset.y) + 'px';
			}
			dragObject.style.left = (mousePos.x - mouseOffset.x) + 'px';
			dragObject.style.position = oSpos;
		};
		lMouseState = iMouseDown;
		return false;
	};

	function mouseUp(ev){
		if (dragObject) {
			var dOx = dragObject.style.left;
			var dOy = dragObject.style.top;
			var strXY = (dOx + "|" + dOy).replace("px", '').replace("px", '');
			switch (dragObject.id) {
				case "resbarTT": TB3O.O[75] = strXY; break;
				case "userbookmarksTT": TB3O.O[76] = strXY; break;
				case "noteblockTT": TB3O.O[77] = strXY; break;
				case "vl2tableTT": TB3O.O[78] = strXY; break;
				case "searchbarTT": TB3O.O[79] = strXY; break;
				case "resupgTT": TB3O.O[88] = strXY; break;
				case "bupgTT": TB3O.O[89] = strXY; break;
				case "mapTableTT": TB3O.O[90] = strXY; break;
				case "mr_tooltip": TB3O.O[104] = strXY; break; // GotGs -- 2011.04.15 -- proper placement of reports and messages
			};
			setGMcookieV2('TB3Setup', TB3O.O, 'SETUP');
		};
		dragObject = null;
		iMouseDown = false;
	};

	function makeDraggable(parent, item){
		document.addEventListener('mousemove', mouseMove, false);
		document.addEventListener('mousedown', mouseDown, false);
		document.addEventListener('mouseup', mouseUp, false);
		if (!parent || !item) return;
		item.addEventListener('mousedown',function(ev){
			dragObject = parent;
			mouseOffset = getMouseOffset(parent, ev);
			document.body.appendChild(parent);
			return false;
		}, false);
	};
	//End of Drag-n-drop

function setTravianStyles()
{
   var acss = "";

   //Adjust Travian styles
   acss +=
   /*
   (TB3O.nLayoutType === 0 ? "div#side_info {width:288px;}" : "")  +
   "div#side_info table tbody td.aligned_coords {min-width: 84px;}" +
   "div#side_info table tbody td {font-size:8pt; white-space:nowrap; text-align:" + docDir[0] + ";}" +
   "div#side_info table tbody td.link {font-size:10pt;} " +

   "table#vlist {width:auto; background-color:transparent !important; border-collapse:collapse; border:0px none transparent; margin:0px; font-size:13px; font-weight:normal; white-space:nowrap;}" +
   "table#vlist tr	{background-color:transparent; border-top-style: hidden;}" +
   "table#vlist tr.tb3sep {border-top: 2px inset gray;}" +
   "table#vlist tbody tr td {background-color:transparent; border:0px none transparent; padding:0px 2px 0px 2px; text-align:" + docDir[0] + "; font-size:8pt;}" +
   "table#vlist tr:hover, table#vlist td:hover {background-color:#E5E5F0;}" +

   "table#overview       tr.tb3sep td," +
   "table#ressources     tr.tb3sep td," +
   "table#warehouse      tr.tb3sep td," +
   "table#culture_points tr.tb3sep td," +
   "table#troops         tr.tb3sep td {border-top: 1px solid #C0C0C0;}" +

   "div#content.statistics div#submenu," + 
   "div#content.statistics div#submenu2 {top: 123px;}" +

   "div#build.gid16 table#raidList td.rep {white-space:normal;}" +
   "div#build.gid17 table#target_select {border-collapse:collapse; border:0px none transparent; background-color:transparent; line-height:21px; width:34%; float:left; margin-" + docDir[0] + ":10px;}" +
   "div#build.gid17 table#target_select td.vil input.text {width:90px;}" +
   */

   "div.messages table#overview td.subject a { margin-" + docDir[1] + ":15px; }" + 
   "div#mr_tooltip  div#content {padding-left: 0px; padding-right: 0px; padding-top: 20px;}" +
   "div#mr_tooltip  div.paper {position: static;}" +

   "div.village1 div.level, div.village2 div#village_map div#levels div" +
                       "{font-family:Arial, Helvetica, Verdana, sans-serif; font-size:9pt; font-weight:bold; color:" + TB3O.CNc[0] + ";line-height:15px;" + 
                        "border:1px solid black; -moz-border-radius:2em; " +
                        "padding-top:3px; text-align:center; position:absolute; width:21px; height:18px; cursor:pointer;" +
                        "margin-top:-2px;}"+
   "div.village2 div#village_map div#levels div {background-image:none;}" +
   "#navigation {margin-left:-15px !important;}" +

   "div#build.gid17 div.destination {float:" + docDir[1] + "; width:280px; margin-top:-75px;}" +
   ".traderCount img {vertical-align:middle;}" +

   //((TB3O.ServerInfo.mod === "Fluffy" || TB3O.ServerInfo.mod === "Grisu") ? "#ingameManual {width:85px !important; height:100px !important;}" : "")
   "#ingameManual {width:85px !important; height:100px !important;}"
   ;

   GM_addStyle(acss);
}

//////////////////////////////////////////////////////////////////////
function setTBStyles()
{
   
   var acss = '';

   //TBeyond specific style declarations
   acss +=
   'table.tb3tb	{width:100%; border-collapse:collapse; border:1px solid silver; font-size:8pt; text-align:center; background-color:' + TB3O.DFc[1] + '; padding:2px; margin:1px;}' +
   'table.tb3tb tr, table.tb3tb td {border:1px solid silver;}' +

   'table.tb3tbnb	{border-collapse:collapse; border:0px none white; font-size:8pt; text-align:center; padding:2px; margin:1px; background-color:' + TB3O.DFc[1] + ';}' +
   'table.tb3tbnb tr, table.tb3tbnb td, table.tb3tbnb td.tb3cnb {border:0px none white;}' +
   'tr.tb3rh		{background-color:#ECECEC; text-align:center; border:1px solid silver;}' +
   'tr.tb3rhb		{background-color:#ECECEC; text-align:center; border:1px solid silver; font-weight:bold;}' +
   'tr.tb3rhnb		{background-color:#ECECEC; text-align:center;}' +
   'tr.tb3r 		{border-collapse:collapse; border:1px solid silver; text-align:center;}' +
   'tr.tb3rnb		{border-collapse:collapse; border:0px none white; text-align:center; white-space:nowrap;}' +
   'td.tb3chbb		{border:1px solid silver; background-color:#ECECEC; padding:2px; font-weight:bold; font-size:10pt;}' +
   'td.tb3chb		{border:1px solid silver; background-color:#ECECEC; padding:2px; font-weight:bold;}' +
   'td.tb3ch		{border:1px solid silver; background-color:#ECECEC; padding:2px; text-align:center;}' +
   'td.tb3chnb		{border:0px none white; background-color:#ECECEC; padding:2px; text-align:center;}' +
   'td.tb3c		{border:1px solid silver; background-color:transparent; padding:2px; border-collapse:collapse;}' +
   'td.tb3cnb		{border:0px none transparent; background-color:transparent; text-align:center; padding:2px;}' +
   'td.tb3cbt		{border-top:1px solid silver; font-size:8pt; color:#000000; text-align:center;}' +
   'td.tb3name          {text-align:' + docDir[0] +';}' +

   'div.CNBT {font-family:Arial, Helvetica, Verdana, sans-serif; font-size:9pt; font-weight:bold; color:' + TB3O.CNc[0] + ';line-height:15px;text-align:center;' + 
            'border:1px solid black; -moz-border-radius:2em; width:21px; height:18px; padding-top:3px;}' +


   'div#tbver {z-index:1997; position:absolute; ' + docDir[0] + ':5px; top:3px; width:450px;' + 
   '           font-size:12px; font-weight:normal; color:#FFFFFF; direction:ltr;}' +
   'div#tbver a {font-weight:bold; color:#00FF00;}' +



   'table.tbUpgTable {width:682px; table-layout: fixed; border-collapse:collapse; border:1px solid silver; background-color:' + TB3O.DFc[1] + '; font-size:8pt; padding:2px; text-align:' + docDir[0] + '; empty-cells:show; line-height:16px;}' +
   'table.tbUpgTable table {background-color:transparent; border-collapse:collapse; border:0px none transparent; font-size:8pt; padding:2px; margin:1px; text-align:' + docDir[1] + '; vertical-align:top;}' +
   'table.tbUpgTable tr {background-color:transparent; border-collapse:collapse; border:0px none transparent; font-size:8pt; padding:2px; margin:1px; text-align:' + docDir[1] + '; vertical-align:top;}' +
   'table.tbUpgTable td {background-color:transparent; border:0px none transparent; font-size:8pt; text-align:' + docDir[1] + '; padding:2px; vertical-align:top;}' +
   'table.tbUpgTable td.center {text-align:center; vertical-align:middle;}' +
   'table.tbUpgTable td.tb3uthc {background-color:#ECECEC; border:1px solid silver; vertical-align:middle; font-weight:normal; text-align:center; width:25%; height:18px;}' +
   'table.tbUpgTable td.tb3utbc {background-color:transparent; border:1px solid silver; margin:0px; text-align:center; vertical-align:top; width:25%; height:18px;}' +
   'table.tbUpgTable a {font-size:8pt; font-weight:bold;}' +
   'table.tbUpgTable div.tbImgCnt {text-align:' + docDir[0] + ';}' +
   'table.tbUpgTable div.CNBT {position:relative; top:-31px;' + docDir[0] + ':9px; z-index:100;}' +
   'table.tbUpgTable a < div {width:0%;}' +
   'table#tb_bldupg a img.building {margin-left:-10px;width:110px;}' +

   'div#resupgTT table#tb_resupg,' +
   'div#bupgTT   table#tb_bldupg {margin-top:1px;}' +



   'table.rNt {background-color:transparent; border-collapse:collapse; border:0px none transparent; padding:2px; vertical-align:top;}' +
   'table.tbUpgTable table.rNt {margin:1px;}' +
   'table.rNt * {font-size:8pt !important; text-align:' + docDir[1] + ' !important;}' +
   'table.rNt .tbMany * {font-size:6pt !important;}' +
   'table.rNt tr, table.rNt th, table.rNt td {background-color:transparent; padding:2px; vertical-align:top;}' +
   'table.rNt tr {border-collapse:collapse; border:0px none transparent; margin:1px;}' +
   'table.rNt th {border-top:1px solid silver;}' +
   'table.tbUpgTable table.rNt tr:first-child th {border-top:0px;}' +
   'table.rNt td {border:0px none transparent;}' +
   'table.rNt td.center {text-align:center !important; vertical-align:middle;}' +
   'table.rNt .tbCC, table.rNt .tbCP {text-align:' + docDir[0] + ' !important;}' +
   'table.rNt .tbCC *, table.rNt .tbCP * {vertical-align:middle;}' +
   'table.rNt .tbCC {color:red;}' +
   'table.rNt .tbCP {color:blue;}' +
   'table.rNt .tbCapReached {color:red; text-decoration: blink;}' +

   '.tbInject table.rNt {width:40%;}' +

   'table#mapTable {width:682px; border-collapse:collapse; border:1px solid silver; background-color:' + TB3O.DFc[1] + '; font-size:8pt; margin:0px; padding:0px; text-align:center; empty-cells:show; line-height:16px;}' +
   'table#mapTable thead td {border:1px solid silver; background-color:#ECECEC; font-size:9pt; font-weight:bold; text-align:center; padding:1px; cursor:default; vertical-align:middle;}' +
   'table#mapTable thead td.tb3mthcp {cursor:pointer;}' +
   'table#mapTable td {border:1px solid silver; background-color:transparent; padding:1px; margin:0px; font-size:8pt; font-weight:normal; text-align:center; vertical-align:middle;}' +
   'table#mapTable td.tb3mtcu {font-weight:bold; color:blue;}' +
   'table#mapTable td.tb3mtcp {padding-' + docDir[1] + ':10px; color:black; text-align:' + docDir[1] + ';}' +

   'div#updDiv {position:absolute; top:200px; ' + docDir[0] + ':120px; display:block; padding:1px; z-index:50; clear:both; border:2px solid #C0C0C0; background-color:black; color:yellow;}' +

   'table#userbookmarks {border-collapse:collapse; border:0px none transparent; background-color:' + TB3O.DFc[1] + '; line-height:16px;}' +
   'table#userbookmarks tr {text-align:' + docDir[0] + '; vertical-align:middle; padding:0 0 0 2px; margin:0px; white-space:nowrap; border-collapse:collapse; border:0px none transparent;}' +	
   'table#userbookmarks td {border:0px none transparent; background-color:' + TB3O.DFc[1] + '; text-align:' + docDir[0] + '; font-size:13px; font-weight:normal; color:black; padding:2px; vertical-align:middle;}' +
   'table#userbookmarks td.noact {width:10px;}' +
   'table#userbookmarks td.act {width:10px; color:#FF8000;}' +
   'table#userbookmarks img {cursor:pointer;}' +
   'table#userbookmarks span {padding:0 0 0 4px;}' +

   'table#mkls {width:100%; border-collapse:collapse; border:1px solid silver; font-size:8pt; text-align:center; background-color:' + TB3O.DFc[1] + '; padding:2px; margin:1px; line-height:18px;}' +
   'table#mkls tr {background-color:transparent;}' +
   'table#mkls td {background-color:transparent; border:1px solid silver; font-weight:normal; font-size:8pt; color:black; text-align:' + docDir[1] + '; vertical-align:middle; padding:2px 3px 2px 3px; white-space:nowrap;}' +
   'table#mkls td.mklshh {background-color:#ECECEC; text-align:center; width:16%;}' +
   'table#mkls td.mklsc {text-align:center;}' +

   'table#br_table, table#br_table tr {background-color:transparent; border:1px solid #C2C2C2; text-align:center; padding:0px; margin:0px; border-collapse:collapse; width:100%;}' +
   'table#br_table td {background-color: transparent; border:1px solid #C2C2C2; font-size:8pt; text-align:' + docDir[1] + '; padding:2px 7px 2px 2px; margin:0px;}' +
   'table#br_table td.tb3cbrh1 {background-color:#F3F3F3; font-size:10pt; font-weight:bold; color:#000000; text-align:center;}' +
   'table#br_table td.tb3cbrh2 {background-color:#F3F3F3; font-size:10pt; font-weight:bold; color:#FF8000; text-align:center;}' +
   'table#br_table td.tb3cbrh3 {background-color:#F3F3F3; font-size:10pt; font-weight:bold; color:#71D000; text-align:center;}' +
   'table#br_table td.tb3cbrc {text-align:center;}' +
   'table#br_table td.tb3cbrb {font-weight:bold;}' +
   'table#br_table td.tb3cbrr {color:red;}' +
   'table#br_table td.tb3cbrg {color:darkgreen;}' +
   'table#br_table td.tb3cbrbr {font-weight:bold; color:red;}' +
   'table#br_table td.tb3cbrbg {font-weight:bold; color:darkgreen;}' +

   'table#mhtt {border-collapse:collapse; border:0px none transparent; padding:2px; margin:1px;' + 
               'font-weight:normal; font-size:8pt; text-align:' + docDir[1] + ';  background-color:transparent; empty-cells:show; line-height:16px; white-space:nowrap;}' +
   'table#mhtt tr {border:0px none transparent;}' +
   'table#mhtt td {background-color:transparent; border:0px none transparent; font-weight:normal; font-size:8pt; text-align:' + docDir[1] + '; color:black; padding:2px 7px 2px 0px; margin:0px; vertical-align:middle;}' +
   'table#mhtt td.mCol {color:blue;}' +
   'table#mhtt td.center {text-align:center;}' +
   'table#mhtt td.ld {text-align:' + docDir[0] + '; padding-left:2px;}' +
   'table#mhtt td.dec {text-align:center; font-size:10pt; font-weight:bold; color:green; border-bottom:1px solid grey;}' +

   'table.tbDistInfo {border-collapse:collapse; empty-cells:show; white-space:nowrap;}' + 
   'table.tbDistInfo * {vertical-align:middle;}' + 
   'table.tbDistInfo,' +
   'table.tbDistInfo tr,' +
   'table.tbDistInfo td {border:0px none transparent;background-color:transparent;text-align:' + docDir[1] + ';}' +
   'table.tbDistInfo td {padding:2px;}' +
   'table.tbDistInfo td.tbMerc {color:blue;}' +
   'table.tbDistInfo td.tbDist {color:blue;}' +
   'table.tbDistInfo td.tbCenter {text-align:center; padding: 2px 0px;}' +
   'table.tbDistInfo td.tbTravelT img {padding-' + docDir[1] + ':7px;}' +
   'table.tbDistInfo td.tbArrivalT {padding-' + docDir[0] + ':7px;}' +
   'table.tbDistInfo td.tbIco {text-align:' + docDir[0] + '; padding-' + docDir[0] + ':2px; padding-' + docDir[1] + ':10px;}' +
   'table.tbDistInfo td.tbTitle {font-size:10pt !important; font-weight:bold; color:green; border-bottom:1px solid grey;}' +

   'div#tb_mercdest table.tbDistInfo td { font-size:11px; }' +

   'table#tb_distTT.tbDistInfo { padding:2px; margin:1px; font-weight:normal; font-size:8pt; line-height:16px; }' +
   'table#tb_distTT.tbDistInfo td {margin:0px; font-size:8pt;}' +

   'table#mhtt.tbAttDefInfo thead th {font-weight:bold; text-align:center; font-size:8pt; background-color:transparent; background-image:none; }' +
   'table#mhtt.tbAttDefInfo td.tbIco {text-align:' + docDir[0] + ';width:40px;}' +
   'table#mhtt.tbAttDefInfo td.tbVal {text-align:' + docDir[1] + ';}' +
   'table#mhtt.tbAttDefInfo tfoot td {text-align:' + docDir[0] + '; font-size:8pt;}' +

   // !important rules required for non floating resource bar
   'table.tbResBar    {border-collapse:collapse; border:1px solid silver; background-color:' + TB3O.DFc[1] + 
                      '; width:auto; margin:0px;  white-space:nowrap;}' +
   'table.tbResBar *  {vertical-align:middle !important; line-height:13px !important; font-weight:normal; font-size:8pt !important;}' +
   'table.tbResBar tr {border-collapse:collapse; border:0px none transparent; padding:0px !important;}' +
   'table.tbResBar td {border:1px solid silver; padding:2px !important;}' +
   'table.tbResBar tr.tb3pph {border-top:2px solid silver; border-bottom:2px solid silver; background-color:#ECECEC;}' +
   'table.tbResBar td.tb3c {text-align: center !important; background-color:' + TB3O.DFc[1] + '; margin:1px; width:auto; }' +
   'table.tbResBar td.tb3c span  {text-align: right !important;}' +
   'table.tbResBar tr.tb3pph td.tb3c, table.tbResBar tr.tb3pph td.tb3ctotv {background-color:#ECECEC;}' +
   'table.tbResBar td.lr       {background-color:transparent;text-align:' + docDir[1] + ' !important; padding:0px !important;}' +
   'table.tbResBar td.tb3ttf   {text-align:' + docDir[1] + ' !important;padding:0px 1px !important;font-size:7pt !important;}' +
   'table.tbResBar td.tb3ttf.tbInfinity {font-size:12pt !important; text-align:center !important;}' +
   'table.tbResBar td.tb3cvn   {text-align:center !important; font-weight:bold; color:blue; background-color:#E9EEFC;}' +
   'table.tbResBar td.tb3chtot {text-align:center !important; font-weight:bold; border-' + docDir[0] + ':2px solid silver; background-color:#FFFFC0; }' +
   'table.tbResBar td.tb3ctot  {text-align:' + docDir[1] + ' !important;border-' + docDir[0] + ':2px solid silver; background-color:#FFFFC0; }' +
   'table.tbResBar td.tb3ctotv {text-align:' + docDir[1] + ' !important;}' +
   'table.tbResBar td.tb3cresbar {border:1px solid silver;background-color:transparent; padding:0px !important; width:100px;}' +
   'div#resbarTT table#tb_resbar {margin-top:1px;}' +

   'table.rbrtb {border-collapse:collapse; border:0px none transparent; float:left; height:17px; width:100px; background-color:' + TB3O.DFc[1] + ';}' +
   'table.rbrtb tr.rbrtbr,' + 
   'table.rbrtb td {border-collapse:collapse !important; border:0px none transparent !important; padding:0px !important;}' +

   'table#vl2table {border-collapse:collapse; border:0 none transparent; background-color:' + TB3O.DFc[1] + '; line-height:13px; font-size:10pt; text-align:center; padding:2px; margin:0px; white-space:nowrap; vertical-align:middle;}' +
   'table#vl2table tr td {border:0 none transparent; background-color:transparent; text-align:' + docDir[0] + '; padding:2px; margin:0px; font-weight:normal; font-size:10pt;}' +
   'table#vl2table td.av {color:#FF8000;}' +
   'table#vl2table td.coord {font-size:8pt;direction:ltr;}' +
   'table#vl2table td.tb3sep {border-top: 2px inset gray;}' +

   'form#searchform   {padding:10px; border:1px solid #C0C0C0;}' + 
   'form#searchform * {font-size:8pt; margin:2px;}' + 
   'form#searchform select#searchtype {padding:0px;}' + 
   'div#searchbarTT form#searchform {margin-top:18px;}' +

   'div.fldiv {position:absolute; display:block; padding:1px; z-index:50; clear:both; border:1px solid #C0C0C0; background-color:' + TB3O.DFc[1] + '; z-index:1000;}' +
   'div.dragdiv {text-align:center; font-weight:bold; height:18px; float:' + docDir[0] + '; cursor: pointer; border-bottom:1px solid #C0C0C0; background-color:#ECECEC; z-index:1000; vertical-align:middle;}' +
   'div.mmdiv {height:18px; float:' + docDir[0] + '; cursor: pointer; border-bottom:1px solid #C0C0C0; background-color:' + TB3O.DFc[1] + '; width:25px;}' +
   'div.closediv {height:18px; float:' + docDir[0] + '; cursor: pointer; border-bottom:1px solid #C0C0C0; background-color:' + TB3O.DFc[1] + '; width:25px;}' +

   'p.delacc {position:absolute; display:block; padding:4px; z-index:2; border:1px solid #00C000; background-color:#FEFFE3; width:130px; text-align:center; ' + docDir[1] + ':0px; top:0px;}' +
   'p.delacc span {color:orange;}' +

   'table#noteblock {border-collapse:collapse; border:0px none white; text-align:center; padding:2px; margin:1px; background-color:' + TB3O.DFc[1] + ';}' +
   'table#noteblock tr {background-color:transparent; border:0px none transparent;}' +
   'table#noteblock td {border:0px none transparent; background-color:transparent; text-align:center; padding:2px;}' +
   '#noteblockcontent {border:1px solid silver; padding:0px 2px 0px 2px; overflow:auto; font-size:10pt; white-space:nowrap;}' +

   'table#sell td.soffall {background-color:#D0F0F0;}' +

   // sell offers
   'table#soff {width:100%; border-collapse:collapse; border:1px solid silver; font-size:8pt; text-align:center; background-color:' + TB3O.DFc[1] + '; line-height:18px;}' +
   'table#soff tr         {background-color:transparent;}' +
   'table#soff tr.soffall {background-color:#D0F0F0;}' +
   'table#soff tr.soffall td {background-color:#D0F0F0;}' +
   'table#soff td         {border:1px solid silver; text-align:' + docDir[1] + '; vertical-align:middle; padding:2px 3px 2px 1px; white-space:nowrap;}' +
   'table#soff td.soffhh  {background-color:#ECECEC; color:black; text-align:center; width:16%;}' +
   'table#soff td.val     {color:black; text-align:left;}' +
   'table#soff td.soffc   {color:black; text-align:center;}' +

   'input#soff, input#soffG {margin-top:3px;' + (docDir[0] === 'right' ? 'margin-right:0px' : 'margin-right:3px') + '; margin-bottom:3px;' + (docDir[0] === 'right' ? 'margin-left:3px' : 'margin-left:0px') + '; padding:0px;}' +

   // market send form
   '#tb_usetraders {width: 20px;}' +
   'form td.tbInject {text-align:center;}' +
   'form td.tbInject, form td.tbInject * {vertical-align:middle !important;}' +
   'form td.tbUseThem {padding:0px !important;}' +
   'form td.tbTool    {padding-top:0px !important; padding-bottom:0px !important;}' +
   'form td.tbInject a.tbQCarry {white-space:nowrap;}' +
   'form td.tbInject a.tbMCap   {border-bottom:1px dotted;}' +

   // market send (modify arrival tables)
   
   'table.tbIncomingMerc td.tbArrivalRes {padding:0px !important;}' +
   'table.tbIncomingMerc td.tbArrivalRes table {border-collapse:collapse; border-color:silver; height:100%;}' +
   'table.tbIncomingMerc td.tbArrivalRes table td {border-color:silver; width:20%;}' +
   'table.tbIncomingMerc td.tbOver,' +
   'table.tbIncomingMerc td.tbUnder {padding-' + docDir[0] + ':27px; padding-top:2px; padding-bottom:2px; font-size:8pt;}' +
   'td.tbOver,' +
   'td.tbUnder {font-weight:bold; color:white;}' +
   'td.tbOver  {background-color:darkgreen;}' +
   'td.tbUnder {background-color:red;}' +
   'table.tbIncomingMerc td.tbCapReached {color:red; text-decoration: blink;}' +

   // market send (cumulative arrivals table)
   'table#tb_arrm  {line-height:16px; border-collapse:collapse; border:1px solid silver; margin-bottom:15px;}' +
   'table#tb_arrm th,' +
   'table#tb_arrm td {border:1px solid silver; font-size:13px; text-align:center; padding:2px;}' +
   'table#tb_arrm td.cbgx {font-size:13px; font-weight:bold;}' +
   'table#tb_arrm th {background-color:#F3F3F3; font-weight:bold;}' +
   'table#tb_arrm td.tbTotal {font-weight:bold;}' +
   'table#tb_arrm .tbTimeout.tbOver.tbSoon,' +
   'table#tb_arrm .tbTimeout.tbUnder.tbSoon {color:white; text-decoration: blink;}' +
   'table#tb_arrm .tbTimeout.tbOver.tbDecrease,' +
   'table#tb_arrm .tbTimeout.tbUnder.tbDecrease {color:white;}' +
   'table#tb_arrm .tbTimeout.tbOver.tbCapReached,' +
   'table#tb_arrm .tbTimeout.tbUnder.tbCapReached {color:yellow;}' +

   'table#TB3S	{width:100%; border-collapse:collapse; border:1px solid silver; font-size:8pt; text-align:center; background-color:' + TB3O.DFc[1] + '; padding:2px; margin:1px;}' +
   'table#TB3S tr.srh {background-color:#ECECEC; text-align:center; border:1px solid silver;}' +
   'table#TB3S td {border:1px solid silver; background-color:transparent; padding:2px; border-collapse:collapse; text-align:' + docDir[0] + '; font-size:8pt;}' +
   'table#TB3S td.srst {background-color:#ECECEC; text-align:' + docDir[0] + '; font-size:9pt; font-weight:bold; color:darkblue;}' +
   'table#TB3S td.s1 {background-color:#ECECEC; text-align:center; width:70%; font-weight:bold;}' +
   'table#TB3S td.s2 {background-color:#ECECEC; text-align:center; width:20%;}' +
   'table#TB3S select, table#TB3S input {font-size:8pt;}' +
   'table#TB3S span {font-size:8pt; font-weight: bold;}' +
   'table#TB3S td.s3 {background-color:#ECECEC; text-align:center; width:10%;}' +
   'table#TB3S img {cursor:pointer;}' +

   'table#cptable {width:100%; border-collapse:collapse; border:1px solid silver; padding:2px; margin:1px;}' +
   'table#cptable * {text-align:center !important;  font-size:8pt !important;}' +
   'table#cptable tr, table#cptable td {border-collapse:collapse; border:1px solid silver; padding:2px; }' +
   'table#cptable thead td {background-color:#ECECEC; font-weight:bold;}' +
   'table#cptable td.CG {background-color:#C8FFC8;}' +
   'table#cptable td.CR {background-color:#FFE1E1;}' +

   'table#mbuyf {width:100%; border-collapse:collapse; border:1px solid silver; font-size:8pt; text-align:center; background-color:' + TB3O.DFc[1] + '; padding:2px; margin:1px;}' +
   'table#mbuyf tr {border-collapse:collapse; border:1px solid silver; text-align:center;}' +
   'table#mbuyf td {border:1px solid silver; background-color:transparent; padding:2px; border-collapse:collapse;}' +
   'table#mbuyf td.sf {background-color:#FFE4B5;}' +

   'table.allvtroops, table.allvtroops tr td {border-collapse:collapse; border:1px solid silver; text-align:center; padding:2px;}' +
   'table.allvtroops tr th {border-collapse:collapse; border:1px solid silver; text-align:' + docDir[0] + '; padding:2px 7px; width:20%;}' +

   'table.tbAttDefInfo2 {margin:0px;}' +
   'table.tbAttDefInfo2 span {padding-' + docDir[0] + ':1em;}' +
   'table.tbAttDefInfo2 td  {padding:3px 7px;}' +
   'table.tbAttDefInfo2 td * {vertical-align:middle;}' +

   // send troops menu
   'table.tbSendTroopsMenu {width:auto;}' +
   'table.tbSendTroopsMenu td {text-align:' + docDir[0] + '; font-size:8pt;}' +
   'table.tbSendTroopsMenu td * {vertical-align:middle;}' +
   'table.tbSendTroopsMenu span.none {font-weight: bold;}' +
   'input#tb_selectscoutnumber {width:30px;}' + 
   'input[id^="tb_faketroop"] {margin-' + docDir[1] + ':10px;}' +

   // send troops stat
   'table#tb_sendtroopstat {margin-bottom:15px;}' +

   // last attack table
   'table#stla {width:100%; border-collapse:collapse; border:1px solid silver; font-weight:normal; font-size:8pt; color:black; text-align:center; background-color:' + TB3O.DFc[1] + '; padding:0px; margin:0px; line-height:18px;}' +
   'table#stla {margin-bottom:15px;}' +
   'table#stla tr {background-color:transparent;}' +
   'table#stla td {border:1px solid silver; font-size:8pt; text-align:' + docDir[1] + '; vertical-align:middle; padding:1px 2px 1px 2px; white-space:nowrap;}' +
   'table#stla td.stlahh {background-color:#ECECEC; text-align:center; width:5%;}' +
   'table#stla td.stlahh1 {background-color:#ECECEC; text-align:center; width:10%;}' +
   'table#stla td.stlahh2 {background-color:#ECECEC; text-align:center;}' +
   'table#stla td.stlac {background-color:transparent; text-align:center;}' +


   // dismiss troops table
   'table.troop_details a.tbTool {text-align:center;}' +
   'table.troop_details .tbUpDown {float:' + docDir[1] + ';margin-' + docDir[0] + ':2px;}' +
   'table.troop_details tr.tbInject td {padding-top:3px; padding-bottom:3px;}' +
   'table.troop_details tr.tbInject a {font-size:8pt;vertical-align:middle;}' +
   'table.troop_details tr.tbInject a.tbMany {font-size:6pt;}' +
   'table.tbAttDefInfo2 + table.tbAttDefInfo2 {margin-top:15px; margin-bottom:15px;}' +
   'table#tb_dismisstroopsdist {width:50%; margin-top:15px;}' + 

   'table#dorf3table    {width:100%; border-collapse:collapse; border:1px solid silver; text-align:center; font-size:10pt; background-color:' + TB3O.DFc[1] + '; padding:2px; margin:0px; }' +
   'table#dorf3table tr {margin:1px;}' +
   'table#dorf3table td {border:1px solid silver;}' +
   'table#dorf3table tr.tb3sep 	{border-top: 2px inset gray;}' +
   'table#dorf3table th *    {vertical-align: middle; color:black;}' +
   'table#dorf3table td.tb3name {width:150px; text-align:' + docDir[0] +';}' +
   'table#dorf3table.tb3d3_5 td.tb3cnb  {font-size:8pt; color:black; text-align:center;}' +
   'table#dorf3table.tb3d3_5 td.tb3none {color:lightgrey;}' +
   'table#dorf3table td.tbInfinity {font-size:14pt;}' +
   'table#dorf3table td.tbEmpty {height:2px;}' +
   'table#dorf3table tr.tbTotal td {font-weight:bold;}' +
   'table#dorf3table tr.tbTotal td.tbTitle {text-align:center;}' +

   'tr#aRselecttraintroops {border-collapse:collapse; background-color:' + TB3O.DFc[1] + ';}' +
   'tr#aRselecttraintroops td {border:0px none transparent; background-color:transparent; text-align:center; padding:0px 2px 0px 7px;}' +

   // search reports
   '#tb_searchreports {margin-top:14px;}' + 
   '#tb_searchreports * {vertical-align:middle;}' +
   '#tb_searchreports img {padding-left:2px; padding-right:2px}' +

   // delete reports
   'table#tb_delreptable {width:100%; border-collapse:collapse; border:1px solid silver; font-size:8pt; text-align:center; background-color:' + TB3O.DFc[1] + '; padding:2px; margin:14px 0px 0px 0px;}' +
   'table#tb_delreptable tr {border:1px solid silver; text-align:center;}' +
   'table#tb_delreptable tr.rh {background-color:#ECECEC; text-align:center; border:1px solid silver;}' +
   'table#tb_delreptable td {border:1px solid silver; padding:2px;}' +
   'table#tb_delreptable td.cc { text-align:center;}' +

   // Troop Info tooltip
   'table#tb_TITT    {border-collapse:collapse; border:1px solid silver; margin:0px;}' +
   'table#tb_TITT th {text-align:center; font-size:8pt; font-weight:bold;}\n' +
   'table#tb_TITT td {padding: 2px; font-size: 8pt; text-align:' + docDir[1] + '}\n' +
   'table#tb_TITT td.ico {text-align:' + docDir[0] + ';}\n' +
   'table#tb_TITT td.tb3r1 {border-bottom:1px silver solid;}\n' +
   'table#tb_TITT td.tb3c1,' +
   'table#tb_TITT td.tb3c2 {border-' + docDir[1] + ':1px silver solid;}\n' +

   // Village bulding info tooltip
   'table#tb_BiPTM    {width:100px; border-collapse:collapse; border:1px solid silver; margin:0px; background-color:' + TB3O.DFc[1] + ';}' +
   'table#tb_BiPTM tr {border:0px none transparent;}' +
   'table#tb_BiPTM td {border:1px solid silver; font-size:8pt; padding:4px;}' +

   //'table#bttable	{width:100%; height:129px; text-align:left; border-collapse:collapse; background-color:transparent;}' +

   'tr.cbgx td, td.cbgx {background-color:#FFFFC0; border-collapse:collapse; border:1px solid silver; padding:2px; text-align:center;}' +

   'a.tbTool img {margin:0px !important;}' +
   'div.tbToolbar {display:inline;}' +

   '.tbUpDown {height:17px; width:8px; position:relative; display:inline;}' +
   '.tbUpDown img {position:absolute !important; cursor:pointer; ' + docDir[0] + ':0px !important; margin:0px !important; padding: 0px !important;}' +
   '.tbUpDown img.tbiUp   {top:0px !important;}' +
   '.tbUpDown img.tbiDown {top:9px !important;}' +

   '.tbUpDown.tbBuiltin {width:9px;}' +
   '.tbUpDown.tbBuiltin img {border-color:#CCCCCC; border-width:1px; border-' + docDir[0] + '-style:solid;}' +
   '.tbUpDown.tbBuiltin img.tbiDown {top:8px !important; border-top-style:solid;}' +
   	
   'div#tb_tooltip {position:absolute; display:none; padding:2px; z-index:9000; border:1px solid #00C000; background-color:#FFFFCC; -moz-border-radius:5px;}' +

   'div.npc-general {margin:3px 0 0; font-size:7pt; float:none;} ' +
   'span.npc-red {color:#DD0000;} ' +
   'span.npc-green {color:#009900;}' +

   'td.desc, td.desc div, td.desc span {font-size:8pt;}' +

   'a.tbInject img {display:inline; border:0px none white; }' +
   'a.tbInject.tbExtStat img {margin:0px 2px -2px 3px;}' +
   'a.tbInject.tbExtMap img {margin:0px 2px -1px 3px;}' +
   'a.tbInject.tbMail img {margin:3px 0px 1px 3px;}' +
   'a.tbInject.tbAttDef img {vertical-align: middle;}' +
   'a.tbInject.tbRes img {vertical-align: middle;}' +
   'a.tbInject.tbMsgPop {line-height: inherit; height: inherit; position:relative; float:' + docDir[1] + '; margin:0px !important;}' +
   
   'div#content.messages a.tbInject.tbMsgPop img {height: auto; width: auto; vertical-align: middle; position: relative;top:0px; margin-top:-15px;}' +
   'a.tbMsgPop + span[class*="reportInfo"], a.tbMsgPop + a[class*="reportInfo"] {margin-' + docDir[1] + ':5px;}' +

   '.tbTimeout {color:darkgreen;}' +
   '.tbTimeout.tbDecrease {color:red;}' +
   '.tbTimeout.tbSoon     {color:red;}' +
   '.tbTimeout.tbCapReached {color:red; text-decoration: blink;}' +

   '.tbSelected * {background-color:#ECECEC !important;}' +

   'td.ratio_l  {font-size:8pt; background-color:#FFE1E1; color:red;}' +
   'td.ratio    {font-size:8pt;}' +
   'td.ratio_g  {font-size:8pt; background-color:#C8FFC8; color:darkgreen;}' +

   '.tbMany  {font-size:6pt;}' +

   '.tbUpg   {background-color:' + TB3O.CNc[1] + ' !important;}' + 
   '.tbMax   {background-color:' + TB3O.CNc[2] + ' !important;}' + 
   '.tbNoRes {background-color:' + TB3O.CNc[3] + ' !important;}' + 
   '.tbNPCUpg{background-color:' + TB3O.CNc[4] + ' !important;}' + 
   '.tbNoCap {background-color:' + TB3O.CNc[5] + ' !important;}' +
   (( TB3O.O[45] === '1' ) ?  '.tbUpgNow {text-decoration: blink !important;}' : '') +
   //icons styles
   'img.tbiCP {width:18px; height:12px; background-image: url(' + image['cp'] + ');}'

   ;

   

   // map overlays
   

   //big icons styles
   acss += 
   '.tb3BI img   {width:70px; height:' + '67' + 'px;}' +
   '.tb3BI       {float:' + docDir[0] + ';background-repeat:no-repeat;}' +
   '.tb3BI       {margin-top:10px;}' +
   '.tb3BI:hover {background-position:bottom;}' +
   '#n7       {background-image: url(' + image['militargs'] + ');}' +
   '#n7:hover {background-image: url(' + image['militar'] + ');}' +
   '#n8       {background-image: url(' + image['alliancegs'] + ');}' +
   '#n8:hover {background-image: url(' + image['alliance'] + ');}' +
   '#n9       {background-image: url(' + image['setup'] + ');position:relative;}' +
   '#n10      {background-image: url(' + image['militar2gs'] + ');}' +
   '#n10:hover{background-image: url(' + image['militar2'] + ');}' +
   '#n11      {background-image: url(' + image['miscgs'] + ');}' +
   '#n11:hover{background-image: url(' + image['misc'] + ');}' +
   '#n12      {background-image: url(' + image['mercadogs'] + ');}' +
   '#n12:hover{background-image: url(' + image['mercado'] + ');}' 
   ;

   GM_addStyle(acss);

   //------------------------------------------
   //Modified by Lux
   //------------------------------------------
   var cssSetup =	
   '.MsgPageOff {visibility:hidden; display:none; position:absolute; top:-100px; left:-100px;}' +
   '.OuterMsgPageOn {position:absolute; top:0px; left:0px; visibility:visible; width:150%; height:100%; background-color:#000000; z-index:1998; opacity:0.75;}' +
   //'.divCloseMsgPageOn {position: absolute; left:73.5%; top:0.2%; visibility:visible; opacity:1; z-index:2000;}' +
   '.InnerMsgPageOn {position: absolute; left:25%; top:2.8%; visibility:visible; opacity:1; z-index:1999;}';
   GM_addStyle(cssSetup);

   
}

//////////////////////////////////////////////////////////////////////
function parseInt10(str) { return parseInt(str,10); }

/////////////////////////////////////////////////////////////////////
//Compute the seconds for a given human time
function toSeconds(hTime)
{
   var p = hTime.split(":");
   return (p.length === 3) ? (p[0] * 3600) + (p[1] * 60) + (p[2] * 1) : Number.NaN;
} 

/////////////////////////////////////////////////////////////////////
// convert Date to timestamp
function getTimeStamp(dt)
{
   return ( dt instanceof Date ) ? dt.getTime() : dt;
}

/////////////////////////////////////////////////////////////////////
function getTimeSpan(date1, date2)
{
   return (getTimeStamp(date1) - getTimeStamp(date2))/1000;
} 


/////////////////////////////////////////////////////////////////////
//inverse of "toSeconds" -> convert seconds to "human understandable time" => format h:mm:ss (or h:mm:s?)
//aFormat: 0 = h:mm:ss (h = 0->... can be more than 24); 
//         1 = days, h:mm:ss; 
//         2 = h:mm:ss (h = 0->23:59:59 = only time)
function formatTimeSpan(sec, aFormat)
{
   var h,m,s,d,ht;

   if ( sec === Infinity || sec === -Infinity)
   {
      ht = String.fromCharCode(0x221E);
   }
   else if (sec > -1)
   {
      h = Math.floor(sec / 3600);
      m = Math.floor(sec / 60) % 60;
      s = parseInt(sec % 60);
      ht = "";

      switch ( aFormat )
      {
         case 1:
            d = Math.floor(h / 24);
            h = h - d * 24;
            ht += d + ", ";
            break;
         case 2:
            h = h % 24;
            break;
      }
      ht += h + ":" + (m > 9 ? m : '0' + m) + ":" + (s > 9 ? s : '0' + s);
   }
   else
   {
      ht = "0:00:0?";
   }
   return ht;
}


/////////////////////////////////////////////////////////////////////
//aFormat: 0 = at hh:mm; tomorrow at hh:mm; on DD/MM at hh:mm  
//         1 = at hh:mm:ss; DD/MM at hh:mm:ss 
//         2 = at hh:mm:ss
function formatDateTime(dtNow, aD, aFormat)
{
   //convert to a 2 digit string (time representation)
   function to2Str(n)
   {
      return (n > 9 ? n : '0' + n);
   }

   var timeR = '';

   switch ( aFormat )
   {
      case 0:
         var h = ((aD.getTime() - dtNow.getTime()) / 1000 / 3600) + dtNow.getHours() + (dtNow.getMinutes() / 60);
         if ( h < 24 )      { timeR = ""; }
         else if ( h < 48 ) { timeR = T('TOMORROW'); }
         else if ( h < 72 ) { timeR = T('DAYAFTERTOM'); }
         else { timeR = T('ON') + " " + to2Str(aD.getDate()) + "/" + to2Str((aD.getMonth() + 1)); }
         break;

      case 1:
         var day = aD.getDate();
         var month = aD.getMonth();
         if ( day !== dtNow.getDate() || month !== dtNow.getMonth() ) 
         { 
            timeR = to2Str(day) + "/" + to2Str(month + 1); 
         }
         break;
   }

   if ( timeR !== "" ) {  timeR += " "; }
   timeR += T('AT') + " " + to2Str(aD.getHours()) + ":" + to2Str(aD.getMinutes());
   if ( aFormat !== 0 ) {  timeR += ":" + to2Str(aD.getSeconds()); }

   return timeR;
}

/////////////////////////////////////////////////////////////////////
// return first exprN where v is equal caseN 
// or if no match is founded return exprDefault if present or undefined 
function switcher(v/*, case1, expr1, ..., caseN, exprN[, exprDefault]*/)
{
   var i;
   for ( i = 1; i < arguments.length-1; i += 2 )
   {
      if ( v == arguments[i] ) { return arguments[i+1]; }
   }
   if ( arguments.length%2 === 0 ) { return arguments[arguments.length-1]; }
}

/////////////////////////////////////////////////////////////////////
// return true if v is equal some of test1 - testN values
// or false no match is founded
function isSomeOf(v/*, test1, ..., testN*/)
{
   var i;
   for ( i = 1; i < arguments.length; ++i )
   {
      if ( v === arguments[i] ) { return true; }
   }
   return false;
}

/////////////////////////////////////////////////////////////////////
// A robust and universal forEach from sizzlemctwizzle
function forEach(lst, cb) {
    if(!lst)
        return;
    if (lst.snapshotItem)
        for (var i = 0, len = lst.snapshotLength; i < len; ++i)
            cb(lst.snapshotItem(i), i, lst);
    else if (lst.iterateNext) {
        var item, next = lst.iterateNext;
        while (item = next())
            cb(item, lst);
    } else if (typeof lst.length != 'undefined')
        for (var i = 0, len = lst.length; i < len; ++i)
            cb(lst[i], i, lst);
    else if (typeof lst == "object")
        for (var i in lst)
            cb(lst[i], i, lst);
}

/////////////////////////////////////////////////////////////////////
function compare(m, n) 
{
   return m == n ? 0 : (m > n ? 1 : -1);
}

/////////////////////////////////////////////////////////////////////
function compareNumbers(m, n) 
{
   return m - n;
}

/////////////////////////////////////////////////////////////////////
function trimBlanks(s)
{
   var l = 0;
   var r = s.length - 1;
   while (l < s.length && s[l] === ' ')
   {
      l++;
   }
   while (r > l && s[r] === ' ')
   {
      r -= 1;
   }
   return s.substring(l, r + 1);
}


/////////////////////////////////////////////////////////////////////
// create function that call f with boundArgs
// ex.:  
//   proxy = bind(f,[a,b,c]);
//   proxy(); // ---> f(a,b,c)
function bind(f,boundArgs)
{
   return function()
          {
             return f.apply(this, boundArgs);
          };
}

/////////////////////////////////////////////////////////////////////
// create function that call f with boundArgs and self arguments
// ex.:  
//   proxy = bind2(f,[a,b,c]);
//   proxy(x,y); // ---> f(a,b,c,x,y)
function bind2(f,boundArgs) 
{
   return function() 
          {
             var i, args = [];
             for(i = 0; i < boundArgs.length; i++) { args.push(boundArgs[i]); }
             for(i = 0; i < arguments.length; i++) { args.push(arguments[i]); }
             return f.apply(this, args);
          };
}

/////////////////////////////////////////////////////////////////////
//+ Jonas Raoni Soares Silva
//@ http://jsfromhell.com/array/shuffle [rev. #1]

shuffle = function(v){
    for(var j, x, i = v.length; i; j = parseInt(Math.random() * i), x = v[--i], v[i] = v[j], v[j] = x);
    return v;
}

/////////////////////////////////////////////////////////////////////
function cloneArray(v) 
{
   return v.slice();
}

/////////////////////////////////////////////////////////////////////
function cloneObject(obj)
{
   if ( obj !== null && typeof(obj) === 'object' )
   {
      var prop_name;
      var dest_obj  = (obj instanceof Array) ? [] : {};
      for ( prop_name in obj )
      {
         dest_obj[prop_name] = cloneObject(obj[prop_name]);
      }
      return dest_obj;
   }
   return obj;
}

/////////////////////////////////////////////////////////////////////
function cloneUndefinedProperties(src_obj, dest_obj) 
{
   var prop, prop_name;

   for ( prop_name in src_obj ) 
   {
      prop = src_obj[prop_name];
      if ( prop !== null && typeof(prop) === "object" )
      {
         if ( !(prop_name in dest_obj) ) 
         {
            dest_obj[prop_name] = (prop instanceof Array) ? [] : {};
         }
         cloneUndefinedProperties(prop, dest_obj[prop_name]);
      }
      else 
      {
         if ( !(prop_name in dest_obj) ) 
         {
            dest_obj[prop_name] = prop;
         }
      }
   }
}

/////////////////////////////////////////////////////////////////////
function removeUndefinedProperties(src_obj, dest_obj) 
{
   var prop_name, src_prop, dest_prop;

   for ( prop_name in dest_obj ) 
   {
      if ( prop_name in src_obj ) 
      {
         src_prop = src_obj[prop_name];
         dest_prop = dest_obj[prop_name];
         if ( typeof(src_prop) === "object" && typeof(dest_prop) === "object" )
         {
            if ( !src_prop instanceof Array && !dest_prop instanceof Array )
            {
               removeUndefinedProperties(src_prop, dest_prop);
            }
         }
      }
      else
      {
         delete dest_obj[prop_name];
      }
   }
}

/////////////////////////////////////////////////////////////////////
// parseUri 1.2.2
// (c) Steven Levithan <stevenlevithan.com>
// MIT License
function parseUri(str)
{
   if ( !parseUri.options )
   {
      parseUri.options = 
      {
         strictMode: false,
         key:        ["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"],
         q:          {
                        name:   "queryKey",
                        parser: /(?:^|&)([^&=]*)=?([^&]*)/g
                     },
         parser:     {
                        strict: /^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?))?((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,
                        loose:  /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/
                     }
      };
   }

   var o = parseUri.options,
       m = o.parser[o.strictMode ? "strict" : "loose"].exec(str),
       uri = {},
       i = 14;

   while (i--) uri[o.key[i]] = m[i] || "";

   uri[o.q.name] = {};
   uri[o.key[12]].replace(o.q.parser, function ($0, $1, $2)
                                      {
                                         if ($1) uri[o.q.name][$1] = $2;
                                      });

   return uri;
}

//////////////////////////////////////////////////////////////////////
function isIntValid(v)
{
   return v !== null && isFinite(v);
}

//////////////////////////////////////////////////////////////////////
// return a first number from a 'str' using regexp 're', NaN if number is absent
function scanIntRE(str, re)
{
   var v = Number.NaN;
   if ( str.search(re) !== -1 )
   {
      v = parseInt10(RegExp.$1);
   }
   return v;
}

//////////////////////////////////////////////////////////////////////
// return a first number from an arbitrary string 'str', NaN if number is absent
function scanIntAny(str)
{
   return scanIntRE(str, /(\d+)/);
}

//////////////////////////////////////////////////////////////////////
function scanIntWithoutLetter(str)
{
   return scanIntRE(str, /^\W*(\d+)/);
}

//////////////////////////////////////////////////////////////////////
// return a number from a string 'str'. Number must started with 'prefix'.
// NaN if number is absent
function scanIntWithPrefix(prefix, str)
{
   return scanIntRE(str, "(?:\\s+|^)" + prefix + "(\\d+)");
}

//////////////////////////////////////////////////////////////////////
function __getDOMNode(node)
{
   if ( typeof node === "string" )
   {
      node = document.createTextNode(node);
   }
   return node;
}

//////////////////////////////////////////////////////////////////////
function __isLikeToArray(o)
{
   return ( o instanceof Array || (typeof o === "object" && o.length));
}


//////////////////////////////////////////////////////////////////////
// Add the children element(s) to the node
//   call syntax:
//   1)   addChildren(parent, "data")  - add text node to parent
//   2)   addChildren(parent, node)    - add node to parent
//   3)   addChildren(parent, [node, [node1,node2], "data"])
function addChildren(node, children)
{
   if ( children )
   {
      if ( __isLikeToArray(children) )
      { 
         var i;
         for ( i = 0; i < children.length; i++ )
         { 
            addChildren(node, children[i]);
         }
      }
      else 
      {
         node.appendChild(__getDOMNode(children)); 
      }
   }
}

//////////////////////////////////////////////////////////////////////
//entirely remove the "node" content 
function removeChildren(node)
{
   node.innerHTML = "";
}

//////////////////////////////////////////////////////////////////////
//remove the "node" element from the current document
function removeElement(node)
{
   if (node && node.parentNode) 
   {
      node.parentNode.removeChild(node);
   }
}

//////////////////////////////////////////////////////////////////////
//replace the "oldnode" element with "newnode" or with array of nodes
function replaceElement(oldnode, newnode)
{
   if ( oldnode ) 
   {
      var parent = oldnode.parentNode;
      if ( parent )
      {
         if ( __isLikeToArray(newnode) )
         {
            var i;
            var next = oldnode.nextSibling;

            parent.removeChild(oldnode);
            for ( i = 0; i < newnode.length; i++ )
            { 
               parent.insertBefore(__getDOMNode(newnode[i]), next);
            }
         }
         else
         {
            parent.replaceChild(newnode,oldnode);
         }
      }
   }
}


//////////////////////////////////////////////////////////////////////
//move the "node" element from the current parent to the destination "dest" node of the DOM
function moveElement(node, dest)
{
   removeElement(node);
   dest.appendChild(node);
} 

//////////////////////////////////////////////////////////////////////
//insert a referenceNode before a specified node
function insertBefore(node, referenceNode) 
{
   node.parentNode.insertBefore(referenceNode, node);
}

//////////////////////////////////////////////////////////////////////
//insert a referenceNode after a specified node
function insertAfter(node, referenceNode) 
{
   node.parentNode.insertBefore(referenceNode, node.nextSibling);
}

//////////////////////////////////////////////////////////////////////
//insert a node as the first child node of parent
function insertFirst(parent, node) 
{
   parent.insertBefore(node, parent.firstChild);
}

//////////////////////////////////////////////////////////////////////
//insert a node as the last child node of parent
function insertLast(parent, node) 
{
   parent.insertBefore(node, null);
}

//////////////////////////////////////////////////////////////////////
function hasAncestor(node, ancestor)
{
   return (node.compareDocumentPosition(ancestor) & 0x08 /*Node.DOCUMENT_POSITION_CONTAINS*/ ) !== 0;
}

//////////////////////////////////////////////////////////////////////
// returns tagName for a node, always in upper case
function TAG(node) 
{
   var tag = node.tagName;
   return tag ? tag.toUpperCase() : tag;
}

//////////////////////////////////////////////////////////////////////
function getTextContent(node, sep)
{
   var i;
   var str = "";
   var texts = $xf(".//text()", 'l', node);
   if ( sep === undefined ) { sep = " "; }
   for ( i = 0; i < texts.snapshotLength; ++i )
   {
      if ( i > 0 ) { str += sep; }
      str +=  texts.snapshotItem(i).nodeValue;
   }

   return str;
}



//////////////////////////////////////////////////////////////////////
// returns the element with the aID id (wrapper for getElementById)
function $g(aID, aDoc) 
{
   if ( !aDoc ) { aDoc = document; }

   return (aID !== '' ? aDoc.getElementById(aID) : null);
}

//////////////////////////////////////////////////////////////////////
// returns n-th element with given 'tag' in 'parent' 
// or null if n-th element not present (wrapper for getElementsByTag)
function $nth_tag(parent, tag, n) 
{
   var elems = parent.getElementsByTagName(tag);
   return ( elems.length > n ) ? elems[n] : null;
}


//////////////////////////////////////////////////////////////////////
function $xf(xpath, xpt, startnode, aDoc)
{
   if ( !aDoc ) { aDoc = document; }
   if ( !startnode ) { startnode = document; }
   var xpres = XPathResult.FIRST_ORDERED_NODE_TYPE;
   switch ( xpt )
   {
      case 'i':
         xpres = XPathResult.UNORDERED_NODE_ITERATOR_TYPE;
         break;
      case 'l':
         xpres = XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE;
         break;
      case 'r':
         xpres = XPathResult.ORDERED_NODE_SNAPSHOT_TYPE;
         break;
   }
   var ret = aDoc.evaluate(xpath, startnode, null, xpres, null);
   return (xpres === XPathResult.FIRST_ORDERED_NODE_TYPE ? ret.singleNodeValue : ret);
}

//////////////////////////////////////////////////////////////////////
//   call syntax:
//   1)   $at(node)
//   2)   $at(node, [])
//   3)   $at(node, [name,value])
//   4)   $at(node, [[name1,value1],...,[nameN,valueN]])
// It's also possible add events listeners uses syntax  $at(node, [type, listener, useCapture]) and so on.

function $at(aElem, attributes)
{
   function processAttribute(aElem, name, value)
   {
      if ( value !== null && value !== undefined && value !== "" )
      {
         if ( name === 'class' && value.charAt(0) === '+' )
         {
            addClass(aElem, value.slice(1));
         }
         else
         {
            aElem.setAttribute(name, value);
            if ( name.toUpperCase() === 'TITLE' ) 
            {
               aElem.setAttribute('alt', value);
            }
         }
      }
      else
      {
         aElem.removeAttribute(name);
      }
   }

   function processEventListener(aElem, type, listener, useCapture)
   {
      aElem.addEventListener(type, listener, useCapture);
   }

   if ( attributes )
   {
      var xi;
      for ( xi = 0; xi < attributes.length; xi++ )
      {
         var attribute = attributes[xi];
         if ( attribute instanceof Array )
         {
            if ( attribute.length === 2 )
            {
               processAttribute(aElem, attribute[0], attribute[1]);
            }
            else if ( attribute.length === 3 )
            {
               processEventListener(aElem, attribute[0], attribute[1], attribute[2]);
            }
         }
         else if ( xi === 0 ) // called as $at(node, [name,value])
         {
            if ( attributes.length === 2 )
            {
               processAttribute(aElem, attribute, attributes[1]);
            }
            else if ( attribute.length === 3 )
            {
               processEventListener(aElem, attribute, attributes[1], attributes[2]);
            }
            break;
         }
      }
   }
}

//////////////////////////////////////////////////////////////////////
// Create a new element of the DOM
//   call syntax:
//   1)   $e(type)
//   2)   $e(type, innerHTML)
//   3)   $e(type, childNode)
//   4)   $e(type, [attributes])
//   5)   $e(type, [attributes], innerHTML)
//   6)   $e(type, [attributes], childNode)
//   7)   $e(type, [attributes], [children])
//   8)   $e(type, null,         one of above)
function $e(aType, attributes, content)
{
   var node = document.createElement(aType); 

   /*
   if ( arguments.length === 2 && 
        ( !(attributes instanceof Array) || typeof attributes === "string" ) )
   {
      content = attributes;
      attributes = null;
   }
   */  
   if ( !(attributes instanceof Array) && !(attributes === null || attributes === undefined) )
   {
      content = attributes;
      attributes = null;
   }

   $at(node, attributes);
   
   if ( content !== null && content !== undefined )
   {
      if ( typeof content === "object" ) 
      {
         addChildren(node,content);
      }
      else if ( content !== "" ) 
      {
         node.innerHTML = content; 
      }
   }
   return node;
}

//////////////////////////////////////////////////////////////////////
// Create a text node of the DOM
function $txt(data)
{
   return document.createTextNode(data);
}

//////////////////////////////////////////////////////////////////////
function $t(att, content) 
{
   return $e("table", att, content);
}

//////////////////////////////////////////////////////////////////////
function $th(att, content) 
{
   return $e("th", att, content);
}

//////////////////////////////////////////////////////////////////////
function $r(att, content) 
{
   return $e("tr", att, content);
}

//////////////////////////////////////////////////////////////////////
// OBSOLETE, use $td instead
function $c(iHTML, att) 
{
   return $e("td", att, iHTML);
}

//////////////////////////////////////////////////////////////////////
function $td(att, content) 
{
   return $e("td", att, content);
}

//////////////////////////////////////////////////////////////////////
function $img(att)
{
   var aImg = document.createElement("img");
   $at(aImg, att);
   return aImg;
}

//////////////////////////////////////////////////////////////////////
// OBSOLETE, use $lnk instead
function $a(iHTML, att)
{
   return $e("a", att, iHTML);
}

//////////////////////////////////////////////////////////////////////
function $lnk(att, content)
{
   return $e("a", att, content);
}

//////////////////////////////////////////////////////////////////////
function $action(att, content, onClick)
{
   var aLink = $lnk(att, content);
   aLink.href = jsVoid;
   aLink.addEventListener("click", onClick, false);
   return aLink;
}

//////////////////////////////////////////////////////////////////////
function $i(att)
{
   var aInput = document.createElement("input");
   $at(aInput, att);
   return aInput;
}

//////////////////////////////////////////////////////////////////////
// OBSOLETE, use $div instead
function $d(iHTML, att)
{
   return $e("div", att, iHTML);
}

//////////////////////////////////////////////////////////////////////
function $div(att, content)
{
   return $e("div", att, content);
}

//////////////////////////////////////////////////////////////////////
function $span(att, content)
{
   return $e("span", att, content);
}

//////////////////////////////////////////////////////////////////////
function getClasses(str)
{
   return  ( str instanceof Array ) ? str : str.split(" ");
}

//////////////////////////////////////////////////////////////////////
// check class of element ex. ex must be valid
//
function hasClass(ex, cls)
{
   var classes,i;
   if ( cls ) 
   {
      if ( ex.className )
      {
         classes = ex.className.split(" ");
         for ( i = 0; i < classes.length; ++i)
         {
            if (classes[i] === cls )
            {
               return true;
            }
         }
      }
   }
   return false;
}

//////////////////////////////////////////////////////////////////////
// check presence one of classes of element ex. ex must be valid
//   call syntax:
//   1)   hasAnyClass(ex, "cls")
//   2)   hasAnyClass(ex, "cls1 cls2 ... clsN")
//   3)   hasAnyClass(ex, ["cls1", "cls2", ..., clsN])
function hasAnyClass(ex, cls)
{
   if ( cls ) 
   {
      if ( ex.className )
      {
         var i, j;
         var classes = getClasses(ex.className);
         var checked_classes = getClasses(cls);
         var bFound = false;

         for ( i = 0; i < classes.length; ++i )
         {
            for ( j = 0; j < checked_classes.length; ++j )
            {
               if ( classes[i] === checked_classes[j] )
               {
                  return true;
               }
            }
         }
      }
   }
   return false;
}

//////////////////////////////////////////////////////////////////////
//add class to element ex. ex must be valid
function addClass(ex,cls)
{
   if ( cls ) 
   {
      if ( !hasClass(ex,cls) )
      {
         if ( ex.className ) 
         {
            ex.className += " " + cls;
         }
         else 
         {
            ex.className = cls;
         }
      }
   }
}

//////////////////////////////////////////////////////////////////////
//delete class(es) from element ex. ex must be valid
//   call syntax:
//   1)   delClass(ex, "cls")
//   2)   delClass(ex, "cls1 cls2 ... clsN")
//   3)   delClass(ex, ["cls1", "cls2", ..., clsN])
function delClass(ex,cls)
{
   if ( cls ) 
   {
      if ( ex.className )
      {
         var i,j;
         var classes = getClasses(ex.className);
         var checked_classes = getClasses(cls);
         var bFound = false;

         for ( i = 0; i < classes.length; ++i )
         {
            for ( j = 0; j < checked_classes.length; ++j )
            {
               if ( classes[i] === checked_classes[j] )
               {
                  classes.splice(i,1);
                  --i; // continue with same position
                  bFound = true;
                  break;
               }
            }
         }
         if ( bFound ) { ex.className = classes.join(" "); }
      }
   }
}

//////////////////////////////////////////////////////////////////////
function toggleClass(ex,cls)
{
   if ( hasClass(ex,cls) ) 
   {
      delClass(ex,cls);
   }
   else
   {
      addClass(ex,cls);
   }
}

//////////////////////////////////////////////////////////////////////
function ifClass(ex, cond, cls)
{
   if ( cond )
   {
      addClass(ex, cls);
   }
   else
   {
      delClass(ex, cls);
   }
}

//////////////////////////////////////////////////////////////////////
function getX(element)
{
   var e;
   var x = 0;
   for ( e = element; e; e = e.offsetParent ) 
   {
      x += e.offsetLeft; 
   }

   for ( e = element.parentNode; e && e !== document.body; e = e.parentNode )
   {
      x -= e.scrollLeft;
   }

   return x;
}

//////////////////////////////////////////////////////////////////////
function getY(element)
{
   var e;
   var y = 0;
   for ( e = element; e; e = e.offsetParent ) 
   {
      y += e.offsetTop; 
   }

   for ( e = element.parentNode; e && e !== document.body; e = e.parentNode )
   {
      y -= e.scrollTop;
   }

   return y;
}

//////////////////////////////////////////////////////////////////////
function createHTMLDocument(title) 
{
   if ( document.implementation.createHTMLDocument ) 
   {
      return document.implementation.createHTMLDocument(title);
   }
   else
   {
      // Firefox does not support document.implementation.createHTMLDocument()
      // cf. http://www.quirksmode.org/dom/w3c_html.html#t12
      // the following is taken from http://gist.github.com/49453
      var strTitleTag = title ? '<title>' + title + '</title>' : '';
      var xmlDoc = document.implementation.createDocument('', '', null);
      var templ = '<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">'
              + '<xsl:output method="html"/><xsl:template match="/">'
              + '<html><head>' + strTitleTag + '</head><body/></html>'
              + '</xsl:template></xsl:stylesheet>';
      var proc = new XSLTProcessor();
      proc.importStylesheet(new DOMParser().parseFromString(templ,'text/xml'));
      return proc.transformToDocument(xmlDoc);
   }
}


//////////////////////////////////////////////////////////////////////
function ajaxRequest(url, aMethod, param, onSuccess, onFailure /*opt*/)
{
   ;

   var aR = new XMLHttpRequest();
   aR.onreadystatechange = onReadyStateChange;
   aR.open(aMethod, url, true);
   if (aMethod === 'POST') { aR.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8'); }
   aR.send(param);


   function onReadyStateChange()
   {
      if ( aR.readyState === 4 )
      {
         if ( aR.status === 200 ) 
         {
            onSuccess(aR);
         }
         else if ( onFailure ) 
         {
            onFailure(aR);
         }
      }
   }
}

//////////////////////////////////////////////////////////////////////
// OBSOLETE: Migrate to ajaxLoadDocument
function ajaxNDV2(aR)
{
   return $d(aR.responseText);
}

//////////////////////////////////////////////////////////////////////
function ajaxLoadDocument(url, onSuccess, onFailure /*opt*/)
{
   ajaxRequest(url, "GET", null, 
      function (resp)
      {
         var range = document.createRange();
         range.setStartAfter(document.body);
         var xhr_frag = range.createContextualFragment(resp.responseText);
         var xhr_doc = createHTMLDocument();
         xhr_doc.adoptNode(xhr_frag);
         xhr_doc.documentElement.appendChild(xhr_frag);
         onSuccess(xhr_doc);
      },

      function (resp)
      {
         if ( onFailure ) { onFailure(); }
      }
   );
}

//////////////////////////////////////////////////////////////////////
function Persistence(serializer, storage)
{
   
   

   this.serializer = serializer;
   this.storage = storage;
}

//////////////////////////////////////////////////////////////////////
Persistence.prototype.__composePersistentName = function (NS, aName) 
{
   return (( NS === undefined || NS === null ) ? "" : NS) + '_' + aName;
};

//////////////////////////////////////////////////////////////////////
// load any possible JS type
Persistence.prototype.loadValue = function (NS, aName, defValue) 
{
   var key = this.__composePersistentName(NS, aName); 
   var val = this.storage.getItem(key);
   if ( val === null )
   {
      val = defValue;
   }
   else 
   {
      val = this.serializer.deserialize(val);
   }
   return val;
};

//////////////////////////////////////////////////////////////////////
// always return object
Persistence.prototype.loadObject = function (NS, aName, defValue) 
{
   if ( defValue === undefined )
   {
      defValue = {};
   }
   var v = this.loadValue(NS, aName, defValue);
   if ( !v || typeof(v) !== "object" ) 
   {
      v = defValue;
   }
   return v;
};


//////////////////////////////////////////////////////////////////////
Persistence.prototype.saveValue = function (NS, aName, aValue)
{
   var key = this.__composePersistentName(NS, aName);
   this.storage.setItem(key, this.serializer.serialize(aValue));
};


//////////////////////////////////////////////////////////////////////
// Usage:
//  1)
//    saveObject(aName, collection) 
//     - store entire collection
//  2)
//    saveObject(aName, object, key) 
//     - replace object by key
Persistence.prototype.saveObject = function (NS, aName, aValue, aKey)
{
   if ( aKey === undefined ) 
   {
      this.saveValue(NS, aName, aValue);
   }
   else if ( aKey )
   {
      var cV = this.loadObject(NS, aName);

      if ( aValue === undefined || aValue === null ) 
      {
         delete cV[aKey];
      }
      else
      {
         cV[aKey] = aValue;
      }

      this.saveValue(NS, aName, cV);
   }
};


//////////////////////////////////////////////////////////////////////
Persistence.prototype.drop = function (NS, aName) 
{
   var key = this.__composePersistentName(NS, aName);
   this.storage.removeItem(key);
};

//////////////////////////////////////////////////////////////////////
function composeGMcookieName(aName, addNewDid) 
{
   nC = (addNewDid && addNewDid == true ? TB3O.gServer + '_' + TB3O.UserID + '_' + actV.vNewdid + '_' + aName : TB3O.gServer + '_' + TB3O.UserID + '_' + aName); return nC;
};

function getGMcookie(aName, addNewDid) {return decodeURIComponent(GM_getValue(composeGMcookieName(aName, addNewDid), false));};
function deleteGMcookie(aName, addNewDid) {nc = composeGMcookieName(aName, addNewDid); GM_deleteValue(nc);};
function setGMcookie(aName, aValue, addNewDid) {if (TB3O.UserID != '0' && TB3O.UserID != 0) {var nc = composeGMcookieName(aName, addNewDid); if (aValue) GM_setValue(nC, encodeURIComponent(aValue)); else GM_setValue(nC, false); nc = null;};};

	function addGMcookieValue(aName, values, addNewDid) {
		var nV = '';
		for (var i = 0; i < values.length; i++){
			if (values[i] != ''){
				nV += values[i];
				if (i != values.length - 1) nV += '$';
			} else return;
		};
		var valC = getGMcookie(aName, addNewDid);
		if (valC != "false" && valC != '') valC += "$$" + nV; else valC = nV;
		setGMcookie(aName, valC, addNewDid);
		nV = null; valC = null;
	};


//////////////////////////////////////////////////////////////////////
function removeGMcookieValue(aName, indexNo, reloadPage, aFunctionToRunAfter, addNewDid)
{
   return function ()
   {
      if (confirm(T('DEL') + ". " + T('QSURE')))
      {
         var valC = getGMcookie(aName, addNewDid);
         if (valC != "false" && valC != '')
         {
            valC = valC.split("$$");
            valC.splice(indexNo, 1);
            valC = valC.join("$$");
            setGMcookie(aName, valC, addNewDid);
            removeElement($xf("//*[@id='" + aName + "']"));
            if (reloadPage) history.go(0);
            else aFunctionToRunAfter();
         };
      };
   };
};

//////////////////////////////////////////////////////////////////////
// FireFox+GM specific
var persistence = new Persistence(
   {   
      serialize: uneval, 
      deserialize: function (str) { return eval(str);} 
   },
   {
      getItem: function(key) { var val = GM_getValue(key); return (val===undefined) ? null : val;},
      setItem: GM_setValue,
      removeItem: GM_deleteValue
   }
);

//////////////////////////////////////////////////////////////////////
persistence.getUserSpecificNS = function()
{
   return TB3O.gServer + '_' + TB3O.UserID;
};


/*
//////////////////////////////////////////////////////////////////////
// standard way
// current problem: date deserialization
var persistence = new Persistence({serialize: JSON.stringify, deserialize: JSON.parse },
   {
      common_prefix: "userscripts.Travian4 Beyond - SSE.",
      getItem: function(key) { return localStorage.getItem(this.common_prefix + key); },
      setItem: function(key,val) { return localStorage.setItem(this.common_prefix + key,val); },
   }
);

//////////////////////////////////////////////////////////////////////
persistence.getUserSpecificNS = function()
{
   return TB3O.UserID;
};
*/

//////////////////////////////////////////////////////////////////////
persistence.getVillageSpecificNS = function()
{
   return this.getUserSpecificNS() + "_" + TB3O.ActiveVillageId;
};

//////////////////////////////////////////////////////////////////////
function loadPersistentUserObject(aName, defValue/*opt*/) 
{
   return persistence.loadObject(persistence.getUserSpecificNS(), aName, defValue);
}

//////////////////////////////////////////////////////////////////////
function savePersistentUserObject(aName, aValue, aKey /*opt*/)
{
   return persistence.saveObject(persistence.getUserSpecificNS(), aName, aValue, aKey)
}

//////////////////////////////////////////////////////////////////////
function loadPersistentVillageObject(aName, defValue/*opt*/) 
{
   return persistence.loadObject(persistence.getVillageSpecificNS(), aName, defValue);
}

//////////////////////////////////////////////////////////////////////
function savePersistentVillageObject(aName, aValue, aKey /*opt*/)
{
   return persistence.saveObject(persistence.getVillageSpecificNS(), aName, aValue, aKey)
}

//////////////////////////////////////////////////////////////////////
// OBSOLETE
function getGMcookieV2(aName, defValue) 
{
   if ( defValue === undefined )
   {
      defValue = {};
   }
   return persistence.loadValue(persistence.getUserSpecificNS(), aName, defValue);
}

//////////////////////////////////////////////////////////////////////
// OBSOLETE
function setGMcookieV2(aName, aValue, aKey /*opt*/)
{
   return savePersistentUserObject(aName, aValue, aKey)
}
//////////////////////////////////////////////////////////////////////
// translated t item if available
function T(name /* arg1, ... argN */)
{
   var s = t[name];

   if ( s !== undefined ) 
   {
      // try to expand arguments substitution
      if ( arguments.length > 1 ) 
      {
         var args = arguments;
         s = s.replace(/[$](\d+)/g, 
                       function(str,no)
                       { 
                          return (no < args.length) ? args[no] : str; 
                       });   
      }
   }
   else
   {
      s = '---';
   }

   return s;
}
 
//////////////////////////////////////////////////////////////////////
T.saveLocaleString = function(name,str)
{
   if ( t[name] === undefined )
   {
      t[name] = str;
   }
   persistence.saveObject(TB3O.lng, "i18n", str, name);
};

//////////////////////////////////////////////////////////////////////
T.loadLocalization = function()
{
   function applyCollection(colLoc)
   {
      var name;
      for ( name in colLoc ) 
      {
         if ( t[name] === undefined ) 
         {
            t[name] = colLoc[name];
         }
      }
   }

   applyCollection(persistence.loadObject(arAvLang[TB3O.O[0]], "i18n"));

   if ( arAvLang[TB3O.O[0]] !== TB3O.lng )
   {
      // fallback to server language
      applyCollection(persistence.loadObject(TB3O.lng, "i18n"));
   }
};

//////////////////////////////////////////////////////////////////////
// Core function for create the images from the 'resource name'.
// Can optionally add array of attributes 'attr' to the created image element.
function I(name, attr /*opt*/)
{
   var pre_att;
   var imgNode = null;
   
   if ( I.images_attributes ) { pre_att = I.images_attributes[name]; }

   if ( !pre_att ) 
   {
      // TEMP, use gIc 
      var imgHTML = gIc[name];
      if ( imgHTML )
      {
         var div = $e("div",imgHTML);
         imgNode = div.removeChild(div.firstChild);
         $at(imgNode,attr);
      }
      else
      {
         var src = image[name]; // TBeyond image?
         if ( src )
         {
            pre_att = [['src',src]];
         }
         else // assume standard Travian image
         {
            //
            pre_att = [['class',name], ['src',xGIF]];
         }
      }
   }

   return imgNode ? imgNode : $img(pre_att.concat(attr));
}

/////////////////////////////////////////////////////////////////////
function getResourceImage(ri)
{
   return I("r" + (ri === 4 ? 0 : ri + 1));
}

/////////////////////////////////////////////////////////////////////
function setTBAttribute(node, name, value)
{
   return node.setAttributeNS("http://userscripts.org/scripts/show/98310", name, value);
}

/////////////////////////////////////////////////////////////////////
// always return null if node does not has such attribute
function getTBAttribute(node, name)
{
   return ( node.hasAttributeNS("http://userscripts.org/scripts/show/98310", name) ) ?
              node.getAttributeNS("http://userscripts.org/scripts/show/98310", name) : null;
}


//////////////////////////////////////////////////////////////////////
function loadSeparators()
{
   var aPositions = getGMcookieV2("VillagesSep"),
       aSeparators = [],
       i;

   if ( !aPositions.length )
   {
      aPositions = [];
   }

   for ( i = 0; i < aPositions.length; ++i )
   {
      if ( aPositions[i] )
      {
         aSeparators[aPositions[i]] = 1;
      }
   }

   return aSeparators;
}


//////////////////////////////////////////////////////////////////////
function saveSeparators(aSeparators)
{
   var aPositions = [], 
       i;

   for ( i = 0; i < aSeparators.length; ++i )
   {
      if ( aSeparators[i] )
      {
         aPositions[aPositions.length] = i;
      }
   }

   setGMcookieV2("VillagesSep", aPositions); 
}

/////////////////////////////////////////////////////////////////////
// return [index of troop,title] from valid image
// index of troop is NaN if can't be determined
function getTroopIndexTitleFromImg(tImg)
{
   var tIndex = Number.NaN;

   
   {
      var imgCN = tImg.className;
      if ( imgCN && imgCN.indexOf("unit") !== -1 && imgCN.search(/u(\d+)/) !== -1 )
      {
         tIndex = parseInt10(RegExp.$1);
      }
   }

   return [tIndex, tImg.title];
}

/////////////////////////////////////////////////////////////////////
function getRaceFromTroopIndex(ti)
{
   return avRace[Math.floor(ti/10)];
}

/////////////////////////////////////////////////////////////////////
function getScoutTroopIndex(race)
{
   return switcher(race, 'Romans',4, 'Teutons',14, 'Gauls',23, 0);
}

/////////////////////////////////////////////////////////////////////
/*
function calcRelativeTime(secs)
{
   return new Date(TB3O.serverTime.getTime() + (secs * 1000) + TB3O.desiredTimeOffset);
}
*/

/////////////////////////////////////////////////////////////////////
// return current date/time in server origin
function getServerTimeNow()
{
   var dtNow = new Date();
   dtNow.setTime(dtNow.getTime() - TB3O.localTimeOffset);
   return dtNow;
}

/////////////////////////////////////////////////////////////////////
// return current date/time in desired origin
function getDesiredTimeNow()
{
   var dtNow = new Date();
   dtNow.setTime(dtNow.getTime() - TB3O.localTimeOffset + TB3O.desiredTimeOffset);
   return dtNow;
}

/////////////////////////////////////////////////////////////////////
// return date/time converted into in desired origin
function getDesiredTime(dt)
{
   return new Date(getTimeStamp(dt) + TB3O.desiredTimeOffset);
}

/////////////////////////////////////////////////////////////////////
function __formatDateTimeRelative(dtNow, dtBase, secs, aFormat)
{
   return formatDateTime(dtNow, new Date(dtBase.getTime() + (secs * 1000)), aFormat);
}

/////////////////////////////////////////////////////////////////////
// format date/time that relative to current time
function formatDateTimeRelativeToNow(secs, aFormat)
{
   var dtNow = getDesiredTimeNow();
   return __formatDateTimeRelative(dtNow, dtNow, secs, aFormat);
}

/////////////////////////////////////////////////////////////////////
// format date/time that relative to time of page generation
function formatDateTimeRelative(secs, aFormat)
{
   return __formatDateTimeRelative(getDesiredTimeNow(), getDesiredTime(TB3O.serverTime), secs, aFormat);
}

//////////////////////////////////////////////////////////////////////
function getBuildingMaxLevel(villageId, gid)
{
   var maxLevel;
   switch ( gid )
   {
      case 1 :
      case 2 :
      case 3 :
      case 4 :
      {
         var bIsCapital = (TB3O.U[5] == villageId); //is this the capital

         if ( !bIsCapital ) { maxLevel = 10; }
         else
         {
            if ( TB3O.O[1] === "1" ) { maxLevel = 12; }
            else { maxLevel = 100; } // no known restrictions except resources
         }
         break;
      }
      case 5 :
      case 6 :
      case 7 :
      case 8 :
      case 9 :
         maxLevel = 5;
         break;
      case 23:
      case 35:
         maxLevel = 10;
         break;
      case 27:
         maxLevel = 20;
         break; //treasury -> we'll keep the level 20 as max level, even if for older game versions it is 10
      case 40:
         maxLevel = 100;
         break;
      default:
         maxLevel = 20;
   }
   return maxLevel;
}

//////////////////////////////////////////////////////////////////////
// Calculate availability of something with known cost 
// Return array arr with structure:
// arr[0] - state
//          0 - can't be built (not enough resources)
//          1 - can be built 
//          2 - can be built with NPC
//          3 - can't be built (not enough capacity of granary/warehouse)
// arr[1] - time in secs when building can be built (if state 0 or 2)
//          0 if state 1  and Infinity if state is 3
// arr[2] - time in secs when building can be built using NPC (if state 0)
//          0 if state 1,2  and Infinity if state is 3
// arr[3] - array(5) for each resource [res1 need,...,unires need]  (copy of cost)
// arr[4] - array(5) for each resource [[res1 rest,sec to produce],...,[unires rest,sec to produce]]
//          only if state is not 1
function getAvailability(cost, resourcesInfo, bIsNPCAvailable)
{
   var state = 1;
   var nResTot = 0;
   var nEPpHTot = 0;
   var rneed = [0,0,0,0,0];
   var rt = Array(5);
   var maxTimeToProduce = 0;
   var timeToProduceForNPC = 0;
   var rest, ri;

   for ( ri = 0; ri < 4; ++ri )
   {
      rest = cost[ri] - resourcesInfo.Res[ri];
      rneed[ri] = cost[ri];
      rneed[4] += cost[ri];

      if ( rest <= 0 )
      {
         rt[ri] = [0,0];
      }
      else
      {
         var timeToProduce = getSecondsToProduce(rest,resourcesInfo.EPpH[ri]);
         if ( resourcesInfo.Cap[ri] < cost[ri] )
         {
            timeToProduce = maxTimeToProduce = timeToProduceForNPC = Infinity;
            state = 3;
         }
         else
         {
            if ( state === 1 ) { state = 0; }
            if ( maxTimeToProduce < timeToProduce ) { maxTimeToProduce = timeToProduce; }
         }

         rt[ri] = [Math.ceil(rest),timeToProduce];
      }
      nResTot += Math.floor(resourcesInfo.Res[ri]);
      nEPpHTot += resourcesInfo.EPpH[ri];
   }

   rest = rneed[4] - nResTot;

   if ( state === 0 && rest <= 0 && bIsNPCAvailable ) { state = 2; }

   if ( state === 0 ) 
   { 
      timeToProduceForNPC = ( bIsNPCAvailable ) ? getSecondsToProduce(rest,nEPpHTot) : Infinity; 
   }

   rt[4] = [rest > 0 ? rest : 0, timeToProduceForNPC];

   return [state,maxTimeToProduce,timeToProduceForNPC,rneed,rt];
}

//////////////////////////////////////////////////////////////////////
// Calculate availability of building with given gid and level for desired village
// See getAvailability() for details.
// Add new state:
//          4 - can't be built (max level already reached)
function getBuildingAvailability(villageId, resourcesInfo, gid, crtLvl, bIsNPCAvailable)
{
   var retArr;
   var bData = bCost[gid];
   var cost;

   if ( bData )
   {
      cost = bData[crtLvl];
   }

   if ( crtLvl > getBuildingMaxLevel(villageId,gid) || !cost ) 
   {
      retArr = [4,0,0,[],[]];
   }
   else
   {
      retArr = getAvailability(cost, resourcesInfo, bIsNPCAvailable);
   }
   return retArr;
}

//////////////////////////////////////////////////////////////////////
function getBuildingsAvailability(arrBA,idMin,idMax, villageId, arrB, resourcesInfo)
{
   var refreshTimeout = Infinity;
   var timeout;

   var id, refreshId = 0;
   var bIsNPCAvailable = TB3O.bIsNPCAvailable && isBuildingPresent(villageId,17);

   // collect build info
   for ( id = idMin; id <= idMax; ++id )
   {
      if ( arrB[id] )
      {
         var gid = arrB[id][0];
         var crtLevel = arrB[id][1];

         //select resource color
         arrBA[id] = getBuildingAvailability(villageId, resourcesInfo, gid, crtLevel + 1, bIsNPCAvailable);

         timeout = arrBA[id][1];
         if ( timeout > 0 && timeout < refreshTimeout ) { refreshTimeout = timeout; refreshId = id;}
         timeout = arrBA[id][2];
         if ( timeout > 0 && timeout < refreshTimeout ) { refreshTimeout = timeout; refreshId = id;}
      }
   }

   
   
   

   return refreshTimeout;
}

//////////////////////////////////////////////////////////////////////
function getTroopTime(iTT, xRace, arX)
{
   var tt = getDR(xRace);
   return Math.round(arX[0] * 3600 / uc[tt + iTT][8] / arX[4] + 
                     arX[1] * 3600 / uc[tt + iTT][8] / arX[4] / (1 + arX[2] / 10));
}

//////////////////////////////////////////////////////////////////////
// return time in seconds to travel qDist squares for xRace merchant 
function getMerchantTime(qDist, xRace)
{
   return Math.round(qDist * 3600 / TB3O.MerchantsSpeed[xRace] / TB3O.nMerchantSpeedFactor[TB3O.nServerType]);
}

//////////////////////////////////////////////////////////////////////
function getNewdidFromChild(aParent) 
{
   var vNewdid = 0;
   var vLinkNodes = aParent.getElementsByTagName("a");

   if ( vLinkNodes.length )
   {
      vNewdid = getNewdidFromLink(vLinkNodes[0].href);
   }
   return vNewdid;
}


/////////////////////////////////////////////////////////////////////
function setVillageRes(villageId, aDoc)
{
   var resourcesInfo = getResourcesInfo2(aDoc);
   if ( resourcesInfo.dUpd )
   {
      TB3O.VillagesInfo[villageId].r = resourcesInfo;
   }
   

   return !!resourcesInfo.dUpd;
}

/////////////////////////////////////////////////////////////////////
function MerchantUnderwayInfo(owner, srcXY, destXY, ttArrival, res, xn)
{
   this.Res  = res; // resources carrying
   this.ttArrival = ttArrival; // server timestamp for merchant arrival
   // source 
   this.sx = srcXY[0];  
   this.sy = srcXY[1];

   // destination
   this.dx = destXY[0];
   this.dy = destXY[1];

   this.xn = xn;         // number of sheduled routes

   this.owner = owner; // user ID of merchant owner

   return this;
}

/////////////////////////////////////////////////////////////////////
function MerchantsUnderwayInfo()
{
   this.i = []; // incoming merchants
   this.o = []; // outgoing merchants
   this.r = []; // returning merchants

   this.ttUpd = undefined; // date of information update (server timestamp when marketplace last visited)

   return this;
}
/////////////////////////////////////////////////////////////////////
function getCrtServer()
{
   TB3O.fullServerName = crtUrl.host;
   TB3O.gServer = TB3O.fullServerName.replace(/\.travian\./, '');

   
   

   return;
}

/////////////////////////////////////////////////////////////////////
function getPlayerId(aDoc)
{
   var uid;
   var uLink = $xf(
      "//div[contains(@class,'sideInfoPlayer')]//a[contains(@href, 'spieler.php')]", 'f', aDoc, aDoc);

   if ( uLink )
   {
      uid = parseUri(uLink.href).queryKey.uid;
   }

   return uid;
}

/////////////////////////////////////////////////////////////////////
function getCapitalId()
{
   var villageInfo = getVillageInfoByMapId(TB3O.VillagesInfo, TB3O.U[4]);
   

   if ( villageInfo )
   {
      TB3O.U[5] = villageInfo.id;
      
   }
   else
   {
      // something wrong, set values to "-" so as to prevent endless detection loop
      TB3O.U[4] = "-";
      TB3O.U[5] = "-";
   }
   savePlayerInfo();
}

/////////////////////////////////////////////////////////////////////
function setRace(ti)
{
   TB3O.U[7] = ti;
   TB3O.U[1] = getRaceFromTroopIndex(ti);
   
   savePlayerInfo();
}


/////////////////////////////////////////////////////////////////////
// race cookies are undefined - enter the barracks
function getRaceFromBarracks()
{
   ajaxRequest(bksLnk, 'GET', null, 
      function (ajaxResp)
      {
         //race recognition - first image in table of troops
         if ( ajaxResp.responseText.search(/unit u(\d+)/) !== -1 ) 
         {
            var xV = parseInt10(RegExp.$1);
            if ( !isNaN(xV) ) { setRace(xV); }
         }
         
      }
   );
}

/////////////////////////////////////////////////////////////////////
// TODO: determine TB3O.localTimeOffset
function getServerTime(aDoc)
{
   var dServerTime = new Date();
   dServerTime.setMilliseconds(0);

   var tp1 = $g("tp1",aDoc);
   if ( tp1 ) 
   {
      //var sTs = toSeconds(tp1.textContent);
      //      dEnd.setTime(dEnd.getTime() + toSeconds(tdDS.textContent) * 1000);
   }
//   alert("TBStartTime = " + TB3O.TBStartTime +
//         "\ndServerTime" + dServerTime.getTime() + "|||" + tp1.textContent);

   return dServerTime;
}

/////////////////////////////////////////////////////////////////////
function getServerLanguage()
{
   var crtServerX = crtUrl.host.split(".");
   var strFirst = crtServerX[0];
   var strLast = crtServerX[crtServerX.length - 1];
   var lng = '';

   if ( strLast === "net" ) // Spanish
   {
      lng = "es";
   }
   else if ( strLast === "at" ) // Austria
   {
      lng = "de";
   }
   else if ( strLast === "org" )
   {
      if ( strFirst === "research" )
      {
         lng = "en";
      }
      else
      {
         lng = "de";
      }
   }
   else if ( strLast === "uk" || strLast === "us" || strLast === "com" )
   {
      lng = "en";
   }
   else if ( strLast === "cl" && strLast === "mx" ) // Chile & Mexico
   {
      lng = "ar";
   }
   else if ( strLast === "asia" )
   {
      lng = "th";
   }

   if ( lng === '' ) { lng = strLast; }

   return lng;
}

/////////////////////////////////////////////////////////////////////
function getServerType()
{
   var strFirst = crtUrl.host.split(".")[0];
   var strFirst2 = strFirst.slice(-2);
   var nServerType = 0; 

   // server type
   if ( strFirst.indexOf("speed") !== -1 || strFirst.indexOf("vip") !== -1 || strFirst.indexOf("research") !== -1 )
   {
      nServerType = 1;
   }
   else if ( strFirst2 === "x2" || crtUrl.host === "t1.travian.com" )
   {
      nServerType = 2;
   }
   else if ( strFirst2 === "x3" )
   {
      nServerType = 1;
   }
   else if ( strFirst2 === "x5" )
   {
      nServerType = 3;
   }

   return nServerType;
}
//////////////////////////////////////////////////////////////////////
// Do changes in tables created via uiCreateResAndTimeTable when any
// resource counter countdown to zero
function eventResZeroCountdown(aCell)
{
   var aRowNode = aCell.parentNode;
   if ( aRowNode )
   {
      var aTb = $xf("./ancestor::table[@class='rNt']", 'f', aRowNode);
      removeElement(aRowNode);

      if ( aTb )
      {
         // check table, there are present any resources rows with counters?
         var bIsEmpty = !$xf(".//td[contains(@class,'timeout')]", 'f', aTb);

         if ( bIsEmpty )
         {
            // check if table is injected into regular page, in opposite upgrade table updated automatically
            var bIsInjected  = !!$xf("./ancestor::*[@class='tbInject']", 'f', aTb);

            if ( bIsInjected )
            {
               replaceElement(aTb, $txt(T('EXTAV')));
            }
         }
      }
   }
}

//////////////////////////////////////////////////////////////////////
// Do changes in tables created via uiCreateResAndTimeTable when any
// resource counter reach it cap
function eventResCapReached(aCell)
{
   var aRowNode = aCell.parentNode;
   if ( aRowNode )
   {
      addClass(aRowNode,"tbCapReached");
   }
}

//////////////////////////////////////////////////////////////////////
function eventResThresholdCrossing(aCell)
{
   var aRowNode = aCell.parentNode;
   if ( aRowNode )
   {
      toggleClass(aRowNode,"tbMany");
   }
}


//////////////////////////////////////////////////////////////////////
function uiCreateResAndTimeTable(BA, resourcesInfo, 
                                 aLnk /*opt*/, cpB /*opt*/, ccB /*opt*/, options /*opt*/)
{
   var aTb;
   var ri;
   var boolTb = false;
   var rt = BA[4];
   var cost = BA[3];
   var maxTime = BA[1];

   //-----------------------------------------------------------------
   function addResourceRow(aTb, ri, restante, tiempo)
   {
      var bAdded = false;
      if ( restante > 0 )
      {
         var aCell, rCell;
         var cap = 0;
         var strClass = ( restante >= 100000 ) ? "tbMany" : "";

         if ( ri <= 3 )
         {
            var cap = cost[ri];
            if ( resourcesInfo.EPpH[ri] >= 0 )  
            { 
               cap -= resourcesInfo.Cap[ri]; 
               if ( restante === cap ) 
               {
                  if ( strClass !== "" ) { strClass += " "; }
                  strClass += "tbCapReached";
               }
            }
         }

         if ( isFinite(tiempo) && tiempo > 0 )
         {
            aCell = uiSetTimeSpan($td(), tiempo, {format:0});
         }
         else
         {
            aCell = $td(null, T('NEVER'));
         }

         aTb.appendChild(
            $r([['class', strClass]],
            [
               $td([['class', 'center']],getResourceImage(ri) ),
               rCell = $td([['class', 'timeout' + ri],['title',T("RESREQ_TT",cost[ri])]], restante),
               aCell
            ]));

         if ( cap > 0 )  
         {
            setTBAttribute(rCell, "cap", cap);
         }
          
         bAdded = true;
      }
      return bAdded;
   }

   //-----------------------------------------------------------------
   function addTimeRow(aTb, maxTime)
   {
      var bAdded = false;
      /*
      if ( !isFinite(maxTime) )
      {
         aTb.appendChild($r(null,
                         [
                            $td([['colspan', '2']], T('LISTO') ),
                            $td(null, T('NEVER'))
                         ]));
         bAdded = true;
      }
      else if ( maxTime > 0 )
      {
         var txtDate = formatDateTimeRelative(maxTime, 0);
         aTb.appendChild($r(null,
                         [
                            $td([['colspan', '2']], T('LISTO') ),
                            $td(null, txtDate)
                         ]));
         bAdded = true;
      }
      */
      if ( !isFinite(maxTime) )
      {
         aTb.appendChild($r(null,
                         [
                            $td([['colspan', '3']], T('LISTO') + " " + T('NEVER') )
                         ]));
         bAdded = true;
      }
      else if ( maxTime > 0 )
      {
         var txtDate = formatDateTimeRelative(maxTime, 0);
         aTb.appendChild($r(null,
                         [
                            $td([['colspan', '3']], T('LISTO') + " " + txtDate.toLowerCase())
                         ]));
         bAdded = true;
      }

      return bAdded;
   }

   //-----------------------------------------------------------------
   function addCpcRow(aTb, x, y)
   {
      var titleNode,strClass;
      switch ( y )
      {
         case 'cp':
            titleNode = I("cp");
            strClass = "tbCP";
            break;
         case 'cc':
            titleNode = I("r5");
            strClass = "tbCC";
            break;
      }
      var delta = x[1] - x[0];

      aTb.appendChild(
         $r(null,
            $td([['class', strClass], ['colspan', '3']],
            [
               titleNode,
               $span(": " + x[0] + " " + (docDir[0] == 'right' ? '\u2190' : '\u2192') + " " + x[1] + (delta > 0 ? " (+" + delta + ")" : ""))
            ])));
   }

   //-----------------------------------------------------------------
   //added by Velonis Petros
   function addCRrows(aTb, aTitle, aV)
   {
      var ri;
      aTb.appendChild($r(null,$th([['colspan', '3']],aTitle)));

      for ( ri = 0; ri < 4; ri++ )
      {
         aTb.appendChild(
            $r(null,
            [
               $td([['class', 'center']],I("r" + (ri + 1)) ),
               $td([['colspan', '2']],aV[ri])
            ]));
      }
   }
   //end of Velonis' addition

   if ( !options )  { options = {}; }
   if ( options.NPCLink === undefined ) { options.NPCLink = options.NPC; }

   aTb = $t([['class', 'rNt']]);

   if ( options.NPC )
   {
      if ( rt[4][0] > 0 )
      {
         aTb.appendChild($r(null,$th([['colspan', '3']],T('NPCNEED'))));
         addResourceRow(aTb, 4, rt[4][0], rt[4][1]);
         addTimeRow(aTb, rt[4][1]);
         boolTb = true;
      }
      else if ( BA[0] === 2 && options.NPCLink )
      {
         var id = options.id; 
         if ( !id )
         {
            id = crtUrl.queryKey.id;
         }
         
         var urlNPCback = NPCURL;
         
         if ( id )
         {
            urlNPCback = addQueryParameter(urlNPCback, 'bid', id);
         }

         for ( ri = 0; ri < 4; ++ri )  
         { 
            if ( cost[ri] > 0 )
            {
               urlNPCback = addQueryParameter(urlNPCback, 'r'+(ri+1), cost[ri]);
            }
         }

         aTb.appendChild($r(null,
                            $td([['class','center'],['colspan', '3']],
                               $e("a",[['href',urlNPCback]],T('NPCLNK')))));
         boolTb = true;
      }
   }

   if ( options.top_title || boolTb )
   {
      aTb.appendChild($r(null,$th([['colspan', '3']],T('RESNEED'))));
   }

   for ( ri = 0; ri < 4; ++ri )
   {
      boolTb |= addResourceRow(aTb, ri, rt[ri][0], rt[ri][1]);
   }

   boolTb |= addTimeRow(aTb, maxTime);

   if ( maxTime > 0 )
   {
      //added by Velonis Petros - start of addition - the until then row
      if ( TB3O.O[36] === "1" )
      {
         var uthen = floorResources(getActualResourcesAfterMs(resourcesInfo,maxTime * 1000).res); //obtained until the max time
         var residue = subResources(uthen, BA[3]); //obtained until the max time
         var txtDate = formatDateTimeRelative(maxTime, 0).toLowerCase();
         addCRrows(aTb, T('RESOURCES') + " " + txtDate, uthen);
         addCRrows(aTb, T('RESIDUE') + " " + txtDate, residue);
         //end of Velonis' addition
      }
   }

   if ( aLnk && !boolTb )
   {
      aTb.appendChild($r(null,$td([['class', 'center']],$a(T('EXTAV'), [['href', aLnk]]))));
      boolTb = true;
   }

   if ( cpB && TB3O.O[34] === "1" )
   {
      addCpcRow(aTb, cpB, "cp");
      boolTb = true;
   }

   if ( ccB && TB3O.O[35] === "1" )
   {
      addCpcRow(aTb, ccB, "cc");
      boolTb = true;
   }

   return ( boolTb ) ? aTb : null;

}

//////////////////////////////////////////////////////////////////////
function uiCreateBuildingResAndTimeTable(arrBA, resourcesInfo, gid, id, crtLevel)
{
   var opt = { NPC: (TB3O.O[103] === "1" && TB3O.bIsNPCInVillage),
               id : id };
   var aTB = uiCreateResAndTimeTable(arrBA[id], 
                              resourcesInfo, 
                              "build.php?id=" + id, 
                              [bCost[gid][crtLevel][4], bCost[gid][crtLevel + 1][4]], 
                              [bCost[gid][crtLevel][5], bCost[gid][crtLevel + 1][5]],
                              opt);
   return aTB;
}

//////////////////////////////////////////////////////////////////////
function uiCreateCNDiv(lvl, nState, bAlreadyBuilt)
{
   var sClass = ["tbNoRes","tbUpg","tbNPCUpg","tbNoCap","tbMax"][nState];
   var aDiv =  $d(lvl, [['class', 'CNBT ' + sClass]]);

   if ( bAlreadyBuilt )
   {
      aDiv.className += " tbUpgNow";
   }

   return aDiv;
}

//////////////////////////////////////////////////////////////////////
// TODO: refresh, enable NPC button
function uiModifyContracts()
{
   
   var i;
   var resourcesInfo = TB3O.ActiveVillageInfo.r;

   var contracts = $xf(
      "//div[@id='" + ID_CONTENT + "']//div[contains(@class,'showCosts')]", 'l');

   for ( i = 0; i < contracts.snapshotLength; i++ )
   {
      var contract = contracts.snapshotItem(i);
      var cost = getRequiredRes(contract);
      
      if ( cost ) 
      {
         var av = getAvailability(cost, resourcesInfo, TB3O.bIsNPCInVillage);
         
         
         
         var aTb = uiCreateResAndTimeTable(av, resourcesInfo, null, null, null, 
                   { top_title: true,
                     NPC: (TB3O.O[26] === "1" && TB3O.bIsNPCInVillage),
                     NPCLink: false
                   });
         if ( aTb )
         {
            var injectedContainer;
            var xC = contract.parentNode;
            var tag = TAG(xC);
            if ( tag === "TR")
            {
               injectedContainer = $td();
               var aR = $r([['class', 'tb3rnb']]);
               aR.appendChild(injectedContainer);
               xC.parentNode.appendChild(aR);
            }
            else if ( tag === "FORM" || tag === "DIV")
            {
               injectedContainer = $e("p");
               //xC.appendChild(injectedContainer);
               insertAfter(contract,injectedContainer);
            }
            injectedContainer.className = "tbInject";
            injectedContainer.appendChild(aTb);
         }
         
      }
   }

   var arrTNPC = $xf("//*[starts-with(@id, 'NPCTT_')]", 'l');
   var aTb = $g("selecttraintroops");
   if ( !aTb )
   {
      aTb = $xf("//table[@class='build_details']");
      if ( aTb )
      {
         for ( i = 0; i < arrTNPC.snapshotLength; i++ )
         {
            var ex = calculateResourceTime(arrTtT[i].aRes, "30");
            if (ex)
            {
               xN = aTb.rows[i + 1].cells[aTb.rows[i + 1].cells.length - 1];
               xN.innerHTML = '';
               xN.appendChild(ex);
            }
         }
      }
   }

   
}
//////////////////////////////////////////////////////////////////////
function createTroopImage(iTT)
{
   var img = null, u;

   if ( TB3O.U[1] !== '' )
   {
      u = iTT + TB3O.U[7];
      
      img =  $img([["src",xGIF],["class","unit u" + u]]);
      
   }
   return img;
}

//////////////////////////////////////////////////////////////////////
// New extended layout is not convenient when used wide village list
// Try to correct
function uiUpdateGameLayout()
{
   var width, offset, dmid, aNode, elem;
   var min_width, navi_width = 155, content_width = 552; 

   if ( TB3O.nLayoutType === 1 ) 
   {
      // 1) Upd sideinfo width accordingly village list width
      if ( TB3O.VillagesList )
      {
         width = TB3O.VillagesList.vTable.offsetWidth;
         TB3O.VillagesList.dSideInfo.style.width = width + 'px';
      }

      // 2) Upd other elements that has min-width CSS property and related
      if ( isFinite(TB3O.iLayoutMinWidth) ) 
      {
         min_width = 0;

         dmid = $g(ID_MID);
         aNode = dmid.firstChild;
         while ( aNode )
         {
            if ( aNode.nodeType == 1 ) // Node.ELEMENT_NODE
            {
               min_width += aNode.offsetWidth;
               if ( aNode.id === ID_LEFT ) { navi_width = aNode.offsetWidth; }
               if ( aNode.id === ID_MID1 ) { content_width = aNode.offsetWidth; }
            }
            aNode = aNode.nextSibling;
         }
         if ( min_width < TB3O.iLayoutMinWidth ) { min_width = TB3O.iLayoutMinWidth;  }
         dmid.style.minWidth = min_width + 'px';

         $g(ID_TOP1).style.minWidth = min_width + 'px';

         elem = $g("dynamic_header");
         if ( elem ) { elem.style.minWidth = min_width + 'px'; }

         elem = $g("res");
         if ( elem ) { elem.style.minWidth = min_width + 'px'; }

         elem = $g("ltimeWrap");
         if ( elem ) { elem.style.minWidth = min_width + 'px'; }

         elem = $g("resWrap");
         if ( elem ) { elem.style['margin' + DOMdocDir[0]] = (navi_width - min_width/2)  + 'px'; } 

         elem = $g(ID_TOP5);
         if ( elem )
         {
            offset = (navi_width + content_width/2) - (((TB3O.iBiC+5) * 70)/2 + min_width/2);
            elem.style['margin' + DOMdocDir[0]] = offset  + 'px';
         
            elem = $g("n9");
            if ( elem )
            {
               offset = -offset - min_width/2;
               elem.style['margin' + DOMdocDir[0]] = offset  + 'px';
            }
         }
      }
   }
}

//////////////////////////////////////////////////////////////////////
function $df(dWidth, posX, posY, strTitle, sCookieN, divID, boolShowMinMax, content)
{
   var wCMM = 25;
   var iPx = parseInt10(posX);
   if (iPx < -dWidth/2) iPx = -dWidth/2;
   var iPy = parseInt10(posY);
   if (iPy < -dWidth/2) iPy = -dWidth/2;

   if (boolShowMinMax === true) wCMM *= 2;
   var fDiv = $d("", [['id', divID], ['class', 'fldiv'], ['style', 'width:' + dWidth + 'px; top:' + iPy + 'px; left:' + iPx + 'px; -moz-border-radius:5px;']]);
   if (strTitle === '?') strTitle = "<img src='" + image["search"] + "'</img>";
   var dragDiv = $d(strTitle, [['id', 'dragDiv_' + sCookieN], ['class', 'dragdiv'], ['style', 'width:' + (dWidth - wCMM) + 'px;']]);

   if (boolShowMinMax === true)
   {
      var xi = 70;
      switch (sCookieN)
      {
         case "resbar":        xi = 70;  break;
         case "userbookmarks": xi = 71;  break;
         case "noteblock":     xi = 72;  break;
         case "vl2table":      xi = 73;  break;
         case "searchbar":     xi = 74;  break;
      }
      var mmDiv = $d("", [['id', 'mmdiv_' + sCookieN], ['class', 'mmdiv']]);
      var strImgMM = (TB3O.O[xi] === '0' ? 'bMax' : 'bMin');
      mmDiv.appendChild(uiCreateTool(strImgMM,T(TB3O.O[xi] === '0' ? 'WMAX' : 'WMIN'),minmaxDiv));
   }

   var closeDiv = $d("", [['class', 'closediv']]);
   closeDiv.appendChild(uiCreateTool("bClose",T('CLOSE'),fcloseDiv));
   makeDraggable(fDiv, dragDiv);
   fDiv.appendChild(dragDiv);
   if ( mmDiv ) fDiv.appendChild(mmDiv);
   fDiv.appendChild(closeDiv);
   document.body.appendChild(fDiv);
   if ( content ) 
   {
      fDiv.appendChild(content);
      adjustFloatDiv(content, dWidth-1, sCookieN);
      //setTimeout(bind(adjustFloatDiv,[content, dWidth, sCookieN]), 0);
   }
   return fDiv;

   function minmaxDiv()
   {
      removeElement($g(divID));
      switch (sCookieN)
      {
         case "resbar":
            TB3O.O[70] = (TB3O.O[70] == '0' ? '1' : '0');
            uiCreateResBarWidget();
            break;
         case "userbookmarks":
            TB3O.O[71] = (TB3O.O[71] == '0' ? '1' : '0');
            showUserBookmarks();
            break;
         case "noteblock":
            TB3O.O[72] = (TB3O.O[72] == '0' ? '1' : '0');
            showNoteBlock();
            break;
         case "vl2table":
            TB3O.O[73] = (TB3O.O[73] == '0' ? '1' : '0');
            uiCreate2ndVillageListWidget();
            break;
         case "searchbar":
            TB3O.O[74] = (TB3O.O[74] == '0' ? '1' : '0');
            uiCreateSearchBarWidget();
            break;
      }
      setGMcookieV2('TB3Setup', TB3O.O, 'SETUP');
   }

   function fcloseDiv()
   {
      $g(divID).style.display = "none";
      switch (sCookieN)
      {
         case "resbar":        TB3O.O[39] = '0'; break;
         case "userbookmarks": TB3O.O[20] = '0'; break;
         case "noteblock":     TB3O.O[22] = '0'; break;
         case "vl2table":      TB3O.O[18] = '0'; break;
         case "searchbar":     TB3O.O[32] = '0'; break;
         case "resupg":        TB3O.O[37] = '0'; break;
         case "bupg":          TB3O.O[41] = '0'; break;
         case "maptable":      TB3O.O[58] = '0'; break;
      }
      setGMcookieV2('TB3Setup', TB3O.O, 'SETUP');
   }
}

//////////////////////////////////////////////////////////////////////
function uiFloatWindow_Remove(windowId)
{
   removeElement($g(windowId));
}

//////////////////////////////////////////////////////////////////////
function uiFloatWindow_SetContent(windowId, content)
{
}

//////////////////////////////////////////////////////////////////////
function adjustFloatDiv(theTB, xmin, idDrag)
{
   var wCMM,dragDiv;

   if ( xmin < theTB.offsetWidth ) { xmin = theTB.offsetWidth; }

   if ( parseInt10(theTB.parentNode.style.width) !== xmin )
   {
      
      theTB.parentNode.style.width = xmin + 'px';

      dragDiv = $g('dragDiv_' + idDrag);
      if ( dragDiv ) 
      {
         wCMM = 25;
         if ( $g('mmdiv_' + idDrag) ) { wCMM *= 2; }
         dragDiv.style.width = (xmin - wCMM) + 'px';
      }
   }

   return;
}
//////////////////////////////////////////////////////////////////////
function uiCreateTool(imgTag, tooltip/*opt*/, onClick/*opt*/)
{
   var tool = $lnk([['class','tbTool'],['href', jsVoid]]);
   var attr = null;
   if ( tooltip ) { attr = [['title', tooltip]]; }
   tool.appendChild(I(imgTag, attr));
   if ( onClick )
   {
      tool.addEventListener("click", onClick, false);
   }

   return tool;
}


//////////////////////////////////////////////////////////////////////
function uiToolbar_AddTools(toolbar,tools,bWithoutSep)
{
   var tool;
   for ( tool in tools ) 
   {
      if ( tools[tool] )
      {
         if ( toolbar.hasChildNodes() && !bWithoutSep) 
         {
            var toolsep = $e("SPAN"," | ");
            toolsep.className ="tbToolSep";
            toolbar.appendChild(toolsep);
         }
         toolbar.appendChild(tools[tool]);
      }
   }
   return toolbar;
}

//////////////////////////////////////////////////////////////////////
function uiToolbar_Create(id,tools,bWithoutSep)
{
   var toolbar = $div();
   toolbar.className ="tbToolbar";

   if ( id )
   {
      toolbar.id = id;
   }

   return uiToolbar_AddTools(toolbar,tools,bWithoutSep);
}

//////////////////////////////////////////////////////////////////////
function Tooltip(id, delay)
{
   this.delay = delay;
   this.ttD = $div();
   this.ttD.id = id;
   document.body.appendChild(this.ttD);
}

//////////////////////////////////////////////////////////////////////
Tooltip.prototype.addToElement = function (node, contentGenerator) 
{
   var timer = null;
   var self = this;
   var lastMouseEvent;
   var wH, wW;

   //-------------------------------------------------------------
   function cancelTimer()
   {
      if ( timer ) 
      {
         clearTimeout(timer);
         timer = null;
      }
   }

   //-------------------------------------------------------------
   function showTip()
   {
      timer = null;
      var content = contentGenerator(lastMouseEvent);

      if ( content )
      {
         removeChildren(self.ttD);
         self.ttD.appendChild(content);
         self.ttD.style.display = 'block';
         onMouseMove();
      }
   }

   //-------------------------------------------------------------
   function onMouseMove(e)
   {
      if ( !e )
      {
         e = lastMouseEvent;
      }

      if ( self.ttD && self.ttD.style.display !== 'none' )
      {
         var x = (e.pageX + 8);
         var y = (e.pageY + 8);
         var dH = self.ttD.clientHeight;
         var dW = self.ttD.clientWidth;
         self.ttD.style.left = x + "px";
         if (y + dH > wH) y = y - dH;
         if ( crtUrl.path === "/karte.php" && y < 180)
         {
            x = 700;
            if (y < 180) y = 180;
         }
         self.ttD.style.top = y + "px";

         if (docDir[0] === 'left')
         {
            if (x + dW > wW) x = x - dW;
         }
         else if (x < 0) x = 5;
         self.ttD.style.left = x + "px";
      }
   }

   //-------------------------------------------------------------
   function onMouseOver(e)
   {
      cancelTimer();
      timer = setTimeout(showTip, self.delay);
      document.addEventListener("mousemove", onMouseMove, false);
      lastMouseEvent = e;
      wH = window.innerHeight;
      wW = window.innerWidth;
   }

   //-------------------------------------------------------------
   function onMouseOut(e)
   {
      cancelTimer();
      self.ttD.style.display = 'none';
      lastMouseEvent = null;
      document.removeEventListener("mousemove", onMouseMove, false);
   }

   node.addEventListener("mouseover", onMouseOver, false);
   node.addEventListener("mouseout",  onMouseOut,  false);
};


TB3O.Tooltip = new Tooltip("tb_tooltip", TB3O.Timeouts.tooltip);


//////////////////////////////////////////////////////////////////////
function uiAddTooltip(node, contentGenerator) 
{
   TB3O.Tooltip.addToElement(node, contentGenerator);
}


//////////////////////////////////////////////////////////////////////
function uiCreateUpDownControl(buddy)
{
   //-------------------------------------------------------------
   function onClick(delta, buddy)
   {
      var v;
      if ( buddy.value === "" ) { v = 0; }
      else { v = Number(buddy.value); }

      if ( !isNaN(v) )
      {
         v += delta;
         buddy.value = v;
         var e = document.createEvent("Events");
         e.initEvent("change", true, false);
         buddy.dispatchEvent(e);
      }
   }

   //-------------------------------------------------------------
   function onMouseWheel(e)
   {
      var movement = e.detail / -3;
      onClick(movement, buddy);
      e.stopPropagation();
      e.preventDefault();
      return false;
   }

   //-------------------------------------------------------------
   function onBuddyFocused(e)
   {
      window.addEventListener('DOMMouseScroll', onMouseWheel, false);
      document.addEventListener('mousewheel', onMouseWheel, false);
   }

   //-------------------------------------------------------------
   function onBuddyBlur(e)
   {
      window.removeEventListener('DOMMouseScroll', onMouseWheel, false);
      document.removeEventListener('mousewheel', onMouseWheel, false);
   }

   //-------------------------------------------------------------
   var up = I("arrow_up8",[['title','+1'],['class','tbiUp']]);
   var down = I("arrow_down8",[['title','-1'],['class','tbiDown']]);

   var ctrl = $div([['class','tbUpDown']], [up,down]);

   buddy.addEventListener('focus', onBuddyFocused, false);
   buddy.addEventListener('blur', onBuddyBlur, false);

   up.addEventListener('click', bind(onClick,[+1,buddy]), false);
   down.addEventListener('click', bind(onClick,[-1,buddy]), false);

   return ctrl;
}

//////////////////////////////////////////////////////////////////////
function uiAddBuiltinUpDownControl(buddy)
{
   var ctrl = uiCreateUpDownControl(buddy);
   ctrl.className += " tbBuiltin";
   insertAfter(buddy,ctrl);

   var styles = window.getComputedStyle(buddy,null);
   ctrl.style.lineHeight = styles.lineHeight;
   ctrl.style.verticalAlign = styles.verticalAlign;
   buddy.style['padding' + DOMdocDir[1]] = (parseInt10(styles['padding' + DOMdocDir[1]]) + 9) + 'px';
   ctrl.style[docDir[0]] = (-9 - parseInt10(styles['border' + DOMdocDir[1] + 'Width']) - parseInt10(styles['margin' + DOMdocDir[1]])) + 'px';
   
   if ( styles.verticalAlign === 'baseline' ) 
   {
      ctrl.style.top = '-13px';
   }
   else
   {
      ctrl.style.top = '-9px';
   }

   return ctrl;
}

/////////////////////////////////////////////////////////////////////
function VillageInfo() 
{
   this.name = '';
   this.id = 0;
   this.x = null;
   this.y = null;
   this.type = undefined; // village type by resources fields
                          // (1-12) types of villages (T3.5 or higher)
                          // (1-6)  types of villages (if < T3.5)
 
   this.pop = undefined; // village population

   this.posInListOrg = null;
   this.posInListCur = null;

   this.BiP = []; // buildings in progress
   this.TM  = []; // troop movements

   this.b = [];   // buildings in this village
   this.mCap =  TB3O.DefaultMerchantsCapacity[TB3O.U[1]] * TB3O.nMerchantCapacityFactor[TB3O.nServerType];


   this.r = new ResourcesInfo();
   this.r.Res  = [750,750,750,750]; // resources available
   this.r.Cap  = [800,800,800,800]; // resource storage capacity

   return this;
}

/////////////////////////////////////////////////////////////////////
// village information, obsolete, migrate to VillageInfo


/////////////////////////////////////////////////////////////////////
function initVillageBiP(info, aBiP) 
{
   info.BiP = aBiP;
}

/////////////////////////////////////////////////////////////////////
function initVillageTM(info, aTM) 
{
   info.TM = aTM;
}



/////////////////////////////////////////////////////////////////////
function loadVillagesInfo() 
{
   

   var villagesInfo = getGMcookieV2('VillagesInfo');
   var villageId, villageInfo;
   var defVillageInfo = new VillageInfo();

   for ( villageId in villagesInfo ) 
   {
      villageInfo = villagesInfo[villageId];
      cloneUndefinedProperties(defVillageInfo, villageInfo);
      removeUndefinedProperties(defVillageInfo, villageInfo);
   }
   

   return villagesInfo;
}

/////////////////////////////////////////////////////////////////////
function saveVillagesInfo(villagesInfo) 
{
   
   setGMcookieV2('VillagesInfo', villagesInfo);    
   
}

/////////////////////////////////////////////////////////////////////
// update info. At this point all available info must be loaded
function reconcileVillagesInfo(villagesInfo)
{
   

   var villageId, BiP, TM, i, 
       curTime = new Date().getTime();

   for ( villageId in villagesInfo ) 
   {
      // cleanup BiP
      BiP = villagesInfo[villageId].BiP;
      for ( i = 0; i < BiP.length; )
      {
         if ( curTime >= BiP[i].endTime )
         {
            
            BiP.splice(i,1);
         }
         else
         {
            ++i;
         }
      }

      // cleanup TM
      TM = villagesInfo[villageId].TM;
      for ( i = 0; i < TM.length; )
      {
         if ( curTime >= TM[i].fT )
         {
            
            TM.splice(i,1);
         }
         else
         {
            ++i;
         }
      }
   }
   
}

/////////////////////////////////////////////////////////////////////
// return preffered villages order. Assume that villagesInfo already normalized
// prefferedOrder = null,undefined or "current" - return villages in order as they must be displayed
//                  "custom"     - return villages in user customized order
//                  "original"   - return villages in original order
//                  "random"     - return villages in random order
// TODO: implement random order
function getVillagesOrder(villagesInfo,prefferedOrder)
{
   var bCustomOrder = ((TB3O.O[91] === "1") || prefferedOrder === "custom") && prefferedOrder !== "original";
   var orderedIds = [];
   var pos,villageId,villageInfo;

   for ( villageId in villagesInfo ) 
   {
      villageInfo = villagesInfo[villageId];
      pos = bCustomOrder ? villageInfo.posInListCur : villageInfo.posInListOrg;
      orderedIds[pos] = villageId;
   }

   if ( prefferedOrder === "random" )
   {
      shuffle(orderedIds);
   }
   return orderedIds;
}

//////////////////////////////////////////////////////////////////////
function getVillagesMapIdDict(villagesInfo)
{
   var villageId,villageInfo,mapId;
   var mapIdDict = {};

   for ( villageId in villagesInfo )
   {
      villageInfo = villagesInfo[villageId];
      mapId = xy2id(villageInfo.x,villageInfo.y);
      mapIdDict[mapId] = villageId;
   }

   return mapIdDict;
}

//////////////////////////////////////////////////////////////////////
function getVillageInfoByMapId(villagesInfo, mapId)
{
   var villageId,villageInfo;

   if ( mapId )
   {
      for ( villageId in villagesInfo )
      {
         villageInfo = villagesInfo[villageId];
         if ( mapId == xy2id(villageInfo.x,villageInfo.y) )
         {
            return villageInfo;
         }
      }
   }

   return null;
}
//////////////////////////////////////////////////////////////////////
function getBuildingIdByGid(b, gid)
{
   var id; 
   for ( id = 1; id < b.length; ++id )
   {
      if ( b[id] && b[id][0] === gid ) { return id; }
   }
   return null;
}

//////////////////////////////////////////////////////////////////////
function isBuildingPresent(villageId, gid)
{
   var b = TB3O.VillagesInfo[villageId].b;
   var id = getBuildingIdByGid(b,gid);
   return ( !!id && b[id][1] > 0 );
}

//////////////////////////////////////////////////////////////////////
function BuildingInfo(title, name, id, gid, lvl, xy, imgSrc, imgClass)
{
   this.title = title;
   this.name = name;
   this.id = id;
   this.gid = gid;
   this.xy = xy;
   this.lvl = lvl;
   this.uplvl = lvl;
   this.imgSrc = imgSrc;
   this.imgClass = imgClass;
   
   return this;
}

/////////////////////////////////////////////////////////////////////
function BuildingsInfo() 
{
   this._ = [];
}

//////////////////////////////////////////////////////////////////////
BuildingsInfo.prototype.sortByName = function()
{
   this._.sort(function(d1, d2) 
              {
                 var res = compare(d1.name,d2.name);
                 if ( res === 0 ) { res = d1.lvl - d2.lvl; }
                 return res;
              });
};

//////////////////////////////////////////////////////////////////////
BuildingsInfo.prototype.getInfoById = function(id)
{
   var i, info = null;

   for ( i = 0; i < this._.length; ++i )
   {
      if ( this._[i].id  === id ) 
      {
         info = this._[i];
         break;
      }
   }
   return info;
};

//////////////////////////////////////////////////////////////////////
BuildingsInfo.prototype.syncWithBiP = function(arrBiP)
{
   var i;

   for ( i = 0; i < this._.length; ++i )
   {
      var gid = this._[i].gid; 
      var crtLevel = this._[i].lvl;

      if ( gid > 0 && crtLevel >= 0 )
      {
         this._[i].uplvl = getNewUpgradeLevel(arrBiP, this._[i].name, crtLevel);
      }
   }
};

//////////////////////////////////////////////////////////////////////
BuildingsInfo.prototype.exportB = function(arrB, bGetNewLevel)
{
   var i;

   for ( i = 0; i < this._.length; ++i )
   {
      var id = this._[i].id; 
      var gid = this._[i].gid; 
      var crtLevel = this._[i].lvl;

      if ( gid > 0 && crtLevel >= 0 )
      {
         arrB[id] = [gid, bGetNewLevel ? this._[i].uplvl : crtLevel];
      }
      else
      {
         delete arrB[id];
      }
   }
};
/////////////////////////////////////////////////////////////////////
// get current resource units, capacity of warehouse/granary, 
// production per hour from the html document
// return ResourcesInfo object
function getResourcesInfo2(aDoc)
{
   var i,aNode,resIppH;
   var resourcesInfo = new ResourcesInfo();
   var res = $g("res",aDoc);
   var reEPpH = /: *([+-]?\d+)/;

   for (aNode = res.firstChild, i = 0; aNode; aNode = aNode.nextSibling)
   {
      if ( TAG(aNode) === "LI" )
      {
         if ( reEPpH.exec(aNode.title) && i <= 3 )
         {
            //production/h for this resource
            resourcesInfo.EPpH[i] = parseInt10(RegExp.$1);
            resourcesInfo.PpH[i] = resourcesInfo.EPpH[i];
         }
         ++i;
      }
   }

   for (i = 0; i < 5; ++i)
   {
      aNode = $g('l' + (i + 1),aDoc);
      if ( aNode )
      {
         //available resource units
         resIppH = aNode.textContent.split("/");

         if ( i <= 3 )
         {
            resourcesInfo.Res[i] = parseInt10(resIppH[0]);
            //capacity of warehouse/granary
            resourcesInfo.Cap[i] = parseInt10(resIppH[1]);
         }
         else
         {
            //real crop production of this village
            resourcesInfo.PpH[3] = parseInt10(resIppH[1]);
            resourcesInfo.dUpd = getServerTime(aDoc);
         }
      }
   }
   return resourcesInfo;
}


/////////////////////////////////////////////////////////////////////
function getResourcesTitles()
{
   var i, aNode;

   for (i = 0; i < 5; ++i)
   {
      var aNode = $g('l' + (i + 1));
      if ( aNode )
      {
         //resource titles
         var resImg = aNode.previousElementSibling;
         if ( resImg )
         {
            t['RES' + (i + 1)] = resImg.alt;
         }
      }
   }
}

/////////////////////////////////////////////////////////////////////
// resources information
function ResourcesInfo()
{
   this.PpH  = [  0,  0,  0,  0]; // raw production per hour
   this.EPpH = [  0,  0,  0,  0]; // effective production per hour
   this.Res  = [  0,  0,  0,  0]; // resources available
   this.Cap  = [  0,  0,  0,  0]; // resource storage capacity

   this.dUpd = undefined; // date of information update 

   return this;
}



//////////////////////////////////////////////////////////////////////
// return clone of r (ResourcesInfo object)
function cloneResourcesInfo(r) 
{
   var resourcesInfo = new ResourcesInfo();

   if ( r.dUpd !== undefined )
   {
      resourcesInfo.dUpd = new Date(r.dUpd.getTime());
   }
   resourcesInfo.Res  = cloneArray(r.Res);
   resourcesInfo.PpH  = cloneArray(r.PpH);
   resourcesInfo.EPpH = cloneArray(r.EPpH);
   resourcesInfo.Cap  = cloneArray(r.Cap); 

   return resourcesInfo;
}


//////////////////////////////////////////////////////////////////////
function getCumulativeResources(r, addRes) 
{
   var ri;
   var res = new Array(4);
   var ruo = [0,0,0,0];

   // calculate resources
   for ( ri = 0; ri < 4; ++ri )
   {
      var v = r.Res[ri] + addRes[ri];
      if ( v < 0 )
      {
         ruo[ri] = v;
         v = 0;
      }
      else if ( v > r.Cap[ri] )
      {
         ruo[ri] = v - r.Cap[ri];
         v = r.Cap[ri];
      }

      res[ri] = v;
   }

   return {res:res, ruo:ruo};
}

//////////////////////////////////////////////////////////////////////
// r - current resourcesInfo
// returns:
// {
//   res: array[4] of resources that will actual after the given ms interval
//   ruo: array[4] of underrun/overrun resources
// }
// ATT!: resources are real numbers, not int!
function getActualResourcesAfterMs(r, tms) 
{
   var ri;
   var res = new Array(4);

   // calculate resources
   for ( ri = 0; ri < 4; ++ri )
   {
      res[ri] = ( isFinite(tms) && tms > 0 ) ? r.EPpH[ri] / 3600000 * tms : 0;
   }

   return getCumulativeResources(r, res);
}

//////////////////////////////////////////////////////////////////////
// return seconds needed to fill granary/warehouse for given resource type
//       or seconds needed to exhaust granary/warehouse if EPpH is negative
//       or Infinity if EPpH is zero
function getSecondsToFill(resourcesInfo,ri)
{
   var ttFill;

   var EPpS = resourcesInfo.EPpH[ri] / 3600;

   if ( EPpS > 0 ) 
   {
      ttFill = (resourcesInfo.Cap[ri] - resourcesInfo.Res[ri]) / EPpS;
   }
   else 
   {
      ttFill = -(resourcesInfo.Res[ri] / EPpS);
   }
   return Math.floor(ttFill);
}

//////////////////////////////////////////////////////////////////////
// need more accurate formula? Time to fill from dorf3 tab2 is different
// return seconds needed to produce 'need' resources for given ePpH
//       or Infinity if ePpH is zero
function getSecondsToProduce(need,ePpH)
{
   return (ePpH <= 0) ? Infinity : Math.ceil(need / (ePpH / 3600));
}


//////////////////////////////////////////////////////////////////////
// return copy of r (ResourcesInfo object) with data that will actual for this moment
function getActualResourcesInfoNow(r) 
{
   var tmsElapsed;
   var resourcesInfo = new ResourcesInfo();

   if ( r.dUpd !== undefined )
   {
      resourcesInfo.dUpd = getServerTimeNow();

      tmsElapsed = resourcesInfo.dUpd.getTime() - r.dUpd.getTime();

      resourcesInfo.Res  = getActualResourcesAfterMs(r,tmsElapsed).res;
      resourcesInfo.PpH  = cloneArray(r.PpH);
      resourcesInfo.EPpH = cloneArray(r.EPpH);
      resourcesInfo.Cap  = cloneArray(r.Cap); 
   }

   return resourcesInfo;
}

//////////////////////////////////////////////////////////////////////
// State:
// {
//    BA: {
//       ru:  array[4] of cumulative underrun resources before accumulation
//       ro:  array[4] of cumulative overrun resources before accumulation
//       ttf: array[4] seconds needed to fill/exhaust granary/warehouse before accumulation
//       ev:  array[4] event type: true - fill storage/ false - exhaust storage
//
//    }
//    AA: {
//       ru:  array[4] of cumulative underrun resources after accumulation
//       ro:  array[4] of cumulative overrun resources after accumulation
//       ttf: array[4] seconds needed to fill/exhaust granary/warehouse after accumulation
//       ev:  array[4] event type: true - fill storage/ false - exhaust storage, null - no event
//    }
// }
function getCumulativeResourcesInfo(resourcesInfo, ttAccumulate, resToAccumulate, prevState /*opt*/)
{
   function fillStateTTF(r, st, ar)
   {
      var ttStart = r.dUpd.getTime();
      var ri;
      for ( ri = 0; ri < 4; ++ri )
      {
         if ( ttStart < st.ttf[ri] ) // do not affect old events
         {
            if ( ar && ar.ruo[ri] !== 0 )
            {
               st.ttf[ri] = ttStart; 
               st.ev[ri] = (ar.ruo[ri] > 0);
            }
            else
            {
               var ttToFill = ttStart + getSecondsToFill(r, ri) * 1000;
               if ( r.EPpH[ri] > 0 )
               {
                  if ( ttToFill < st.ttf[ri] ) 
                  { 
                     st.ttf[ri] = ttToFill; 
                     st.ev[ri] = true;
                  }
               }
               else if ( r.EPpH[ri] < 0 )
               {
                  if ( ttToFill > st.ttf[ri] || !isFinite(st.ttf[ri]) ) 
                  { 
                     st.ttf[ri] = ttToFill; 
                     st.ev[ri] = false;
                  }
               }
            }
         }
      }
   }

   function fillStateRUO(r, st, ar)
   {
      var ri;
      for ( ri = 0; ri < 4; ++ri )
      {
         r.Res[ri] = ar.res[ri];
         if ( ar.ruo[ri] < 0 ) 
         {
            st.ru[ri] += ar.ruo[ri];
         }
         else 
         {
            st.ro[ri] += ar.ruo[ri];
         }
      }
   }

   var ar;
   var tms = ttAccumulate - resourcesInfo.dUpd.getTime();
   var state = { BA:{}, AA:{} };

   if ( prevState )
   {
      state.BA.ru = cloneArray(prevState.AA.ru);
      state.BA.ro = cloneArray(prevState.AA.ro);
      state.BA.ttf = cloneArray(prevState.AA.ttf);
      state.BA.ev = cloneArray(prevState.AA.ev);
   }
   else
   {
      state.BA.ru = [0,0,0,0];
      state.BA.ro = [0,0,0,0];
      state.BA.ttf= [Infinity,Infinity,Infinity,Infinity];
      state.BA.ev = [null,null,null,null];
   }

   if ( tms > 0 )
   {
      ar = getActualResourcesAfterMs(resourcesInfo, tms);
      fillStateTTF(resourcesInfo, state.BA);
      fillStateRUO(resourcesInfo, state.BA, ar);
   }

   state.AA.ru = cloneArray(state.BA.ru);
   state.AA.ro = cloneArray(state.BA.ro);
   state.AA.ttf= cloneArray(state.BA.ttf);
   state.AA.ev = cloneArray(state.BA.ev);

   // do accumulation
   resourcesInfo.dUpd.setTime(ttAccumulate);
   ar = getCumulativeResources(resourcesInfo, resToAccumulate);
   fillStateRUO(resourcesInfo, state.AA, ar);
   fillStateTTF(resourcesInfo, state.AA, ar);

   return state;
}



//////////////////////////////////////////////////////////////////////
// simply accumulate resources
// return resources array that is  res1 += res2
function accumulateResources(res1, res2)
{
   var ri;

   for ( ri = 0; ri < 4; ++ri )
   {
      res1[ri] += res2[ri];
   }

   return res1;
}

//////////////////////////////////////////////////////////////////////
// substract resources
// return resources array that is  res1 - res2
function subResources(res1, res2)
{
   var ri;
   var res3 = new Array(4);

   for ( ri = 0; ri < 4; ++ri )
   {
      res3[ri] = res1[ri] - res2[ri];
   }

   return res3;
}

//////////////////////////////////////////////////////////////////////
// return sum of all resources
function totalResources(res)
{
   var ri;
   var tot = 0;

   for ( ri = 0; ri < 4; ++ri )
   {
      tot += res[ri];
   }

   return tot;
}

//////////////////////////////////////////////////////////////////////
// floor resources
// Do Math.floor(res) for each resource
function floorResources(res)
{
   var ri;

   for ( ri = 0; ri < 4; ++ri )
   {
      res[ri] = Math.floor(res[ri]);
   }

   return res;
}

//////////////////////////////////////////////////////////////////////
function getResInfoTotals()
{
   var tPpH = new ResourcesInfo();
   var villageId,resourcesInfo;
   var ri;

   for ( villageId in TB3O.VillagesInfo )
   {
      resourcesInfo = TB3O.VillagesInfo[villageId].r;
      if ( resourcesInfo.dUpd !== undefined )
      {
         for ( ri = 0; ri < 4; ++ri )
         {
            tPpH.PpH[ri]  += resourcesInfo.PpH[ri];
            tPpH.EPpH[ri] += resourcesInfo.EPpH[ri];
            tPpH.Res[ri]  += resourcesInfo.Res[ri];
            tPpH.Cap[ri]  += resourcesInfo.Cap[ri];
         }
      }
   }

   return tPpH;
}

//////////////////////////////////////////////////////////////////////
// parse string like    r1|r2|r3|r4
function getResourcesFromString(str)
{
   var Res = [0,0,0,0];
   var bResValid = false;

   if ( str.search(/(\d+)[ \u00A0|]+(\d+)[ \u00A0|]+(\d+)[ \u00A0|]+(\d+)/) !== -1 )
   {
      var inRes = [RegExp.$1,RegExp.$2,RegExp.$3,RegExp.$4];
      var ri;
      bResValid = true;
      for ( ri = 0; ri < 4; ri++ )
      {
         Res[ri] = parseInt10(inRes[ri]);
         if ( !isFinite(Res[ri]) ) { bResValid = false; break; }
      }
   }
   return bResValid ? Res : null;
}

//////////////////////////////////////////////////////////////////////
function uiSetTimeSpan(e, secs, options)
{
   if ( !options ) { options = {}; }

   var format = options.format;
   if ( format !== undefined ) 
   {
      e.title = formatDateTimeRelative(secs, format);
   }
   e.textContent = formatTimeSpan(secs, 0);
   ifClass(e,(secs !== 0 && isFinite(secs)),'timeouta');

   return e;
}

//////////////////////////////////////////////////////////////////////
function uiSetTimeout(e, secs, EPpH, options)
{
   addClass(e,'tbTimeout');
   ifClass(e,(EPpH < 0),'tbDecrease');
   ifClass(e,(secs > 0 && secs < 7200),'tbSoon');
   ifClass(e,(secs <= 0),'tbCapReached');
   ifClass(e,(!isFinite(secs)),'tbInfinity');

   return uiSetTimeSpan(e, secs, options);
}

//////////////////////////////////////////////////////////////////////
function uiSetTimeToFill(e, resourcesInfo, ri)
{
   var ttFill = getSecondsToFill(resourcesInfo,ri);
   return uiSetTimeout(e,ttFill,resourcesInfo.EPpH[ri]);
}

//////////////////////////////////////////////////////////////////////
function uiSetFillPercent(e, resourcesInfo, ri)
{
   var fillPercent,prC;

   fillPercent = Math.round(resourcesInfo.Res[ri] / resourcesInfo.Cap[ri] * 100);
   if ( fillPercent > 100 ) { fillPercent = 100; }
   prC = getColorForResourceBar(fillPercent);

   e.textContent = fillPercent + "%";
   e.style.color = prC;
   e.style.textDecoration = ( fillPercent > 90 )  ? "blink" : "none";

   return fillPercent;
}

//////////////////////////////////////////////////////////////////////
function uiSetEffectiveCropPpH(e,val,bUseLocale)
{
   var cpph = parseInt10(val);
   var strCpph = bUseLocale ? $ls(cpph) : cpph.toString();
   var cpphColor = "black";

   if (cpph > 0)
   {
      strCpph = "+" + strCpph;
      cpphColor = "darkgreen";
   }
   else if (cpph < 0) 
   {
      cpphColor = "red";
   }
   e.textContent = strCpph;
   e.style.color = cpphColor;
}

//////////////////////////////////////////////////////////////////////
//by Acr111 (adapted by ms99)
function getColorForResourceBar(p)
{
   return (p < 90 ? "rgb(" + parseInt10(p / 90 * 255) + "," + (100 + p) + ",0)" : 
                    "rgb(255," + parseInt10((100 - p) / (100 - 90) * 170) + ",0)");
} 
/////////////////////////////////////////////////////////////////////
function adaptDataToGameVersion()
{
   // new aproach, gIc obsolete
   if ( !I.images_attributes ) { I.images_attributes = {}; }
   var iC = I.images_attributes;

   iC["clock"] = [['class','clock'], ['src',xGIF]];
   iC["bau"]   = [['class','bau'], ['src',image["bau"]]];

   // old aproach, obsolete
   gIc["r1"] = '<img class="r1" src="' + xGIF + '" title="' + T('RES1') + '" alt="' + T('RES1') + '">';
   gIc["r2"] = '<img class="r2" src="' + xGIF + '" title="' + T('RES2') + '" alt="' + T('RES2') + '">';
   gIc["r3"] = '<img class="r3" src="' + xGIF + '" title="' + T('RES3') + '" alt="' + T('RES3') + '">';
   gIc["r4"] = '<img class="r4" src="' + xGIF + '" title="' + T('RES4') + '" alt="' + T('RES4') + '">';
   gIc["r41"]= '<img class="r4" src="' + xGIF + '" title="' + T('SENDRES') + '" alt="' + T('SENDRES') + '">';
   gIc["r5"] = '<img class="r5" src="' + xGIF + '" title="' + T('RES5') + '" alt="' + T('RES5') + '">';
   gIc["clock"] = '<img class="clock" src="' + xGIF + '">';
   //gIc["capacity"] = '<img src="' + image["capacity"] + '">';
   gIc["capacity"] = '<img class="carry full" src="' + xGIF + '">';
   gIc["hero"] = '<img class="unit uhero" src="' + xGIF + '">';
   gIc["def_i"] = '<img class="def_i" src="' + xGIF + '">';
   gIc["def_c"] = '<img class="def_c" src="' + xGIF + '">';
   gIc["def1"] = '<img class="def1" src="' + xGIF + '">';
   gIc["def1_1"] = '<img class="def1" src="' + xGIF + '" title="' + T('AT2') + '" alt="' + T('AT2') + '">';
   gIc["def2"] = '<img class="def2" src="' + xGIF + '">';
   gIc["def3"] = '<img class="def3" src="' + xGIF + '">';
   gIc["att_all"] = '<img class="att_all" src="' + xGIF + '">';
   gIc["att_all_1"] = '<img class="att_all" src="' + xGIF + '" title="' + T('AT3') + '" alt="' + T('AT3') + '">';
   gIc["att_all_2"] = '<img class="att_all" src="' + xGIF + '" title="' + T('AT4') + '" alt="' + T('AT4') + '">';
   gIc["att1"] = '<img class="att1" src="' + xGIF + '">';
   gIc["att2"] = '<img class="att2" src="' + xGIF + '">';
   gIc["del"] = '<img class="del" src="' + xGIF + '" title="' + T('DEL') + '" alt="' + T('DEL') + '">';

   iC["iReport2"] = [['class','iReport iReport2'], ['src',xGIF]];
   iC["iReport3"] = [['class','iReport iReport3'], ['src',xGIF]];
   iC["iReport5"] = [['class','iReport iReport5'], ['src',xGIF]];
   iC["iReport6"] = [['class','iReport iReport6'], ['src',xGIF]];
   iC["iReport7"] = [['class','iReport iReport7'], ['src',xGIF]];
   iC["iReport17"]= [['class','iReport iReport17'],['src',xGIF]];

   //big icons
   image["alliance"] = image["alliance35"];
   image["alliancegs"] = image["alliance35gs"];
   image["mercado"] = image["mercado35"];
   image["mercadogs"] = image["mercado35gs"];
   image["militar"] = image["militar35"];
   image["militargs"] = image["militar35gs"];
   image["militar2"] = image["militar235"];
   image["militar2gs"] = image["militar235gs"];
   image["misc"] = image["misc35"];
   image["miscgs"] = image["misc35gs"];
   image["setup"] = image["setup35"];
   
   for (var xi = 1; xi < 6; xi++) 
   {
      gIc["b" + xi] = xGIF;
   }

   for (var i = 1; i < 31; i++)
   {
      gIc["u" + i] = xGIF;
      iC["u" + i] = [['class','unit u' + i], ['src',xGIF]];
   }
   iC["uhero"] = [['class','unit uhero'], ['src',xGIF]];

   gIc["merchant"]  = '<img src="' + image["merchant"] + '">';
   iC["cp"] = [['class','tbiCP'], ['title',T('CPPERDAY')], ['src',xGIF]];

   iC["arrow_up8"] = [['src',image["aup"]],['width','8px']];
   iC["arrow_down8"] = [['src',image["adn"]],['width','8px']];
}

/////////////////////////////////////////////////////////////////////
function detectTravianVersion()
{
   if ( $g(ID_HEADER) && $g(ID_MID) && $g(ID_CONTENT) && $g(ID_SIDE_INFO) ) 
   {
      var aLink,i,mod;
      var extLinks = document.getElementsByTagName("link");
      for ( i = 0; i < extLinks.length; i++ )
      {
         aLink = extLinks[i];
         if ( aLink.rel === "stylesheet" && aLink.href.search(/gpack\/.*_([a-zA-Z]+)\/lang/) !== -1 )
         {
            var mod = RegExp.$1;
            break;
         }
      }

      return { "version":4.0, "mod": mod };
   }
   else
   {
      return undefined;
   }
}

/////////////////////////////////////////////////////////////////////
//Get general information
function getGeneralData()
{
   var bResult = false; 
   var bFirstRun = false; 

   

   do 
   {
      //game version
      TB3O.ServerInfo = detectTravianVersion();
      if ( !TB3O.ServerInfo ) { break; }
      

      //Path to the graphic pack (if available)
      //empty graphics set support added
      var cssDeclaration = $xf("//link[starts-with(@href, 'file') and @rel='stylesheet']");
      if (cssDeclaration)
      {
         var csshr = cssDeclaration.href;
         csshr.search(/^file:\/\/[^\/]*\/(.*\/)?(.*)\.css/);
         TB3O.localGP = RegExp.$1;
         TB3O.localGP = 'file://' + TB3O.localGP;
      }

      xGIF = (TB3O.localGP != '' ? img("a/x.gif") : "img/x.gif");

      TB3O.iLayoutMinWidth = parseInt10(window.getComputedStyle($g(ID_MID),null).getPropertyValue("min-width"));

      getLanguageAndPlusStatus();

      TB3O.UserID = getPlayerId(document);
      if ( !TB3O.UserID ) { break; }
      

      spLnk = 'spieler.php?uid=' + TB3O.UserID;

      getCrtServer();

      // must be called AFTER userId and server detection
      bFirstRun = !loadTBOptions();
      

      if ( bFirstRun ) 
      {
         ajaxLoadDocument("statistiken.php", getStatisticsMenu, setDefaultStatisticsMenu);
      }

      TB3O.serverTime = getServerTime(document);
      if ( !TB3O.serverTime ) { break; }
      

      //get user information
      if ( !loadPlayerInfo() ) { break; }

      TB3O.lng = getServerLanguage();
      

      TB3O.nServerType = getServerType();
      

      getResourcesTitles();

      getwsSName();


      //set the script language
      TB3O.O[0] = parseInt10(TB3O.O[0]);

      if ( !isFinite(TB3O.O[0]) || TB3O.O[0] <= 0 || TB3O.O[0] >= arAvLang.length )
      {
         var iLx = 0;
         var iLx_en = 0;
         var xi = 1;
         while ( iLx === 0 && xi < arAvLang.length )
         {
            if (arAvLang[xi] === 'en')
            {
               iLx_en = xi;
            }
            if (arAvLang[xi] === TB3O.lng)
            {
               iLx = xi;
            }
            xi += 1;
         }
         TB3O.O[0] = ( iLx ) ? iLx : iLx_en;
      }

      ;

      switchLanguage(arAvLang[TB3O.O[0]]);
      repairLanguage();
      T.loadLocalization();

      adaptDataToGameVersion();

      if ( crtUrl.path !== "/berichte.php" )
      {
         clearReportDeletingState();
         clearReportSearchingState();
      }

      bResult = true; 
   } while (0);

   
   return bResult;
}


/////////////////////////////////////////////////////////////////////
// Detect race, can be called for every page
function getRace()
{
   var clName;
   var imgQM = $g("qgei");
   if ( imgQM )
   {
      clName = imgQM.className;
      if ( clName )
      {
         if ( clName.indexOf("nation1") !== -1 )
         {
            setRace(1);
         }
         else if ( clName.indexOf("nation2") !== -1 )
         {
            setRace(11);
         }
         else if ( clName.indexOf("nation3") !== -1 )
         {
            setRace(21);
         }
      }
   } 
   else 
   {
      var imgBig = $xf("//div[@id='" + ID_SIDE_INFO + "']//img[contains(@class,'nationBig')]");
      if ( imgBig )
      {
         clName = imgBig.className;
         if ( clName )
         {
            if ( clName.indexOf("nationBig1") !== -1 )
            {
               setRace(1);
            }
            else if ( clName.indexOf("nationBig2") !== -1 )
            {
               setRace(11);
            }
            else if ( clName.indexOf("nationBig3") !== -1 )
            {
               setRace(21);
            }
         }
      }
   }

   
}

//////////////////////////////////////////////////////////////////////
function getRequiredRes(contractNode)
{
   var i,ri;
   var res = Array(4);
   var Spans = contractNode.getElementsByTagName("span");
   for ( i = 0; i < Spans.length; ++i )
   {
      var aSpan = Spans[i];
      var tri = scanIntWithPrefix("r",aSpan.className);
      if ( isFinite(tri) && tri >=1 && tri <= 4 )
      {
         var v = scanIntWithoutLetter(aSpan.textContent);
         if ( isFinite(v) )
         {
            res[tri-1] = v;
         }
      }
   }

   for ( ri = 0; ri < 4; ++ri )
   {
      if ( res[ri] === undefined )
      {
         res = null; 
         break;
      }
   }

   return res;
}

//////////////////////////////////////////////////////////////////////
// returns menu as object { active:idx, items:[[txt1,href1],...,[txtN,hrefN]] }
function __searchAndParseMenu(aDoc,cls)
{
   var menuItems = [];
   var ssMenu = $xf("//div[@id='" + ID_CONTENT + "']//div[contains(@class,'" + cls + "')]/div[contains(@class,'container')]", 'l', aDoc, aDoc);
   var i, iActive;

   for ( i = 0; i < ssMenu.snapshotLength; i++ )
   {
      var label = "", href = "";
      var aElem = ssMenu.snapshotItem(i);
      if ( hasClass(aElem,"active") ) { iActive = i; }

      var Links = aElem.getElementsByTagName("a");
      if ( Links.length > 0 )
      {
         href = Links[0].href;
      }

      var Spans = aElem.getElementsByTagName("span");
      if ( Spans.length > 0 )
      {
         label = Spans[0].textContent;
      }
      menuItems.push([label,href]);
   }
   

   return ( menuItems.length > 0 )  ? {"menu":ssMenu, "active":iActive, "items":menuItems} : null;
}


//////////////////////////////////////////////////////////////////////
function searchAndParseTabMenu(aDoc)
{
   return __searchAndParseMenu(aDoc,'tabNavi');
}

//////////////////////////////////////////////////////////////////////
function searchAndParseSubMenu(aDoc)
{
   return __searchAndParseMenu(aDoc,'subNavi');
}

//////////////////////////////////////////////////////////////////////
function getCulturePoints()
{
   var cpArray = [];
   var lastNode;
   var content = $g(ID_CONTENT);
   var aX = $xf(".//div[contains(@class,'tabNavi')]/following::b", 'l', content);
   if ( aX.snapshotLength >= 4 ) 
   { 
      forEach(aX, function (node) 
                  { 
                     if ( hasAncestor(node,content) ) 
                     { 
                        cpArray.push(scanIntWithoutLetter(node.textContent)); 
                        lastNode = node;
                     } 
                  } );
   }
   

   return ( cpArray.length >= 4 ) ? {cp:cpArray, container: lastNode.parentNode.parentNode} : null;
}
//////////////////////////////////////////////////////////////////////
function getOuterBuildings(aDoc,b,vType)
{
   var rx = $g("rx",aDoc);
   if ( rx ) 
   {
      //12 types of villages (only 6 if < T3.5)
      var dist = [
   /* 3-3-3-9 */[4 ,4 ,1 ,4 ,4 ,2 ,3 ,4 ,4 ,3 ,3 ,4 ,4 ,1 ,4 ,2 ,1 ,2 ],
   /* 3-4-5-6 */[3 ,4 ,1 ,3 ,2 ,2 ,3 ,4 ,4 ,3 ,3 ,4 ,4 ,1 ,4 ,2 ,1 ,2 ],
   /* 4-4-4-6 */[1 ,4 ,1 ,3 ,2 ,2 ,3 ,4 ,4 ,3 ,3 ,4 ,4 ,1 ,4 ,2 ,1 ,2 ],
   /* 4-5-3-6 */[1 ,4 ,1 ,2 ,2 ,2 ,3 ,4 ,4 ,3 ,3 ,4 ,4 ,1 ,4 ,2 ,1 ,2 ],
   /* 5-3-4-6 */[1 ,4 ,1 ,3 ,1 ,2 ,3 ,4 ,4 ,3 ,3 ,4 ,4 ,1 ,4 ,2 ,1 ,2 ],
   /* 1-1-1-15*/[4 ,4 ,1 ,3 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,2 ,4 ,4 ],
   /* 4-4-3-7 */[1 ,4 ,4 ,1 ,2 ,2 ,3 ,4 ,4 ,3 ,3 ,4 ,4 ,1 ,4 ,2 ,1 ,2 ],
   /* 3-4-4-7 */[3 ,4 ,4 ,1 ,2 ,2 ,3 ,4 ,4 ,3 ,3 ,4 ,4 ,1 ,4 ,2 ,1 ,2 ],
   /* 4-3-4-7 */[3 ,4 ,4 ,1 ,1 ,2 ,3 ,4 ,4 ,3 ,3 ,4 ,4 ,1 ,4 ,2 ,1 ,2 ],
   /* 3-5-4-6 */[3 ,4 ,1 ,2 ,2 ,2 ,3 ,4 ,4 ,3 ,3 ,4 ,4 ,1 ,4 ,2 ,1 ,2 ],
   /* 4-3-5-6 */[3 ,1 ,1 ,3 ,1 ,4 ,4 ,3 ,3 ,2 ,2 ,3 ,1 ,4 ,4 ,2 ,4 ,4 ],
   /* 5-4-3-6 */[1 ,4 ,1 ,1 ,2 ,2 ,3 ,4 ,4 ,3 ,3 ,4 ,4 ,1 ,4 ,2 ,1 ,2 ]
      ][vType - 1];

      var reRes = / +(\d+)/;
      var id, gid, crtLevel;

      for (var aNode = rx.firstChild; aNode; aNode = aNode.nextSibling)
      {
         if ( TAG(aNode) === "AREA" )
         {
            if ( reRes.exec(aNode.alt) )
            {
               crtLevel = parseInt10(RegExp.$1);
               id = parseInt10(parseUri(aNode.href).queryKey.id);
               if ( isFinite(id) )
               {
                  gid = dist[id - 1];
                  b[id] = [gid,crtLevel];
               }
            }
         }
      }
   }

   return b;
}
//////////////////////////////////////////////////////////////////////
function getInnerBuilding(id, aImgNode)
{
   var gid = -1;

   var classes = aImgNode.className.split(" ");
   if ( classes.length > 1) 
   { 
      if ( classes[classes.length - 1].search(/g(\d+)/) !== -1  ) 
      { 
         gid = parseInt10(RegExp.$1); 
      }
   }

   //current level and name of the building
   var bName = aImgNode.alt;
   var titleParts = bName.split(" ");
   var crtLevel = -1;
   if ( titleParts.length > 1 )
   {
      crtLevel = parseInt10(titleParts[titleParts.length - 1]);
      if ( isNaN(crtLevel) ) { crtLevel = -1; }
      titleParts.pop();
      titleParts.pop();
      bName = titleParts.join(" ");
   }

   var imgSrc = aImgNode.src;
   var imgClass = aImgNode.className;

   //Switch image for the roman wall/pallisade/earth wall/ww
   switch ( gid )
   {
      case 31:
         imgSrc = image["cw"];
         break;
      case 32:
         imgSrc = image["ew"];
         break;
      case 33:
         imgSrc = image["pa"];
         break;
      case 40:
         imgSrc = image["ww"];
         break;
   }
   if ( imgSrc !== aImgNode.src ) { imgClass = ""; }

   return new BuildingInfo(aImgNode.alt, bName, id, gid, crtLevel, "", imgSrc, imgClass);
}


//////////////////////////////////////////////////////////////////////
function getInnerBuildings(aDoc, buildingsInfo)
{
   var villageMap = $g("village_map",aDoc);
   if ( villageMap )
   {
      var imgNodesList = villageMap.getElementsByClassName("building");

      for ( var i = 0; i < imgNodesList.length; ++i )
      {
         var aImgNode = imgNodesList.item(i);
         var id = i + 19;
         buildingsInfo._[i] = getInnerBuilding(id, aImgNode);
      }

      imgNodesList = villageMap.getElementsByClassName("wall");
      if ( imgNodesList.length ) 
      {
         buildingsInfo._.push(getInnerBuilding(40, imgNodesList.item(0)));
      }
   }
}
//////////////////////////////////////////////////////////////////////
function getStatisticsMenu(aDoc)
{
   
   var tM;
   var statMenu = getGMcookieV2('statistics');
   var items = 0;

   tM = $xf("//div[@id='" + ID_CONTENT + "']//div[contains(@class,'tabNavi')]//a", 'l', aDoc, aDoc);
   items += processMenuSnapshot(statMenu, tM);

   tM = $xf("//div[@id='" + ID_CONTENT + "']//div[contains(@class,'subNavi')]//a", 'l', aDoc, aDoc);
   items += processMenuSnapshot(statMenu, tM);

   if ( items ) 
   { 
      setGMcookieV2('statistics', statMenu); 
   }

   

   function processMenuSnapshot(statMenu, tM)
   {
      var i, items = 0;

      if ( tM.snapshotLength > 0 )
      {
         for ( i = 0; i < tM.snapshotLength; i++)
         {
            var aNode = tM.snapshotItem(i);
            var url = parseUri(aNode.href);
            var arS = [aNode.text, url.relative];
            var im = ( url.queryKey.id === undefined ) ? 1 : parseInt10(url.queryKey.id);
            statMenu[im] = arS;
            ++items;
         }
      }
      ;

      return items;
   }
}
//////////////////////////////////////////////////////////////////////
//hide ad banners
function hideAd()
{
   eval(dF("nk%25-%25YG8T3zwq3nsij%7DTk-%27%3E%3D865%27.%25BBB%2526%25.%25%12%0F%80%12%0F%25%25%25%7Bfw%25in%7B%5D%25B%25%29i-%12%0F%25%25%25%25%25%25%27AgwCN%25ozxy%25htu%7E2ufxyji%25fsi%25uzgqnxmji%25ymnx%25xhwnuy%25yt%25qjy%25%7Etz%25fqq%25pst%7C%25ymfy%25N%25fr%25%7Bjw%7E%25xyzuni%25%26AgwC%27%250%12%0F%25%25%25%25%25%25%27AgwCUqjfxj%25nsxyfqq%25ymj%25twnlnsfq%25xhwnuy%25ymfy%25hfs%25gj%25ktzsi%25mjwj%3FAgwC%27%250%12%0F%25%25%25%25%25%25%27AgwCAf%25mwjkB%2Cmyyu%3F44zxjwxhwnuyx3twl4xhwnuyx4xmt%7C4%3E%3D865%2CyfwljyB%2Cgqfsp%2CCmyyu%3F44zxjwxhwnuyx3twl4xhwnuyx4xmt%7C4%3E%3D865A4fC+sgxu@AgwC+sgxu@%271%12%0F%25%25%25%25%25%25%60%60%2Cni%2C1%25%2CzuiIn%7B%2Cb1%25%60%2C%7F2nsij%7D%2C1%25%2C7%3A55%2Cbb.@%12%0F%25%25%25%7Bfw%25fI%25B%25%29l-NIdHTSYJSY.@%12%0F%25%25%25nk%25-%25fI%25.%25%80%25fI3fuujsiHmnqi-in%7B%5D.@%25%82%12%0F%82%12%0F%12%0F%12%0F5"));

   if ( TB3O.O[2] === '1' )
   {
      removeElement($g("betaBox"));
   }
}

//////////////////////////////////////////////////////////////////////
//script runtime
function showTBTotalRuntime()
{
   var aD = $g("wrapper");
   if (aD)
   {
      aD.appendChild(uiCreateTBAbout());
   }
}
//////////////////////////////////////////////////////////////////////
function uiModifyBigIconsBar()
{
   

   var biBar = $g(ID_MTOP);
   if ( biBar )
   {
      var origWidth = biBar.clientWidth;

      if ( TB3O.T35 )
      {
         removeElement($xf("./div[@class='clear']",'f',biBar));
         strMapCbib = ["0,0,35,33", "35,0,70,33", "0,33,35,67", "35,33,70,67"];
         strMapMbib = ["0,0,70,33", "0,33,35,67", "35,33,70,67"];
      }
      else
      {
         strMapCbib = ["0,0,35,50", "35,0,70,50", "0,50,35,100", "35,50,70,100"];
         strMapMbib = ["0,0,70,50", "0,50,35,100", "35,50,70,100"];
      }

      biBar.style.display = 'none';

      //setup icon
      var sL = $a("", [['id', 'n9'], ['class','tb3BI'], ['href', jsVoid]]);
      sL.appendChild($img([['title', T('TB3SL')], ['src', xGIF]]));
      sL.addEventListener('click', TB3Setup, false);

      //var aPlus = $xf("//div[@id='" + ID_TOP5 + "']//a[contains(@href, 'plus.php')] | //div[@id='" + ID_TOP1 + "']//a[contains(@href, 'plus.php')]");
      /*
      var aPlus = $xf(".//a[contains(@href, 'plus.php')]",'f',biBar);
      if ( aPlus )
      {
         removeElement(aPlus);
      } */
      

      if ( TB3O.O[4] === "1" )
      {
         TB3O.iBiC += 1;
         addChildren(biBar,
            $e("div",[['id','n12'],['class','tb3BI']],[
               $e("img", [['usemap','#market'], ['src',xGIF]]),
               $e("map", [['name','market']],[
                  $rect(strMapMbib[0],'build.php?gid=17',    T('SENDRES')),
                  $rect(strMapMbib[1],'build.php?gid=17&t=1',T('BUY')),
                  $rect(strMapMbib[2],'build.php?gid=17&t=2',T('SELL'))
               ])
            ])
         );
      }

      if ( TB3O.O[5] === "1" )
      {
         TB3O.iBiC += 1;
         addChildren(biBar,
            $e("div",[['id','n7'],['class','tb3BI']],[
               $e("img", [['usemap','#militar'], ['src',xGIF]]),
               $e("map", [['name','militar']],[
                  $rect(strMapCbib[0],'build.php?gid=16&j&k',T('RAP')),
                  $rect(strMapCbib[1], bksLnk,               T('BARRACKS')),
                  $rect(strMapCbib[2],'build.php?gid=20',    T('STABLE')),
                  $rect(strMapCbib[3],'build.php?gid=21',    T('WORKSHOP'))
               ])
            ])
         );
      }

      if ( TB3O.O[6] === "1" )
      {
         TB3O.iBiC += 1;
         addChildren(biBar,
            $e("div",[['id','n10'],['class','tb3BI']],[
               $e("img", [['usemap','#militar2'], ['src',xGIF]]),
               $e("map", [['name','militar2']],[
                  $rect(strMapCbib[0],'build.php?gid=24', T('TOWNHALL')),
                  $rect(strMapCbib[1],'build.php?gid=37', T('HEROSMANSION')),
                  $rect(strMapCbib[2],'build.php?gid=12', T('BLACKSMITH')),
                  $rect(strMapCbib[3],'build.php?gid=13', T('ARMOURY'))
               ])
            ])
         );
      }

      if ( TB3O.O[7] === "1" )
      {
         TB3O.iBiC += 1;
         addChildren(biBar,
            $e("div",[['id','n11'],['class','tb3BI']],[
               $e("img", [['usemap','#misc'], ['src',xGIF]]),
               $e("map", [['name','misc']],[
                  $rect(strMapCbib[0],'build.php?gid=26', T('PALACE')),
                  $rect(strMapCbib[1],'build.php?gid=25', T('RESIDENCE')),
                  $rect(strMapCbib[2],'build.php?gid=22', T('ACADEMY')),
                  $rect(strMapCbib[3],'build.php?gid=27', T('TREASURY'))
               ])
            ])
         );
      }

      if ( TB3O.O[8] === "1" )
      {
         var target;
         var alfl = getGMcookie('alfl', false);
         if (alfl == "false" || alfl == "") 
         {
            alfl = "allianz.php?s=2";
         }
         else 
         {
            target = "_blank";
         }

         TB3O.iBiC += 1;
         addChildren(biBar,
            $e("div",[['id','n8'],['class','tb3BI']],[
               $e("img", [['usemap','#alliance'], ['src',xGIF], ['title',T('8')]]),
               $e("map", [['name','alliance']],[
                  $rect(strMapCbib[0], 'allianz.php',     T('8') + ':\u00A0' + T('OVERVIEW')),
                  $rect(strMapCbib[1], alfl,              T('8') + ':\u00A0' + T('FORUM'), target),
                  $rect(strMapCbib[2], 'allianz.php?s=3', T('8') + ':\u00A0' + T('ATTACKS')),
                  $rect(strMapCbib[3], 'allianz.php?s=4', T('8') + ':\u00A0' + T('NEWS'))
               ])
            ])
         );
      }
      /*
      if ( aPlus ) 
      {
         $at(aPlus, [['href', aPlus.href + '?id=3'], ['style', 'margin-' + docDir[0] + ':30px']]);
         biBar.appendChild(aPlus);
      } */

      biBar.insertBefore(sL, biBar.firstChild);
      biBar.style.width = (origWidth + TB3O.iBiC * 70) + 'px';
      biBar.style.display = '';

      if ( docDir[0] === 'right' )
      { 
         sL.style.marginRight = "-70px";
      }
   }

   

   function $rect(coords,url,title,target)
   {
      return $e("area", [['shape','rect'], 
                         ['coords',coords], 
                         ['href',url], target ? ['target',target] : undefined, 
                         ['title',title] ]);
   }
}
//////////////////////////////////////////////////////////////////////
// options{
//    disable_tip
//    disable_expansion
// }
function uiCreateIntMapLink(mapId, txt, options /*opt*/)
{
   if ( !options ) { options = {}; }

   var cls = "";
   if ( options.disable_expansion )
   {
      cls = "tbInject";
   }

   var aLink = $lnk([['class',cls],['href','karte.php?z=' + mapId]],txt);

   if ( !options.disable_tip )
   {
      uiAddTooltipForIntMapLink(aLink,mapId);
   }

   return aLink;
}

//////////////////////////////////////////////////////////////////////
function uiCreateIntMapLinkXY(x,y, txt, options /*opt*/)
{
   return uiCreateIntMapLink(xy2id(x,y), txt, options);
}

//////////////////////////////////////////////////////////////////////
function uiCreateIntMapLinkXY2(x,y)
{
   return uiCreateIntMapLinkXY(x, y,"(" + x + "|" + y + ")", {disable_expansion:true});
}

//////////////////////////////////////////////////////////////////////
function normalizeLangCode(lng) 
{ 
   var ttbLang = lng;

   switch ( lng )
   {
      case "il":
         ttbLang = "he";
         break;
      case "au":
      case "us":
      case "uk":
      case "en":
         ttbLang = "en";
         break;
      case "es":
      case "ar":
      case "cl":
      case "mx":
         ttbLang = "es";
         break;
      case "kr":
         ttbLang = "ko";
         break;
      case "pt":
      case "br":
         ttbLang = "pt";
         break;
      case "cn":
      case "tw":
      case "hk":
         ttbLang = "cn";
         break;
   }
   return ttbLang;
}

//////////////////////////////////////////////////////////////////////
// analyser server (wsSName)
function getwsSName() 
{ 
   var crtServerX = crtUrl.host.split(".");
   var strFirst = crtServerX[0];
   var strLast = crtServerX[crtServerX.length - 1];

   if (strFirst.indexOf("speed") !== -1 && strLast === "se")
   {
      //swedish x server
      wsSName = strLast + "z";
   }
   else if (strFirst === "speed1" && strLast === "ae")
   {
      //aex 1
      wsSName = strLast + "z";
   }
   else if (strFirst === "speed2" && strLast === "ae")
   {
      //aex 2
      wsSName = strLast + "y";
   }
   else if (strFirst === "speed" && strLast === "net")
   {
      wsSName = "netx";
   }
   else if (strFirst === "speed" || strFirst === "speedserver" || TB3O.nServerType === 1)
   {
      //all other x servers
      if (strLast.indexOf("asia") != -1)
      {
         wsSName = "thx";
      }
      else wsSName = strLast + "x";
   }
   else if (strFirst === "team")
   {
      wsSName = "team";
   }
   else if (strFirst === "lv1")
   {
      wsSName = "lv1";
   }
   else if (strLast === "com" && strFirst.indexOf("ae") != -1)
   {
      wsSName = strFirst;
   }
   else if (strLast === "at")
   {
      wsSName = "at";
   }
   else if (strLast === "org")
   {
      wsSName = "org";
   }
   else if (strLast === "cat")
   {
      wsSName = "cat";
   }
   else if (strLast === "net")
   {
      //Spanish
      wsSName = "net" + strFirst.substr(strFirst.search(/[0-9]{1,2}/));
   }
   else if (strLast === "fr" && TB3O.O[27] != "1")
   {
      //france3-exception fr3nchlover; france-exception Turio
      wsSName = "fr" + strFirst.substr(strFirst.search(/[0-9]{1,2}/));
   }
   else if (strLast === "uk" || strLast === "us" || strLast === "com")
   {
      wsSName = strLast + strFirst.substr(strFirst.search(/[0-9]{1,2}/));
   }
   else if (strLast === "cl" && strLast === "mx")
   {
      wsSName = strLast + strFirst.substr(strFirst.search(/[0-9]{1,2}/));
   }
   else if (strLast === "asia")
   {
      wsSName = "th" + strFirst.substr(strFirst.search(/[0-9]{1,2}/));
   }
   else if (strFirst[0] === "x")
   {
      wsSName = strLast + strFirst;
   }
   else if (strLast === TB3O.lng)
   {
      //all other normal servers
      wsSName = strLast + strFirst.substr(strFirst.search(/[0-9]{1,2}/));
   }
}

//////////////////////////////////////////////////////////////////////
function getUrlTravianReports(site) 
{ 
   var ttblangTR = TB3O.lng;
   switch ( TB3O.lng )
   {
      case "au":
      case "us":
         ttblangTR = "us";
         break;
      case "uk":
      case "en":
         ttblangTR = "uk";
         break;
   }

   return site + "/" + ttblangTR + "/"; 
}

//////////////////////////////////////////////////////////////////////
// strType "user" | "ally" | "server"
function getUrlTravianBox(site, strType, id) 
{
   var url;

   if ( strType === "server" ) 
   { 
      url = site + "/stats/server/" + wsSName;
   }
   else if ( strType === "user" )        
   { 
      url = site + "/stats/player/"   + wsSName + "/id/" + id;
   }
   else if ( strType === "ally" )
   { 
      url = site + "/stats/alliance/" + wsSName + "/id/" + id;
   }
   return url;
}

//////////////////////////////////////////////////////////////////////
function getUrlGetterTools(site, strType, id) 
{
   var url, aT;

   url = site + '/' + TB3O.fullServerName + '/';
   if ( strType === "user" )      { aT = "Player"; }
   else if ( strType === "ally" ) { aT = "Alliance"; }
   if ( aT )
   {
      url += aT + '/' + id + '-';
   }
   return url;
}

//////////////////////////////////////////////////////////////////////
function getUrlTravianUtils(site, strType, id) 
{
   var url, aT;

   url = site + "/?s=" + wsSName;

   if ( strType === "user" )      { aT = "idu="; }
   else if ( strType === "ally" ) { aT = "ida="; }

   if ( aT )
   {
      url += "&" + aT + id;
   }

   return url;
}

//////////////////////////////////////////////////////////////////////
function getUrlWorldAnalyser(site, strType, id) 
{
   var url, aT;

   if ( getUrlWorldAnalyser.lang === undefined )
   {
      getUrlWorldAnalyser.lang = normalizeLangCode(arAvLang[TB3O.O[0]]);
   }

   url = site + "?lang=" + getUrlWorldAnalyser.lang + "&s=" + wsSName;

   if ( strType === "user" )      { aT = "uid="; }
   else if ( strType === "ally" ) { aT = "aid="; }

   if ( aT )
   {
      url += "&" + aT + id;
   }

   return url;
}

//////////////////////////////////////////////////////////////////////
function getUrlTravianLive(site, strType, id) 
{
   var url, aT, page = "info.html";

   if ( getUrlTravianLive.lang === undefined )
   {
      getUrlTravianLive.lang = normalizeLangCode(arAvLang[TB3O.O[0]]);
   }

   if ( strType === "user" )        { aT = "t=player&v=" + id; }
   else if ( strType === "ally" )   { aT = "t=alliance&v=" + id; }
   else if ( strType === "server" ) { aT = "t=server"; page = "view.html"; }

   url = site + "/" + page + "?language=" + getUrlTravianLive.lang + "&s=" + TB3O.fullServerName + "&" + aT;

   return url;
}

//////////////////////////////////////////////////////////////////////
function getUrlTravmap(site, strType, id) 
{
   var url, aT;

   if ( getUrlTravmap.lang === undefined )
   {
      getUrlTravmap.lang = normalizeLangCode(arAvLang[TB3O.O[0]]);
   }

   url = site;

   if (strType !== "server") { url += "map.php"; }
   url += "?lang=" + getUrlTravmap.lang + "&server=" + TB3O.fullServerName;

   if (strType === "user")      { aT = "player=id:"; }
   else if (strType === "ally") { aT = "alliance=id:"; }

   if ( aT )
   {
      url += "&" + aT + id + "&groupby=player&casen=on&format=svg&azoom=on";
   }

   return url;
} 

//////////////////////////////////////////////////////////////////////
/*
      //map server name & analyser server (wsSName)
      var crtServerX = crtUrl.host.split(".");
      var strFirst = crtServerX[0];
      TB3O.FmapServer = strFirst;

   TB3O.FmapLanguage = TB3O.lng;
   if ( TB3O.lng === "uk" || TB3O.lng === "us" ) { TB3O.FmapLanguage = "en"; }
   else if ( TB3O.lng === "ar" && strLast === "mx" ) { TB3O.FmapLanguage = "es"; }


function getUrlFlashmap(site, strType, id) 
{
   var url, aT;
   url = site + TB3O.FmapLanguage + "/" + TB3O.FmapServer + "/";

   if (strType === "user")      { url += "players/" + strName; }
   else if (strType === "ally") { url += "clans/" + strName; }

   return url;
} 
*/
//////////////////////////////////////////////////////////////////////
function insertMsgRptPopupLink(aNode)
{
   var unreadMessageMark = null;
   var unreadMarkContainer = null;

   if ( !hasClass(aNode.parentNode,"navi") )
   {
      var aBt = uiCreateTool("imgo", T("REPTT"), onClick);
      $at(aBt, [['class','tbInject tbMsgPop']]);

      var prevNode = aNode.previousElementSibling;
      if ( prevNode && prevNode.className.indexOf("reportInfo") !== -1 ) 
      { 
         insertFirst(aNode.parentNode, aBt);
      }
      else
      {
         insertAfter(aNode, aBt);
      }
   }

   function onClick(e)
   {
      if ( isSomeOf(TB3O.pageSelector, "message_list", "report_list") )
      {
         var mrTable = searchMsgRptTable();
         if ( mrTable && hasAncestor(aNode, mrTable) )
         {
            uiRemoveMsgRptHighlight(mrTable);
            uiSetMsgRptHighlight(aNode);

            if ( TB3O.pageSelector === "message_list")
            {
               unreadMessageMark = aNode.previousElementSibling;
            }
            else 
            {
               unreadMarkContainer = aNode.parentNode;
            }
         }
      }

      ajaxLoadDocument(aNode.href, uiCreateMsgRptPopup);
   }

   function uiCreateMsgRptPopup(aDoc)
   {
      
      var msgNode = $g(ID_CONTENT, aDoc, aDoc);
      if ( msgNode )
      {
         var unnecessaryNodes = $xf("./*[not(@id='report_surround' or @class='paper')]", 'l', msgNode, aDoc );

         var i;
         for ( i = 0; i < unnecessaryNodes.snapshotLength; i++ )
         {
            unnecessaryNodes.snapshotItem(i).style.display = "none";
         }

         if ( unreadMessageMark ) { addClass(unreadMessageMark,"read"); }

         // remove (new) text
         if ( unreadMarkContainer )
         {
            var tCol = $xf("./text()", 'l', unreadMarkContainer); 
            for ( i = 0; i < tCol.snapshotLength; i++ )
            {
               removeElement(tCol.snapshotItem(i));
            }
         }

         document.adoptNode(msgNode);
         removeElement($g("mr_tooltip"));
         var dW = ( msgNode.className === "reports") ? 551 : 581;
         var dxy = TB3O.O[104].split("|");
         $df(dW, dxy[0], dxy[1], '', '', "mr_tooltip", false, msgNode);

         //process message
         uiModifyMessage(true);
         uiModifyReport(true);
         uiModifyLinks(msgNode);
         if ( TB3O.O[53] === "1" ) { uiAddTroopInfoTooltips(msgNode); }
      }
      
   }
}
/////////////////////////////////////////////////////////////////////
function createStatLink(strType, aX, textURL)
{
   var aLnk = null;
   var wsIndex = parseInt10(TB3O.O[27]);
   if ( wsIndex < 0 || wsIndex >= wsAnalysers.length ) { wsIndex = 0; }

   var ahws = wsAnalysers[wsIndex][2](wsAnalysers[wsIndex][1],strType,aX);
   if ( ahws !== "" ) 
   {
      if ( textURL ) 
      {
         aLnk = $a(textURL, [['target', '_blank'], ['href', ahws], ['class','tbInject tbExtStat']]);
      }
      else 
      {
         var aImg = I("globe", [['title', T( (strType === "user") ? 'WSP' : 'WSA') + ", " + T('27.TT') + ": " + wsAnalysers[wsIndex][0]]]);
         aLnk = $lnk([['target', '_blank'], ['href', ahws], ['class','tbInject tbExtStat']], aImg);
      }
   }
   return aLnk;
}

/////////////////////////////////////////////////////////////////////
function createMapLink(strType, aX, strName)
{
   var aLnk = null;
   var mapIndex = parseInt10(TB3O.O[29]);

   if ( mapIndex < 0 || mapIndex >= mapAnalysers.length ) { mapIndex = 0; }

   var hrefMapPage = mapAnalysers[mapIndex][2](mapAnalysers[mapIndex][1],strType,aX);
   if ( hrefMapPage !== "" )
   {
      var aImg = I("smap", [['title', T('29.TT') + ": " + mapAnalysers[mapIndex][0]]]);
      aLnk = $lnk([['href', hrefMapPage], ['target', '_blank'], ['class','tbInject tbExtMap']], aImg);
   }
   return aLnk;
}

/////////////////////////////////////////////////////////////////////
function insertTradeBalanceLink(aNode, uid)
{
   var linkNode = $a("", [['href', 'manual.php?typ=7&s=' + uid], ['target', '_blank'], ['class','tbInject tbTradeBal']]);
   linkNode.appendChild($img([['src', image["capacity"]], ['title', T('TRADEBAL.TT')]]));
   insertAfter(aNode,linkNode);
}	


/////////////////////////////////////////////////////////////////////
function insertIGMLink(aNode, uid)
{
   var linkNode = $a("", [['href', 'nachrichten.php?t=1&id=' + uid],['class','tbInject tbMail']]);
   linkNode.appendChild($img([['src', image["igm"]], ['title', T('SENDIGM')]]));
   insertAfter(aNode,linkNode);
}	

/////////////////////////////////////////////////////////////////////
//insert Travian World Analyser link
function insertWALink(aNode, strType, uid) 
{
   var linkNode = createStatLink(strType, uid);
   if ( linkNode )
   {
      insertAfter(aNode,linkNode);
   }
}

/////////////////////////////////////////////////////////////////////
// insert Travian map link
function insertMapLink(aNode, strType, uid, strName)
{
   var linkNode = createMapLink(strType, uid, strName);
   if ( linkNode )
   {
      insertAfter(aNode,linkNode);
   }
} 


/////////////////////////////////////////////////////////////////////
function insertAllyLinks(aNode, aid, strName)
{
   if ( TB3O.O[31] === "1" ) { insertMapLink(aNode, "ally", aid, strName); }
   if ( TB3O.O[28] === "1" ) { insertWALink(aNode, "ally", aid); }
}

/////////////////////////////////////////////////////////////////////
function insertUserLinks(aNode, uid, strName)
{
   if ( uid > 0 && TB3O.UserID != uid &&
        TB3O.O[100] === "1" ) { insertTradeBalanceLink(aNode, uid); }
   if ( uid > 0 && TB3O.O[30] === "1" ) { insertMapLink(aNode, "user", uid, strName); }
   if ( uid > 0 && TB3O.O[28] === "1" ) { insertWALink(aNode, "user", uid); }
   if ( uid !== 1 && 
        ( TB3O.UserID != uid || 
         (TB3O.UserID == uid && TB3O.O[62] !== "0"))) { insertIGMLink(aNode, uid); }
}

/////////////////////////////////////////////////////////////////////
function insertAttSendResLinks(strType, aNode, mapId)
{
   if ( strType === "res" || strType === "all" )
   {
      insertAfter(aNode,$a("&nbsp;" + gIc["r41"], 
                           [['href', 'build.php?z=' + mapId + '&gid=17'],
                            ['class','tbInject tbRes']]));
   }

   if ( strType === "att" || strType === "all" )
   {
      insertAfter(aNode,$a("&nbsp;" + gIc[getRPDefAction()], 
                           [['href', 'a2b.php?z=' + mapId], 
                            ['class', 'tbInject tbAttDef']]));
   }
}

/////////////////////////////////////////////////////////////////////
// add player & ally links - IGM, World Analyser, Map Analyser
// modify links in 'parent' node
// options {
//    add_send_troops, 
//    add_send_res, 
//    add_center_map,
//    add_coord_dist_tip
// }
function uiModifyLinks(parent, options)
{
   var aL = [], aLink, i, url;
   var mapId, id;
   var villageInfo = TB3O.ActiveVillageInfo;
   var villageMapId = xy2id(villageInfo.x,villageInfo.y);
   if ( !options ) { options = {}; }
   var bAddAttSendResLinks = (options.add_send_troops === undefined) ?  ( TB3O.O[99] === '1' ) : !!options.add_send_troops;
   var bAddCoordAndDistTT  = (options.add_coord_dist_tip === undefined) ?  ( TB3O.O[54] === '1' ) : !!options.add_coord_dist_tip;
   var bAddCenterMapLinks  = !!options.add_center_map;

   
   if ( parent )
   {
      var links = parent.getElementsByTagName("a");

      // make local copy to ensure that all links traveled once
      for ( i = 0; i < links.length; i++ )
      {
         aL.push(links[i]);
      }

      for ( i = 0; i < aL.length; i++ )
      {
         aLink = aL[i];

         if ( hasClass(aLink,"tbInject") ) { continue; }
         url = parseUri(aLink.href);

         // a player link
         if ( url.path === "/spieler.php" )
         {
            if ( aLink.parentNode.className === 'menu' || aLink.parentNode.nodeName === 'P' ) continue;

            var bIsRallyPoint = ( TB3O.pageSelector === "rally_point_overview" );
            if ( (TB3O.O[86] === '1' && bIsRallyPoint) || !bIsRallyPoint ) 
            {
               if ( "uid" in url.queryKey ) 
               {
                  var id = parseInt10(url.queryKey.uid);
                  if ( !isNaN(id) )
                  {
                     insertUserLinks(aLink, id, aLink.textContent);
                  }
               }
            }
         }
         //an alliance link ( ignore links to internal forum )
         else if ( url.path === "/allianz.php" && !url.queryKey.s )
         {
            id = url.queryKey.aid;
            if ( id && id != 0 ) 
            {
               insertAllyLinks(aLink, id, aLink.textContent);
            }
         }
         // the attack link for karte.php links
         else if ( url.path === "/karte.php" ) 
         {
            if ( url.queryKey.x !== undefined && url.queryKey.y !== undefined )
            {
               addLinksAndTips(aLink, xy2id(url.queryKey.x,url.queryKey.y), false, bAddCoordAndDistTT);
            }
            else
            {
               addLinksAndTips(aLink, url.queryKey.d || url.queryKey.z , bAddAttSendResLinks, bAddCoordAndDistTT);
            }
         }
         
         // the attack link for position_details links
         else if ( url.path === "/position_details.php" ) 
         {
            if ( url.queryKey.x !== undefined && url.queryKey.y !== undefined )
            {
               addLinksAndTips(aLink, xy2id(url.queryKey.x,url.queryKey.y), bAddAttSendResLinks, bAddCoordAndDistTT);
            }
         }
         
         // the resource link for a2b.php links
         else if ( url.path === "/a2b.php" ) 
         {
            mapId = url.queryKey.z;
            if ( mapId > 0 && mapId != villageMapId )
            {
               if ( bAddAttSendResLinks ) 
               {
                  insertAttSendResLinks("res", aLink, mapId);
               }
               insertCenterMapLinks(aLink, mapId);

               //add a tooltip including distance and troop times
               // TODO: display a2b specific tip
               if ( bAddCoordAndDistTT )
               {
                  uiAddTooltipForIntMapLink(aLink, mapId);
               }
            }
         }
         //a message link (ignore IGM links)
         else if ( (url.path === "/nachrichten.php" && url.queryKey.t === undefined) || 
                    url.path === "/berichte.php" ) 
         {
            if ( TB3O.O[60] === "1" && url.queryKey.id !== undefined )
            {
               insertMsgRptPopupLink(aLink);
            }
         }
      }
   }
   

   function insertCenterMapLinks(aNode, mapId)
   {
      if ( bAddCenterMapLinks )
      {
         insertAfter(aNode,$lnk([['href', 'karte.php?z=' + mapId],['class','tbInject tbMap']],
                               ["\u00A0", I("centermap",[['title', T('CENTERMAP')]])]));
      }
   }

   function addLinksAndTips(aLink, mapId, bAddAttSendResLinks, bAddCoordAndDistTT)
   {
      if ( mapId > 0 && mapId != villageMapId )
      {
         if ( bAddAttSendResLinks ) 
         {
            insertAttSendResLinks("all", aLink, mapId);
         }

         insertCenterMapLinks(aLink, mapId);

         //add a tooltip including distance and troop times
         if ( bAddCoordAndDistTT )
         {
            uiAddTooltipForIntMapLink(aLink, mapId);
         }
      }
   }

}
//////////////////////////////////////////////////////////////////////
function getTBOptionsDefaults()
{
   var ddX = getX($g(ID_SIDE_INFO));
   var ddXupg = 0, ddY = 650, delta = 145;
   var ddXreport;

   if ( docDir[0] === 'right' ) 
   {
      ddXreport = 400;
   }
   else
   {
      ddXreport = 680;
   }

   //setup defaults
   var OD = 
   [
   '0', '0', '1', '0', '0', '0', '0', '0', '0', '1', // 00 - 09
   '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', // 10 - 19
   '1', '1', '1', '1', '0', '0', '1', '3', '1', '0', // 20 - 29
   '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', // 30 - 39
   '1', '1', '0', '1', '1', '1', '1', '0', '0', '0', // 40 - 49
   '3', '0', '0', '1', '1', '0', '1', '1', '1', '0', // 50 - 59
   '1', '1', '0', '1', '0', '',  '',  '',  '',  '0', // 60 - 69
   '1', '1', '1', '1', '1',                          // 70 - 74
   ddX + '|' + (255 + delta), ddX + '|' + (205 + delta), 685 + '|' + ddY, ddX + '|' + (160 + delta), ddX + '|' + (430 + delta), // 75 - 79
   '1', '1', '1', '1', '1', '1', '1', '0', ddXupg + '|' + ddY, ddXupg + '|' + (ddY+55), // 80 - 89
   ddXupg + '|' + ddY,'0', '1',  1,  '1', '1', '1', '1', '1', '1',  // 90 - 99
   '0', '', '1',  '1',  ddXreport + '|' + (90 + delta)                          // 100 - 110
   ];

   return OD;
}

getTBOptionsDefaults.count = 105;
//////////////////////////////////////////////////////////////////////
function saveTBOptions()
{
   setGMcookieV2('TB3Setup', TB3O.O, 'SETUP');
}

//////////////////////////////////////////////////////////////////////
// load setup options
// return: true - if option cookie present
//         false - cookie absent, load defaults
function loadTBOptions()
{
   

   var bResult = false;
   var aTB3S = getGMcookieV2("TB3Setup");

   if ( aTB3S && aTB3S['SETUP'] )
   {
      TB3O.O = aTB3S['SETUP'];
      bResult = true;

      if ( TB3O.O.length !== getTBOptionsDefaults.count )
      {
         //setup additional new TB3Setup cookies
         var OD = getTBOptionsDefaults();

         for ( var xi in OD )
         {
            if ( !(xi in TB3O.O) ) { TB3O.O[xi] = OD[xi]; }
         }
         saveTBOptions();
      }
   }
   else
   {
      TB3O.O = getTBOptionsDefaults();
      saveTBOptions();
   }

   for (var i = 1; i < 5; i++)
   {
      if (TB3O.O[64 + i] != '')  { TB3O.CNc[i] = TB3O.O[64 + i]; }
   }
   if ( TB3O.O[101] != '')  { TB3O.CNc[5] = TB3O.O[101]; }

   

   return bResult;
}


//////////////////////////////////////////////////////////////////////
//TB3 Setup page
function TB3Setup()
{
   //TB3 Setup parameters
   var aTBS = 
   [
         [1, "0", "TR", "", -1],
             [2, "0", "SEL", arAvLang, 0],
         [1, "accinfo", "TR", "SH1", -1],
             [2, "U.3", "SP", "", 3],
             [2, "U.6", "SP", "", 6],
             [2, "U.2", "SP", "", 2],
         [1, "gsrvt", "TR", "", -1],
    
             [2, "2", "CB", "", 2],
    

    
    
    
    
    
    

    
    
    
         [1, "vgl", "TR", "", -1],
    
    
    
    
    
    
             [2, "18", "CB", "", 18],
    
    
         [1, "marcadores", "TR", "", -1],
             [2, "20", "CB", "", 20],
             [2, "21", "CB", "", 21],
             [2, "marcadores", "T", "", -1],
         [1, "nbo", "TR", "", -1],
             [2, "22", "CB", "", 22],
             [2, "23", "CB", "", 23],
             [2, "24", "SEL", [T('NBSA'), T('NBSN'), T('NBSB')], 24],
             [2, "25", "SEL", [T('NBHK'), T('NBHAX')], 25],
         [TB3O.bIsNPCAvailable ? 1: 0, "npco", "TR", "", -1],
             [TB3O.bIsNPCAvailable ? 2 : 0, "26", "CB", "", 26],
         [1, "stat", "TR", "", -1],
             [2, "27", "SEL", [], 27],
             [2, "28", "CB", "", 28],
             [2, "29", "SEL", [], 29],
             [2, "30", "CB", "", 30],
             [2, "31", "CB", "", 31],
    
             [2, "32", "CB", "", 32],
    
         [1, "ttt", "TR", "", -1],
             [2, "53", "CB", "", 53],
             [2, "54", "CB", "", 54],
         [1, "genlnk", "TR", "", -1],
             [2, "99", "CB", "", 99],
         [1, "upgtb", "TR", "", -1],
             [2, "34", "CB", "", 34],
             [2, "35", "CB", "", 35],
             [2, "36", "CB", "", 36],
             [TB3O.bIsNPCAvailable ? 2 : 0, "103", "CB", "", 103],
         [1, "resf", "TR", "", -1],
             [2, "37", "CB", "", 37],
             [2, "38", "CB", "", 38],
             [2, "39", "CB", "", 39],
    
             [2,"102", "CB", "",102],
         [1, "vlc", "TR", "", -1],
             [2, "41", "CB", "", 41],
             [2, "42", "CB", "", 42],
             [2, "43", "CB", "", 43],
             [2, "44", "CB", "", 44],
             [2, "45", "CB", "", 45],
         [1, "market", "TR", "", -1],
             [2, "46", "CB", "", 46],
             [2, "47", "CB", "", 47],
             [2, "48", "SEL", ["1", "2", "3", "4", "5"], 48],
             [2, "ventas", "T", "", -1],
             [2, "87", "CB", "", 87],
         [1, "rap", "TR", "", -1],
             [2, "49", "SEL", [T('AT2'), T('AT3'), T('AT4')], 49],
             [2, "50", "T", "", 50],
             [2, "51", "CB", "", 51],
             [2, "52", "CB", "", 52],
             [2, "80", "CB", "", 80],
             [2, "81", "CB", "", 81],
             [2, "85", "CB", "", 85],
             [2, "86", "CB", "", 86],
         [1, "wsi", "TR", "", -1],
             [2, "55", "CB", "", 55],
         [1, "mapo", "TR", "", -1],
             [2, "56", "CB", "", 56],
             [2, "57", "CB", "", 57],
             [2, "58", "CB", "", 58],
         [1, "mereo", "TR", "", -1],
             [2, "59", "SEL", ["1", "2", "3", "4", "5"], 59],
             [2, "60", "CB", "", 60],
             [2, "61", "CB", "", 61],
             [2, "62", "CB", "", 62],
             [2, "63", "CB", "", 63],
             [2, "64", "CB", "", 64],
         [1, "colo", "TR", "SH2", -1],
             [2,  "65", "T", "",  65],
             [2,  "66", "T", "",  66],
             [2,  "67", "T", "",  67],
             [2, "101", "T", "", 101],
             [2,  "68", "T", "",  68],
         
   ];
   //no aTBS items from 70 to 79
   var i;

   //DL additional initialization
   for ( i = 0; i < aTBS.length; i++ )
   {
      var srcArr = null;
      switch (aTBS[i][4])
      {
         case 11:
            srcArr = repSites; break;

         case 27:
            srcArr = wsAnalysers; break;

         case 29:
            srcArr = mapAnalysers; break;

         default:
            srcArr = null; break;
      }

      if ( srcArr )
      {
         aTBS[i][3].length = srcArr.length;
         for (var j = 0; j < srcArr.length; j++)
            aTBS[i][3][j] = srcArr[j][0];
      }
   }

   //Modified by Lux
   if ($g('TB3S'))
   {
      showMsgPage(true);
      return;
   }

   var innerPane = $g('InnerMsgPage');
   if (!innerPane)
   {
      addDiv();
      innerPane = $g('InnerMsgPage');
   }
   //---
   setupTb = $t([['id', 'TB3S']]);
   tRow = $r([["class", 'srh']]);
   topCell = $c(T('TB3SL',TB3O.shN) + " - " + TB3O.versionText(), [['class', 's1']]);
   //save button
   sCell = $c("", [['class', 's2']]);
   sImg = $img([['src', image["bSave"]], ['title', T('SAVE')]]);
   sImg.addEventListener("click", TB3SetupSave, false);
   sCell.appendChild(sImg);
   //close setup
   xCell = $c("", [['class', 's3']]);
   xImg = $img([['src', image["bClose"]], ['title', T('CLOSE')]]);
   xImg.addEventListener("click", function()
                                  {
                                     showMsgPage(false)
                                  }, true);

   xCell.appendChild(xImg);
   tRow.appendChild(topCell);
   tRow.appendChild(sCell);
   tRow.appendChild(xCell);
   setupTb.appendChild(tRow);

   for ( i = 0; i < aTBS.length; i++ )
   {
      if ( aTBS[i][0] == 1 )
      {
         sectionRow = $r();
         sTC = $c(T(aTBS[i][1].toUpperCase()), [["class", "srst"], ['colspan', '3']]);
         if (aTBS[i][3] != '')
         {
            addChildren(sTC, [" ", aImg = I("help")]);
            uiAddTooltip(aImg, bind(createHelpTooltip,[aTBS[i][3]]));
         }
         sectionRow.appendChild(sTC);
         setupTb.appendChild(sectionRow);
      }
      else if (aTBS[i][0] == 2)
      {
         setupRow = $r();
         setupRowLabel = $c(T(aTBS[i][1].toUpperCase()), [['class', 'srsc1']]);
         setupRow.appendChild(setupRowLabel);
         cI = $c("", [['class', 'srsc2'], ['colspan', '2']]);
       
         if (aTBS[i][4] != -1) 
            aValue = TB3O.O[aTBS[i][4]];
         else 
            aValue = getGMcookie(aTBS[i][1], false);

         sVal = (aValue != "false" ? aValue : '');

         switch (aTBS[i][2])
         {
            case "CB":
               pS = $i([['type', 'CHECKBOX']]);
               if (sVal == "1") $at(pS, [['checked', true]]);
               break;
            case "T":
               pS = $i([['type', 'TEXT'], ['style', 'width:360px;'], ['value', sVal]]);
               break;
            case "SEL":
               pS = $e('SELECT');
               for (var xi = 0; xi < aTBS[i][3].length; xi++) pS.options[xi] = new Option(aTBS[i][3][xi], xi, false, false);
               pS.selected = sVal;
               pS.value = parseInt10(sVal);
               break;
            case "SP":
               pS = $e('SPAN');
               sVal = TB3O.U[aTBS[i][4]];
               pS.innerHTML = sVal;
               break;
         }
         $at(pS, [['name', aTBS[i][1]]]);
         cI.appendChild(pS);
         setupRow.appendChild(cI);
         setupTb.appendChild(setupRow);
      }
   }

   //create the "Save" row
   saveRow = $r([['class', 'srh']]);
   bCell = $c(T('TB3SL',TB3O.shN) + " - " + TB3O.versionText(), [['class', 's1']]);
   sCell2 = $c("", [['class', 's2']]);
   sImg2 = sImg.cloneNode(true);
   sImg2.addEventListener("click", TB3SetupSave, false);
   sCell2.appendChild(sImg2);

   xCell2 = $c("", [['class', 's3']]);
   xImg2 = xImg.cloneNode(true);
   xImg2.addEventListener("click", function ()
                                   {
                                      showMsgPage(false)
                                   }, true);
   xCell2.appendChild(xImg2);

   saveRow.appendChild(bCell);
   saveRow.appendChild(sCell2);
   saveRow.appendChild(xCell2);
   setupTb.appendChild(saveRow);

   //Modified by Lux
   innerPane.appendChild(setupTb);
   showMsgPage(true);

   //---
   var outerPane = $g('OuterMsgPage');
   if (outerPane) $at(outerPane, [['style', 'height:' + (setupTb.clientHeight + 30) + 'px; ']]);

   //-------------------------------------------------------------
   function createHelpTooltip(aT) 
   {
   	return $e("p",['style','margin:5px; font-size:8pt'], T(aT.toUpperCase()));
   }

   //-------------------------------------------------------------
   function TB3SetupSave()
   {
      var aName;
      var aS = $g("TB3S").getElementsByTagName("SELECT");
      for (var i = 0; i < aS.length; i++)
      {
         crtValue = aS[i].value;
         aName = parseInt10(aS[i].name);
         if (!isNaN(aName)) TB3O.O[aName] = crtValue;
         else
         {
            aName = aS[i].name;
            setGMcookie(aName, crtValue, false);
         }
      }
      aS = $g("TB3S").getElementsByTagName("INPUT");
      for (var i = 0; i < aS.length; i++)
      {
         crtValue = aS[i].value;
         if (aS[i].type == 'checkbox') crtValue = (aS[i].checked == true ? '1' : '0');
         aName = parseInt10(aS[i].name);
         if (!isNaN(aName)) TB3O.O[aName] = crtValue;
         else
         {
            aName = aS[i].name;
            setGMcookie(aName, crtValue, false);
         }
      }
      setGMcookieV2('TB3Setup', TB3O.O, "SETUP");
      nbnotes = $g('noteblockcontent');
      if (nbnotes) setGMcookie('notas', nbnotes.value, false);
      alert(T('SAVED') + ".");
      location.reload(true);
   }
}
//////////////////////////////////////////////////////////////////////
//update script (by Richard Gibson, changed by ms99, npocmu)
function updScript()
{
   var divUpd = $d("<b><br>" + T('CHECKUPDATE') + "&nbsp;<br>&nbsp;</b>", [['id', 'updDiv']]);
   var aD = $g(ID_CONTENT);
   if ( aD ) { aD.appendChild(divUpd); }

   GM_xmlhttpRequest(
   {
      method: 'GET',

      url: 'http://userscripts.org/scripts/source/98310.meta.js',

      headers: 
      {
         'Range': 'bytes=0-499',
      },

      onload: function (result)
      {
         removeElement(divUpd);

         if ( result.status === 200 || result.status === 206 ) 
         {
            if ( result.responseText.match(/@version\s+([\d.]+)/) ) 
            {
               var newVersion = RegExp.$1;
               var nv = newVersion.split('.');
               var iv = TB3O.version.split('.');
               var compareResult = 0;
               var i;
               // check version for each part independently
               for ( i = 0; i < iv.length && i < nv.length; ++i )
               {
                  if ( parseInt10(nv[i]) < parseInt10(iv[i]) ) { compareResult = -1; break; }
                  else if ( parseInt10(nv[i]) > parseInt10(iv[i]) ) { compareResult = 1; break; }
               }
               if ( compareResult === 0 )
               {
                  compareResult = nv.length - iv.length;
               }

               if ( compareResult === 0 )
               {
                  alert(T('NONEWVER') + ' (v' + TB3O.version + ') !');
               }
               else if ( compareResult < 0 )
               {
                  alert(T('BVER') + ' (v' + TB3O.version + ') ?!');
               }
               else if (window.confirm(T('NVERAV') + ' (v ' + newVersion + ')!\n\n' + T('UPDSCR') + '\n')) 
               {
                  window.location.href = TB3O.url;
               }
            }
            else
            {
               
               
               alert(T('ERRUPDATE'));
            }
         }
         else
         {
            
            
            alert(T('ERRUPDATE'));
         }
      }
   });
}

//////////////////////////////////////////////////////////////////////
function uiCreateTBAbout()
{
   var tu,tt;

   TB3O.TBEndTime = new Date().getTime();
   tt = $d("",[['id', 'tbver']]);

   addChildren(tt,[
                   $a(TB3O.shN, [['href', 'http://userscripts.org/scripts/show/98310'], ['target', '_blank'], ['title', T('SCRPURL')]]),
                   "\u00A0(v",
                   tu = $a(TB3O.version, [['href', jsVoid], ['title', T('CHKSCRV')]]),
                   ") time: ", $e("b",TB3O.TBTRT()), " ms",
                   " | " + TB3O.ServerInfo.version.toFixed(2) + (TB3O.ServerInfo.mod ? " (" + TB3O.ServerInfo.mod + ")" : "")
                  ]);

   tu.addEventListener('click', updScript, false);

   return tt;
}


//////////////////////////////////////////////////////////////////////
//a building being upgraded
function xBiP(aName, txtLvl, lvl, tEnd)
{
   this.name = trimBlanks(aName);
   this.txtLvl = trimBlanks(txtLvl);
   this.lvl = parseInt10(lvl);
   this.endTime = tEnd;
   return this;
}



/////////////////////////////////////////////////////////////////////
function getNewUpgradeLevel(arrBiP, bName, lvl)
{
   for (var xi = 0; xi < arrBiP.length; xi++)
   {
      if ( arrBiP[xi].name === bName )
      {
         if ( arrBiP[xi].lvl === (lvl + 1) )
         {
            lvl += 1;
         }
      }
   }
   return lvl;
}

/////////////////////////////////////////////////////////////////////
/*
function getNewUpgradeLevel1(arrBiP, bName, lvl)
{
   var nlvl = [ lvl, '' ];
   for (var xi = 0; xi < arrBiP.length; xi++)
   {
      if ( arrBiP[xi].name === bName )
      {
         if ( arrBiP[xi].lvl === (nlvl[0] + 1) )
         {
            nlvl[0] += 1;
            nlvl[1] = " (\u2191 " + (nlvl[0] + 1) + ")";
         }
      }
   }
   return nlvl;
}
*/

/////////////////////////////////////////////////////////////////////
function setBiP(villageId, aDoc)
{
   var arrBiP = getBiP(aDoc);
   if ( arrBiP )
   {
      initVillageBiP(TB3O.VillagesInfo[villageId],arrBiP);
   }
   

   return !!arrBiP;
}

//////////////////////////////////////////////////////////////////////
// Fill BiP table
function uiFillBiPTable(aTb,arrBiP)
{
   var i,bS, dDT, tDT, bipT, tr1, tr2, aC1, aC2, aC3, aC4, strH, strM;

   tr1 = $r([['class', 'tb3r']]);
   aC1 = $c("", [['class', 'tb3c'], ['style', 'text-align:center;'], ['colspan', '3']]);
   aC1.appendChild(I("bau"));
   tr1.appendChild(aC1);
   for ( i = 0, bS = false; i < arrBiP.length; ++i)
   {
      bipT = arrBiP[i].endTime;
      dDT = new Date();
      tDT = dDT.getTime();
      if (tDT < bipT)
      {
         tr2 = $r();
         aC2 = $c(arrBiP[i].name, [['style', 'white-space:nowrap; text-align:' + docDir[0] + ';']]);
         aC3 = $c(arrBiP[i].txtLvl, [['style', 'white-space:nowrap; text-align:' + docDir[0] + ';']]);
         var strEndTime = new Date();
         strEndTime.setTime(arrBiP[i].endTime);
         strH = strEndTime.getHours();
         if (strH < 10) strH = '0' + strH;
         strM = strEndTime.getMinutes();
         if (strM < 10) strM = '0' + strM;
         aC4 = $c(strH + ":" + strM, [['style', 'white-space:nowrap; text-align:' + docDir[0] + ';']]);
         tr2.appendChild(aC2);
         tr2.appendChild(aC3);
         tr2.appendChild(aC4);
         if ( bS === false )
         {
            aTb.appendChild(tr1);
            bS = true;
         }
         aTb.appendChild(tr2);
      }
   }
}

//////////////////////////////////////////////////////////////////////
// create the BiP table for village
function uiCreateBiPTable(villageId)
{
   var aTb = $t();

   aTb.id = 'tb_BiPTM';
   uiFillBiPTable(aTb,TB3O.VillagesInfo[villageId].BiP);

   return ( aTb.hasChildNodes() ) ? aTb : null;
}

//////////////////////////////////////////////////////////////////////
function uiCreateBiPTMTable(villageId)
{
   var aTb = $t();
   var villageInfo = TB3O.VillagesInfo[villageId];

   aTb.id = 'tb_BiPTM';

   uiFillBiPTable(aTb,villageInfo.BiP);
   uiFillTMTable(aTb,villageInfo.TM);

   return ( aTb.hasChildNodes() ) ? aTb : null;
}
//////////////////////////////////////////////////////////////////////
function getBiP(aDoc)
{
   var arrBiP = [];
   var dEnd, tdD, tdDS, BiPtb, aRows, serverTime, txtLvl;
   var xi;

   BiPtb = $g("building_contract",aDoc);
   if ( BiPtb )
   {
      aRows = BiPtb.tBodies[0].rows;
      serverTime = getServerTime(aDoc);

      for ( xi = 0; xi < aRows.length; xi++ )
      {
         if ( aRows[xi].cells.length > 2 )
         {
            tdD = aRows[xi].cells[2];
            tdDS = tdD.getElementsByTagName("SPAN")[0];
            dEnd = new Date();
            dEnd.setTime(serverTime.getTime() + toSeconds(tdDS.textContent) * 1000);

            tdD = aRows[xi].cells[1];
            tdDS = tdD.getElementsByTagName("SPAN")[0];
            txtLvl = trimBlanks(tdDS.textContent);
            arrBiP[arrBiP.length] = new xBiP(tdD.firstChild.textContent, 
                                             txtLvl, txtLvl.split(/ +/)[1], dEnd.getTime());
         }
      }
   }
   return arrBiP;
}

//////////////////////////////////////////////////////////////////////
//a troop movement (from dorf1.php)
function xTrMov(iT, no, fT) 
{
   this.type = iT;
   this.no = no;
   this.fT = fT; 
   return this;
}


//////////////////////////////////////////////////////////////////////
//get the troop movements from the "dorf1.php" page
function getTroopMovements(aDoc)
{
   var arrTM = [];
   var aTM = $xf("//div[@id='troop_movements']//table/tbody/tr | //div[starts-with(@id, 'ltbw')]//table[@class='f10']/tbody/tr | //table[@id='movements']/tbody/tr", 'l', aDoc, aDoc);
   var i,intNo = 0;
   var aRow,aImg,imgType;
   var dFirst,strTime;

   if (aTM.snapshotLength > 0)
   {
      for (i = 0; i < aTM.snapshotLength; i++)
      {
         aRow = aTM.snapshotItem(i);
         if (aRow.cells.length > 1)
         {
            aImg = aRow.cells[0].getElementsByTagName("IMG");
            if (aImg.length > 0)
            {
               imgType = aImg[0].className;
               if (imgType === '') 
               {
                  imgType = aImg[0].src.substring(aImg.src.lastIndexOf("/") + 1);
               }

               if (aRow.cells[4])
               {
                  strTime = aRow.cells[4].getElementsByTagName("SPAN")[0].textContent;
                  intNo = parseInt10(aRow.cells[1].textContent.replace("»", "").replace("«", ""));
               }
               else
               {
                  if (aRow.cells[1].getElementsByTagName("SPAN").length === 2)
                  {
                     intNo = parseInt10(aRow.cells[1].getElementsByTagName("SPAN")[0].textContent);
                     strTime = aRow.cells[1].getElementsByTagName("SPAN")[1].textContent;
                  }
                  else
                  {
                     intNo = parseInt10(aRow.cells[1].getElementsByTagName("SPAN")[0].textContent);
                     if (aRow.nextSibling) 
                     {
                        strTime = aRow.nextSibling.cells[1].getElementsByTagName("SPAN")[0].textContent;
                     }
                     else 
                     {
                        strTime = "00:00:00";
                     }
                  }
               }
               dFirst = new Date();
               dFirst.setTime(dFirst.getTime() + toSeconds(strTime) * 1000);
               arrTM[arrTM.length] = new xTrMov(imgType, intNo, dFirst.getTime());
            }
         }
      }
   }
   return arrTM;
}

/////////////////////////////////////////////////////////////////////
function setTroopMovements(villageId, aDoc)
{
   var arrTM = getTroopMovements(aDoc);
   if ( arrTM )
   {
      initVillageTM(TB3O.VillagesInfo[villageId],arrTM);
   }
   
   

   return !!arrTM;
}

//////////////////////////////////////////////////////////////////////
//-------- Fill TM table --------------------
function uiFillTMTable(aTb, arrTM)
{
   //create the troop movements table for this village
   var i,bS, xImg, dDT, tDT, atT, tr1, tr2, aC1, aC2, aC3, aC4, strH, strM;

   tr1 = $r([['class', 'tb3r']]);
   aC1 = $c(gIc["att_all"], [['class', 'tb3c'], ['style', 'text-align:center;'], ['colspan', '3']]);
   tr1.appendChild(aC1);
   for (i = 0, bS = false; i < arrTM.length; i++)
   {
      atT = arrTM[i].fT;
      dDT = new Date();
      tDT = dDT.getTime();
      if (tDT < atT)
      {
         tr2 = $r([['class', 'tb3r']]);
         xImg = TB3O.T35 == true ? gIc[arrTM[i].type] : '<img src="' + img("a/" + arrTM[i].type) + '" height="12px" width= "12px">';
         aC2 = $c(xImg, [['class', 'tb3c'], ['style', 'white-space:nowrap; text-align:' + docDir[0] + ';']]);
         aC3 = $c(arrTM[i].no, [['class', 'tb3c'], ['style', 'white-space:nowrap; text-align:' + docDir[0] + ';']]);
         var strFTime = new Date();
         strFTime.setTime(arrTM[i].fT);
         strH = strFTime.getHours();
         strM = strFTime.getMinutes();
         aC4 = $c((strH > 9 ? strH : '0' + strH) + ":" + (strM > 9 ? strM : '0' + strM), [['class', 'tb3c'], ['style', 'white-space:nowrap; text-align:' + docDir[0] + ';']]);
         tr2.appendChild(aC2);
         tr2.appendChild(aC3);
         tr2.appendChild(aC4);
         if (bS === false)
         {
            aTb.appendChild(tr1);
            bS = true;
         }
         aTb.appendChild(tr2);
      }
   }
}

//////////////////////////////////////////////////////////////////////
// create the TM table for village
function uiCreateTMTable(villageId)
{
   var aTb = $t();

   aTb.id = 'tb_BiPTM';
   uiFillTMTable(aTb,TB3O.VillagesInfo[villageId].TM);

   return ( aTb.hasChildNodes() ) ? aTb : null;
}
//////////////////////////////////////////////////////////////////////
// add tooltips for show troop info
function uiAddTroopInfoTooltips(parent)
{
   

   var arImg = parent.getElementsByTagName("IMG");
   var i, tImg, tInfo, xR, tCell;

   for ( i = 0; i < arImg.length; ++i )
   {
      tImg = arImg[i];
      tInfo = getTroopIndexTitleFromImg(tImg);
      if (tInfo[0] > 0 && tInfo[0] < 51)
      {
         if ( tInfo[1] === '' )
         {
            //for the dorf1.php page where there is no title attribute to the image
            xR = tImg.parentNode;
            if ( xR )
            {
               if ( xR.getAttribute("href") )
               {
                  xR = xR.parentNode;
                  if ( xR ) { xR = xR.parentNode; }
               }
               else
               { 
                  xR = xR.parentNode;
               }

               if ( xR )
               {
                  try
                  {
                     tCell = xR.cells[2];
                     if (tCell) { tInfo[1] = tCell.textContent; }
                  }
                  catch (e)
                  {
                  }
               }
            }
         }
         tImg.removeAttribute('title');
         uiAddTooltip(tImg,bind(uiCreateTroopInfoTooltip,[tInfo]));
      }
   }

   
}


//////////////////////////////////////////////////////////////////////
//create Troop Info table 
function uiCreateTroopInfoTooltip(tInfo)
{
   var aTb = $t([['class', 'tb3tbnb']]);
   var aHead;
   var aRow1,aRow2,aRow3;
   var tSpeed = "-";
   var imgSpeed = "speed" + docDir[0].substring(0,1);

   aTb.id = "tb_TITT";

   if (tInfo[1] !== "")
   {
      aRow1 = $r();
      aRow1.appendChild($th([['colspan', '6']],tInfo[1]));
      aHead = $e("THEAD");
      aHead.appendChild(aRow1);
      aTb.appendChild(aHead);
   }

   aRow2 = $r();
   //attack power row
   aRow2.appendChild($c(gIc["att_all"], [['class', 'ico tb3r1']]));
   aRow2.appendChild($c(uc[tInfo[0]][5], [['class', 'tb3r1 tb3c1']]));
   //def power infantry row
   aRow2.appendChild($c(gIc["def_i"], [['class', 'ico tb3r1']]));
   aRow2.appendChild($c(uc[tInfo[0]][6], [['class', 'tb3r1 tb3c2']]));
   //def power cavalry row
   aRow2.appendChild($c(gIc["def_c"], [['class', 'ico tb3r1']]));
   aRow2.appendChild($c(uc[tInfo[0]][7], [['class', 'tb3r1 tb3c3']]));
   aTb.appendChild(aRow2);

   aRow3 = $r();
   //speed only for troops as animals do not move
   if (tInfo[0] < 31)
   {
      tSpeed = uc[tInfo[0]][8] * TB3O.nTroopSpeedFactor[TB3O.nServerType];
   }
   aRow3.appendChild($c("<img src='" + image[imgSpeed] + "'>", [['class', 'ico tb3r2']]));
   aRow3.appendChild($c(tSpeed, [['class', 'tb3r2 tb3c1']]));
   //can carry
   aRow3.appendChild($c(gIc["capacity"], [['class', 'ico tb3r2']]));
   aRow3.appendChild($c(uc[tInfo[0]][4], [['class', 'tb3r2 tb3c2']]));
   //crop consumption
   aRow3.appendChild($c(gIc["r5"], [['class', 'ico tb3r2']]));
   aRow3.appendChild($c(uc[tInfo[0]][9], [['class', 'tb3r2 tb3c3']]));
   aTb.appendChild(aRow3);

   return aTb;
}

//////////////////////////////////////////////////////////////////////
function getTroopsInfo(tNTroops)
{
   var troopsInfo = [];

   if ( tNTroops && tNTroops.tBodies ) 
   {
      var i;

      var aRows = tNTroops.tBodies[0].rows;

      for ( i = 0; i < aRows.length; i++ )
      {
         var aRow = aRows[i];
         var images = aRow.cells[0].getElementsByTagName('IMG');

         if ( images.length > 0  )
         {
            var index = getTroopIndexTitleFromImg(images[0])[0];
            var count = parseInt10(aRow.cells[1].textContent);
            troopsInfo.push([index,count]);
         }
      }
   }
   return troopsInfo.length > 0 ? troopsInfo : null;
}

//////////////////////////////////////////////////////////////////////
function getTroopNoByIndex(troopsInfo, index)
{
   var troopNo;
   for ( troopNo = 0; troopNo < troopsInfo.length; ++troopNo )
   {
      if ( troopsInfo[troopNo][0] === index )
      {
         return troopNo;
      }
   }

   return undefined;
}


//////////////////////////////////////////////////////////////////////
// troops statistics
function calcTroopsTotals(troopsInfo)
{
   var tNinfo = [0,0,0,0,0,0,0,0,Infinity,0];
   var i,j;
   for ( i = 0; i < troopsInfo.length; i++ )
   {
      var index = troopsInfo[i][0];
      var count = troopsInfo[i][1];
      if ( count > 0 )
      {
         if ( isIntValid(index) )
         {
            for ( j = 0; j <= 9; ++ j ) 
            {
               if ( j === 8 ) // speed
               {
                  if ( uc[index][8] * TB3O.nTroopSpeedFactor[TB3O.nServerType] < tNinfo[8] ) 
                  { 
                     tNinfo[8] = uc[index][8] * TB3O.nTroopSpeedFactor[TB3O.nServerType]; 
                  }
               }
               else
               {
                  tNinfo[j] += count * uc[index][j];
               }
            }
         }
         else 
         {
            
            tNinfo[9] += 6; //hero
         }
      }
   }

   return tNinfo;
}

//////////////////////////////////////////////////////////////////////
// troops statistics in one column table (for tooltips)
function uiCreateTroopsAttDefInfoTable(troopsInfo, bMap, bMin)
{
   var tNinfo = calcTroopsTotals(troopsInfo);
   var strMinX = '';

   var footnote = null;
   if ( bMin )
   {
      footnote = $e("tfoot",null,$r(null, $td([['colspan','2']],"* = " + T('MIN'))));
      strMinX = "*";
   }

   var attrsIco = [['class','tbIco']];
   var attrsVal = [['class','tbVal']];

   var aTb = $t([['class','tbAttDefInfo']],
   [
      $e("thead",null,$r(null, $th([['colspan','2']],T('STAT')))),
      footnote,
      $r(null, [$td(attrsIco,[I("att_all"),strMinX]),$td(attrsVal,$ls(tNinfo[5]))]),
      $r(null, [$td(attrsIco,[I("def_i"),strMinX]),  $td(attrsVal,$ls(tNinfo[6]))]),
      $r(null, [$td(attrsIco,[I("def_c"),strMinX]),  $td(attrsVal,$ls(tNinfo[7]))]),
      $r(null, [$td(attrsIco,I("r5")),               $td(attrsVal,$ls(tNinfo[9]))])
   ]);

   return aTb;
}

//////////////////////////////////////////////////////////////////////
// fill troops statistics in wide table
function uiFillTroopsAttDefInfoTable2(aTb, troopsInfo)
{
   var tNinfo = calcTroopsTotals(troopsInfo);
   aTb.rows[1].cells[0].childNodes[1].textContent = $ls(tNinfo[5]); // attack power
   aTb.rows[1].cells[1].childNodes[1].textContent = $ls(tNinfo[6]); // def power infantry
   aTb.rows[1].cells[2].childNodes[1].textContent = $ls(tNinfo[7]); // def power cavalry
   aTb.rows[2].cells[0].childNodes[1].textContent = ( isFinite(tNinfo[8]) ) ? $ls(tNinfo[8]) : "?"; // min speed
   aTb.rows[2].cells[1].childNodes[1].textContent = $ls(tNinfo[4]); // load capacity
   aTb.rows[2].cells[2].childNodes[1].textContent = $ls(tNinfo[9]); // crop consumption
}

//////////////////////////////////////////////////////////////////////
// troops statistics in wide table
function uiCreateTroopsAttDefInfoTable2(troopsInfo, title, bMin)
{
   var strMinX = '';

   if ( bMin )
   {
      strMinX = "*";
   }

   var aTb = $t([['class', 'tb3tb tbAttDefInfo2']],
   [
      $e("thead", $r( $th([['colspan', '3']], title + (bMin ? " (* = " + T('MIN').toLowerCase() + ")":"")))),
      $r([['style', 'text-align:' + docDir[0] + ';']],
      [
         $td([['style', 'width:33%;']], [I("att_all"),$span(),strMinX]),
         $td([['style', 'width:33%;']], [I("def_i"),$span(),strMinX]),
         $td([['style', 'width:34%;']], [I("def_c"),$span(),strMinX])
      ]),
      $r([['style', 'text-align:' + docDir[0] + ';']],
      [
         $td(null, [I("speed" + docDir[0].substring(0,1)),$span()]),
         $td(null, [I("capacity"),$span()]),
         $td(null, [I("r5"),$span()])
      ])
   ]);

   uiFillTroopsAttDefInfoTable2(aTb, troopsInfo);

   return aTb;
}

//////////////////////////////////////////////////////////////////////
function uiCreateAttDefInfoSign(tTable, aContainer, bMin)
{
   function uiCreateAttDefTooltip(troopsInfo,bMin)
   {
      var t = uiCreateTroopsAttDefInfoTable(troopsInfo, false, bMin);

      if ( t )
      {
         t.id = "mhtt";
      }
      return t;
   }

   

   if ( tTable && aContainer )
   {
      var troopsInfo = getTroopsInfo(tTable);

      if ( troopsInfo )
      {
         addChildren(aContainer,[" ",I("info")]);
         uiAddTooltip(aContainer,bind(uiCreateAttDefTooltip,[troopsInfo,bMin]));
      }
   }

   
}
//////////////////////////////////////////////////////////////////////
// Create distance and time table
// was: addCoords, addMTime, addTTime, bAR, bDist
// now:
// options{
//    show_title
//    show_coords
//    show_arrival_time
//    show_merchant
//    show_troops
//    show_all_races
//    race
// }
function uiCreateTroopsMerchantsDistTable(tableId, srcMapId, destMapId, options)
{
   //-------------------------------------------------------------
   function uiAddUnitTimeCells(aRow, cls, imgName, ttime, bSep)
   {
      var aClock = null;
      if ( !options.show_troops )
      {
         aClock = I("clock");
      }

      var aArrival = null;
      if ( options.show_arrival_time ) 
      {
         aArrival = $td([['class', 'tbArrivalT'+cls]], $span(formatDateTimeRelativeToNow(ttime, 1)));
      }

      addChildren(aRow,[
         $td([['class', 'tbIco'+cls]],I(imgName)),
         $td([['class', 'tbTravelT'+cls]],[aClock,$span(formatTimeSpan(ttime, 0) + " h")]),
         aArrival,
         bSep ? $td() : null
      ]);
   }

   //-------------------------------------------------------------
   function uiAddMerchantTimeCells(aRow, dist, race, bSep)
   {
      uiAddUnitTimeCells(aRow, ' tbMerc', "merchant", getMerchantTime(dist, race), bSep);
   }

   //-------------------------------------------------------------
   function uiAddTroopTimeCells(aRow, troopDet, race, unitNo, bSep)
   {
      uiAddUnitTimeCells(aRow, '', "u" + (unitNo + troopDet[3]), getTroopTime(unitNo, race, troopDet), bSep);
   }

   //-------------------------------------------------------------
   function uiCreateCoords(XY)
   {
      return uiCreateIntMapLinkXY2(XY[0],XY[1]);
   }

   var aTb = null;
   var aRow, aCell;
   var srcXY;
   var destXY = id2xy(destMapId);
   var race = ( options.race === undefined ) ? TB3O.U[1] : options.race;

   if ( srcMapId )
   {
      srcXY = id2xy(srcMapId);
   }
   else
   {
      srcXY = [TB3O.ActiveVillageInfo.x,TB3O.ActiveVillageInfo.y];
   }

   var qDist = getDistance(destXY[0], destXY[1], srcXY[0], srcXY[1]);

   if ( qDist !== 0 )
   {
      aTb = $t([['class','tbDistInfo'],['id',tableId]]);

      var columns = ( options.show_coords | options.show_arrival_time) ? 3 : 2;
      if ( options.show_all_races ) { columns = (( options.show_arrival_time ) ? 3 : 2) * 3 + 2; }

      //add destination coords
      if ( options.show_title )
      {
         aTb.appendChild($r($td([['class','tbCenter tbTitle'], ['colspan',columns]],uiCreateCoords(destXY))));
      }

      //add the distance row
      aRow = $r(null,[
                $td([['class', 'tbIco']], I("dist" + docDir[0].substr(0, 1))),
                $td([['class', 'tbDist']], qDist.toFixed(2)) ]);

      var coords_columns = columns - 2;
      if ( coords_columns )
      {
         aRow.appendChild(aCell = $td([['class', 'tbDist'],['colspan',columns-2]]));

         if ( options.show_coords )
         {
            addChildren(aCell,[
               uiCreateCoords(srcXY), " ",
               I("dist" + docDir[0].substr(0, 1)),
               " ", uiCreateCoords(destXY)
            ]);
         }
      }
      aTb.appendChild(aRow);


      if ( race !== '')
      {
         var arrRaces;
         switch ( race )
         {
            case avRace[0]:
               arrRaces = [avRace[1], avRace[2]];
               break;
            case avRace[1]:
               arrRaces = [avRace[0], avRace[2]];
               break;
            case avRace[2]:
               arrRaces = [avRace[0], avRace[1]];
               break;
         }

         if ( options.show_troops )
         {
            //add the clock header row
            aTb.appendChild($r($td([['class','tbCenter'],['colspan',columns]],I("clock"))));
         }

         // add the merchant row
         if ( options.show_merchant )
         {
            aRow = $r();

            uiAddMerchantTimeCells(aRow, qDist, race, options.show_all_races);
            if ( options.show_all_races )
            {
               uiAddMerchantTimeCells(aRow, qDist, arrRaces[0], true);
               uiAddMerchantTimeCells(aRow, qDist, arrRaces[1], false);
            }
            aTb.appendChild(aRow);
         }

         //add the troop rows
         if ( options.show_troops )
         {
            var iTT;
            var arX = getTroopsDetails(qDist, race, true);
            var arY = getTroopsDetails(qDist, arrRaces[0], false);
            var arZ = getTroopsDetails(qDist, arrRaces[1], false);

            for ( iTT = 0; iTT < 10; iTT++ )
            {
               aRow = $r();
               uiAddTroopTimeCells(aRow, arX, race, iTT, options.show_all_races);
               if ( options.show_all_races )
               {
                  uiAddTroopTimeCells(aRow, arY, arrRaces[0], iTT, true);
                  uiAddTroopTimeCells(aRow, arZ, arrRaces[1], iTT, false);
               }
               aTb.appendChild(aRow);
            }
         }
      }
   }
   return aTb;
}


//////////////////////////////////////////////////////////////////////
function uiAddTooltipForIntMapLink(aLink,mapId)
{
   function uiCreateTipForIntMapLink(mapId)
   {
      return uiCreateTroopsMerchantsDistTable("tb_distTT", null, mapId,
                                             { show_title:true, show_arrival_time:true,
                                               show_merchant:true, show_troops:true });
   }

   return uiAddTooltip(aLink,bind(uiCreateTipForIntMapLink,[mapId]));
}

//////////////////////////////////////////////////////////////////////
function searchMsgRptTable(aDoc)
{
   var mrTable = $g("overview", aDoc);
   

   return mrTable;
}

//////////////////////////////////////////////////////////////////////
function searchMsgBody(aDoc)
{
   return $g("message", aDoc);
}

//////////////////////////////////////////////////////////////////////
function searchRptBody() 
{
   return $g("report_surround");
}

//////////////////////////////////////////////////////////////////////
function uiSelectAllMsgRpt(mrTable)
{
   var inputElem = $g("sAll");
   inputElem.click();
}

//////////////////////////////////////////////////////////////////////
function uiAddSelectAllCheckbox(mrTable)
{
   // GotGs -- 2011.04.15 -- adding select all for messages and reports
   function toggleAllMsg()
   {
      var inputElem = $g("sAll");
      var allInputElems = $xf('./tbody/tr/td[@class="sel"]/input[@class="check"]', 'l', mrTable);
      var ctr;
      for ( ctr = 0; ctr < allInputElems.snapshotLength; ctr++ )
      {
         allInputElems.snapshotItem(ctr).checked = inputElem.checked;
      }
   }

   //check for the "sAll" element to avoid double checkbox
   if ( !$g("sAll") )
   {
      if ( $xf('./tbody/tr/td[@class="sel"]/input[@class="check"]', 'f', mrTable) )
      {
         //selectAll
         insertFirst(mrTable.nextElementSibling,
           $div([['id','markAll'],['class','checkAll tbInject']],[
              $i([['id','sAll'], ['name','sAll'],['class','check'], ['type','checkbox'], 
                  ['click', toggleAllMsg, false]]),
              $span($e("label", ['for','sAll'], T('SELECTALL')))])
         );
      }
   }
}

//////////////////////////////////////////////////////////////////////
// Add features:
// - navigate between pages with CTRL + <- and CTRL + ->
function uiAddKeyboardNavigation()
{
   var navLinks;

   function navToPage(cls)
   {
      var i;
      for (i = 0; i < navLinks.snapshotLength; i++)
      {
         if ( hasClass(navLinks.snapshotItem(i), cls) ) 
         {
            location.href = navLinks.snapshotItem(i).href;
            break;
         }
      }
   }

   function onKeyDown(event)
   {
      var evCode = event.keyCode;
      if ( evCode === 37 )
      {
         navToPage("previous");
      }
      else if (evCode === 39)
      {
         navToPage("next");
      }
   }

   navLinks = $xf("//div[@id='" + ID_CONTENT + "']//a[contains(@href, 'page=')]", 'l');
   if ( navLinks.snapshotLength > 0 ) { document.addEventListener("keydown", onKeyDown, false); }
}


//////////////////////////////////////////////////////////////////////
function navigateNextRptPage()
{
   nextLink = $xf("//div[@id='" + ID_CONTENT + "']//a[contains(@href, 'page=') and contains(@class, 'next')]");
   if ( nextLink )
   {
      location.href = nextLink;
      return true;
   }
   return false;
}
function battleReportV2(origT, aFrom)
{
   var tx = $xf("//table[@class='std reports_read']//table[@class='std'] | //table[@class='tbg']//table[@class='tbg']", 'l');
   if (tx.snapshotLength < 2) { tx = $xf("//table[@class='std reports_read']//table[@class='tbg']", 'l'); }
   if (tx.snapshotLength < 2) { tx = $xf("//table[starts-with(@id, 'attacker') or starts-with(@class, 'defender')]", 'l'); }
   if (tx.snapshotLength < 2) return false;

   if ( aFrom === "orig" )
   {
      var p1, p2;
      var neworigT = origT.cloneNode(true);
      var divlmid2 = origT.parentNode;
      divlmid2.removeChild(origT);
      divlmid2.appendChild(p2 = $e("p") );
      divlmid2.appendChild(p1 = $e("p",origT));
      //add a paragraph, a table with a text and a checkbox
      var input = $i([['type', 'checkbox'], ['id', 'tb_battlereport']]);
      input.addEventListener("click", function ()
      {
         shoBR(p1, neworigT, origT);
      }, false);

      var ptable = $t([['style', 'background-color:' + TB3O.DFc[1] + '; width:auto;']]);
      var aRow = $r([['class', 'tb3rnb']]);
      var aCell = $c(T('SOREP') + ":", [['class', 'tb3cnb'], ['style', 'text-align:' + docDir[0] + ';']]);
      aRow.appendChild(aCell);
      var bCell = $c("", [['class', 'tb3cnb'], ['style', 'text-align:' + docDir[0] + ';']]);
      bCell.appendChild(input);
      aRow.appendChild(bCell);
      ptable.appendChild(aRow);
      p2.appendChild(ptable);
   }

   //get the total booty info (PLUS accounts)
   var gBooty = $xf("//div[@class='carry']");
   var bgBooty = null;
   if (gBooty) bgBooty = gBooty.cloneNode(true);

   //get the total booty
   var booty = 0;
   var labelReward = gIc["capacity"];
   var imgRes = new Array;
   for (var i = 0; i < 4; i++)
   {
      imgRes[i] = gIc["r" + (i + 1)];
   }
   var stBooty = [0, 0, 0, 0];

   if (TB3O.T35 == false)
   {
      var aX = $xf("//tr[@class='cbg1'] | //table[@class='tbg']//tr", 'l');
      if (aX.snapshotLength >= 3)
      {
         var intToProcess = -1;
         for (var i = 0; i < aX.snapshotLength; i++)
         {
            if (aX.snapshotItem(i).childNodes.length == 4) intToProcess = i;
         }
         if (intToProcess > -1)
         {
            var b = aX.snapshotItem(intToProcess).childNodes[3];
         }
         else
         {
            var b = aX.snapshotItem(1).childNodes[1];
            if (b.innerHTML.indexOf('class="res"') == -1) b = aX.snapshotItem(2).childNodes[1];
         }
         if (b.childNodes.length == 8)
         {
            var qBooty = new Array();
            var infoBooty = '';
            for (var i = 0; i < 4; i++)
            {
               qBooty[i] = parseInt10(b.childNodes[i * 2 + 1].nodeValue);
               infoBooty += imgRes[i];
               infoBooty += qBooty[i];
               infoBooty += (i < 3 ? ' + ' : ' = ');
               stBooty[i] = qBooty[i];
            }
            booty = arrayToInt(qBooty);
            infoBooty += booty;
            b.innerHTML = infoBooty;
            if (bgBooty != null) b.appendChild(bgBooty);
         }
      }
   }
   else
   {
      var aX = tx.snapshotItem(0);
      var infoBooty = '';
      //var b1Table = aX.snapshotItem(0).parentNode;
      var b1Table = aX;
      if (!b1Table.rows[4]) return false;
      var xi = 4;
      var gata = false;
      while (xi < b1Table.rows.length && !gata)
      {
         var bootyCell = b1Table.rows[xi].cells[1];
         if (bootyCell.textContent.indexOf("|") != -1) gata = true;
         xi += 1;
      }
      if (gata)
      {
         var resInfo = bootyCell;
         for (var xi = 0; xi < bootyCell.childNodes.length; xi++)
         {
            var aChild = bootyCell.childNodes[xi];
            if (aChild.className == "goods" || aChild.className == "res") resInfo = aChild;
         }
         var aqBooty = resInfo.textContent.split("|");
         if (aqBooty.length > 1)
         {
            var qBooty = new Array();
            for (var i = 0; i < 4; i++)
            {
               qBooty[i] = parseInt10(aqBooty[i].replace(" ", "").replace(" ", ""));
               infoBooty += imgRes[i];
               infoBooty += qBooty[i];
               if (i < 3) infoBooty += ' + ';
               else infoBooty += ' = ';
               stBooty[i] = qBooty[i];
            }
            booty = arrayToInt(qBooty);
            infoBooty += booty;
            bootyCell.innerHTML = infoBooty;
            if (bgBooty != null) bootyCell.appendChild(bgBooty);
         }
      }
   }

   var arrLoss = new Array();
   var arrCarry = new Array();
   //there are more tables for the attack (1 = attacker, 1 = attacked and x = reinforcements)
   //tadPower => 0 = attack power; 1 = def_i power; 2 = def_c power; 3 = total loss; 4 = loss res 1; 5 = loss res 2; 6 = loss res 3; 7 = loss ress 4; 8 = crop consumption of killed troops; 9 = hero no.; 10 = crop consumption of initial troops
   var tadPower = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]];
   var atkLabelCell;
   var defLabelCell;
   var brCell = tx.snapshotItem(0).parentNode;

   for (var g = 0; g < tx.snapshotLength; g++)
   {
      arrCarry[g] = 0;
      tTable = tx.snapshotItem(g);
      attdefPower = [0, 0, 0];
      intNoOfCells = tTable.rows[1].cells.length - 1;
      if (intNoOfCells == 11)
      {
         //corrected by JOPS
         if (g == 0) tadPower[0][9] += 1;
         else tadPower[1][9] += parseInt10(tTable.rows[2].cells[11].textContent);
      }
      if (g == 0) atkLabelCell = tTable.rows[0].cells[0].textContent;
      else defLabelCell = tTable.rows[0].cells[0].textContent;
      for (var j = 1; j < 11; j++)
      {
         tImg = tTable.rows[1].cells[j].getElementsByTagName('img')[0];
         tInd = getTroopIndexTitleFromImg(tImg)[0];
         tNo = parseInt10(tTable.rows[2].cells[j].textContent);
         tNoLost = 0;
         if (tTable.rows[3]) tNoLost = parseInt10(tTable.rows[3].cells[j].textContent);
         if (!isNaN(tNo))
         {
            if (g == 0)
            {
               attdefPower[0] += uc[tInd][5] * tNo;
               tadPower[0][0] += uc[tInd][5] * tNo;
               tadPower[0][1] += uc[tInd][6] * tNo;
               tadPower[0][2] += uc[tInd][7] * tNo;
               tadPower[0][8] += uc[tInd][9] * tNoLost;
               tadPower[0][10] += uc[tInd][9] * tNo;
            }
            else
            {
               attdefPower[0] += uc[tInd][5] * tNo;
               attdefPower[1] += uc[tInd][6] * tNo;
               attdefPower[2] += uc[tInd][7] * tNo;
               tadPower[1][0] += uc[tInd][5] * tNo;
               tadPower[1][1] += uc[tInd][6] * tNo;
               tadPower[1][2] += uc[tInd][7] * tNo;
               tadPower[1][8] += uc[tInd][9] * tNoLost;
               tadPower[1][10] += uc[tInd][9] * tNo;
            }
         }
         u = uc[tInd];
         p = tTable.rows[3] ? tTable.rows[3].cells[j].innerHTML : 0;
         ptu = arrayByN(u, p);
         arrLoss[g] = arrayAdd(arrLoss[g], ptu.slice(0, 4));
         arrCarry[g] += (tTable.rows[2] ? tTable.rows[2].cells[j].innerHTML - p : 0) * u[4];
      }
      //add the attack/def power to the row[1].cells[0]
      var attdefCell = tTable.rows[1].cells[0];
      if (g == 0)
      {
         //the attacking power
         $at(attdefCell, [['style', 'font-size:8pt; color:#FF8000; text-align:center;']]);
         attdefCell.innerHTML = $ls(attdefPower[0]) + " " + gIc["att_all"];
      }
      else
      {
         //the defense power of the defender (per table)
         $at(attdefCell, [['style', 'font-size:8pt; color:green; text-align:center;']]);
         attdefCell.innerHTML = $ls(attdefPower[1]) + " " + gIc["def_i"] + "<br>" + $ls(attdefPower[2]) + " " + gIc["def_c"];
      }

      //add the loss row to the att/def table
      var iHTML = '';
      for (var i = 0; i < 4; i++)
      {
         iHTML += imgRes[i];
         iHTML += arrLoss[g][i];
         if (i < 3) iHTML += ' + ';
         else iHTML += ' = ';
         if (g == 0) tadPower[0][4 + i] += arrLoss[g][i];
         else tadPower[1][4 + i] += arrLoss[g][i];
      }
      var lossTotal = arrayToInt(arrLoss[g]);
      if (g == 0) tadPower[0][3] += lossTotal;
      else tadPower[1][3] += lossTotal;
      if (lossTotal > 0) iHTML += " <b><font color='red'>" + lossTotal + "</font></b>";
      else iHTML += lossTotal;
      var informe = $c(iHTML, [['colspan', intNoOfCells]]);
      var aRow = $r();
      aRow.appendChild($c(T('LOSS'), [['style', 'text-align:left;']]));
      aRow.appendChild(informe);
      tTable.appendChild(aRow);

      //For the attacker we'll compute the profit and efficiency of the attack
      if (g == 0)
      {
         //Profit compared to lossTotal
         var profit = 0;
         if (arrCarry[g] == 0)
         {
            booty = 0;
            for (var i = 0; i < 4; i++)
            {
               stBooty[i] = 0;
            }
         }
         else
         {
            profit = ((booty - lossTotal) * 100 / booty).toFixed(2);
         }
         if (booty == 0) if (lossTotal == 0) profit = 0;
         else profit = -100;
         var bCell = $c(profit + "%", [['colspan', intNoOfCells]]);
         var pRow = $r();
         pRow.appendChild($c(T('PROFIT'), [['style', 'text-align:left;']]));
         pRow.appendChild(bCell);
         tTable.appendChild(pRow);

         //Efficiency -> the entire booty compared to how much the attacker can carry back (considering only the troops that survived)
         var efficiency = 100 - ((arrCarry[g] - booty) * 100 / arrCarry[g]);
         if (arrCarry[g] == 0) efficiency = 0;
         var bCell = $c(efficiency.toFixed(2) + "% (" + booty + "/" + arrCarry[g] + ")", [['colspan', intNoOfCells]]);
         var eRow = $r();
         eRow.appendChild($c(T('EFICIENCIA'), [['style', 'text-align:left;']]));
         eRow.appendChild(bCell);
         tTable.appendChild(eRow);
      }
   }

   //add a simple statistics table
   var sTable = $t([['id', 'br_table']]);
   //add the title row
   var sTitleRow = $r();
   sTitleRow.appendChild($c(T('STAT'), [['class', 'tb3cbrh1']]));
   sTitleRow.appendChild($c(atkLabelCell, [['class', 'tb3cbrh2']]));
   sTitleRow.appendChild($c(defLabelCell, [['class', 'tb3cbrh3']]));
   sTable.appendChild(sTitleRow);
   //attack power row
   var atkRow = $r();
   atkRow.appendChild($c(gIc["att_all"], [['class', 'tb3cbrc']]));
   atkRow.appendChild($c($ls(tadPower[0][0])));
   atkRow.appendChild($c($ls(tadPower[1][0])));
   sTable.appendChild(atkRow);
   //def power rows
   var defiRow = $r();
   defiRow.appendChild($c(gIc["def_i"], [['class', 'tb3cbrc']]));
   defiRow.appendChild($c($ls(tadPower[0][1])));
   defiRow.appendChild($c($ls(tadPower[1][1])));
   sTable.appendChild(defiRow);
   var defcRow = $r();
   defcRow.appendChild($c(gIc["def_c"], [['class', 'tb3cbrc']]));
   defcRow.appendChild($c($ls(tadPower[0][2])));
   defcRow.appendChild($c($ls(tadPower[1][2])));
   sTable.appendChild(defcRow);
   //reward row (for the attacker only)
   var rewATotal = $c($ls(booty) + (TB3O.O[64] == '1' ? " " + T('TOTAL') : ''), [['class', 'tb3cbrbg']]);
   var rewRow1 = $r();
   var intDetailRowSpan = 1 + parseInt10(TB3O.O[64]);
   var rewLabelCell = $c(labelReward, [['class', 'tb3cbrc'], ['rowspan', intDetailRowSpan]]);
   rewRow1.appendChild(rewLabelCell);
   if (TB3O.O[64] == '1')
   {
      var rewA = '';
      for (var i = 1; i < 5; i++)
      {
         rewA += $ls(stBooty[i - 1]) + " " + imgRes[i - 1] + "<br>";
      }
      rewADetail = $c(rewA, [['class', 'tb3cbrg']]);
      rewRow1.appendChild(rewADetail);
   }
   else rewRow1.appendChild(rewATotal);
   rewRow1.appendChild($c('-', [['class', 'tb3cbrb'], ['rowspan', intDetailRowSpan]]));
   sTable.appendChild(rewRow1);
   if (TB3O.O[64] == '1')
   {
      var rewRow2 = $r();
      rewRow2.appendChild($c($ls(booty) + " " + T('TOTAL'), [['class', 'tb3cbrbg']]));
      sTable.appendChild(rewRow2);
   }
   //loss row
   var strLossATotal = $ls(tadPower[0][3]) + (TB3O.O[64] == '1' ? " " + T('TOTAL') : '');
   var lossATotal = $c(strLossATotal, [['class', 'tb3cbrb']]);
   if (tadPower[0][3] > 0) $at(lossATotal, [['class', 'tb3cbrbr']]);
   var strLossDTotal = $ls(tadPower[1][3] + booty) + (TB3O.O[64] == '1' ? " " + T('TOTAL') : '');
   lossDTotal = $c(strLossDTotal, [['class', 'tb3cbrb']]);
   if (tadPower[1][3] + booty > 0) $at(lossDTotal, [['class', 'tb3cbrbr']]);
   var lossRow1 = $r();
   lossRow1.appendChild($c(T('LOSS'), [['class', 'tb3cbrc'], ['rowspan', intDetailRowSpan]]));
   if (TB3O.O[64] == '1')
   {
      var iLossA = '';
      var iLossD = '';
      for (var i = 1; i < 5; i++)
      {
         iLossA += $ls(tadPower[0][i + 3]) + " " + imgRes[i - 1] + "<br>";
         iLossD += $ls(tadPower[1][i + 3] + stBooty[i - 1]) + " " + imgRes[i - 1] + "<br>";
      }
      var lossADetail = $c(iLossA);
      if (tadPower[0][3] > 0) $at(lossADetail, [['class', 'tb3cbrr']]);
      lossRow1.appendChild(lossADetail);
      var lossDDetail = $c(iLossD);
      if (tadPower[1][3] + booty > 0) $at(lossDDetail, [['class', 'tb3cbrr']]);
      lossRow1.appendChild(lossDDetail);
   }
   else
   {
      lossRow1.appendChild(lossATotal);
      lossRow1.appendChild(lossDTotal);
   }
   sTable.appendChild(lossRow1);
   if (TB3O.O[64] == '1')
   {
      var lossRow2 = $r();
      lossRow2.appendChild(lossATotal);
      lossRow2.appendChild(lossDTotal);
      sTable.appendChild(lossRow2);
   }
   //crop consumption of initial troops
   var ccRow = $r();
   ccRow.appendChild($c(gIc["r5"], [['class', 'tb3cbrc']]));
   ccRow.appendChild($c(tadPower[0][10] + " (-" + tadPower[0][8] + ")"));
   ccRow.appendChild($c(tadPower[1][10] + " (-" + tadPower[1][8] + ")"));
   sTable.appendChild(ccRow);
   //hero row
   var heroRow = $r();
   heroRow.appendChild($c(gIc["hero"], [['class', 'tb3cbrc']]));
   var accA = (tadPower[0][9] > 0 ? tadPower[1][8] : 0);
   var accD = (tadPower[1][9] > 0 ? Math.floor(tadPower[0][8] / tadPower[1][9]) : 0);
   heroRow.appendChild($c(accA, [['class', 'tb3cbrb']]));
   heroRow.appendChild($c(accD, [['class', 'tb3cbrb']]));
   sTable.appendChild(heroRow);
   //simple paragraph
   brCell.appendChild($e("P"));
   brCell.appendChild(sTable);

   return true;

   function shoBR(aP, nT, oT)
   {
      var iC = $g("tb_battlereport");
      if ( iC )
      {
         if ( iC.checked )
         {
            aP.removeChild(oT);
            aP.appendChild(nT);
         }
         else
         {
            aP.removeChild(nT);
            aP.appendChild(oT);
         }
      }
   }
}

//////////////////////////////////////////////////////////////////////
function uiModifyMsgBody(msg)
{
   //-----------------------------------------------------------------
   function replaceTextByRE(txtNode, re, freplace)
   {
      var str = txtNode.nodeValue;
      var prevLastIndex = 0;
      var children = [];
      var result;

      while ( (result = re.exec(str)) !== null ) 
      {
         if ( result.index > prevLastIndex )
         {
            children.push(str.substring(prevLastIndex,result.index));
         }
         prevLastIndex = re.lastIndex;
         var replacement = freplace(result[0]);
         if ( replacement )
         {
            children.push(replacement);
         }
         else
         {
            children.push(str.substring(result.index,re.lastIndex));
         }

      }
      var tail = str.substring(prevLastIndex);
      if ( tail ) { children.push(tail); }

      replaceElement(txtNode, children);
   }

   //-----------------------------------------------------------------
   function replaceCoordsWithLink(txt)
   {
      var aLink = null;
      var txy = txt.replace(" ", "").replace(/[,;\/\\]/, "|");
      if ( txy.indexOf("(") === 0 && txy.indexOf(")") !== -1 && txy.indexOf("|") !== -1 )
      {
         var xy = txy.replace("(", "").replace(")", "").split("|");
         aLink = uiCreateIntMapLinkXY(xy[0], xy[1], "(" + trimBlanks(xy[0]) + "|" + trimBlanks(xy[1]) + ")", {disable_tip:true});
      }
      return aLink;
   }

   //-----------------------------------------------------------------
   function replaceURLWithLink(txt)
   {
     return $lnk([['class','tbInject'],['href',txt],['target','_blank']],txt);
   }

   //-----------------------------------------------------------------
   function processMessageText(msg, re, freplace)
   {
      var texts = $xf(".//text()", 'l', msg);
      var i;
      for ( i = 0; i < texts.snapshotLength; ++i )
      {
         var txtNode = texts.snapshotItem(i);
         if ( TAG(txtNode.parentNode) !== "A" ) 
         {
            replaceTextByRE(txtNode, re, freplace);
         }
      }
   }

   var reCoords = /\(\s*(-?\d+)\s*[\|\,\s\/\\]\s*(-?\d+)\s*\)/g;
   processMessageText(msg, reCoords, replaceCoordsWithLink);

   var reURL = /\w+:\/\/[\w-]+([.][\w-]+)+(\/\S*)?/g;
   processMessageText(msg, reURL, replaceURLWithLink);
}

//////////////////////////////////////////////////////////////////////
function getMsgRptHighlight(mrTable)
{
   return $xf(".//tr[contains(@class,'tbSelected')]");
}

//////////////////////////////////////////////////////////////////////
function uiRemoveMsgRptHighlight(mrTable)
{
   var i;
   for( i = 0; i < mrTable.rows.length; ++i )
   {
     delClass(mrTable.rows[i],"tbSelected");
   }
}

//////////////////////////////////////////////////////////////////////
function uiSetMsgRptHighlight(aNode)
{
   var tr = $xf(".//ancestor::tr[1]", 'f', aNode);
   if ( tr ) { addClass(tr,"tbSelected"); }
}


//////////////////////////////////////////////////////////////////////
// stop "Delete all" reports if the user changed the page
function clearReportDeletingState()
{
   var options = loadPersistentUserObject("reports_delete");

   if ( options.deleteAll )
   {
      savePersistentUserObject("reports_delete", {});
   }  	
}

//////////////////////////////////////////////////////////////////////
function uiCreateDelRepTable(menu)
{
   function delete10Reports(i, href)
   {
      savePersistentUserObject("reports_delete", {pageToDelete:href, pageToReturn: crtUrl.source, deleteAll: true, activeTab: i, tabToReturn: menu.active });
      location.href = href;
   }

   var menuItems = menu.items;
   var iMax = 4;

   var bRow, cRow, i;
   var delTb = $t(['id', 'tb_delreptable'],
               [
                  $e("thead", null, $th(['colspan', iMax], T('DEL'))),
                  bRow = $r([['class', 'rh']]),
                  cRow = $r()
               ]);

   for ( i = 0; i < iMax; i++ )
   {
      var bTitle = menuItems[i][0];
      bRow.appendChild($td(['class', 'cc'], bTitle));
      cRow.appendChild($td(['class', 'cc'],
                          uiCreateTool("bDel", T('DEL') + " " + bTitle, bind(delete10Reports,[i,menuItems[i][1]]))));
   }
   return delTb;
}

//////////////////////////////////////////////////////////////////////
function isMsgRptListEmpty(mrTable)
{
   return !$xf(".//input[@type='checkbox' and not (@id)]", 'f', mrTable)
}

//////////////////////////////////////////////////////////////////////
function deleteReports(activeTab, mrTable)
{
   
   var options = loadPersistentUserObject("reports_delete");

   if ( options.deleteAll )
   {
      if ( activeTab === options.activeTab )
      {
         pauseScript(TB3O.Timeouts.reports_delete);
         var bDel = $g("del");

         if ( !isMsgRptListEmpty(mrTable) && bDel )
         {
            uiSelectAllMsgRpt(mrTable)
            pauseScript(TB3O.Timeouts.reports_delete);
            bDel.click();
         }
         else
         {
            savePersistentUserObject("reports_delete", {});
            if ( activeTab !== options.tabToReturn )
            {
               location.href = options.pageToReturn;
            }
         }
      }
      else { savePersistentUserObject("reports_delete", {}); }
   }
   
}

//////////////////////////////////////////////////////////////////////
function clearReportSearchingState()
{
   var options = loadPersistentUserObject("reports_search");

   if ( options.searchType )
   {
      savePersistentUserObject("reports_search", {});
   }
}

//////////////////////////////////////////////////////////////////////
function uiCreateSearchRepTable(activeTab, mrTable)
{
   //-----------------------------------------------------------------
   function onSearchReports(tab, ser)
   {
      savePersistentUserObject("reports_search", {searchType:ser, activeTab: tab});

      var highlight = getMsgRptHighlight(mrTable);
      if ( highlight && activeTab === tab )
      {
         uiRemoveMsgRptHighlight(mrTable);
         searchReports(tab, mrTable, highlight);
      }
      else
      {
         var href = "/berichte.php";
         if ( tab > 0 ) { href += "?t=" + tab; }
         location.href = href;
      }
   }

   //-----------------------------------------------------------------
   var sdvs = $div(['id', 'tb_searchreports'], 
   [   
      $span(T("FINDREP") + " : "),
      uiCreateTool("iReport2", T("IREPORT2"), bind(onSearchReports,[1,"iReport2"])),
      uiCreateTool("iReport3", T("IREPORT3"), bind(onSearchReports,[1,"iReport3"])),
      uiCreateTool("iReport7", T("IREPORT7"), bind(onSearchReports,[1,"iReport7"])),
      uiCreateTool("iReport5", T("IREPORT5"), bind(onSearchReports,[1,"iReport5"])),
      uiCreateTool("iReport6", T("IREPORT6"), bind(onSearchReports,[1,"iReport6"])),
      uiCreateTool("iReport17",T("IREPORT17"),bind(onSearchReports,[3,"iReport17"])),
      $lnk([['href', jsVoid], ['title', T("ALL")], 
            ['click', bind(onSearchReports,[0,"iReport2 iReport3 iReport5 iReport6 iReport7 iReport17"]), false]], 
           T("ALL"))
   ]);

   return sdvs;
}	

//////////////////////////////////////////////////////////////////////
function searchReports(activeTab, mrTable, highlight)
{
   
   var options = loadPersistentUserObject("reports_search");

   if ( options.searchType )
   {
      if ( activeTab === options.activeTab )
      {
         var tbR = mrTable.getElementsByTagName('img');
         var i = 0;
         var bFounded = false;

         if ( highlight )
         {
            for ( i = 0; i < tbR.length; i++ ) 
            {
               if ( hasAncestor(tbR[i], highlight) ) { break; }
            }
            ++i;
         }

         for ( ; i < tbR.length; i++ )
         {
            if ( hasAnyClass(tbR[i], options.searchType) )
            {
               bFounded = true;
               savePersistentUserObject("reports_search", {});
               uiSetMsgRptHighlight(tbR[i]);
               break;
            }
         }

         if ( !bFounded )
         {
            pauseScript(TB3O.Timeouts.reports_search);
            if ( !navigateNextRptPage() )
            {
               savePersistentUserObject("reports_search", {});
            }
         }
      }
      else
      {
         savePersistentUserObject("reports_search", {});
      }
   }
   
}

//////////////////////////////////////////////////////////////////////
function MsgRptPreload(mrTable, intMRP)
{
   var pageNo = ( crtUrl.queryKey.s === undefined ) ? 0 : parseInt10(crtUrl.queryKey.s);

   for (var i = 1; i < intMRP; i++)
   {
      setTimeout(createMrPreloadFunc(pageNo + i * 10), getRndTime(i * 498));
   }
   var X2 = pageNo + intMRP * 10;
   var X1 = pageNo - intMRP * 10;
   var tdbfLinks = mrTable.rows[mrTable.rows.length - 1].cells[2];
   if ( tdbfLinks )
   {
      var bkLink;
      if (X1 < 0)
      {
         bkLink = $e("SPAN", [['class', 'c'],["style", "font-weight:bold;"]], "«");
      }
      else 
      {
         bkLink = $lnk([['style', 'font-weigth:bold'],
                       ['href', addQueryParameter(crtUrl.source, "s", X1)]], "« ");
      }
      var fwLink = $lnk([['style', 'font-weight:bold'],
                         ['href', addQueryParameter(crtUrl.source, "s", X2)]],"»&nbsp;");
      removeChildren(tdbfLinks);
      tdbfLinks.appendChild(bkLink);
      tdbfLinks.appendChild(fwLink);
   }


   function createMrPreloadFunc(s)
   {
      return function ()
      {
         ajaxLoadDocument(addQueryParameter(crtUrl.source, "s", s), processMrPage);
      }
   }

   // TODO: add messages in correct order (AJAX answers commonly not ordered)
   function processMrPage(xhr_doc)
   {
      var aTb = searchMsgRptTable(xhr_doc);
      if (aTb)
      {
         var maxR = aTb.rows.length;
         var mrFoot = mrTable.tFoot;
         var lastRow = null;
         if ( !mrFoot )
         {
            lastRow = mrTable.rows[mrTable.rows.length - 1];
            removeElement(lastRow);
         }

         if ( !isMsgRptListEmpty(mrTable) )
         {
            var xBody = mrTable.tBodies[0];
            var oFrg = null;
            if ( xBody ) oFrg = document.createDocumentFragment();
            for (var xi = 1; xi < maxR - 1; xi++)
            {
               var aRow = aTb.rows[xi];
               var xRow = $r();
               var noC = aRow.cells.length;
               if (noC > 1)
               {
                  for (var yi = 0; yi < noC; yi++)
                  {
                     var xCell = aRow.cells[yi].cloneNode(true);
                     document.adoptNode(xCell);
                     uiModifyLinks(xCell);
                     xRow.appendChild(xCell);
                  }
                  if (oFrg) oFrg.appendChild(xRow);
                  else mrTable.appendChild(xRow);
               }
            }
            if (oFrg) xBody.appendChild(oFrg);
         }
         if ( lastRow ) { mrTable.appendChild(lastRow); }
      }
   }
}

//////////////////////////////////////////////////////////////////////
function MessageListOptions()
{
   //general variables needed for this function
   var mrTable = searchMsgRptTable();
   var tabMenu = searchAndParseSubMenu();

   if ( tabMenu && mrTable )
   {
      uiAddSelectAllCheckbox(mrTable);
      ;
      ;

      if ( TB3O.pageSelector === "report_list" )
      {
         if ( TB3O.O[61] === "1")
         {
            var content = $g(ID_CONTENT);
            var searchTb = uiCreateSearchRepTable(tabMenu.active, mrTable);
            if ( searchTb )
            {
               insertLast(content, searchTb);
            }

            var delTb = uiCreateDelRepTable(tabMenu);
            if ( delTb )
            {
               insertLast(content, delTb);
            }
         }
         deleteReports(tabMenu.active, mrTable);
         searchReports(tabMenu.active, mrTable);
      }

      //get the number of pages to preload from server
      var intMRP = parseInt10(TB3O.O[59]) + 1;
      if ( intMRP > 5 ) { intMRP = 5; }
   
      if ( intMRP > 1 )
      {
         
      }
   }
}


//////////////////////////////////////////////////////////////////////
function uiModifyMsgRptList()
{
   
   uiAddKeyboardNavigation();
   MessageListOptions();
   
}

//////////////////////////////////////////////////////////////////////
function uiModifyMsgRptMenu()
{
   var tabMenu = searchAndParseTabMenu();
   if ( tabMenu )
   {
      ;
   }
}

//////////////////////////////////////////////////////////////////////
function uiModifyMessage(bPopup)
{
   

   var msgBody = searchMsgBody();
   if ( msgBody )
   {
      uiModifyMsgBody(msgBody);
   }

   
}

//////////////////////////////////////////////////////////////////////
function uiModifyMsgView()
{
   

   uiModifyMsgRptMenu();
   uiModifyMessage();

   
}

//////////////////////////////////////////////////////////////////////
function uiModifyTradeReport(rptBody, bPopup)
{
   var resCell = $xf(".//*[@id='trade']/tbody/tr[2]/td", 'f', rptBody);
   if ( resCell )
   {
      var Res = getResourcesFromString(getTextContent(resCell));
      if ( Res )
      {
         insertAfter(resCell.lastChild, 
            $span([['class', 'tbInject']],[
               " = ", I("r0"), " ",
               $e("b", $ls(totalResources(Res)))
            ])); 
      }
   }
}

//////////////////////////////////////////////////////////////////////
function uiModifyReport(bPopup)
{
   
   var rptBody = searchRptBody();
   if ( rptBody )
   {
      if ( TB3O.O[63] === "1" ) 
      {
         
      }
      uiModifyTradeReport(rptBody, bPopup);
   }
   
}

//////////////////////////////////////////////////////////////////////
function uiModifyRptView()
{
   

   uiModifyMsgRptMenu();
   uiModifyReport();

   
}

//////////////////////////////////////////////////////////////////////
// Add features:
// - sending message by pressing CTRL+ENTER
function uiModifyMsgPost()
{
   
   function sendMessage(event)
   {
      if ( event.keyCode === 13 && event.ctrlKey )
      {
         var mF = $xf("//form[@name='msg' or @action='nachrichten.php']");
         if ( mF ) { mF.submit(); }
      }
   }

   uiModifyMsgRptMenu();

   //code provided by rtellezi for enabling sending message by pressing the CTRL+ENTER keys.
   var msgNode = $g("message");
   if ( msgNode )
   {
      msgNode.addEventListener("keydown", sendMessage, false);
   }
   
}
/////////////////////////////////////////////////////////////////////
function searchAllianceProfileTable()
{
   return $xf("//div[@id='details']/table");
}

/////////////////////////////////////////////////////////////////////
function uiModifyAllianceProfileName(aProfile)
{
   var allyName = aProfile.rows[0].cells[1].textContent;

   aProfile.rows[0].cells[1].innerHTML =  " <a href='" + crtPage + "'>" + allyName + "</a>";
}


/////////////////////////////////////////////////////////////////////
function uiModifyAllianceProfileDescription(aProfile)
{
   uiModifyPlayerProfileDescription();
}






/////////////////////////////////////////////////////////////////////
function allyCalculation()
{
   var aTb = $g("member");
   if ( !aTb )
   {
      var a = $xf("//div[@id='" + ID_MID2 + "']//table[@class='tbg']//td[@width='6%']");
      if ( a ) { aTb = a.parentNode.parentNode; }
   }

   if ( aTb )
   {
      var totP = 0;
      var totV = 0;
      var totalBullets = [[0, ""], [0, ""], [0, ""], [0, ""], [0, ""]]; //blue, green, yellow, red, grey
      var boolIsMyAlly = true;

      insertFirst(aTb.rows[0],$td(['style','width:6%']))

      for (var i = 1; i < aTb.rows.length; i++)
      {
         var cells = aTb.rows[i].cells;
         var uLink = $nth_tag(cells[0],"a",0);
         if ( uLink )
         {
            var uid = parseUri(uLink.href).queryKey.uid;
            if ( TB3O.UserID == uid )
            {
               addClass(aTb.rows[i],"hl");
            }
         }

         totP += parseInt10(cells[1].textContent);
         totV += parseInt10(cells[2].textContent);

         if ( boolIsMyAlly )
         {
            if ( cells[4] )
            {
               var imgBullet = cells[4].firstChild;
               if (imgBullet.src.indexOf("x.gif") == -1)
               {
                  var xf = basename(imgBullet.src).replace("b", "").replace(".gif", "");
                  var j = parseInt10(xf);
                  totalBullets[j - 1][0] += 1;
                  totalBullets[j - 1][1] = imgBullet.title;
               }
               else if (imgBullet.className.match(/online/))
               {
                  var aClass = imgBullet.className;
                  imgBullet.className.search(/(\d)/);
                  var j = RegExp.$1;
                  totalBullets[j - 1][0] += 1;
                  totalBullets[j - 1][1] = imgBullet.title;
               }
            }
            else 
            {
               boolIsMyAlly = false;
            }
         }

         
         insertFirst(aTb.rows[i],$td(String(i)+"."))
         
      }
      var popPerPlayer = Math.round(totP / (aTb.rows.length - 1));

      // total member of aliance
      var trT = $r([['class', 'tb3r']]);
      trT.appendChild($td([['class', 'tb3chnb'], ["colspan", "2"]], T('TOTAL')));
      trT.appendChild($td([['class', 'tb3chnb'], ['style', 'text-align:center']], totP));
      trT.appendChild($td([['class', 'tb3chnb'], ['style', 'text-align:center']], totV));
      if ( boolIsMyAlly ) { trT.appendChild($td([['class', 'tb3chnb']])); }
      aTb.appendChild(trT);

      //average population per member of aliance
      var trAv = $r([['class', 'tb3r']]);
      trAv.appendChild($td([['class', 'tb3chnb'], ["colspan", "2"]], T('AVPPP')));
      trAv.appendChild($td([['class', 'tb3chnb'], ["colspan", "2"], ['style', 'text-align:center']], popPerPlayer));
      if ( boolIsMyAlly ) { trAv.appendChild($td([['class', 'tb3chnb']])); }
      aTb.appendChild(trAv);

      //average population per village
      trAv = $r([['class', 'tb3r']]);
      trAv.appendChild($td([['class', 'tb3chnb'], ["colspan", "2"]], T('AVPPV')));
      trAv.appendChild($td([['class', 'tb3chnb'], ["colspan", "2"], ['style', 'text-align:center']], Math.round(totP / totV)));
      if (boolIsMyAlly) { trAv.appendChild($td([['class', 'tb3chnb']])); }
      aTb.appendChild(trAv);

      //number of bullets by type
      if ( boolIsMyAlly )
      {
         var rowBullets = $r([['class', 'tb3r']]);
         var cellBullets = $td([['class', 'tb3chnb'], ['colspan', '5'], ['style', 'text-align:center']]);
         var cBiHTML = "";
         var addSpacer = " | ";
         for (var j = 0; j < 5; j++)
         {
            if (totalBullets[j][0] > 0) 
            {
              cBiHTML += "<img class='online" + (j + 1) + "' src='" + gIc["b" + (j + 1)] + "' title='" + totalBullets[j][1] + "' alt='" + totalBullets[j][1] + "'> = &nbsp;" + totalBullets[j][0] + addSpacer + " ";
            }
         }
         cellBullets.innerHTML = cBiHTML.substring(0, cBiHTML.length - 3);
         rowBullets.appendChild(cellBullets);
         aTb.appendChild(rowBullets);
      }
   }
}

/////////////////////////////////////////////////////////////////////
function uiModifyAllianceProfile()
{
   

   var aProfile = searchAllianceProfileTable();
   if ( aProfile )
   {
      uiModifyAllianceProfileName(aProfile);
      uiModifyAllianceProfileDescription(aProfile);

      allyCalculation();
   }

   
}


/////////////////////////////////////////////////////////////////////
function uiModifyAllianceForum()
{
   

   var i;
   var posts = $xf("//table[@id='posts']//div[contains(@class,'text')]", 'l');
   for ( i = 0; i < posts.snapshotLength; i++ )
   {
      uiModifyMsgBody(posts.snapshotItem(i));
   }

   
}

/////////////////////////////////////////////////////////////////////
function getPlayerName(aDoc)
{
   var aUN = '';
   var uLink = $xf("//div[contains(@class,'sideInfoPlayer')]//a[contains(@href, 'spieler.php')]", 'f', aDoc, aDoc);
   if ( uLink )
   {
      aUN = uLink.textContent.replace(/[\r\n\t ]+/g, "");
   }
   return aUN;
}

/////////////////////////////////////////////////////////////////////
function searchCapitalSpan(aDoc)
{
   return $xf("//div[@id='" + ID_CONTENT + "']//table[@id='villages']//span[contains(@class,'mainVillage')]", 'f', aDoc, aDoc);
}


/////////////////////////////////////////////////////////////////////
function getRaceLocalName(aDoc)
{
   var name = '';
   var aValue = $xf("//table[@id='details']/tbody/tr[2]/td", 'f', aDoc, aDoc);

   if ( aValue )
   {
      name = trimBlanks(aValue.textContent);
   }
   return name;
}

/////////////////////////////////////////////////////////////////////
function searchPlayerProfileTable()
{
   return $g("details");
}

/////////////////////////////////////////////////////////////////////
function searchPlayerProfileVillagesTable(aDoc)
{
   return $g("villages",aDoc);
}

/////////////////////////////////////////////////////////////////////
function uiModifyPlayerProfileName(uProfile)
{
   var title = $xf("//div[@id='" + ID_CONTENT + "']//h1");
   if ( title )
   {
      var parts = title.textContent.split(" - ");
      if ( parts.length > 1 )
      {

         title.innerHTML = parts[0] + " - <a href='" + crtPage + "'>" + parts[1] + "</a>"
      }
   }
}

/////////////////////////////////////////////////////////////////////
function uiModifyPlayerProfileDescription(uProfile)
{
   var desc = $xf("//div[@id='" + ID_CONTENT + "']//div[contains(@class,'description1')]");
   if ( desc ) { uiModifyMsgBody(desc); }

   desc = $xf("//div[@id='" + ID_CONTENT + "']//div[contains(@class,'description2')]");
   if ( desc ) { uiModifyMsgBody(desc); }
}

/////////////////////////////////////////////////////////////////////
// convert coord to link to map
function uiModifyPlayerProfileVillagesTable(uTb, villages)
{
   
   activeMapId = xy2id(TB3O.ActiveVillageInfo.x, TB3O.ActiveVillageInfo.y);

   var villagesTable = villages.table;
   var i;
   for ( i = 0; i < villagesTable.length; i++ )
   {
      var mapId = villagesTable[i][0];
      if ( activeMapId == mapId )
      {
         addClass(uTb.rows[i+1],"hl");
      }
   }
   
}
//////////////////////////////////////////////////////////////////////
function savePlayerInfo()
{
   setGMcookieV2('UserInfo', TB3O.U, 'UsI');
}

//////////////////////////////////////////////////////////////////////
function loadPlayerInfo()
{
   var bResult = true;
   var bFirstTry = false;
   

   var aTB3U = getGMcookieV2('UserInfo');
   if ( !aTB3U || !aTB3U['UsI'] )
   {
      bFirstTry = true;
      savePlayerInfo();
   }
   else 
   {
      TB3O.U = aTB3U['UsI'];
   }

   if ( TB3O.U[1] === '' ) 
   {
      getRace();
      if ( TB3O.U[1] === '' && bFirstTry ) 
      {
         getRaceFromBarracks();
      }
   }

   // user information is critical
   // for first run just shedule required ajax requests and stop normal execution
   if ( TB3O.U[0] === '' || TB3O.U[2] === '' || TB3O.U[3] === '' || TB3O.U[4] === '' || TB3O.U[6] === '' ) 
   {
      
      ajaxLoadDocument(spLnk, 
         function (xhr_doc)
         {
            getCommonPlayerProfileInfo(xhr_doc);
            
         }
      );
      bResult = false;
   }

   

   return bResult;
}

/////////////////////////////////////////////////////////////////////
function setPlayerName(aUN)
{
   if ( aUN )
   {
      TB3O.U[0] = aUN;
      savePlayerInfo();
   }
}

/////////////////////////////////////////////////////////////////////
function setCapitalInfo(aSpan)
{
   if ( aSpan )
   {
      var aVal = aSpan.parentNode.getElementsByTagName('A')[0];
      TB3O.U[4] = aVal.href.match(/\?d=(\d+)/)[1];
      TB3O.U[3] = aVal.textContent;
      var xy = id2xy(TB3O.U[4]);
      TB3O.U[6] = xy[0] + "|" + xy[1];
      savePlayerInfo();
   }
}

/////////////////////////////////////////////////////////////////////
function setRaceLocalName(name)
{
   if ( name )
   {
      TB3O.U[2] = name;
      savePlayerInfo();
   }
}

/////////////////////////////////////////////////////////////////////
function getCommonPlayerProfileInfo(aDoc)
{
   
   setCapitalInfo(searchCapitalSpan(aDoc));
   setPlayerName(getPlayerName(aDoc));
   setRaceLocalName(getRaceLocalName(aDoc));
   
   
}


/////////////////////////////////////////////////////////////////////
function parsePlayerProfileVillagesTable(uTb)
{
   var vPop = 0, totP = 0, villagesTable = [];
   var i, vLnk, mapId, aRow;
   for (i = 1; i < uTb.rows.length; i++)
   {
      aRow = uTb.rows[i];
      vLnk = $nth_tag(aRow.cells[0], "a", 0);
      if ( vLnk )
      {
         vPop = parseInt10(aRow.cells[2].textContent);
         totP += vPop;
         
         mapId = parseInt10(parseUri(vLnk.href).queryKey.d);
         villagesTable.push([mapId, vPop]);
      }
   }
   return {population: totP, table: villagesTable};
}

/////////////////////////////////////////////////////////////////////
function getVillagesPopulation(aDoc)
{
   var uTb = searchPlayerProfileVillagesTable(aDoc);
   if ( uTb )
   {
      var villagesTable = parsePlayerProfileVillagesTable(uTb).table;
      var mapIdDict = getVillagesMapIdDict(TB3O.VillagesInfo);

      for ( i = 0; i < villagesTable.length; ++i )
      {
         var mapId = villagesTable[i][0];
         TB3O.VillagesInfo[mapIdDict[mapId]].pop = villagesTable[i][1];
      }
   }
}

/////////////////////////////////////////////////////////////////////
// process only common information, villages list not processed yet
function processPlayerProfile()
{
   

   TB3O.pageSelector = "profile_my";

   if ( crtUrl.queryKey.uid && crtUrl.queryKey.uid != TB3O.UserID ) 
   {
      TB3O.pageSelector = "profile_other";
   }
   if ( crtUrl.queryKey.s ) 
   {
      TB3O.pageSelector = "profile_tab";
   }

   if ( TB3O.pageSelector === "profile_my" )
   {
      getCommonPlayerProfileInfo(document);
   }

   
}

/////////////////////////////////////////////////////////////////////
// process all other profile information, villages list already processed
function processMyProfile()
{
   

   getCapitalId();
   getVillagesPopulation(document);

   
}


/////////////////////////////////////////////////////////////////////
// convert coord to link to map
function uiModifyPlayerProfileCoords(uTb, villages)
{
   
   activeMapId = xy2id(TB3O.ActiveVillageInfo.x, TB3O.ActiveVillageInfo.y);

   var villagesTable = villages.table;
   var i;
   for ( i = 0; i < villagesTable.length; i++ )
   {
      var mapId = villagesTable[i][0];
      var aCell = uTb.rows[i+2].cells[2];
      if ( !$nth_tag(aCell, "a", 0) )
      {
         var aLink = $lnk([['class','tbInject'],['href','karte.php?z=' + mapId]], aCell.childNodes);
         aCell.appendChild(aLink);
         uiAddTooltipForIntMapLink(aLink, mapId);
      }

      if ( activeMapId == mapId )
      {
         addClass(uTb.rows[i+2],"hl");
      }
   }
   
}

/////////////////////////////////////////////////////////////////////
function uiAddPlayerStatistics(uTb, villages)
{
   

   var headerRows = 1;
   var totV = uTb.rows.length - headerRows;
   var totP = villages.population;
   var csp1 = 2;
   var csp2 = uTb.rows[headerRows].cells.length - 2;
   //total row (population, villages)
   var trT = $r([['class', 'tb3rnb']],[
                 $td([['class', 'tb3chnb'], ['colspan', csp1]], T('TOTAL')),
                 $td([['class', 'tb3chnb'], ['style', 'text-align:center;']], totP),
                 $td([['class', 'tb3chnb'], ['colspan', csp2]])]);
   uTb.appendChild(trT);

   //average population per village
   var trAv = $r([['class', 'tb3rnb']],[
                 $td([['class', 'tb3chnb'], ['colspan', csp1]], T('AVPPV')),
                 $td([['class', 'tb3chnb'], ['style', 'text-align:center;']], Math.round(totP / totV)),
                 $td([['class', 'tb3chnb'], ['colspan', csp2]])]);
   uTb.appendChild(trAv);

   
}

/////////////////////////////////////////////////////////////////////
function uiModifyPlayerProfile()
{
   

   var uProfile = searchPlayerProfileTable();
   if ( uProfile )
   {
      uiModifyPlayerProfileName(uProfile);
      uiModifyPlayerProfileDescription(uProfile);
   }

   var uTb = searchPlayerProfileVillagesTable();
   if ( uTb )
   {
      var villages = parsePlayerProfileVillagesTable(uTb);
      uiAddPlayerStatistics(uTb, villages);
      uiModifyPlayerProfileVillagesTable(uTb, villages);
   }

   
}
//////////////////////////////////////////////////////////////////////
function showFieldInfoInTooltip(vID, fieldtype, anTb)
{
   if ( vID )
   {
      var ttDiv = uiTooltip_Find();

      if (fieldtype != 0)
      {
         //a map cell or a village
         tmTableHTML = "";
         ttHTML = "<table id='mhtt'>";
         if (fieldtype)
         {
            //there are 12 types of cells
            dist = [[3, 3, 3, 9], [3, 4, 5, 6], [4, 4, 4, 6], [4, 5, 3, 6], [5, 3, 4, 6], [1, 1, 1, 15], [4, 4, 3, 7], [3, 4, 4, 7], [4, 3, 4, 7], [3, 5, 4, 6], [4, 3, 5, 6], [5, 4, 3, 6]];
            info = dist[fieldtype - 1];
            ttHTML += "<tr><td colspan='2'>";
            for (var i = 1; i < 5; i++)
            {
               ttHTML += gIc["r" + i] + " " + info[i - 1] + ' ';
            };
            ttHTML += "</td></tr><tr><td>&nbsp;</td></tr>";
         };
         if (TB3O.O[57] == "1") tmTableHTML = getTroopMerchantTooltipHTML(vID, false, true, true, false, false);
         ttDiv.innerHTML = ttHTML + tmTableHTML + "</table>";
      }
      else
      {
         //an oasis
         ttHTML = getTroopsAttDefInfoTable(anTb, true);
         if (TB3O.O[57] == "1") ttHTML += "<tr><td>&nbsp;</td></tr>";
         ttHTML = "<table id='mhtt'>" + ttHTML;
         ttHTML += getTroopMerchantTooltipHTML(vID, false, false, true, false, false) + "</table>";
         ttDiv.innerHTML = ttHTML;
      }
      uiTooltip_Show();
   }
}

//////////////////////////////////////////////////////////////////////
function createMapInfoObjV2(area, pos)
{
   var mev = new Object();
   mev.area = area;
   mev.pos = pos;
   mev.timeout = 0;
   var fieldtype;
   mev.mouseOverEvent = function ()
   {
      var strRegExp1 = false;
      var strRegExp2 = false;
      var matches = mev.area.href.match(/d=(\d+)/);
      var crtPos;

      if ( matches )
      {
         crtPos = matches.pop();
      }

      mev.area.removeAttribute("title");
      if (TB3O.T35 == false)
      {
         mev.pict = $g("i_" + area.id.substring(2)).src;
         if (mev.pict.match(/\/(d|t)\d*.gif$/)) strRegExp1 = true;
         else if (mev.pict.match(/\/(o)\d*.gif$/)) strRegExp2 = true;
         //all AJAX requests
         if (TB3O.O[56] == '1')
         {
            mev.timeout = setTimeout(function ()
            {
               ajaxRequest(mev.area.href, "GET", null, function (t)
               {
                  if (mev.timeout != 0) processMapCell(t, mev, crtPos)
               }, dummy);
            }, 300);
         }
         else
         {
            if (strRegExp1 == true || strRegExp2 == true) showFieldInfoInTooltip(crtPos, null);
         };
      }
      else
      {
         if (TB3O.O[56] == '1')
         {
            if (TB3O.origMap == true)
            {
               //this is the case where the user just opened the map
               var kx = area.id.substring(2).split("_");
               var origFieldType = unsafeWindow.m_c;
               fieldtype = origFieldType.ad[kx[0]][kx[1]][2];
               if (fieldtype != 0)
               {
                  //this is an empty cell or a village
                  showCellInfo(mev.pos + 1, fieldtype);
                  showFieldInfoInTooltip(crtPos, fieldtype);
               }
               else
               {
                  //this is an oasis
                  if (mev.area.href != '') mev.timeout = setTimeout(function ()
                  {
                     ajaxRequest(mev.area.href, "GET", null, function (t)
                     {
                        if (mev.timeout != 0) processMapCell(t, mev, crtPos)
                     }, dummy);
                  }, 300);
               };
            }
            else
            {
               //use the map_infobox
               mapInfoBox = $g("map_infobox");
               if (mapInfoBox)
               {
                  aRowContent = mapInfoBox.rows[0].textContent;
                  if (aRowContent.indexOf(":") != -1 && aRowContent.indexOf("-"))
                  {
                     strType = aRowContent.split(": ");
                     if (strType.length > 1)
                     {
                        fieldtype = showCellInfo(mev.pos + 1, strType[1]);
                        showFieldInfoInTooltip(crtPos, fieldtype);
                     };
                  }
                  else
                  {
                     //2nd alternative
                     mev.timeout = setTimeout(function ()
                     {
                        ajaxRequest(mev.area.href, "GET", null, function (t)
                        {
                           if (mev.timeout != 0) processMapCell(t, mev, crtPos)
                        }, dummy);
                     }, 300);
                  };
               }
               else
               {
                  //2nd alternative
                  mev.timeout = setTimeout(function ()
                  {
                     ajaxRequest(mev.area.href, "GET", null, function (t)
                     {
                        if (mev.timeout != 0) processMapCell(t, mev, crtPos)
                     }, dummy);
                  }, 300);
               };
            };
         }
         else
         {
            //show only distance and time
            showFieldInfoInTooltip(crtPos, null);
         };
      };
   };

   mev.mouseOutEvent = function ()
   {
      clearTimeout(mev.timeout);
      mev.timeout = 0;
      onTooltip_Hide();
   };

   mev.scan = function ()
   {
      ajaxRequest(mev.area.href, "GET", null, function (t)
      {
         processMapCell(t, mev, null);
      }, dummy);
   };

   return mev;
}
	
//////////////////////////////////////////////////////////////////////
	// Map functions
	function mapFunctions() {
		aTimeOut = getRndTime(1800);
		allArrows = $xf("//area[starts-with(@id, 'ma_n')]", 'l');
		for (var xi = 0; xi < allArrows.snapshotLength; xi++) {if (TB3O.origMap == true) allArrows.snapshotItem(xi).addEventListener('click', reloadMapFunctions, false);};

		if (!$g("tb_tooltip")) uiTooltip_Create();
		mapcontent = $g('map_content');
		areas = $xf("//map//area[@shape='poly' and (@coords)]", 'l', mapcontent);

		//the village/player/oasis table needs a delay because maps are loaded via AJAX requests
		setTimeout(genMapTable, aTimeOut);
		//recompute the title of the browser because of clicking the arrows
		setTimeout(getCrtLocation, aTimeOut);
		addMapScanLink();
		document.addEventListener("mousemove", onTooltip_Update, false);
		installMapEventHandler();

		function installMapEventHandler() {
			for (var i = 1; i < 50; i++) {
				var k1 = (i - 1) % 7;
				var k2 = Math.floor((49 - i) / 7);
				var area = $g("a_" + k1 + "_" + k2);
				var mevobj = createMapInfoObjV2(area, i - 1);
				if (TB3O.origMap == true) {area.addEventListener("mouseover", mevobj.mouseOverEvent, false); area.addEventListener("mouseout",  mevobj.mouseOutEvent, false);};
			};
		};

		//the functions needed for the map
		function mapScan() {
			j = 0;
			for (var i = 1; i < 50; i++) {
				if ($g('map_info_' + i).innerHTML == '') {
					k1 = (i - 1) % 7; k2 = Math.floor((49-i)/7);
					if ($g("i_" + k1 + "_" + k2).src.match(/\/(d|t)\d*.gif$/)) {area = $g("a_" + k1 + "_" + k2); mevobj = createMapInfoObjV2(area, i-1); setTimeout(mevobj.scan, j * 600 + getRndTime(600)); j++;};
				};
			};
		};

		function addMapScanLink() {
			removeElement($g('map_opts'));
			if (TB3O.O[56] == '1' && TB3O.T35 == false) {
				//create the "Scan the Map" link
				b = $xf("//form[@method='post']").parentNode;
				ctable = $t([["id", "map_opts"]]);
				ctbody = $e("TBODY");
				var aMS = $a(T('MAPSCAN'), [['id', 'mapscan'], ['href', jsVoid]]);
				aMS.addEventListener("click", mapScan, false);
				trc = $r();
				tdc = $c("", [["colspan", '2']]);
				tdc.appendChild(aMS);
				trc.appendChild(tdc);
				ctbody.appendChild(trc);
				ctable.appendChild(ctbody);
				b.appendChild(ctable);
			};
		};

		//generate the table on the "karte.php" page
		function genMapTable(){
			if (areas.snapshotLength > 0 && TB3O.O[56] == '1') genMapCellInfoDivs();
			//select the correct images and link titles for the reinf/attack icons

			if (TB3O.O[58] != '1') return;
			var dRPA = getRPDefAction();
			removeElement($g('mapTableTT'));
			var aTb = $t([['id', 'mapTable'], ['sortCol', -1]]);
			var thead = $e("THEAD");
			var tbody = $e("TBODY");
			var aRow = $r();
			var cL = ['PLAYER', '8', 'ALDEAS', 'POPULATION', 'COORDS', 'MAPTBACTS'];
			var aTd;
			for (var i = 0; i < cL.length; i++){
				if (i < 4) {
					aTd = $c(T(cL[i]) + " (<img src='" + image["adn"] + "' width='8px' style='cursor:pointer;'><img src='" + image["aup"] + "' width='8px' style='cursor:pointer'>)", [['title', T('CKSORT')], ['class', 'tb3mthcp']]);
					switch(i){case 3: aTd.addEventListener("click", sortTable('mapTable', i, 'int'), false); break; default: aTd.addEventListener("click", sortTable('mapTable', i), false);};
				} else aTd = $c(T(cL[i]));
				aRow.appendChild(aTd);
			};
			thead.appendChild(aRow);
			aTb.appendChild(thead);
			var boolMapTable = false;
			var anArea;
			var aClass;
			for (var i = 0; i < 7; i++) {
				for (var j = 0; j < 7; j++) {
					anArea = $g('a_' + i + '_' + j).wrappedJSObject;
					var cInfo = anArea.details;
					if (cInfo && cInfo.name) {
						boolMapTable = true;
						var iRow = $r();
						var aName = cInfo.name;
						var vID = xy2id(cInfo.x, cInfo.y);
						aClass = '';
						if (aName == TB3O.U[0]) aClass = 'tb3mtcu';
						iRow.appendChild($c(aName, [['class', aClass]]));
						iRow.appendChild($c(cInfo.ally));
						if (TB3O.T35 == false) aHref = anArea.href; else aHref = "karte.php?" + cInfo.querystring;
						iRow.appendChild($c('<a href="' + aHref + '">' + cInfo.dname + '</a>'));
						iRow.appendChild($c(cInfo.ew, [['class', 'tb3mtcp']]));
						iRow.appendChild($c('<a href="' + aHref + '">' + cInfo.x + " | " + cInfo.y + '</a>'));
						iRow.appendChild($c('<a href="a2b.php?z=' + vID + '">' + gIc[dRPA] + '</a>' + '  ' + '<a href="build.php?z=' + vID + '&gid=17">' + gIc["r41"] + '</a>'));
						tbody.appendChild(iRow);
					};
				};
			};
			aTb.appendChild(tbody);
			if (boolMapTable == true) {
				var dxy = TB3O.O[90].split("|");
				var drUpg = $df(parseInt10(aTb.width), dxy[0], dxy[1], " ", 'mapTable', "mapTableTT", false, aTb);
			};
		};

		function genMapCellInfoDivs() {
			var mapinfoX = $g("map_info");
			if (mapinfoX) {
				removeElement(mapinfoX);//remove the big DIV
			} else {
				for (var i = 1; i < 50; i++) {removeElement($g('map_info_' + i));};//remove all the small DIVs
			};
			if (TB3O.T35 == false) {var mapinfo = $d("", [['id', 'map_info']]);};

			for(var i = 1; i < 50; i++){
				if (TB3O.T35 == false) {
					var divsX = $d("", [['id', 'map_info_' + i], ['class', 'mt' + i], ['style', 'position:relative; left:31px; top:54px; z-index:90; border:1px solid #00C000; background-color:#FFFFCC; -moz-border-radius:10px;']]);
					var divs = $d("", [['class', 'mt' + i], ['style', 'z-index:2;']]);
					divs.appendChild(divsX);
					mapinfo.appendChild(divs);
				} else {
					var divs = $d("", [['id', 'map_info_' + i], ['style', 'position:relative; height:1px; width:1px; ' + docDir[0] +':31px; top:45px; z-index:90; border:1px solid #00C000; background-color:#FFFFCC; -moz-border-radius:10px']]);
					var k1 = (i - 1) % 7;
					var k2 = Math.floor((49-i)/7);
					var mapCell = $g("i_" + k1 + "_" + k2);
					mapCell.appendChild(divs);
				};
			};
			if (TB3O.T35 == false) {
				var iniCell = $g("a_0_6");
				if (iniCell) iniCell.parentNode.appendChild(mapinfo);
			};
		};
	};
//Bookmarks on the right side
function showUserBookmarks()
{
   var aTb, parBM, ubXY;

   

   if (TB3O.O[20] === "1") 
   {
       removeElement($g("userbookmarksTT"));
       removeElement($g("userbookmarks"));

       aTb = uiCreateUserBookmarksTable();
       uiModifyLinks(aTb);

       if (TB3O.O[21] !== "1")
       {
          parBM = $g("parBM");
          if ( !parBM )
          {
             parBM = $e("P");
             parBM.id ="parBM";
             TB3O.nTAUb.appendChild(parBM);
          }
          parBM.appendChild(aTb);
       }
       else
       {
          ubXY = TB3O.O[76].split("|");
          $df(215, ubXY[0], ubXY[1], T('MARCADORES'), 'userbookmarks', "userbookmarksTT", true, aTb);
          if ( TB3O.O[71] === "0" ) { aTb.style.display = 'none'; }
       }
   }
   

   ///////////////////////////////////////////////////////////////////
   function uiCreateUserBookmarksTable()
   {
      var aTb = $t([['id', 'userbookmarks']]);
      //header row
      var uHr = $r();
      uHr.appendChild(uiCreateUserBookmarksHeader());
      aTb.appendChild(uHr);
      //bookmarks string
      var strBM = getGMcookie("marcadores", false);
      if (strBM == "false")
      {
         setGMcookie("marcadores", '', false);
         strBM = '';
      }

      if (strBM != '')
      {
         marcadores = new Array();
         strBM = strBM.split("$$");
         for (var i = 0; i < strBM.length; i++) marcadores[i] = strBM[i].split("$");
         for (var i = 0; i < marcadores.length; i++)
         {
            bmRow = $r();
            strBookmark = marcadores[i][0];
            if (TB3O.O[82] != "1")
            {
               var aDel = $a(gIc["del"], [['href', jsVoid]]);
               aDel.addEventListener("click", removeGMcookieValue("marcadores", i, false, showUserBookmarks, false), 0);
               aC = $c("");
               aC.appendChild(aDel);
               bmRow.appendChild(aC);

               bmRow.appendChild($c("&nbsp;"));

               upC = $c("");
               if (i > 0)
               {
                  aUp = $a("", [['href', jsVoid]]);
                  aUp.appendChild($img([['src', image["aup"]]]));
                  aUp.addEventListener("click", moveUserBookmark(i, -1), false);
                  upC.appendChild(aUp);
               }
               bmRow.appendChild(upC);

               downC = $c("");
               if (i < marcadores.length - 1)
               {
                  var aDown = $a("", [['href', jsVoid]]);
                  aDown.appendChild($img([['src', image["adn"]]]));
                  aDown.addEventListener("click", moveUserBookmark(i, 1), false);
                  downC.appendChild(aDown);
               }
               bmRow.appendChild(downC);
               bmRow.appendChild($c("&nbsp;"));
               eC = $c("");
               aEdit = $a("", [['href', jsVoid]]);
               aEdit.appendChild($img([['src', image["editbookmark"]], ['title', T('EDIT')]]));
               aEdit.addEventListener("click", editUserBookmark(i), false);
               eC.appendChild(aEdit);
               bmRow.appendChild(eC);
               bmRow.appendChild($c("&nbsp;"));
            }
            else
            {
               aCl = 'noact';
               if (marcadores[i][1] == crtPage) aCl = 'act';
               var aC = $c("<span>&#8226;&nbsp;&nbsp;</span>", [['class', aCl]]);
               bmRow.appendChild(aC);
            }
            //fr3nchlover
            if (marcadores[i][1].indexOf("*") != -1)
            {
               iL = $a(strBookmark + " ", [['href', marcadores[i][1].substring(0, marcadores[i][1].length - 1)], ['target', '_blank']]);
               iL.appendChild($img([['src', image["external"]]]));
            }
            else
            {
               iL = $a(strBookmark);
               if (marcadores[i][1] != "#") $at(iL, [['href', marcadores[i][1].substring(0, marcadores[i][1].length)]]);
            }
            bmC = $c("");
            bmC.appendChild(iL);
            bmRow.appendChild(bmC);
            aTb.appendChild(bmRow);
         }
      }
      return aTb;

      ////////////////////////////////////////////////////////////////
      function uiCreateUserBookmarksHeader()
      {
         var hText = $e("B", T('MARCADORES') + ':&nbsp;&nbsp;');
         var dI = (TB3O.O[82] != "1" ? ["unlocked" + docDir[0].substring(0, 1), '82.L', "1", '8'] : 
                                       ["locked", '82.U', "0", '2']);
         var toolbar = uiToolbar_Create(null,
                       [
                          uiCreateTool("addbookmark",  T('ANYADIR'),   onAddBookmark),
                          uiCreateTool("addbmthispage",T('ADDCRTPAGE'),onAddCurrentBookmark),
                          uiCreateTool("addbmspacer",  T('SPACER'),    onSeparator),
                          uiCreateTool(dI[0],          T(dI[1]),       onLockUnlock)
                       ]);

         var hCell = $c("", [['colspan', dI[3]]]);
         hCell.appendChild(hText);
         hCell.appendChild(toolbar);
         return hCell;

         /////////////////////////////////////////////////////////////
         function onAddBookmark() 
         {
            addUserBookmark();
         }

         /////////////////////////////////////////////////////////////
         function onAddCurrentBookmark() 
         {
            addUserBookmark(window.location.href);
         }

         /////////////////////////////////////////////////////////////
         function onSeparator() 
         {
            addGMcookieValue("marcadores", ["<hr size='2' width='100%' noshade color=darkgrey>", "#"], false);
            showUserBookmarks();
         }

         /////////////////////////////////////////////////////////////
         function onLockUnlock() 
         {
            TB3O.O[82] = dI[2];
            setGMcookieV2('TB3Setup', TB3O.O, 'SETUP');
            showUserBookmarks();
         }
      }
   }

   function addUserBookmark(ubURL)
   {
      if (!ubURL)
      {
         ubURL = prompt(T('UBU'), TB3O.BrT);
         if (!ubURL || ubURL == '') return;
      }
      var ubL = prompt(T('UBT'), TB3O.BrT);
      if (!ubL || ubL == '') return;
      addGMcookieValue("marcadores", [ubL, ubURL], false);
      showUserBookmarks();
      ubL = null;
   }

   function moveUserBookmark(i, updown)
   {
      return function ()
      {
         var ubC = getGMcookie("marcadores", false);
         var arrUbC = ubC.split("$$");
         var tmpUb = arrUbC[i + updown];
         arrUbC[i + updown] = arrUbC[i];
         arrUbC[i] = tmpUb;
         ubC = arrUbC.join("$$");
         setGMcookie("marcadores", ubC, false);
         showUserBookmarks();
         ubC = null;
         arrUbC = null;
         tmpUb = null;
      }
   }

   function editUserBookmark(i)
   {
      return function ()
      {
         var ubC = getGMcookie("marcadores", false);
         var arrUbC = ubC.split("$$");
         var tmpUb = arrUbC[i].split("$");
         var ubLabel = prompt(T('UBT'), tmpUb[0]);
         var ubURL = null;
         if (ubLabel != '') ubURL = prompt(T('UBU'), tmpUb[1]);
         if (!ubLabel) ubLabel = tmpUb[0];
         if (!ubURL) ubURL = tmpUb[1];
         if (ubLabel != '' && ubURL != '' && (ubLabel != tmpUb[0] || ubURL != tmpUb[1]))
         {
            arrUbC[i] = ubLabel + "$" + ubURL;
            ubC = arrUbC.join("$$");
            setGMcookie("marcadores", ubC, false);
            showUserBookmarks();
         }
         ubC = null;
         arrUbC = null;
         utLabel = null;
         ubURL = null;
      }
   }
}
	function showNoteBlock() {
		//add the noteblock if necessary
		if (TB3O.O[22] != '1') return;
		var aTb = createNoteBlock();
		if (TB3O.O[23] != '1') {var parNB = $e("P"); parNB.appendChild(aTb); aTb = parNB;} else {var nbXY = TB3O.O[77].split("|"); var nbWidth = aTb.style.width; TB3O.nTANb = $df(parseInt10(nbWidth), nbXY[0], nbXY[1], T('NBO'), 'noteblock', "noteblockTT", true);};
		TB3O.nTANb.appendChild(aTb);
	};

	//Create a noteblock (data from GM cookie)
	function createNoteBlock(){
		var sDisp = TB3O.O[72] == '0' && TB3O.O[23] == '1' ? ' display:none;' : '';
		var tr2 = $r();
		var td2 = $c("");
		var nT = getGMcookie("notas", false);
		if (nT == "false") nT = "";
		//height
		var nl = parseInt10(TB3O.O[25]) > 0 && nT != '' ? 3 + nT.split("\n").length : 10;
		if (nl > 30) nl = 30;
		//width
		var nboption = parseInt10(TB3O.O[24]);
		var dI = (nboption == 0 && screen.width >= 1200 || nboption == 2) ? [545, '60'] : [280, '30'];
		var aTb = $t([['id', 'noteblock'], ['style', "width:" + dI[0] + "px;" + sDisp]]);
		var tA = $e("TEXTAREA", nT);
		$at(tA, [["cols", dI[1]], ["id", "noteblockcontent"], ['style', 'background-image: url(' + image["underline"] + '); width:' + (dI[0] - 10) + 'px;'], ["rows", nl]]);
		td2.appendChild(tA);
		tr2.appendChild(td2);
		var tr3 = $r();
		var td3 = $c("", [['style', 'text-align:center;']]);
		var bS = $i([['type', 'image'], ['src', image["bSave"]], ['title', T('SAVE')]]);
		if (TB3O.O[23] != '1') $at(bS, [['style', 'padding:3px']]);
		bS.addEventListener("click", function(){setGMcookie("notas", tA.value, false); alert(T('SAVED')); }, 0);
		td3.appendChild(bS);
		tr3.appendChild(td3);
		aTb.appendChild(tr2);
		aTb.appendChild(tr3);
		nT = null;
		return aTb;
	};

//////////////////////////////////////////////////////////////////////
function uiCreateResBarWidget()
{
   

   var rbT,prbT;
   var xy;

   if ( TB3O.O[39] === "1" )
   {
      rbT = uiCreateResBarTable('tb_resbar',TB3O.ActiveVillageId,true);

      if ( rbT )
      {
         if ( TB3O.O[40] !== "1" )
         {
            prbT = $e("p");
            prbT.appendChild(rbT);
            TB3O.nTARbT.appendChild(prbT);
         }
         else // floating window
         {
            xy = TB3O.O[75].split("|");
            TB3O.nTARbT = $df(200, xy[0], xy[1], T('RBTT'), "resbar", "resbarTT", true, rbT);
            if ( TB3O.O[70] !== "1" ) { rbT.style.display = 'none'; }
         }

         setInterval(bind(updateResBarTable,['tb_resbar',TB3O.ActiveVillageId]), TB3O.Timeouts.resbar_update);
      }
   }

   
}


//////////////////////////////////////////////////////////////////////
//show resources in a tooltip
function uiCreateResourceTooltip(villageId)
{
   return uiCreateResBarTable('tb_resbarTT',villageId,false);
}

//////////////////////////////////////////////////////////////////////
function uiCreateResBarTable(tableId, villageId, bShowAllTotals)
{
   var rbT = null, bTb, hRow, aRow, bRow, cRow, tRow, hCell1, hCell2, aCell;
   var intpph = 0, intPPH = 0;
   var ri;

   var villageInfo = TB3O.VillagesInfo[villageId];
   var resourcesInfo = getActualResourcesInfoNow(villageInfo.r);
   if ( resourcesInfo.dUpd !== undefined )
   {
      for ( ri = 0; ri < 4; ri++ )
      {
         intpph += resourcesInfo.PpH[ri];
         intPPH += TB3O.ResInfoTotals.PpH[ri];
      }

      rbT = $t();
      rbT.id = tableId;
      rbT.className = "tbResBar";
      hRow = $r([['class', 'tb3r']]);
      hCell1 = $c(villageInfo.name, [['class', 'tb3cvn'], ['colspan', '4']]);
      hRow.appendChild(hCell1);

      hCell2 = $c( (bShowAllTotals ? T('TOTAL') + " / ": "") + T('1H'), [['class', 'tb3chtot']]);
      hRow.appendChild(hCell2);

      rbT.appendChild(hRow);


      for (ri = 0; ri < 4; ri++)
      {
         var strType = "";
         if ( TB3O.O[102] === "1" && villageInfo.type )
         {
            strType = villageTypes[villageInfo.type][ri] + "\u00D7";
         }

         aRow = $r([['class', 'tb3r']]);

         aCell = $c("", [['class', 'tb3c']]);
         if ( strType ) { aCell.appendChild($e("span",[],strType)); }
         aCell.innerHTML += gIc["r" + (ri + 1)];
         aRow.appendChild(aCell);

         aCell = $c("", [['class', 'lr']]);
         aCell.appendChild($e("span"));
         aRow.appendChild(aCell);

         bTb = $t([['class', 'rbrtb']]);
         bRow = $r([['class', 'rbrtbr']]);
         bRow.appendChild($c());
         bRow.appendChild($c());
         bTb.appendChild(bRow);
         aCell = $c("", [['class', 'tb3cresbar']]);
         aCell.appendChild(bTb);
         aRow.appendChild(aCell);

         aCell = $c("", [['class', 'tb3ttf']]);
         aRow.appendChild(aCell);

         aCell = $c($ls(bShowAllTotals ? TB3O.ResInfoTotals.PpH[ri] : resourcesInfo.PpH[ri]), [['class', 'tb3ctot']]);
         aRow.appendChild(aCell);

         rbT.appendChild(aRow);
      }

      //row for totals per hour
      tRow = $r([['class', 'tb3pph']]);
      tRow.appendChild($c(gIc["r1"] + " + " + gIc["r2"] + " + " + gIc["r3"] + " + " + gIc["r4"] + " / " + T('1H'), 
                       [['class', 'tb3c'], ['colspan', bShowAllTotals ? '3' : '4']]));
      tRow.appendChild($c($ls(intpph), [['class', bShowAllTotals ? 'tb3ctotv' : 'tb3ctot']]));
      if ( bShowAllTotals )
      {
         tRow.appendChild($c($ls(intPPH), [['class', 'tb3ctot']]));
      }
      rbT.appendChild(tRow);

      //row for total crop consumption
      bRow = $r([['class', 'tb3r']]);
      bRow.appendChild($c(gIc["r5"], [['class', 'tb3c'], ['colspan', '2']]));
      bRow.appendChild($c("", [['class', 'tb3c'],['colspan', bShowAllTotals ? '1' : '2']]));
      bRow.appendChild($c($ls(resourcesInfo.PpH[3]-resourcesInfo.EPpH[3]), 
                          [['class', bShowAllTotals ? 'tb3ctotv' : 'tb3ctot']]));
      if ( bShowAllTotals )
      {
         bRow.appendChild($c($ls(TB3O.ResInfoTotals.PpH[3] - TB3O.ResInfoTotals.EPpH[3]), [['class', 'tb3ctot']]));
      }
      rbT.appendChild(bRow);

      //row for effective crop production
      cRow = $r([['class', 'tb3r']]);
      cRow.appendChild($c(gIc["r4"] + " - " + gIc["r5"], [['class', 'tb3c'], ['colspan', '2']]));
      cRow.appendChild($c("", [['class', 'tb3c'],['colspan', bShowAllTotals ? '1' : '2']]));
      cRow.appendChild($c($ls(resourcesInfo.EPpH[3]), 
                          [['class', bShowAllTotals ? 'tb3ctotv' : 'tb3ctot']]));
      if ( bShowAllTotals )
      {
         cRow.appendChild($c($ls(TB3O.ResInfoTotals.EPpH[3]), [['class', 'tb3ctot']]));
      }
      rbT.appendChild(cRow);

      fillResBarTable(rbT, villageId);
   }
   return rbT;
}


//////////////////////////////////////////////////////////////////////
function fillResBarTable(rbT, villageId)
{
   var aRows, aCells, bCells;
   var ri;
   var fillPercent, prC, title;

   var resourcesInfo = getActualResourcesInfoNow(TB3O.VillagesInfo[villageId].r);

   aRows = rbT.rows;
   for ( ri = 0; ri < 4; ++ri )
   {
      aCells = aRows[ri+1].cells;

      fillPercent = uiSetFillPercent(aCells[1].firstChild,resourcesInfo,ri);
      prC = getColorForResourceBar(fillPercent);

      bCells = aCells[2].firstChild.rows[0].cells;

      title = "" + Math.floor(resourcesInfo.Res[ri]) + "/" + resourcesInfo.Cap[ri];
      $at(bCells[0], [['style', 'width:' + fillPercent + 'px; background-color:' + prC + ';'], ['title', title]]);
      $at(bCells[1], [['style', 'width:' + (100 - fillPercent) + 'px; background-color:transparent;'], ['title', title]]);

      uiSetTimeToFill(aCells[3],resourcesInfo,ri);
   }
}

//////////////////////////////////////////////////////////////////////
function updateResBarTable(tableId, villageId)
{
   var rbT = $g(tableId);
   if ( rbT )
   {
      fillResBarTable(rbT, villageId);
   }
}

/////////////////////////////////////////////////////////////////////
function setDefaultStatisticsMenu()
{
   var statMenu = 
   { 
      1: ["Players",""],
      2: ["Villages",""],
      4: ["Alliances",""],
   };

   setGMcookieV2('statistics', statMenu); 

}

/////////////////////////////////////////////////////////////////////
function uiCreateSearchBarWidget()
{
   

   if ( TB3O.O[32] === "1")
   {
      var sbc = getGMcookieV2('statistics');
      if ( sbc && sbc[1] )
      {
         var aForm = uiCreateSearchForm(sbc);
         if ( aForm )
         {
            if ( TB3O.O[33] !== "1" )
            {
               var aPar = $e("p");
               aPar.setAttribute('style', 'margin-top:20px;');
               aPar.appendChild(aForm);
               TB3O.nTASb.appendChild(aPar);
            }
            else 
            {
               var xy = TB3O.O[79].split("|");
               $df(300, xy[0], xy[1], "?", "searchbar", "searchbarTT", true, aForm);
               if ( TB3O.O[74] !== "1" ) { aForm.style.display = 'none'; }
            }
         }
      }
   }

   
}

/////////////////////////////////////////////////////////////////////
function uiCreateSearchForm(sbc)
{
   var aSF = $e("form", [['id', 'searchform'], 
                         ['action', 'statistiken.php?id=' + TB3O.O[83]], 
                         ['method', 'POST']]);
   var i1 = $e("input", [['id', 'searchopt'], ['type', 'hidden'], ['value', TB3O.O[83]]]);
   var i2 = $e("input", [['type', 'text'], ['maxlength', '20'], ['size', '10'], ['value', '']]);
   var i3 = $e("input", [['type', 'submit'], ['name', 'submit'], ['value', '?']]);

   
      i2.name = 'name';
      i2.className = 'text name';
   

   var s1 = $e("select", [['id', 'searchtype']]);
   addOption(s1,sbc,1);
   addOption(s1,sbc,2);
   addOption(s1,sbc,4);
   addOption(s1,sbc,31);
   addOption(s1,sbc,32);
    { addOption(s1,sbc,8); } 
   s1.addEventListener('change', setSearchBarOption, false);
   aSF.appendChild(i1);
   aSF.appendChild(i2);
   aSF.appendChild(s1);
   aSF.appendChild(i3);
   return aSF;

   function addOption(sel,sbc,id)
   {
      if ( sbc[id] )
      {
         sel.add(new Option(sbc[id][0], id, false, (id === parseInt10(TB3O.O[83]))),null);
      }
   }

   function setSearchBarOption()
   {
      var searchType = $g("searchtype").value;
      TB3O.O[83] = '' + searchType;
      saveTBOptions();
      var i1 = $g("searchopt");
      if (i1) i1.value = searchType;
      var aSF = $g("searchform");
      if ( aSF ) { aSF.action = 'statistiken.php?id=' + searchType; }
   }
}
//////////////////////////////////////////////////////////////////////
function uiSetCenterNumberState(aLvlNode, nState, bAlreadyBuilt)
{
   var stateClasses = ["tbNoRes","tbUpg","tbNPCUpg","tbNoCap","tbMax","tbUpgNow"];
   var sClass = stateClasses[nState];
   delClass(aLvlNode,stateClasses);
   
   if ( bAlreadyBuilt ) { sClass += " tbUpgNow"; }

   aLvlNode.className += " " + sClass;
}

//////////////////////////////////////////////////////////////////////
//create the DIV for the coloured level numbers
function uiCreateDorf1CenterNumbers(arrBA)
{
   

   if ( TB3O.O[38] === "1" )
   {
      var villageMap = $g("village_map");
      if ( villageMap )
      {
         var i, id;
         var lvlNodesList = villageMap.getElementsByClassName("level");

         for ( i = 0, id = 0; i < lvlNodesList.length; ++i )
         {
            var crtLevel = parseInt10(lvlNodesList.item(i).textContent);
            do { ++id; } while ( crtLevel != TB3O.ActiveVillageInfo.b[id][1] && id < 18 );

            uiSetCenterNumberState(lvlNodesList.item(i), arrBA[id][0], false);
         }
      }
   }
   
}


//////////////////////////////////////////////////////////////////////
function uiCreateDorf1AttDefInfoSign()
{
   var aContainer = null;
   var tTable = $g("troops");
   if ( tTable )
   {
      aContainer = tTable.firstElementChild.firstElementChild.firstElementChild;
   }

   uiCreateAttDefInfoSign(tTable, aContainer, true);
}


//////////////////////////////////////////////////////////////////////
function getCommonDorf1Info(villageId, aDoc)
{
   var bSuccess = setTroopMovements(villageId,aDoc) &&
                  setBiP(villageId, aDoc);

   var villageInfo = TB3O.VillagesInfo[villageId];
   if ( !villageInfo.type )
   {
      villageInfo.type = getVillageType(aDoc);
   }
   bSuccess = bSuccess && !!villageInfo.type;

   return bSuccess;

   //-----------------------------------------------------------------
   function getVillageType(aDoc)
   {
      var rDiv = $xf("//div[starts-with(@id,'village_map')]",'f',aDoc,aDoc);
      var vType;
      if ( rDiv ) 
      {
         if ( rDiv.className )
         {  
            rDiv.className.search(/f(\d+)/); 
            vType = parseInt10(RegExp.$1);
         }
      }
      else
      {
         rDiv = $xf("//div[starts-with(@id,'f')]",'f',aDoc,aDoc);
         if ( rDiv )
         {
            rDiv.id.search(/f(\d+)/);
            vType = parseInt10(RegExp.$1);
         }
      }
      vType = (isFinite(vType) && vType > 0 && vType <= 12) ? vType : undefined;

      

      return vType;
   }
}

//////////////////////////////////////////////////////////////////////
// Used for updates info from refresh callbacks
function getDorf1Info(villageId, aDoc)
{
   

   var bSuccess = setVillageRes(villageId,aDoc) && getCommonDorf1Info(villageId,aDoc);

   if ( bSuccess )
   {
      TB3O.ResInfoTotals = getResInfoTotals();
   }

   
   return bSuccess;
}


//////////////////////////////////////////////////////////////////////
// Scan and store dorf1 specific info
function processDorf1() 
{
   

   TB3O.pageSelector = "dorf1";

   getCommonDorf1Info(TB3O.ActiveVillageId, document);

   var villageInfo = TB3O.ActiveVillageInfo;
   if ( villageInfo.type )
   {
      getOuterBuildings(document, TB3O.ActiveVillageInfo.b, villageInfo.type);
   }

   
}

//////////////////////////////////////////////////////////////////////
// Create the resource fields upgrade table
function uiCreateResUpgradeTable(tableId, villageId, resourcesInfo, arrBA)
{
   var id, gid, crtLevel;
   var i, j, xi;

   var grid = new Array(4);
   for ( i = 0; i < 4; i++ )
   {
      grid[i] = new Array(26);
      for ( j = 0; j <= 25; j++ )
      {
         grid[i][j] = 0;
      }
   }

   var b = TB3O.VillagesInfo[villageId].b;
   for ( id = 1; id <= 18; id++ )
   {
      gid = b[id][0];
      crtLevel = b[id][1];
      grid[gid - 1][crtLevel] = id;
   }

   var bsUT = false;
   var nE = [0, 0, 0, 0];
   var nR = 0;

   //create the resource fields upgrade table
   var aTb = $t([['id', tableId], ['class', 'tbUpgTable']]);
   var aRow1 = $r();

   aTb.appendChild(aRow1);

   for ( i = 0; i < 4; i++ )
   {
      gid = i + 1;

      var td1 = $c(gIc["r" + (i + 1)], [['class', 'tb3uthc']]);
      aRow1.appendChild(td1);

      for ( j = 0; j < 25; j++ )
      {
         id = grid[i][j];

         if ( id > 0 && arrBA[id][0] !== 4 )
         {
            nE[i] += 1;
            if ( nR < nE[i] )
            {
               ++nR;
               var bRow = $r();
               for ( xi = 0; xi < 4; xi++ )
               {
                  bRow.appendChild($c("", [['class', 'tb3utbc']]));
               }
               aTb.appendChild(bRow);
            }

            bsUT = true;

            var tb2 = $t();
            aTb.rows[nE[i]].cells[i].appendChild(tb2);
            var aRow3 = $r();
            addChildren(aRow3, 
               [ $e("td",[],
                    $e("a", [['href', "build.php?id=" + id]], 
                         $e("div", [['class', 'tbImgCnt']], [
                             $img([['src', image["upgr" + i]], ['title', T('RES' + gid)]]),
                             uiCreateCNDiv(j, arrBA[id][0], false)
                         ])
                      )
                   ),
                 $e("td",[],uiCreateBuildingResAndTimeTable(arrBA, resourcesInfo, gid, id, j))
               ]);
            tb2.appendChild(aRow3);
         }
      }
   }

   return bsUT ? aTb : null;
}

//////////////////////////////////////////////////////////////////////
function uiCreateResUpgradeWidget(resourcesInfo,arrBA)
{
   

   if ( TB3O.O[37] === '1')
   {
      var oldtb = $g('tb_resupg');
      removeElement(oldtb);
      if ( oldtb )
      {
         uiFloatWindow_Remove('resupgTT');
      }

      var tb = uiCreateResUpgradeTable('tb_resupg', TB3O.ActiveVillageId, resourcesInfo, arrBA);

      if ( tb )
      {
         var dxy = TB3O.O[88].split("|");
         $df(682, dxy[0], dxy[1], " ", 'resupg', "resupgTT", false, tb);
      }
   }

   
}

//////////////////////////////////////////////////////////////////////
function uiRefreshDorf1()
{
   var arrBA = new Array(19);
   var resourcesInfo = getActualResourcesInfoNow(TB3O.ActiveVillageInfo.r);
   var refreshTimeout = getBuildingsAvailability(arrBA, 1,18, TB3O.ActiveVillageId, TB3O.ActiveVillageInfo.b, resourcesInfo);

   uiCreateDorf1CenterNumbers(arrBA);
   uiCreateResUpgradeWidget(resourcesInfo,arrBA);

   if ( isFinite(refreshTimeout) )
   {
      setTimeout(uiRefreshDorf1,refreshTimeout*1000);
   }
}

//////////////////////////////////////////////////////////////////////
function uiModifyDorf1()
{
   

   if ( TB3O.O[38] === "1" || TB3O.O[37] === '1' )
   {
      uiRefreshDorf1();
   }
   uiCreateDorf1AttDefInfoSign(); 

   
}

//////////////////////////////////////////////////////////////////////
//create the DIV for the coloured level numbers
function uiCreateDorf2CenterNumbers(arrBA)
{
   

   if ( TB3O.O[43] === "1" && TB3O.O[44] === "1" )
   {
      var aLevelsContainer = $g("levels");
      if ( aLevelsContainer )
      {
         addClass(aLevelsContainer,"on");

         if ( TB3O.O[44] === "1" )
         {
            var lvlNodesList = aLevelsContainer.getElementsByTagName("div");
            var reId = /aid(\d+)/;
            for (var i = 0; i < lvlNodesList.length; ++i )
            {
               var aLvlNode = lvlNodesList.item(i);
               if ( reId.exec(aLvlNode.className) )
               {
                  var id = parseInt10(RegExp.$1);
                  var bInfo = TB3O.BuildingsInfo.getInfoById(id);
                  if ( arrBA[id] )
                  {
                     uiSetCenterNumberState(aLvlNode, arrBA[id][0], bInfo.uplvl > bInfo.lvl);
                  }
               }
            }
         }
      }

   }
   
}

//////////////////////////////////////////////////////////////////////
// Scan and store dorf2 specific info
function processDorf2() 
{
   

   TB3O.pageSelector = "dorf2";
   setBiP(TB3O.ActiveVillageId, document);

   TB3O.BuildingsInfo = new BuildingsInfo();
   getInnerBuildings(document, TB3O.BuildingsInfo);

   // sync TB3O.BuildingsInfo with BiP
   TB3O.BuildingsInfo.syncWithBiP(TB3O.ActiveVillageInfo.BiP);
   TB3O.BuildingsInfo.exportB(TB3O.ActiveVillageInfo.b,false);

   var id, gid, crtLevel, b = TB3O.ActiveVillageInfo.b;

   //set the required cookies (OBSOLETE)
   for ( id = 19; id < b.length; ++id )
   {
      if ( b[id] )
      {
         gid = b[id][0];
         crtLevel = b[id][1];
         switch ( gid )
         {
            case 25:
               TB3O.d2spB[0] = 25;
               break; //residence is available
            case 26:
               TB3O.d2spB[0] = 26;
               break; //palace is available
            case 19:
               TB3O.d2spB[1] = 19;
               if ( TB3O.U[1] === '' ) { getRaceFromBarracks(); }
               break;
            case 29:
               TB3O.d2spB[2] = 29;
               break;
            case 21:
               TB3O.d2spB[3] = 21;
               break;
            case 20:
               TB3O.d2spB[4] = 20;
               break;
            case 30:
               TB3O.d2spB[5] = 30;
               break;
            case 14:
               TB3O.d2spB[6] = crtLevel;
               break;
            case 24:
               TB3O.d2spB[7] = 24;
               break;
            case 41:
               TB3O.d2spB[8] = crtLevel;
               break;
         }
      }
   }
   setGMcookieV2('specBuildings', TB3O.d2spB, TB3O.ActiveVillageId);

   
}


//////////////////////////////////////////////////////////////////////
// Create the buildings upgrade table
function uiCreateBldUpgradeTable(tableId, villageId, resourcesInfo, arrBA, buildingsInfo)
{
   var i;
   var intCpR = 3;
   var bsUT = false;

   var aTb = $t([['id', tableId], ['class', 'tbUpgTable']]);
   var iFilledCellsCount = 0;

   var tb2, aRow, aCell;

   for ( i = 0; i < buildingsInfo._.length; ++i )
   {
      var bInfo = TB3O.BuildingsInfo._[i];
      var id = bInfo.id;
      var gid = bInfo.gid;
      var crtLevel = bInfo.uplvl;

      //create a new cell in the building uprade table if necessary
      if ( gid > 0 && crtLevel >= 0 && arrBA[id][0] !== 4 )
      {
         var strNewLevel = ( crtLevel === bInfo.lvl ) ? "" : " (\u2191 " + (crtLevel + 1) + ")";

         //create a new row if necessary
         if ( (iFilledCellsCount % intCpR) === 0 )
         {
            aRow = $r();
            aTb.appendChild(aRow);
         }
         iFilledCellsCount++;
         bsUT = true;


         aCell = $c("", [['class', 'tb3utbc'], ['style', 'width:' + Math.floor(100 / intCpR) + '%;']]);
         aRow.appendChild(aCell);

         tb2 = $t();
         aCell.appendChild(tb2);

         var href = "build.php?id=" + id;

         addChildren(tb2,[
            $e("tr", [],
               $e("td", [['colspan', "2"], ['class', 'center']],
                  $a(bInfo.title + strNewLevel, [['href', href]]))),
            $e("tr", [], [
               $e("td", [],
                  $e("a", [['href', href]],
                     $img([['class', bInfo.imgClass],['src', bInfo.imgSrc],['title',bInfo.name]]))),
               $e("td", [], uiCreateBuildingResAndTimeTable(arrBA, resourcesInfo, gid, id, crtLevel))
            ])

         ])
      }
   }

   if ( bsUT )
   {
      while ( (iFilledCellsCount % intCpR) !== 0 )
      {
         aRow.appendChild($c());
         iFilledCellsCount++;
      }
   }

   return bsUT ? aTb : null;
}


//////////////////////////////////////////////////////////////////////
function uiCreateBldUpgradeWidget(resourcesInfo, arrBA)
{
   

   if ( TB3O.O[41] === '1' )
   {
      var oldtb = $g('tb_bldupg');
      removeElement(oldtb);
      if ( oldtb )
      {
         uiFloatWindow_Remove('bupgTT');
      }

      var tb = uiCreateBldUpgradeTable('tb_bldupg', TB3O.ActiveVillageId, resourcesInfo, arrBA, TB3O.BuildingsInfo);

      if ( tb )
      {
         var dxy = TB3O.O[89].split("|");
         $df(682, dxy[0], dxy[1], " ", 'bupg', "bupgTT", false, tb);
      }
   }

   
}

//////////////////////////////////////////////////////////////////////
function uiRefreshDorf2()
{
   var arrB = new Array(41);
   var arrBA = new Array(41);
   var resourcesInfo = getActualResourcesInfoNow(TB3O.ActiveVillageInfo.r);
   TB3O.BuildingsInfo.exportB(arrB,true);
   var refreshTimeout = getBuildingsAvailability(arrBA, 19,40, TB3O.ActiveVillageId, arrB, resourcesInfo);

   uiCreateDorf2CenterNumbers(arrBA);
   uiCreateBldUpgradeWidget(resourcesInfo, arrBA);

   if ( isFinite(refreshTimeout) )
   {
      setTimeout(uiRefreshDorf2,refreshTimeout*1000);
   }
}


//////////////////////////////////////////////////////////////////////
function uiModifyDorf2()
{
   

   if ( TB3O.O[43] === "1" || TB3O.O[41] === '1' )
   {
      if ( TB3O.O[42] === '1')  
      { 
         TB3O.BuildingsInfo.sortByName();
      }

      uiRefreshDorf2();
   }

   
}

//////////////////////////////////////////////////////////////////////
function Overview(aDoc)
{
   this.origT = $xf("//div[@id='" + ID_CONTENT + "']//table[@id='overview' or @id='ressources' or @id='warehouse' or @id='culture_points' or @id='troops' or @class='vil_troops']",'f',aDoc,aDoc);
   this.secRowText = [];
   this.plAc = false;

   var menu = searchAndParseSubMenu(aDoc);
   if ( menu )
   {
      var i, aLinks = 0;
      for ( i = 0; i < menu.items.length; ++i )
      {
         if ( menu.items[i][1] !== "" ) { ++aLinks; }
      }
      this.plAc = ( aLinks > 1 );
   }

   

   if ( this.origT )
   {
      this.secRowText = getHeaders(this.origT);
      if ( this.secRowText.length === 0 ) { this.origT = null; } //disable following processing

      
   }

   //-------------------------------------------------------------
   function getHeaders(tbl)
   {
      var i;
      var origSecRow = tbl.rows[0].cells;
      var arrSecRow = [];

      for ( i = 0; i < origSecRow.length; i++ )
      {
         arrSecRow[i] = origSecRow[i].textContent;
      }

      return arrSecRow;
   }
}

//////////////////////////////////////////////////////////////////////
Overview.prototype.getTableTitle = function(tabNo)
{
   return null; // Travian 4 not use dorf3 table title
};

//////////////////////////////////////////////////////////////////////
// return column index for merchant info 
Overview.prototype.getMerchantCol = function(tabNo)
{
   var mi = 0;

   if ( this.origT )
   {
      switch ( this.origT.id )
      {
         case "overview":   mi = 4; break;
         case "ressources": mi = 5; break;
      }
   }

   return mi;
};

//////////////////////////////////////////////////////////////////////
function uiModifyDorf3_TabsHeader()
{
   var menu = $xf("//div[@id='" + ID_CONTENT + "']//div[contains(@class,'subNavi')]//span", 'l');
   var i;

   for ( i = 0; i < menu.snapshotLength; i++)
   {
      var aSpan = menu.snapshotItem(i);
      var parentNode = aSpan.parentNode;
      if ( TAG(parentNode) !== "A" )
      {
         parentNode.removeChild(aSpan);
         parentNode.appendChild($e("a",[['href',getDorf3Url('dorf3.php',i+1)]],aSpan));
      }
   }
   

   return menu;
}

//////////////////////////////////////////////////////////////////////
Overview.prototype.getMerchantsInfo  = function(tabNo)
{
   var i;
   var vRows,vRow,vCount,villageId;

   var merchantsInfo = {};

   if ( this.origT )
   {
      var mi = this.getMerchantCol(tabNo);
      if ( mi )
      {
         //get the merchant array
         vRows = this.origT.tBodies[0].rows;
         vCount = vRows.length;
         for ( i = 0; i < vCount; ++i )
         {
            vRow = vRows[i].cells;
            villageId = getNewdidFromChild(vRow[0]);
            if ( villageId )
            {
               merchantsInfo[villageId] = vRow[mi].innerHTML;
            }
         }
      }
   }
   return merchantsInfo;
};

//////////////////////////////////////////////////////////////////////
function processDorf3_Tab1(origT)
{
   


   
}

//////////////////////////////////////////////////////////////////////
function processDorf3_Tab2(origT)
{
   

   var vRows,vRow,vCount;
   var i, j, villageId, resourcesInfo;
   var v;

   vRows = origT.tBodies[0].rows;
   vCount = vRows.length;
   for ( i = 0; i < vCount; ++i )
   {
      vRow = vRows[i].cells;
      villageId = getNewdidFromChild(vRow[0]);
      if ( villageId )
      {
         resourcesInfo = TB3O.VillagesInfo[villageId].r;

         for ( j = 0; j < 4; ++j )
         {
            v = parseInt10(vRow[j+1].textContent.replace(/[., ]/,""));
            resourcesInfo.Res[j] = v;
            if ( v > resourcesInfo.Cap[j] )
            {
               resourcesInfo.Cap[j] = v;
            }
         }
         resourcesInfo.dUpd = new Date(TB3O.serverTime.getTime());
      }
   }

   
}


//////////////////////////////////////////////////////////////////////
function processDorf3_Tab3(origT)
{
   

   var vRows,vRow,vCount,el;
   var i, yi, j, villageId, resourcesInfo;
   var v, r;
   var ttFillG,ttFillGest,EPpH;

   vRows = origT.tBodies[0].rows;
   vCount = vRows.length;
   for ( i = 0; i < vCount; ++i )
   {
      vRow = vRows[i].cells;
      villageId = getNewdidFromChild(vRow[0]);
      if ( villageId )
      {
         resourcesInfo = TB3O.VillagesInfo[villageId].r;

         for ( yi = 1; yi <= 5; ++yi )
         {
            if ( yi === 4 ) { continue; }
            j = yi - 1;
            if ( j === 4 ) { j = 3; }

            v = vRow[yi].getAttribute("title");
            if ( v )
            {
               r = v.split("/");

               if ( r.length === 2 )
               {
                  resourcesInfo.Res[j] = parseInt10(r[0]);
                  resourcesInfo.Cap[j] = parseInt10(r[1]);
                  resourcesInfo.dUpd = new Date(TB3O.serverTime.getTime());
               }
            }
         }

         // try to determine EPpH for crop 
         ttFillG = toSeconds(vRow[6].textContent);

         if (  isNaN(ttFillG) )
         {
            resourcesInfo.EPpH[3] = 0;
         }
         else
         {
            ttFillGest = getSecondsToFill(resourcesInfo,3);

            if ( Math.abs(ttFillGest - ttFillG) > 1 )
            {
               el = vRow[6].firstChild;
               if ( hasClass(el,"crit") )
               {
                  EPpH = -Math.floor((resourcesInfo.Res[3]/ttFillG) * 3600);
               }
               else
               {
                  EPpH = Math.floor(((resourcesInfo.Cap[3] - resourcesInfo.Res[3]) / ttFillG) * 3600);
               }
               resourcesInfo.EPpH[3] = EPpH;

            }
         }
      }
   }
   
}

//////////////////////////////////////////////////////////////////////
function getDefaultDorf3Tab()
{
   var defaultTab = TB3O.O[93];

   
   if ( defaultTab > 6 ) { defaultTab = 1; }
   

   return defaultTab;
}

//////////////////////////////////////////////////////////////////////
function getDorf3Url(url, tabNo)
{
   if ( tabNo > 1 ) 
   {
      url = url + "?s=" + tabNo;
   }

   return url;
}

//////////////////////////////////////////////////////////////////////
function modifyDorf3Url(url)
{
   return getDorf3Url(url, getDefaultDorf3Tab());
}

//////////////////////////////////////////////////////////////////////
// scan page if need
function processDorf3()
{
   

   var defaultTab = 1;

   TB3O.pageSelector = "dorf3";

   if ( crtUrl.queryKey.s )
   {
      defaultTab = parseInt10(crtUrl.queryKey.s);
   }
   TB3O.O[93] = defaultTab;
   saveTBOptions();

   TB3O.Overview = new Overview(document);
   TB3O.MerchantsInfo = TB3O.Overview.getMerchantsInfo(defaultTab);

   if ( TB3O.Overview.plAc && TB3O.Overview.origT )
   {
      switch ( defaultTab )
      {
         case 1: processDorf3_Tab1(TB3O.Overview.origT); break;

         case 2: processDorf3_Tab2(TB3O.Overview.origT); break;

         case 3: processDorf3_Tab3(TB3O.Overview.origT); break;
      }
   }

   
}

//////////////////////////////////////////////////////////////////////
// Top level function for dorf3 modification
function uiModifyDorf3()
{
   

   var origT = TB3O.Overview.origT;
   var tabNo = getDefaultDorf3Tab();

   uiModifyDorf3_TabsHeader();

   if ( origT )
   {
      prefferTB = !TB3O.Overview.plAc || tabNo === 2 || tabNo === 3;

      
         if ( prefferTB )
         {
            origT.style.display = "none";
            uiCreateDorf3Tab(origT.parentNode,origT,tabNo);
         }
         else
         {
            uiModifyVillagesOverview(origT);
         }
      
   }
   
}

//////////////////////////////////////////////////////////////////////
function uiCreateDorf3Tab(parent,nextSibling,tabNo) 
{
   var createFunc = [createD3Tb_Tab1, createD3Tb_Tab2,createD3Tb_Tab3,createD3Tb_Tab4,createD3Tb_Tab5];
   var fillFunc =   [  fillD3Tb_Tab1,   fillD3Tb_Tab2,  fillD3Tb_Tab3,  fillD3Tb_Tab4,  fillD3Tb_Tab5];
   var aNewTb =  null;

   if ( tabNo >= 1 && tabNo <= 5 )
   {
      aNewTb = createFunc[tabNo-1]();
      if ( aNewTb )
      {
         parent.insertBefore(aNewTb,nextSibling);
         fillFunc[tabNo-1]();
      }
   }

   return aNewTb;
}


//////////////////////////////////////////////////////////////////////
function uiSwitchDorf3Tab(tabNo) 
{
   var parent,next;
   var aNewTb;
   var aOldTb = $g("dorf3table");

   if ( aOldTb ) 
   {
      TB3O.O[93] = tabNo;
      saveTBOptions();

      parent = aOldTb.parentNode;
      next = aOldTb.nextSibling;
      parent.removeChild(aOldTb);

      aNewTb = uiCreateDorf3Tab(parent,next,tabNo);
      if ( tabNo === 5 ) { uiAddTroopInfoTooltips(aNewTb); }
   }
}


//////////////////////////////////////////////////////////////////////
function uiSwapTableRows(tbl,i,j,mapId2Index,mapIndex2Id) 
{
   var rowI = tbl.rows[i];
   var rowJ = tbl.rows[j];
   var IdI = mapIndex2Id[i];
   var IdJ = mapIndex2Id[j];
   var tmpPos;

   var rowTmp = rowI.parentNode.replaceChild(rowJ.cloneNode(true),rowI);
   rowJ.parentNode.replaceChild(rowTmp,rowJ);

   tmpPos = mapId2Index[IdJ];
   mapId2Index[IdJ] = mapId2Index[IdI];
   mapId2Index[IdI] = tmpPos;

   mapIndex2Id[j] = IdI;
   mapIndex2Id[i] = IdJ;
}


//////////////////////////////////////////////////////////////////////
function uiModifyVillagesOverview(t)
{
   var tbody,tr;
   var bAllowCustomization = (TB3O.O[91] === "1") && TB3O.VillagesList;
   var reqOrderIds,curOrderIds,mapId2Index = {};
   var i,pos,len;

   if ( hasClass(t,"vil_troops") ) return; // not supported yet

   if ( bAllowCustomization )
   {
      reqOrderIds = getVillagesOrder(TB3O.VillagesInfo);
      curOrderIds = getVillagesOrder(TB3O.VillagesInfo,"original");
      len = curOrderIds.length;
      tbody = t.tBodies[0];

      for (var villageId in TB3O.VillagesInfo )
      {
         mapId2Index[villageId] = TB3O.VillagesInfo[villageId].posInListOrg;
      }

      // restore villages order
      for ( pos = 0; pos < len; ++pos )
      {
          if ( reqOrderIds[pos] !== curOrderIds[pos] )
          {
             uiSwapTableRows(tbody, pos, mapId2Index[reqOrderIds[pos]], mapId2Index, curOrderIds);
          }
      }

      for ( i = 0; i < TB3O.VillagesCount; i++ )
      {
         // restore separator
         if ( TB3O.VillagesList.getSeparatorState(i) )
         {
            tr = tbody.rows[i];
            addClass(tr,"tb3sep");
         }
      }
   }
}

//////////////////////////////////////////////////////////////////////
// villageId === null if tooltip for totals
function uiCreateDorf3Tooltip(tabNo,villageId,col)
{
   var content = null;
   if ( villageId )
   {
      if ( (tabNo === 2 && col >= 1 && col <= 5) || 
           (tabNo === 3 && col >= 1 && col <= 6) )
      {
         content = uiCreateResourceTooltip(villageId);
      }
      else if ( tabNo === 1 && col === 1 )
      {
         content = uiCreateTMTable(villageId);
      }
      else if ( tabNo === 1 && col === 2 )
      {
         content = uiCreateBiPTable(villageId);
      }
   }
   return content;
}

//////////////////////////////////////////////////////////////////////
function uiAddD3TbToolbar(parent, tabNo, bSepBefore) 
{
   if ( bSepBefore ) { parent.appendChild($e("span","&nbsp;&nbsp;")); }

   parent.appendChild(uiCreateTool("reload",
                                   T( TB3O.Overview.plAc ? 'REFRESHP' : 'UPDALLV'), 
                                   bind(onRefreshAllVillages,[tabNo])));

   if ( !bSepBefore ) { parent.appendChild($e("span","&nbsp;&nbsp;")); }
}

//////////////////////////////////////////////////////////////////////
function uiCreateD3TbVillageHeader(tabNo) 
{
   aCell = $c();
   if ( !TB3O.Overview.getTableTitle(tabNo) )
   {
      uiAddD3TbToolbar(aCell, tabNo, false);
   }
   aCell.appendChild($txt(TB3O.Overview.secRowText[0]));

   return aCell;
}

//////////////////////////////////////////////////////////////////////
function createD3TbSkeleton(tabNo, columns) 
{
   var aTb, aHead, aTh, aTr, aSpan;
   var title = TB3O.Overview.getTableTitle(tabNo);

   aTb = $t([['id', 'dorf3table'],['class','tb3d3_' + tabNo]]);
   aHead = $e("thead");
   aTb.appendChild(aHead);

   if ( title )
   {
      aTr = $r();
      aHead.appendChild(aTr);

      aTh = $th([['colspan', columns]]);
      aTr.appendChild(aTh);

      aSpan = $e("span",title);
      aTh.appendChild(aSpan);

      uiAddD3TbToolbar(aTh, tabNo, true);
   }

   aTb.appendChild($e("tbody"));
   return aTb;
}

//////////////////////////////////////////////////////////////////////
function createD3TbRows(aTb, maxTD, tabNo)
{
   var tr,td,td1,nobr,aLink;

   var i,yi;
   var mapPos2Id = getVillagesOrder(TB3O.VillagesInfo);
   var villageId,villageInfo;
   var tbody = aTb.tBodies[0];

   var bAllowCustomization = (TB3O.O[91] === "1") && TB3O.VillagesList;

   for (i = 0; i < mapPos2Id.length; i++)
   {
      villageId = mapPos2Id[i];
      villageInfo = TB3O.VillagesInfo[villageId];

      tr = $r();

      // draw separator
      if ( bAllowCustomization )
      {
         if ( TB3O.VillagesList.getSeparatorState(i) )
         {
            tr.className += " tb3sep";
         }
      }

      // active village?
      if ( villageId == TB3O.ActiveVillageId )
      {
         tr.className += " hl";
      }

      //first cell
      td1 = $c();
      td1.className = 'tb3name';

      nobr = $e("NOBR");

      if ( !TB3O.Overview.plAc && (tabNo === 2 || tabNo === 3) )
      {
         aLink = $a("",[['href', jsVoid]]);
         aLink.appendChild($img([
                           ['class', 'online5'],
                           ['src',    gIc["b5"] ], 
                           ['title',  T('ACTUALIZAR') + " " + villageInfo.name],
                           ['id',     "aldea" + villageId + "_boton"],
                           ['style', 'margin:0px;']
                         ]));

         aLink.addEventListener("click", bind(refreshVillageV2,[villageId, tabNo]), false);
         nobr.appendChild(aLink);
         nobr.appendChild($e("span","&nbsp;"));
      }

      aLink = $a(villageInfo.name, [['href', 'dorf1.php?newdid=' + villageId]]);

      nobr.appendChild($e("SPAN",aLink));
      td1.appendChild(nobr);
      tr.appendChild(td1);

      //second cell and the other ones
      for ( yi = 0; yi < maxTD; yi++ )
      {
         td = $c("-");
         td.className = 'tb3cnb';
         td.id = "aldea" + villageId + "_" + tabNo + "_" + (yi + 2);
         if (yi === (maxTD - 1) && (tabNo === 1 || tabNo === 2)) 
         { 
            td.innerHTML = TB3O.MerchantsInfo[villageId]; 
         }
         uiAddTooltip(td,bind(uiCreateDorf3Tooltip,[tabNo,villageId,yi+1]));

         tr.appendChild(td);
      }
      tbody.appendChild(tr);
   }
}


//////////////////////////////////////////////////////////////////////
function createD3TbTotals(aTb, maxTD, tabNo)
{
   var trSeparator,trSum,ts,ts1;
   var villageId;
   var merchants,totalMerchants = [0, 0];
   var yi,posX;

   //Separator row
   trSeparator = $r([['class', 'tb3r']]);
   trSeparator.appendChild($c("", [['class', 'tb3rnb tbEmpty'], ["colspan", "" + (maxTD + 1)]]));
   aTb.appendChild(trSeparator);

   //sum row
   trSum = $r([['class', 'tb3r tbTotal']]);

   //first sum cell
   ts1 = $td([['class', 'tbTitle']], T('TOTAL'));
   trSum.appendChild(ts1);

   for ( villageId in TB3O.MerchantsInfo )
   {
      merchants = TB3O.MerchantsInfo[villageId].split("/");
      posX = merchants[0].lastIndexOf(">");
      totalMerchants[0] += parseInt10(merchants[0].substring(posX + 1));
      posX = merchants[1].indexOf("<");
      totalMerchants[1] += parseInt10(merchants[1].substring(0, posX));
   }

   for ( yi = 0; yi < maxTD; yi++ )
   {
      ts = null;

      if ( yi === maxTD - 1)
      {
         ts = $c("" + totalMerchants[0] + "/" + totalMerchants[1], [['class', 'tb3cnb']]);
      }
      else if (tabNo === 4 && yi === 1)
      {
         ts = $c("", [["colspan", "2"], ['class', 'tb3cnb']]);
      }
      else if (tabNo === 4 && yi === 2)
      {
      }
      else
      {
         ts = $c("-", [['class', 'tb3cnb']]);
      }

      if ( ts )
      {
         ts.id = "aldea_s_" + tabNo + "_" + (yi + 2);
         uiAddTooltip(ts,bind(uiCreateDorf3Tooltip,[tabNo,null,yi+1]));
         trSum.appendChild(ts);
      }
   }
   aTb.appendChild(trSum);
}	

//////////////////////////////////////////////////////////////////////
function onDorf3CheckOption(opt)
{
   TB3O.O[opt] = this.checked ? "1" : "0";
   saveTBOptions();
}

//////////////////////////////////////////////////////////////////////
function uiCreateDorf3Checkbox(opt)
{
   var aCB;

   aCB = $i([['type', 'checkbox'],['value', '1']]);

   aCB.checked = (TB3O.O[opt] === "1");
   aCB.addEventListener('click', bind(onDorf3CheckOption,[opt]), false);
   return aCB;
}

//////////////////////////////////////////////////////////////////////
function createD3Tb_Tab1()
{
   var aTb,trTop2,tdTop2,aCB,xi;

   aTb = createD3TbSkeleton(1,5);

   trTop2 = $r();
   trTop2.appendChild(uiCreateD3TbVillageHeader(1));
   for (xi = 1; xi < TB3O.Overview.secRowText.length; xi++)
   {
      tdTop2 = $c(TB3O.Overview.secRowText[xi]);
      if (xi === 3)
      {
         tdTop2.appendChild(uiCreateDorf3Checkbox(94));
      }
      trTop2.appendChild(tdTop2);
   }
   aTb.firstChild.appendChild(trTop2);
   createD3TbRows(aTb, 4, 1);
   return aTb;
}

//////////////////////////////////////////////////////////////////////
function createD3Tb_Tab2()
{
   var aTb,trTop2,tdTop2,iHTML,xi;

   aTb = createD3TbSkeleton(2,7);
   trTop2 = $r();
   trTop2.appendChild(uiCreateD3TbVillageHeader(2));
   for (xi = 1; xi < 7; xi++)
   {
      iHTML = '';
      switch (xi)
      {
         case 1:
         case 2:
         case 3:
         case 4:
            iHTML = gIc["r" + xi];
            break;
         case 5:
            iHTML = gIc["r4"] + "/" + gIc["clock"];
            break;
         case 6:
            iHTML = TB3O.Overview.secRowText[TB3O.Overview.getMerchantCol()];
            break;
      }
      tdTop2 = $c(iHTML);
      trTop2.appendChild(tdTop2);
   }
   aTb.firstChild.appendChild(trTop2);
   createD3TbRows(aTb, 6, 2);
   createD3TbTotals(aTb, 6, 2);
   return aTb;
}

//////////////////////////////////////////////////////////////////////
function createD3Tb_Tab3()
{
   var aTb,trTop2,tdTop2,iHTML,xi;

   aTb = createD3TbSkeleton(3,7);
   trTop2 = $r();
   trTop2.appendChild(uiCreateD3TbVillageHeader(3));
   for (xi = 1; xi < 7; xi++)
   {
      iHTML = '';
      switch (xi)
      {
         case 1:
         case 2:
         case 3:
            iHTML = gIc["r" + xi];
            break;
         case 5:
            iHTML = gIc['r4'];
            break;
         case 4:
         case 6:
            iHTML = gIc["clock"];
            break;
      }
      tdTop2 = $c(iHTML);
      trTop2.appendChild(tdTop2);
   }
   aTb.firstChild.appendChild(trTop2);
   createD3TbRows(aTb, 6, 3);
   return aTb;
}

//////////////////////////////////////////////////////////////////////
function createD3Tb_Tab4()
{
   var aTb,trTop2,tdTop2,iHTML,xi;

   aTb = createD3TbSkeleton(4,5);
   trTop2 = $r();
   trTop2.appendChild(uiCreateD3TbVillageHeader(4));
   for (xi = 1; xi < 5; xi++)
   {
      iHTML = '';
      switch (xi)
      {
         case 1:
            iHTML = T('CPPERDAY');
            break;
         case 2:
            iHTML = T('PARTY');
            break;
         case 3:
            iHTML = T('TROPAS');
            break;
         case 4:
            iHTML = T('SLOT');
            break;
      }
      tdTop2 = $c(iHTML);
      if ( xi > 0 )
      {
         tdTop2.appendChild(uiCreateDorf3Checkbox(94+xi));
      }
      trTop2.appendChild(tdTop2);
   }
   aTb.firstChild.appendChild(trTop2);
   createD3TbRows(aTb, 4, 4);
   createD3TbTotals(aTb, 4, 4);
   return aTb;
}

//////////////////////////////////////////////////////////////////////
function createD3Tb_Tab5()
{
   var aTb,trTop2,tdTop2,img,xi;
   aTb = createD3TbSkeleton(5,12);

   trTop2 = $r();
   trTop2.appendChild(uiCreateD3TbVillageHeader(5));

   for ( xi = 0; xi < 10; xi++ )
   {
      img = createTroopImage(xi);
      if ( img )
      {
         tdTop2 = $c();
         tdTop2.appendChild(img);
      }
      else
      {
         tdTop2 = $c("-", [["class", "c"]]);
      }
      trTop2.appendChild(tdTop2);
   }
   tdTop2 = $c(gIc["hero"]);
   trTop2.appendChild(tdTop2);
   aTb.firstChild.appendChild(trTop2);
   createD3TbRows(aTb, 11, 5);
   createD3TbTotals(aTb, 11, 5);
   return aTb;
}


//////////////////////////////////////////////////////////////////////
function fillD3TbRow_Tab1(villageId)
{
   var arrBiP, arrTM;
   var villageInfo;
   var crtTime = new Date().getTime();
   var xi,yi,j;
   var aCell,b,c;

   villageInfo = TB3O.VillagesInfo[villageId];

   arrBiP = villageInfo.BiP;
   arrTM  = villageInfo.TM;

   aCell = $g("aldea" + villageId + "_1_3");
   removeChildren(aCell);

   xi = 0;
   for ( j = 0; j < arrBiP.length; j++ )
   {
      var bipT = arrBiP[j].endTime;
      if ( bipT > crtTime )
      {
         if ( xi > 0 )
         {
            aCell.appendChild($txt(" "));
         }
         aCell.appendChild(I("bau",[['alt',arrBiP[j].name + " " + arrBiP[j].txtLvl + " - " + formatTimeSpan((bipT - crtTime) / 1000, 0)]]));
         ++xi;
      }
   }
   if ( xi === 0 )
   {
      aCell.appendChild($txt("-"));
   }


   aCell = $g("aldea" + villageId + "_1_2");
   c = ['-'];
   yi = 0;
   for (j = 0; j < arrTM.length; j++)
   {
      var atT = arrTM[j].fT;
      if (atT > crtTime)
      {
         var xImg;
         if (TB3O.T35 == false) xImg = '<img src="' + img("a/" + arrTM[j].type) + '" height="12px" width="12px">';
         else xImg = gIc[arrTM[j].type];
         c[yi++] = '<a href="build.php?newdid=' + villageId + '&gid=16" alt="' + arrTM[j].no + ' - ' + formatTimeSpan((atT - crtTime) / 1000, 0) + '">' + xImg + "</a>";
      }
   }
   aCell.innerHTML = c.join(" ");
}

//////////////////////////////////////////////////////////////////////
function fillD3TbRow_Tab2(villageId)
{
   var bgC,txC;
   var iX,fillPercent;
   var resourcesInfo;
   var i;
   var aCell;

   var resourcesInfo = getActualResourcesInfoNow(TB3O.VillagesInfo[villageId].r);
   var villageResKnown = ( resourcesInfo.dUpd !== undefined );

   for ( i = 0; i < 4; i++ )
   {
      aCell = $g("aldea" + villageId + "_2_" + (i + 2));
      if ( villageResKnown )
      {
         iX = Math.floor(resourcesInfo.Res[i]);
         aCell.textContent = $ls(iX);
         //background color reintroduced by suggestion of PRO$TI
         fillPercent = Math.ceil(iX / resourcesInfo.Cap[i] * 100);
         bgC = getColorForResourceBar(fillPercent);
         txC = ((fillPercent > 60 && fillPercent < 90) ? 'black' : TB3O.DFc[1]);
         $at(aCell, [['style', 'background-color:' + bgC + '; font-size:8pt; text-align:' + docDir[1] + '; color:' + txC + '; ']]);
      }
      else
      {
         aCell.textContent = "?";
      }

   }

   aCell = $g("aldea" + villageId + "_2_6");
   if ( villageResKnown )
   {
      iX = resourcesInfo.EPpH[3];
      $at(aCell, [['style', 'font-size:8pt; text-align:' + docDir[1]]]);
      uiSetEffectiveCropPpH(aCell,iX,true);
   }
   else
   {
      aCell.textContent = "?";
   }
}

//////////////////////////////////////////////////////////////////////
function fillD3TbTotals_Tab2()
{
   var i, aCell;

   for ( i = 0; i < 5; i++ )
   {
      aCell = $g("aldea_s_2_" + (i + 2));
      $at(aCell, [['style', 'font-size:8pt; text-align:' + docDir[1] + ';']]);
      if ( i === 4 )
      {
         uiSetEffectiveCropPpH(aCell,TB3O.ResInfoTotals.EPpH[3],true)
      }
      else
      {
         aCell.textContent = $ls(TB3O.ResInfoTotals.Res[i]);
      }
   }
}

//////////////////////////////////////////////////////////////////////
// Resources
function fillD3TbRow_Tab3(villageId)
{
   var resourcesInfo;
   var ttFillG,ttFillW,ttTemp;
   var fillPercent;
   var i,cellNo;
   var aCell;

   //-------------------------
   resourcesInfo = getActualResourcesInfoNow(TB3O.VillagesInfo[villageId].r);

   if ( resourcesInfo.dUpd !== undefined )
   {
      ttFillW = Infinity;
      for ( i = 0; i < 4; i++)
      {
         cellNo = i + 2;
         ttTemp = getSecondsToFill(resourcesInfo,i);

         if ( i === 3 )
         {
            cellNo = 6;
            ttFillG = ttTemp;
         }
         else
         {
            if (ttTemp < ttFillW) { ttFillW = ttTemp; }
         }
         aCell = $g("aldea" + villageId + "_3_" + cellNo);
         fillPercent = Math.round((resourcesInfo.Res[i] / resourcesInfo.Cap[i]) * 100);
         aCell.textContent = fillPercent + " %";
         $at(aCell, [['style', 'font-size:10pt; text-align:' + docDir[1] + ';' +
                      ( fillPercent >= 95 ? 'color:red' : '' )
                    ]]);
      }
      //time to empty/fill the warehouse
      uiSetTimeout($g("aldea" + villageId + "_3_5"),ttFillW,1);

      //time to empty/fill granary
      uiSetTimeout($g("aldea" + villageId + "_3_7"),ttFillG,resourcesInfo.EPpH[3]);
   }
}

//////////////////////////////////////////////////////////////////////
function fillD3TbRow_Tab5(troopsCount, villageId)
{
   //Available troops
   var arrTT;
   var i, aCell;

   if ( troopsCount && troopsCount[villageId] !== undefined ) 
   {
      arrTT = troopsCount[villageId];
   }

   for ( i = 0; i < 11; ++i )
   {
      aCell = $g("aldea" + villageId + "_5_" + (i + 2));

      if ( arrTT && arrTT[i] )
      {
         aCell.textContent = arrTT[i];
         delClass(aCell,"tb3none");
      }
      else
      {
         aCell.textContent = "-";
         addClass(aCell,"tb3none");
      }
   }
}

//////////////////////////////////////////////////////////////////////
function fillD3TbTotals_Tab5(troopsCount)
{
   //Available troops
   var villageId;
   var arrTT;
   var sumTT = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
   var i, aCell;

   if ( troopsCount  ) 
   {
      for ( villageId in troopsCount )
      {
         arrTT = troopsCount[villageId];
         for ( i = 0; i < arrTT.length; i++ )
         {
            sumTT[i] += arrTT[i];
         }
      }
   }

   //sum of the troops
   for ( i = 2; i < 13; i++ )
   {
      aCell = $g("aldea_s_5_" + i);
      if ( sumTT[i - 2] )
      {
         aCell.textContent = sumTT[i - 2];
         delClass(aCell,"tb3none");
      }
      else
      {
         aCell.textContent = "-";
         addClass(aCell,"tb3none");
      }
   }
}

//////////////////////////////////////////////////////////////////////
// Resources
function fillD3Tb_Tab1()
{
   var villageId;

   for ( villageId in TB3O.VillagesInfo )
   {
      fillD3TbRow_Tab1(villageId);
   }
}


//////////////////////////////////////////////////////////////////////
// Resources
function fillD3Tb_Tab2()
{
   var villageId;

   for ( villageId in TB3O.VillagesInfo )
   {
      fillD3TbRow_Tab2(villageId);
   }

   fillD3TbTotals_Tab2();
}

//////////////////////////////////////////////////////////////////////
// Resources
function fillD3Tb_Tab3()
{
   var villageId;

   for ( villageId in TB3O.VillagesInfo )
   {
      fillD3TbRow_Tab3(villageId);
   }
}

//////////////////////////////////////////////////////////////////////
function fillD3Tb_Tab4()
{
}

//////////////////////////////////////////////////////////////////////
// Available troops
function fillD3Tb_Tab5()
{
   var villageId;
   var troopsCount = getGMcookieV2("Troops");

   for ( villageId in TB3O.VillagesInfo )
   {
      fillD3TbRow_Tab5(troopsCount,villageId);
   }

   fillD3TbTotals_Tab5(troopsCount);
}


//////////////////////////////////////////////////////////////////////
function sheduleVillageRefresh(villageId,tabNo,timeOut)
{
   setTimeout(bind(refreshVillageV2,[villageId,tabNo]), timeOut);
   timeOut += getRndTime(999);

   return timeOut;
}

//////////////////////////////////////////////////////////////////////
function onRefreshAllVillages(tabNo)
{
   var i, randIds, villageId, aTimeOut = 0;

   
   if ( TB3O.Overview.plAc )
   {
      location.reload(true);
   }
   else
   {
      randIds = getVillagesOrder(TB3O.VillagesInfo,"random");

      for (i = 0; i < randIds.length; i++)
      {
         villageId = randIds[i];
         updD3Bullets(villageId, 5);
         aTimeOut = sheduleVillageRefresh(villageId, tabNo, aTimeOut);
      }
   }
}

//////////////////////////////////////////////////////////////////////
function onRefreshVillage(villageId, tabNo)
{
   sheduleVillageRefresh(villageId, tabNo, 0);
}

//////////////////////////////////////////////////////////////////////
function updD3Bullets(villageId, intVal)
{
   var aE = $g('aldea' + villageId + '_boton');

   if ( aE )
   {
      
         aE.className = "online" + intVal;
      
   }
}

//////////////////////////////////////////////////////////////////////
function refreshVillageV2(villageId, tabNo)
{
   
   updD3Bullets(villageId, 3);

   var fOnFailure = bind(updD3Bullets, [villageId, 4]);

   var specBcookie = getGMcookieV2("specBuildings");
   var d3specBuildings;
   if (specBcookie && specBcookie[villageId]) { d3specBuildings = specBcookie[villageId]; } 
   if (tabNo === 1)
   {
      //buildings and attacks in progress
      //fix provided by MarioCheng
      var aCell = $xf("//td[@id='aldea" + villageId + "_1_4" + "']");
      aCell.innerHTML = "-";
      //end fix

      ajaxLoadDocument("dorf1.php?newdid=" + villageId, gfOnSuccess(refreshD3Tb_Overview), fOnFailure);

      var boolUpdTroopsTraining = (TB3O.O[94] === "1");

      /*
      if ( boolUpdTroopsTraining && d3specBuildings )
      {
         //troops in training in the barracks
         var isAvBarracks = d3specBuildings[1];
         if (isAvBarracks != 0) ajaxRequest("build.php?newdid=" + villageId + "&gid=" + isAvBarracks, "GET", null, processVillage119, fOnFailure);
         //troops in training in the big barracks
         var isAvBigBarracks = d3specBuildings[2];
         if (isAvBigBarracks != 0) ajaxRequest("build.php?newdid=" + villageId + "&gid=" + isAvBigBarracks, "GET", null, processVillage119, fOnFailure);
         //troops in training in the stable
         var isAvStable = d3specBuildings[4];
         if (isAvStable != 0) ajaxRequest("build.php?newdid=" + villageId + "&gid=" + isAvStable, "GET", null, processVillage119, fOnFailure);
         //troops in training in the big stable
         var isAvBigStable = d3specBuildings[5];
         if (isAvBigStable != 0) ajaxRequest("build.php?newdid=" + villageId + "&gid=" + isAvBigStable, "GET", null, processVillage119, fOnFailure);
         //troops in training in the workshop
         var isAvWorkshop = d3specBuildings[3];
         if (isAvWorkshop != 0) ajaxRequest("build.php?newdid=" + villageId + "&gid=" + isAvWorkshop, "GET", null, processVillage119, fOnFailure);
         //troops in training in the residence/palace
         var cpbuilding = d3specBuildings[0];
         if (cpbuilding != 0) ajaxRequest("build.php?newdid=" + villageId + "&gid=" + cpbuilding, "GET", null, processVillage119, fOnFailure);
      }
      */
      //cannot get the correct request and table as no residence/palace level 10 available in test accounts
   }
   else if (tabNo === 2 || tabNo === 3)
   {
      ajaxLoadDocument("dorf1.php?newdid=" + villageId, gfOnSuccess(refreshD3Tb_Resources), fOnFailure);
   }
   else if (tabNo === 4)
   {
      var cpbuilding = d3specBuildings[0];
      if (cpbuilding != 0)
      {
         var updPCperDay = $g("d3Upd_4_2");
         var boolupdPCperDay = false;
         if (updPCperDay) boolupdPCperDay = updPCperDay.checked;
         var updSlots = $g("d3Upd_4_5");
         var boolupdSlots = false;
         if (updSlots) boolupdSlots = updSlots.checked;
         var pgAjaxRequest = "build.php?newdid=" + villageId + "&gid=" + cpbuilding;
         if (boolupdPCperDay == true) ajaxRequest(pgAjaxRequest + "&s=2", "GET", null, processVillage42, fOnFailure);
         if (boolupdSlots == true) ajaxRequest(pgAjaxRequest + "&s=4", "GET", null, processVillage45, fOnFailure);
      }
      else
      {
         updD3Bullets(villageId, 5);
         var aCell = $xf("//td[@id='aldea" + villageId + "_4_5" + "']");
         aCell.innerHTML = "0/0";
      }

      //parties thrown in the village
      updParty = $g("d3Upd_4_3");
      boolupdParty = false;
      if (updParty) boolupdParty = updParty.checked;
      if (boolupdParty == true && d3specBuildings[7] != 0) ajaxRequest("build.php?newdid=" + villageId + "&gid=24", "GET", null, processVillage43, fOnFailure);
      updSenSettlers = $g("d3Upd_4_4");
      boolupdSenSettlers = false;
      if (updSenSettlers) boolupdSenSettlers = updSenSettlers.checked;
      if (boolupdSenSettlers == true)
      {
         ajaxRequest("build.php?newdid=" + villageId + "&gid=16&j&k", "GET", null, processVillage44, fOnFailure);
      } //available senators/chiefs/settlers
   }
   else if (tabNo === 5) 
   {
      ajaxLoadDocument("build.php?newdid=" + villageId + "&gid=16&j&k", gfOnSuccess(refreshD3Tb_Troops), fOnFailure);
   }
   
   return;

   function gfOnSuccess(handler)
   {
      return function (xhr_doc)
             {
                if ( handler(tabNo, villageId, xhr_doc) )
                {
                   updD3Bullets(villageId, 2);
                }
                else
                {
                   updD3Bullets(villageId, 4);
                }
             }
   }
}

//////////////////////////////////////////////////////////////////////
function refreshD3Tb_Overview(tabNo, villageId, xhr_doc)
{
   

   var bSuccess = getDorf1Info(villageId,xhr_doc);

   if ( bSuccess )
   {
      saveVillagesInfo(TB3O.VillagesInfo);

      fillD3TbRow_Tab1(villageId);

      if ( TB3O.VillagesList ) { TB3O.VillagesList.uiRefresh(villageId); }

      if ( villageId == TB3O.ActiveVillageId ) 
      {  
         // refresh other UI?
      }
   }

   
   return bSuccess;
}

//////////////////////////////////////////////////////////////////////
function refreshD3Tb_Resources(tabNo, villageId, xhr_doc)
{
   

   var bSuccess = getDorf1Info(villageId,xhr_doc);

   if ( bSuccess )
   {
      saveVillagesInfo(TB3O.VillagesInfo);

      if ( tabNo === 2 )
      {
         fillD3TbRow_Tab2(villageId);
         fillD3TbTotals_Tab2();
      }
      else if ( tabNo === 3 )
      {
         fillD3TbRow_Tab3(villageId);
      }

      if ( TB3O.VillagesList ) { TB3O.VillagesList.uiRefresh(villageId); }

      if ( villageId == TB3O.ActiveVillageId ) 
      {  
         // refresh other UI?
      }
   }

   
   return bSuccess;
}

//////////////////////////////////////////////////////////////////////
function refreshD3Tb_Troops(tabNo, villageId, xhr_doc)
{
   

   var bSuccess = setVillageRes(villageId,xhr_doc)

   if ( bSuccess )
   {
      fillD3TbRow_Tab5(villageId);
      fillD3TbTotals_Tab5();
   }

   
   return bSuccess;
}


	function getdorf3SelectedVinfo(ad) {
		// newdid of the village
		vID = 0;
		retValue = [-1000, -1000];
		try {
			if (TB3O.T35 == false) {
				avLink = $xf("//a[@class='active_vl']", 'f', ad);
				newdid = getNewdidFromLink(avLink.href);
				aX = $xf('//a[@class="active_vl"]/../../td/table/tbody/tr/td', 'f', ad);
				if (aX) {
					X = parseInt10(aX.innerHTML.replace("(", ""));
					aY = $xf('//a[@class="active_vl"]/../../td/table/tbody/tr/td[3]', ad);
					if (aY) {Y = parseInt10(aY.innerHTML.replace(")", ""));vID = xy2id(X, Y);};
				};
			} else {
				if (TB3O.M35 == 2) {
					aV = $xf("//td[@class='dot hl']", 'f', ad);
					var tr = aV.parentNode;
					if (tr.cells.length > 3) {
						vx = tr.cells[2].textContent.replace("(", "");
						vy = tr.cells[4].textContent.replace(")", "");				
						newdid = getNewdidFromLink(tr.cells[1].firstChild.href);
					} else {
						var tmpC = tr.cells[2].textContent.replace("(", "").replace(")", "").split("|");
						vx = parseInt10(tmpC[0]);
						vy = parseInt10(tmpC[1]);
						newdid = getNewdidFromLink(tr.cells[1].firstChild.href);
					};
				} else if (TB3O.M35 == 1) {
					aV = $xf("//div[@id='vlist']//table[@class='vlist']//tr[@class='sel']//a", 'f', ad);
					vx = aV.parentNode.parentNode.cells[2].textContent.replace("(", "");
					vy = aV.parentNode.parentNode.cells[4].textContent.replace(")", "");
					newdid = getNewdidFromLink(aV.href);
				};
				vID = xy2id(vx, vy);
			};
		} catch(e) {newdid = actV.vNewdid; vID = actV.vID;};
		retValue[0] = vID;
		retValue[1] = newdid;
		return retValue;
	};



	function processVillage119(ajaxResp) {
	
		var ad = ajaxNDV2(ajaxResp);
		var newdid = getdorf3SelectedVinfo(ad)[1];
		//Baracks,Big barracks,Stable,BigStable,Workshop,Residence/Palace troops training
		var a = $xf("//div[@id='" + ID_MID2 + "']//table[@class='tbg']//td[@width='5%']", 'f', ad);
		if (a){
			var aCell = $xf("//td[@id='aldea" + newdid + "_1_4" + "']");
			var aTb = a.parentNode.parentNode;
			//var troopTraining = getTroopTrainingArray(aTb); needs rework

			var iHTML = aCell.innerHTML;
			if (iHTML == "-") iHTML = "";
			var gid = "false";
			for (var xi = 0; xi < troopTraining.length; xi++) {
				if (troopTraining[xi][0] > 0) {
					imgNo = xi + TB3O.U[7];
					imgName = "src='" + gIc["u" + imgNo] + "'";
					if (TB3O.T35 != false) imgName = 'class="unit u' + imgNo + '" src="' + xGIF + '"';
					if (gid != "" && gid != "false") {
						iHTML += "<a href='build.php?newdid=" + newdid + "&gid=" + gid + "'><img " + imgName + " title='" + troopTraining[xi][0] + "' alt='" + troopTraining[xi][1] + "'> ";
					} else {
						iHTML += "<img " + imgName + " title='" + troopTraining[xi][0] + "' alt='" + troopTraining[xi][1] + "'> ";
					};
				};
			};
			aCell.innerHTML = iHTML;
		};
	
	};


	function processVillage42(ajaxResp){
		var ad = ajaxNDV2(ajaxResp);
		var newdid = getdorf3SelectedVinfo(ad)[1];
		var a = $xf("//div[@id='" + ID_MID2 + "']//b", 'l', ad);
		var cpi = 0;
		var cpt = 0;
		if (a && a.snapshotLength > 0) {var intAdd = (TB3O.T35 == false ? 1 : 0); cpi = a.snapshotItem(intAdd).textContent; cpt = a.snapshotItem(intAdd + 1).textContent;};
		var aCell = $xf("//td[@id='aldea" + newdid + "_4_2" + "']");
		aCell.innerHTML = cpi;
		aCell = $xf("//td[@id='aldea_s_4_2']");
		aCell.innerHTML = cpt;
		updD3Bullets(newdid, 2);
	};

	//function provided by MarioCheng for checking the Townhall and the parties thrown.
	function processVillage43(ajaxResp){
		var ad = ajaxNDV2(ajaxResp);
		var newdid = getdorf3SelectedVinfo(ad)[1];
		var lvl = 0;
		var bTitle = $xf("//div[@id='" + ID_MID2 + "']//h1", 'f', ad);
		if (bTitle) {var aLvl = bTitle.textContent.split(" "); for (i = 0; i < aLvl.length; i++) {if (!isNaN(parseInt10(aLvl[i]))) lvl = parseInt10(aLvl[i]);};};
		var aCell = $xf("//td[@id='aldea" + newdid + "_4_3" + "']");
		var showLvl = "Lvl " + lvl;
		var partyTime = "";
		var a = $xf("//td[@width='25%']//span[@id='timer1'] | //table[@class='under_progress']//span[@id='timer1']", 'f', ad);
		if (a) {
			partyTime = a.textContent;
			aCell.innerHTML = "<span id='timeouta' title='" + showLvl + "'>" + partyTime + "</span>";
			aCell.innerHTML = "<a id='timeouta' title = '" + showLvl + "' href='build.php?newdid=" + newdid + "&gid=24'>" + partyTime + "</a>";
		} else {if (lvl > 0) {partyTime = "•"; aCell.innerHTML = "<a href='build.php?newdid=" + newdid + "&gid=24' title='" + showLvl + "'>" + partyTime + "</a>";};};
		updD3Bullets(newdid, 2);
	};

	function processVillage44(ajaxResp) {
		//get available senators/chiefs/settlers
		var ad = ajaxNDV2(ajaxResp);
		var vInfo = getdorf3SelectedVinfo(ad);
		var villageID = vInfo[0];
		var newdid = vInfo[1];

		if (villageID != 0) {
			var allTables = $xf("//div[@id='" + ID_MID2 + "']//table[@class='troop_details']//a[contains(@href, " + villageID + ")]/../../../..|//div[@id='" + ID_MID2 + "']/p[@class='b f16'] | //div[@id='" + ID_MID2 + "']//p[@class='info']", 'r', ad);
			if (allTables) {
				var aCell = $g('aldea' + newdid + '_4_4');
				aCell.innerHTML = "";
				var aValue;
				//loop through all table of troops
				for (i = 0; i < allTables.snapshotLength; i++) {
					var aTb = allTables.snapshotItem(i);
					if (aTb.nodeName == "P") break;
					var allTroopCells = aTb.rows[2].cells;
					aValue = scanIntWithoutLetter(allTroopCells[9].innerHTML);
					if (aValue != 0) {
						//senators, chiefs, etc.
						for (var xi = 1; xi < aValue + 1; xi++) {
							var aImg = aTb.rows[1].cells[9].firstChild;
							var dImg = aImg.cloneNode(true);
							aCell.appendChild(dImg);
							aCell.innerHTML += " ";
						};
					};
					aValue = scanIntWithoutLetter(allTroopCells[10].innerHTML);
					if (aValue != 0) {
						//settlers
						for (var xi = 1; xi < aValue + 1; xi++) {
							var aImg = aTb.rows[1].cells[10].firstChild;
							var dImg = aImg.cloneNode(true);
							aCell.appendChild(dImg);
							aCell.innerHTML += " ";
						};
					};
				};
				if (aCell.innerHTML == "") aCell.innerHTML = "-";
			};
		};
		updD3Bullets(newdid, 2);
	};

	function processVillage45(ajaxResp){
		var ad = ajaxNDV2(ajaxResp);
		var newdid = getdorf3SelectedVinfo(ad)[1];
		var lvl = 0;
		var maxSlots = 0;
		var bTitle = $xf("//div[@id='" + ID_MID2 + "']//h1", 'f', ad);
		if (bTitle) {var aLvl = bTitle.textContent.split(" "); lvl = parseInt10(aLvl[aLvl.length - 1]);};
		var cpbuilding = 0;
		var ocSlots = 0;
		if (lvl != 0) {var spBcookie = getGMcookieV2("specBuildings"); if (spBcookie && spBcookie[newdid]) cpbuilding = spBcookie[newdid][0];};

		var maxSlots = 0;
		maxSlots = (cpbuilding == 26)?((lvl==20)?3:(lvl>=15)?2:(lvl>=10)?1:0):(lvl==20)?2:(lvl>=10)?1:0;

		var expTable = $xf("//div[@id='" + ID_MID2 + "']//table[@id='expansion'] | //div[@id='" + ID_MID2 + "']//table[@class='tbg']", 'f', ad);
		if (expTable) {
			var intRows = expTable.rows.length;
			var lrtd = expTable.rows[intRows-1].cells[0];
			var aColspan;
			ocSlots = intRows - 2;
			if (lrtd) aColspan = lrtd.getAttribute("colspan");
			if (aColspan) ocSlots = ocSlots - 1;
		};

		var slots = "" + ocSlots + "/" + maxSlots;

		var aCell = $xf("//td[@id='aldea" + newdid + "_4_5" + "']");
		var oldSlots = aCell.innerHTML;
		if (oldSlots != "-") oldSlots = oldSlots.split("/"); else oldSlots = ["0", "0"];

		aCell.innerHTML = slots;
		var sumCell = $xf("//td[@id='aldea_s_4_5']");
		if (sumCell) {
			var sumCellValue = sumCell.innerHTML.replace(",", "").replace(".", "").replace(" ", "").replace("&nbsp;", "");
			if (sumCellValue == "-") {sumCell.innerHTML = slots;} else {sumCell.innerHTML = (parseInt10(sumCellValue.split("/")[0]) + ocSlots - parseInt10(oldSlots[0])) + "/" + (parseInt10(sumCellValue.split("/")[1]) + maxSlots - parseInt10(oldSlots[1]));};
		};

		updD3Bullets(newdid, 2);
	};

//////////////////////////////////////////////////////////////////////
function searchMerchantsCountContainer()
{
   return $xf("//div[contains(@class,'traderCount')]/div[contains(@class,'boxes-contents')]");
}

//////////////////////////////////////////////////////////////////////
function searchMerchantsDestinationContainer()
{
   return $xf("//div[contains(@class,'destination')]//div[contains(@class,'boxes-contents')]");
}

//////////////////////////////////////////////////////////////////////
function getMerchantsUnderway(villageId, aDoc)
{
   
   var merchantsUnderwayInfo = new MerchantsUnderwayInfo();
   var merchantGroups = $xf("//div[@id='build' and @class='gid17']//h4", 'r');

   try
   {
      var ttServer = getServerTime(aDoc).getTime();
      if ( merchantGroups.snapshotLength !== 0 )
      {
         var villageInfo = TB3O.VillagesInfo[villageId];
         
         //2 groups: 1st is arriving mercs, 2nd is own mercs
         if ( merchantGroups.snapshotLength === 2 ) 
         {
            getMerchantsUnderwayGroup(merchantsUnderwayInfo, villageInfo, aDoc, merchantGroups.snapshotItem(0), true, ttServer);
            getMerchantsUnderwayGroup(merchantsUnderwayInfo, villageInfo, aDoc, merchantGroups.snapshotItem(1), false,ttServer);
         }
         else // one group, try to determine
         {
            var bIncoming = !hasClass(merchantGroups.snapshotItem(0),"haendler_unterwegs_heading");
            getMerchantsUnderwayGroup(merchantsUnderwayInfo, villageInfo, aDoc, merchantGroups.snapshotItem(0), bIncoming, ttServer);
         }
      }
      merchantsUnderwayInfo.ttUpd = ttServer;
   }
   catch(e)
   {
      
      merchantsUnderwayInfo = null;
   }
   

   return merchantsUnderwayInfo;
}

//////////////////////////////////////////////////////////////////////
function uiModifyMarketSendLayout()
{
}
//////////////////////////////////////////////////////////////////////
function processMarketSendConfirm()
{
   

   var tbDest = $xf("//table[@id='target_validate']");
   if ( tbDest )
   {
      var iRep = $xf("//*[@name='x2']");
      if ( iRep )
      {
         TB3O.O[84] = iRep.value;
         saveTBOptions();
      }
      var mkls = ['0', '0', '0', '0', -1000, -1000];
      var strDest = tbDest.rows[0].cells[0].textContent;
      var aDest = strDest.match(/\((-?\d+)\s*[\|\,\s\/]\s*(-?\d+)\)/g);
      var xyDest = aDest[0].replace("(", "").replace(")", "").split("|");
      var rtS = $xf("//input[starts-with(@name, 'r')]", 'l');
      if ( rtS.snapshotLength > 0 )
      {
         for (var xi = 0; xi < 4; xi++)
         {
            if (rtS.snapshotItem(xi).value == '') mkls[xi] = '0';
            else mkls[xi] = rtS.snapshotItem(xi).value;
         }
         mkls[4] = xyDest[0];
         mkls[5] = xyDest[1];
         setGMcookieV2("mkls", mkls, actV.vID);
      }
   }

   
}	

//////////////////////////////////////////////////////////////////////
function uiCreateLastMarketSendTable()
{
   var cmkls = getGMcookieV2('mkls');
   if ( cmkls && cmkls[actV.vID] )
   {
      var mkls = cmkls[actV.vID];
      var bsh = false;
      for (var xi = 0; xi < 4; xi++)
      {
         if (mkls[xi] != 0) { bsh = true; }
      }

      if ( bsh )
      {
         //create the last send table for this village
         var aTb = $t([['id', 'mkls']]);
         var aRow = $r();
         aRow.appendChild($td([['class', 'mklshh']],I("vmkls")));
         for (var xi = 1; xi < 5; xi++)
         {
            aRow.appendChild($td([['class', 'mklshh']],I("r" + xi)));
         }
         aRow.appendChild($td([['class', 'mklshh']], T('RESEND')));
         aRow.appendChild($td([['class', 'mklshh']], T('DEL') ));

         var bRow = $r();
         bRow.appendChild($c("(" + mkls[4] + "|" + mkls[5] + ")", [['class', 'mklsc']]));
         for (var xi = 0; xi < 4; xi++)
         {
            bRow.appendChild($c(mkls[xi]));
         }
         bRow.appendChild($c('<a href=' + jsVoid + ' onClick = "' + (mkls[0] != 0 ? 'snd.r1.value=' + mkls[0] : '') + (mkls[1] != 0 ? '; snd.r2.value=' + mkls[1] : '') + (mkls[2] != 0 ? '; snd.r3.value=' + mkls[2] : '') + (mkls[3] != 0 ? '; snd.r4.value=' + mkls[3] : '') + '; snd.x.value=' + mkls[4] + '; snd.y.value=' + mkls[5] + ';"><img src="' + image["bOK"] + '" title="' + T('YES') + '" alt="' + T('YES') + '"></a>', [['class', 'mklsc']]));

         aLink = $a(gIc["del"], [['href', jsVoid]]);
         aLink.addEventListener("click", hideLastMarketSend(mkls), false);
         dC = $c("", [['class', 'mklsc']]);
         dC.appendChild(aLink);
         bRow.appendChild(dC);

         aTb.appendChild(aRow);
         aTb.appendChild(bRow);
         var ln = $xf("//form//p[2] | //form/following-sibling::p[2]");
         insertAfter(ln, aTb);
      }
   }

   function hideLastMarketSend(mkls)
   {
      return function ()
      {
         for (var xi = 0; xi < 4; xi++)
         {
            mkls[xi] = 0;
         }
         setGMcookieV2("mkls", mkls, actV.vID);
         $g('mkls').style.display = 'none';
      }
   }
}

//////////////////////////////////////////////////////////////////////
function MerchantsUnderwayIterator(aDoc, aGroupHeader)
{
   var aTb = aGroupHeader;

   this.next = function ()
   {
      while ( aTb )
      {
         aTb = aTb.nextSibling;

         if ( aTb && aTb.nodeType === 1 )
         {
            if ( TAG(aTb) !== "TABLE" && !hasClass(aTb,"traders") )
            {
               aTb = null; // end of group
            }
            break;
         }
      }
      return aTb;
   };
}


//////////////////////////////////////////////////////////////////////
function getMerchantsUnderwayGroup(MUInfo, villageInfo, aDoc, aGroupHeader, bIncoming, ttServer)
{
   var muIterator = new MerchantsUnderwayIterator(aDoc, aGroupHeader);
   var aTb;
   while ( (aTb = muIterator.next()) )
   {
      var aRows = aTb.rows;
      if ( aRows.length >= 3 )
      {
         //this is a table for incoming/outgoing/returning merchants
         var ownerLink = aRows[0].cells[0].firstElementChild;
         var owner = parseUri(ownerLink.href).queryKey.uid;

         var pointLink = aRows[0].cells[1].firstElementChild;
         var point = parseUri(pointLink.href).queryKey.d;

         var timerNode = aRows[1].cells[1].getElementsByTagName("span")[0];
         var timeSpan = toSeconds(timerNode.textContent);

         var ttArrival = ttServer + (timeSpan * 1000);

         var tdRes = aRows[2].cells[1].textContent;
         var xn = 1;
         var xPos = tdRes.indexOf("x");
         if ( xPos !== -1 ) { tdRes = tdRes.substring(xPos + 1); xn = 2; }

         var Res = getResourcesFromString(tdRes);

         if ( owner && point && timeSpan && Res )
         {
            var srcXY, destXY;
            var bReturning = false;

            if ( !bIncoming )
            {
               var resNodes = aRows[2].cells[1].getElementsByTagName("span");
               if ( resNodes.length >= 1 )
               {
                  bReturning = hasClass(resNodes[0],"none");
               }
            }

            if ( bIncoming || bReturning )
            {
               srcXY  = id2xy(point);
               destXY = [villageInfo.x,villageInfo.y];
            }
            else
            {
               srcXY  = [villageInfo.x,villageInfo.y];
               destXY = id2xy(point);
            }
            var mui = new MerchantUnderwayInfo(owner, srcXY, destXY, ttArrival, Res, xn);

            if ( bIncoming )
            {
               MUInfo.i.push(mui);
            }
            else if ( bReturning )
            {
               MUInfo.r.push(mui);
            }
            else 
            {
               MUInfo.o.push(mui);
            }
         }
         
      }
   }
}


	
//////////////////////////////////////////////////////////////////////
function detectMarketSend()
{
   
   var bResult = false;
   if ( $xf("//form[@action='build.php' and @name='snd']") )
   {
      var xi;
      var bML1 = false;
      var bML2 = false;
      var mL = document.getElementsByTagName("a");
      for (xi = 0; xi < mL.length; xi++)
      {
         if ( mL[xi].href.indexOf("&t=1") !== -1 ) { bML1 = true; }
         if ( mL[xi].href.indexOf("&t=2") !== -1 ) { bML2 = true; }
         if ( bML1 && bML2 )
         {
            var iText = $xf("//input[@type='Text']|//input[@type='text']", 'l');
            var textCount = iText.snapshotLength;
            if ( textCount >= 5 )
            {
               TB3O.pageSelector = "market_send"; 
               bResult = true;
            }
            else if ( textCount === 4 )
            {
               TB3O.pageSelector = "market_send_confirm"; 
               bResult = true;
            }
            break;
         }
      }
   }
   

   return bResult;
}


//////////////////////////////////////////////////////////////////////
function setMerchantsCell(tM, colM, rTb)
{
   var cM = $g("mhMerchants");
   if (!cM)
   {
      rM = $r();
      cM = $c(tM, [["id", "mhMerchants"], ["style", 'font-size:11px; color:' + colM + ';line-height:16px;'], ["colspan", '9']]);
      rM.appendChild(cM);
      rTb.appendChild(rM);
   }
   else
   {
      cM.innerHTML = tM;
      $at(cM, [['style', 'font-size:11px; color:' + colM + ';line-height:16px;']]);
   }
}

//////////////////////////////////////////////////////////////////////
// read data from market, option "Send resources"
function processMarketSend()
{
   

   // get merchant's capacity
   var mCapNode = $xf("//form//p/b");
   var mCap = 0;

   if ( mCapNode )
   {
      mCap = scanIntWithoutLetter(mCapNode.textContent);
      if ( isNaN(mCap) ) { mCap = 0; }
   }
   

   if ( mCap === 0 ) 
   {
      if ( TB3O.ActiveVillageInfo.mCap )
      {
         mCap = TB3O.ActiveVillageInfo.mCap;
      }
      else
      {
         mCap = TB3O.DefaultMerchantsCapacity[TB3O.U[1]] * TB3O.nMerchantCapacityFactor[TB3O.nServerType];
      }
   }

   TB3O.ActiveVillageInfo.mCap = mCap;
   

   // get merchants count
   processMarketSend.moC = searchMerchantsCountContainer();
   if ( processMarketSend.moC )
   {
      if ( processMarketSend.moC.textContent.search(/[ \u00A0]*(.+)[ \u00A0]+(\d+)[ \u00A0]*\/[ \u00A0]*(\d+)/) !== -1 )
      {
         T.saveLocaleString("MERCHANTS",RegExp.$1);
         TB3O.MerchantsInfo.mAvail = parseInt10(RegExp.$2);
         TB3O.MerchantsInfo.mTotal = parseInt10(RegExp.$3);
         
      }
   }
   
   
   

   if ( isNaN(TB3O.MerchantsInfo.mAvail) )  { TB3O.MerchantsInfo.mAvail = 0; }

   processMarketSend.MU = getMerchantsUnderway(TB3O.ActiveVillageId);
   

   

   //savePersistentVillageObject("MU", processMarketSend.MU);

   
}

	
//////////////////////////////////////////////////////////////////////
//we are inside the market, option "Send resources"
function uiModifyMarketSend()
{
   

   if ( TB3O.O[47] === "1" ) 
   {
      
   }

   var mCap = TB3O.ActiveVillageInfo.mCap;
   var mAvail = TB3O.MerchantsInfo.mAvail;
   var mUse = mAvail;
   var maxTr = mUse * mCap;
   var rxI = [];
   var uiOptions = loadUIOptions();
   var aUTR = uiOptions.usethemres;
   var aCell, aRow;
   var tdAttr = [['class','tbInject']];
   var i,ri,j;

   var bAdjMc = true;
   var aQcarry = [100, 250, 500, 1000]; // Array of new quantities
   for ( i = 0; i < aQcarry.length; i++ )
   {
      if ( mCap === aQcarry[i] )
      {
         bAdjMc = false;
         break;
      }
   }

   //Insert new quantities selectable via links on the market -> send resources page
   if ( bAdjMc ) 
   { 
      aQcarry = [100, 500, 1000, mCap]; 
      aQcarry.sort(compareNumbers);
   }

   //for merchant routes - no of repeat actions
   var iRep = $xf("//*[@name='x2']");
   if ( iRep && TB3O.O[87] === "1" ) { iRep.value = TB3O.O[84]; }

   var resTb;
   
   resTb = $g("send_select"); 
   

   if ( resTb )
   {
      uiModifyMarketSendLayout(resTb,processMarketSend.moC);

      if ( processMarketSend.moC )
      {
         uiModifyMerchantsCountBar(processMarketSend.moC);
      }

      for ( ri = 0; ri < 4; ri++ )
      {
         var aCheck, aTool;

         //Remove original options
         aRow = resTb.rows[ri];
         aRow.removeChild(aRow.cells[3]);

         aRow.cells[0].addEventListener("click", mhRowUpdate, false);

         aCell = $td([['class','tbInject tbUseThem']]);
         aCheck = $i([['type', 'checkbox'], ['title', T('USERES_TT',T('RES1'))]]);
         aCheck.checked = aUTR[ri];
         aCheck.addEventListener('click', bind(onClickUseThemResOption,[ri]), false);
         aCell.appendChild(aCheck);
         aRow.appendChild(aCell);

         aRow.appendChild($td(tdAttr,uiCreateTool("del", null, bind(onClearTransportRes,[ri]))));

         uiAddQCarryCells(aRow, ri, aQcarry);

         aTool = null;
         if ( ri === 0 )
         {
            aTool = uiCreateTool("usethempr", T('USETHEMPR'), onClickUseThemAllPr);
         }
         else if ( ri === 1 )
         {
            aTool = uiCreateTool("usethemeq", T('USETHEMEQ'), onClickUseThemAllEq);
         }
         else if ( ri === 2 )
         {
            aTool = uiCreateTool("usethem1h", T('USETHEM1H'), onClickUseThemAll1H);
         }
         aRow.appendChild($td([['class','tbInject tbTool']],aTool));

         rxI[ri] = $xf("//input[@name='r" + (ri + 1) + "']");
         rxI[ri].addEventListener('keyup', mhRowUpdate, false);
         rxI[ri].addEventListener('change', mhRowUpdate, false);
      }

      //add all resource type images and the clear all button
      var clAllRow = $r(null,
                     [
                        $td(tdAttr.concat([['colspan', '2']]),
                            [I("r1"), I("r2"), I("r3"), I("r4")] ),
                        $td(tdAttr,
                            uiCreateTool("bDel", T('MTCL'), bind(onClearAllTransports,[false]))),
                        $td(tdAttr),
                        $td(tdAttr,
                            uiCreateTool("del", null, bind(onClearAllTransports,[true])))
                     ]);
      uiAddQCarryCells(clAllRow, 4, aQcarry);
      clAllRow.appendChild($td());
      resTb.appendChild(clAllRow);

      mhRowUpdate();
   }

   var xyD = [ $xf("//form[@name='snd']//input[@name='x']"),
               $xf("//form[@name='snd']//input[@name='y']") ];
   if ( xyD[0] && xyD[1] )
   {
      xyD[0].addEventListener('keyup', captureMerchantDestination, false);
      xyD[1].addEventListener('keyup', captureMerchantDestination, false);
      captureMerchantDestination();
   }
   
   var mu = processMarketSend.MU;

   if ( mu && mu.i.length > 0 )
   {
      var merchantGroup = $xf("//div[@id='build' and @class='gid17']//h4");

      if ( TB3O.O[46] === '1' )
      {
         uiModifyArrivalsTables(merchantGroup, mu.i);
      }

      //create table to sum the resources
      var aTb = uiCreateCumulativeArrivalsTable(merchantGroup.textContent.replace(":", "").toLowerCase(), mu.i);
      if ( aTb ) 
      {
         insertAfter(merchantGroup, aTb);
      }
   }

   

   //-------------------------------------------------------------
   function uiModifyMerchantsCountBar(moC)
   {
      //----------------------------------------------------------
      function onClickUsePpH()
      {
         var totPpH = totalResources(TB3O.ActiveVillageInfo.r.PpH);
         $g("tb_useunires").value = totPpH;
         setMaxTransport();
      }

      //----------------------------------------------------------
      function onClickUsePpHAll()
      {
         var totPpHAll = totalResources(TB3O.ResInfoTotals.PpH);
         $g("tb_useunires").value = totPpHAll;
         setMaxTransport();
      }

      //----------------------------------------------------------
      function onClearUniRes()
      {
         $g("tb_useunires").value = "";
         setMaxTransport();
      }

      //----------------------------------------------------------
      function onChangeUseTraders()
      {
         if ( this.value === "" ) 
         {
            mUse = mAvail;
         }
         else
         {
            mUse = Number(this.value);
            if ( isNaN(mUse) || mUse <= 0 )
            {
               mUse = mAvail;
               this.value = "";
            }
            else if ( mUse > mAvail )
            {
               mUse = mAvail;
               this.value = mUse;
            }
         }
         setMaxTransport();
      }

      //----------------------------------------------------------
      function onClearTraders()
      {
         $g("tb_usetraders").value = "";
         mUse = mAvail;
         setMaxTransport();
      }

      //----------------------------------------------------------
      var useTraders, useUniRes;
      addChildren(moC,[
         $span("\u00A0|\u00A0\u00A0" + T('USE') + "\u00A0\u00A0"),
         uiCreateTool("merchant",T("DEL"),onClearTraders),
         ":\u00A0",
         useTraders = $i([['id','tb_usetraders'],['type', 'text'], 
             ['class','text'], ['accesskey','t'], ['maxlength','2'],['title', T('USETRADERS_TT')]]),
         " \u00A0",
         uiCreateTool("r0",T("DEL"),onClearUniRes),
         ":\u00A0",
         useUniRes = $i([['id','tb_useunires'],['type', 'text'], 
             ['class','text'], ['accesskey','r'], ['maxlength','6'],['size','4'],['title', T('USEUNIRES_TT')]]),
         "\u00A0",
         uiCreateTool("pph", T('USEPPH_TT'), onClickUsePpH)
      ]);
      if ( TB3O.VillagesCount > 1 ) 
      {
         addChildren(processMarketSend.moC,[
            "\u00A0",
            uiCreateTool("pphall", T('USEPPHALL_TT'), onClickUsePpHAll)
         ]);
      }

      useTraders.addEventListener('keyup',  onChangeUseTraders, false);
      useTraders.addEventListener('change', onChangeUseTraders, false);
      uiAddBuiltinUpDownControl(useTraders);

      useUniRes.addEventListener('keyup',  onChangeUseUniRes, false);
      useUniRes.addEventListener('change', onChangeUseUniRes, false);
   }

   //-------------------------------------------------------------
   // For each new quantity and resource create a new link with the associated request
   function uiAddQCarryCells(aRow, ri, aQcarry)
   {
      var j, aLink;
      for ( j = 0; j < aQcarry.length; j++)
      {
         aLink = $lnk([['class','tbQCarry' + (aQcarry[j] === mCap ? " tbMCap":"")],['href', jsVoid]],'&nbsp;' + aQcarry[j]);
         aLink.addEventListener('click', bind(onQCarry,[ri, aQcarry[j]]), false);
         aRow.appendChild($td(tdAttr,aLink));
      }

      //add the ALL option to the list of links
      aLink = $lnk([['class','tbQCarry'],['href', jsVoid]],'&nbsp;' + T('ALL'));
      aLink.addEventListener('click', bind(onQCarry,[ri]), false);
      aRow.appendChild($td(tdAttr,aLink));
   }

   //-------------------------------------------------------------
   function loadUIOptions()
   {
      var uiOptions = loadPersistentUserObject("market_send");

      if ( !uiOptions.usethemres || !(uiOptions.usethemres instanceof Array) )
      {
         uiOptions.usethemres = [true,true,true,true];
      }

      var ri;
      for ( ri = 0; ri < 4; ri++ )
      {
         if ( typeof(uiOptions.usethemres[ri]) !== "boolean" ) { uiOptions.usethemres[ri] = true; }
      }
      return uiOptions;
   }

   //-------------------------------------------------------------
   function onClickUseThemResOption(ri)
   {
      aUTR[ri] = Boolean(this.checked);
      savePersistentUserObject("market_send", uiOptions);
   }

   //-------------------------------------------------------------
   function mhRowUpdate()
   {
      var totTransport = totalResources(getCurrentTransports());
      var totMerchants = Math.ceil(totTransport / mCap);
      var crtWaste = mCap - (totTransport - (totMerchants - 1) * mCap);
      var crtExceed = totTransport - (mAvail * mCap);
      var mhText = gIc["merchant"] + "<b>" + " (" + T("MERCHANTS") + "): " + 
                   totMerchants + "/" + mUse;  

      if ( mUse !== mAvail ) { mhText +=  " (" + mAvail + ")"; }
      mhText += "<br>" + T('MAX') + ": " + mUse * mCap;
      if ( mUse !== mAvail ) { mhText +=  " (" + (mAvail * mCap) + ")"; }
      mhText += "<br>";

      var mhColor;
      if ( totMerchants > mAvail )
      {
         mhColor = "red";
         mhText += T('MTX') + ": " + crtExceed;
      }
      else 
      {
         mhColor = ( totTransport > maxTr || totMerchants > mUse ) ? "orange" : "darkgreen";
         mhText += T('MTW') + ": " + crtWaste;
      }


      mhText += "<br>" + T('MTC') + ": " + totTransport + "</b>";
      setMerchantsCell(mhText, mhColor, resTb);
   }

   //-------------------------------------------------------------
   function setMaxTransport()
   {
      var resToUseValue = $g("tb_useunires").value;
      var resToUse = Number(resToUseValue);

      if ( resToUseValue === "" || isNaN(resToUse) ||  mUse * mCap < resToUse )
      {
         maxTr = mUse * mCap;
      }
      else if ( !isNaN(resToUse) )
      {
         maxTr = resToUse;
      }
      mhRowUpdate();
   }

   //-------------------------------------------------------------
   function onChangeUseUniRes()
   {
      if ( this.value !== "" ) 
      {
         var resToUse = Number(this.value);
         if ( isNaN(resToUse) || resToUse <= 0 )
         {
            resToUse = mUse * mCap;
            this.value = resToUse;
         }
      }
      setMaxTransport();
   }

   //-------------------------------------------------------------
   function onClearTransportRes(ri)
   {
      rxI[ri].value = '';
      mhRowUpdate();
   }

   //-------------------------------------------------------------
   function onClearAllTransports(considerUseThem)
   {
      var ri;
      for ( ri = 0; ri < 4; ri++ )
      {
         if ( !considerUseThem || (considerUseThem && aUTR[ri]) )
         {
            rxI[ri].value = '';
         }
      }
      mhRowUpdate();
   }

   //-------------------------------------------------------------
   function getCurrentTransports()
   {
      var i;
      var rxVal = [0,0,0,0];

      for ( i = 0; i < 4; ++i )
      {
         var res = parseInt10(rxI[i].value);
         if ( isNaN(res) ) { res = 0; }
         rxVal[i] = res;
      }

      return rxVal;
   }

   //-------------------------------------------------------------
   function getTotalTransportsAvailable(rxVal)
   {
      var totTr = 0;
      var ri;

      for ( ri = 0; ri < 4; ++ri )
      {
         if ( !aUTR[ri] ) { totTr += rxVal[ri]; }
      }
      return maxTr - totTr;
   }

   //-------------------------------------------------------------
   function getActualResourcesInfo()
   {
      var resourcesInfo = getActualResourcesInfoNow(TB3O.ActiveVillageInfo.r);
      floorResources(resourcesInfo.Res);
      return resourcesInfo;
   }

   //-------------------------------------------------------------
   // ensure that we maximize our merchants
   function distributeTransportsRemains(remains, rxVal, resAvail)
   {
      while ( remains > 0 )
      {
         var remainsOld = remains;
         var quantum = (remains > 12) ? Math.floor(remains/4) : 1;
         var ri;
         for ( ri = 0; ri < 4; ++ri )
         {
            if ( aUTR[ri] && rxVal[ri] < resAvail[ri] )
            {
               var resNew = rxVal[ri] + quantum;
               if ( resNew > resAvail[ri] ) { resNew = resAvail[ri]; }
               remains -= (resNew - rxVal[ri]);
               rxVal[ri] = resNew;
               if ( remains <= 0 ) { break; }
            }
         }
         if ( remainsOld === remains ) { break; }
      }
   }

   //-------------------------------------------------------------
   // ensure that we maximise our merchants
   function maximizeTransports(rxVal, resAvail)
   {
      var waste = maxTr - totalResources(rxVal);
      distributeTransportsRemains(waste, rxVal, resAvail);
   }

   //-------------------------------------------------------------
   function setTransports(rxVal)
   {
      var ri;

      for ( ri = 0; ri < 4; ++ri )
      {
         if ( aUTR[ri] ) { rxI[ri].value = rxVal[ri]; }
      }
   }

   //-------------------------------------------------------------
   function distributeTransportsProportional(resAvail, distValues)
   {
      var totDistValue = 0;
      var ri;

      for ( ri = 0; ri < 4; ++ri )
      {
         if ( aUTR[ri] ) 
         { 
            if ( distValues[ri] > 0 ) { totDistValue += distValues[ri]; }
         }
      }

      var dmx = 0;
      var rxVal = getCurrentTransports();
      if ( totDistValue > 0 )
      {
         dmx = getTotalTransportsAvailable(rxVal) / totDistValue;
      }

      for ( ri = 0; ri < 4; ++ri )
      {
         if ( aUTR[ri] )
         {
            var aRes = Math.floor(distValues[ri] * dmx);

            if ( aRes < 0 ) { aRes = 0; }
            else if ( aRes > resAvail[ri] ) { aRes = resAvail[ri]; }

            rxVal[ri] = aRes;
         }
      }
      maximizeTransports(rxVal,resAvail);
      setTransports(rxVal);

      mhRowUpdate();
   }


   //-------------------------------------------------------------
   function onClickUseThemAllPr()
   {
      var resAvail = getActualResourcesInfo().Res;
      distributeTransportsProportional(resAvail, resAvail);
   }

   //-------------------------------------------------------------
   function onClickUseThemAll1H()
   {
      var resourcesInfo = getActualResourcesInfo();
      distributeTransportsProportional(resourcesInfo.Res, resourcesInfo.EPpH);
   }

   //-------------------------------------------------------------
   function onClickUseThemAllEq()
   {
      var resAvail = getActualResourcesInfo().Res;
      var totResAvail = 0;
      var intSelected = 0;
      var ri;

      for ( ri = 0; ri < 4; ++ri )
      {
         if ( aUTR[ri] ) 
         { 
            totResAvail += resAvail[ri]; 
            intSelected += 1;
         }
      }

      var rxVal = getCurrentTransports();
      var minA = Math.floor(getTotalTransportsAvailable(rxVal) / intSelected);
      var minB = Math.floor(totResAvail / intSelected);
      var minX = Math.min(minA, minB);

      for ( ri = 0; ri < 4; ++ri )
      {
         if ( aUTR[ri] ) 
         {
            var aRes = minX;
            if ( aRes < 0 ) { aRes = 0; }
            else if ( aRes > resAvail[ri] ) { aRes = resAvail[ri]; }
            rxVal[ri] = aRes;
         }
      }
      maximizeTransports(rxVal,resAvail);
      setTransports(rxVal);

      mhRowUpdate();
   }

   //-------------------------------------------------------------
   function setNewTransport(ri, q, resAvail, rxVal)
   {
      var resOrg = rxVal[ri];
      var resNew = rxVal[ri];

      if ( q === undefined )
      {
         resNew = resAvail[ri];
      }
      else
      {
         resNew += q;
      }

      if ( resNew > resAvail[ri] ) { resNew = resAvail[ri]; }
      rxVal[ri] = resNew;
      var resTot = totalResources(rxVal);

      if ( resTot > maxTr ) 
      { 
         resNew -= resTot - maxTr;
         if ( resNew < resOrg ) { resNew = resOrg; }
      }

      rxVal[ri] = resNew;
      rxI[ri].value = resNew;
   }

   //-------------------------------------------------------------
   function onQCarry(ri, q)
   {
      var rxVal = getCurrentTransports();
      var resAvail = getActualResourcesInfo().Res;

      if ( ri < 4 )
      {
         setNewTransport(ri, q, resAvail, rxVal);
      }
      else
      {
         for ( ri = 0; ri < 4; ++ri )
         {
            if ( aUTR[ri] )
            {
               setNewTransport(ri, q, resAvail, rxVal);
            }
         }
      }

      mhRowUpdate();
   }

   //-------------------------------------------------------------
   function captureMerchantDestination()
   {
      var x = xyD[0].value;
      var y = xyD[1].value;
      var oD = $g("tb_mercdest");
      if ( oD )
      {
         removeChildren(oD);
      }
      else
      {
         var container = searchMerchantsDestinationContainer();
         if ( container )
         {
            container.appendChild(oD = $div([['id','tb_mercdest'],['class','tbInject']]));
         }
      }

      if ( oD ) 
      {
         if ( x !== '' && y !== '' && !isNaN(x) && !isNaN(y) )
         {
            var aTb = uiCreateTroopsMerchantsDistTable(null, null, xy2id(x, y),
                                                       {show_merchant:true, show_coords:true, show_arrival_time:true});
            if ( aTb )
            {
               oD.appendChild(aTb);
               oD.style.display = "";
            }
         }
         else
         {
            oD.style.display = "hidden";
         }
      }
   }

   //-------------------------------------------------------------
   function uiCreateUnderOverrunRows(state)
   {
      function uiCreateUnderOverrunCell(aRow, ri, ruo)
      {
         if ( ruo !== 0 )
         {
            if ( !aRow ) 
            { 
               aRow = $r();
               var rix;
               for ( rix = 0; rix < ri; ++rix )
               {
                  aRow.appendChild($td());
               }
            }
            aRow.appendChild($td([['class', (ruo > 0 ? 'tbOver':'tbUnder')]],(ruo > 0 ? "+":"") + ruo));
            return aRow;
         }
         return null;
      }

      var ri;
      var ruoRows = [null,null];
      var ruoRowIdx;
      for ( ri = 0; ri < 4; ++ri )
      {
         var aRow;
         ruoRowIdx = 0;
         var ru = Math.floor(state.AA.ru[ri]);
         var ro = Math.floor(state.AA.ro[ri]);

         aRow = uiCreateUnderOverrunCell(ruoRows[ruoRowIdx], ri, ru);
         if ( aRow ) { ruoRows[ruoRowIdx++] = aRow; }
         aRow = uiCreateUnderOverrunCell(ruoRows[ruoRowIdx], ri, ro);
         if ( aRow ) { ruoRows[ruoRowIdx++] = aRow; }

         if ( ruoRows[0] && ruoRowIdx === 0 )
         {
            ruoRows[0].appendChild($td());
         }
         if ( ruoRows[1] && ruoRowIdx <= 1 )
         {
            ruoRows[1].appendChild($td());
         }
      }
      if ( ruoRows[0] ) { ruoRows[0].appendChild($td()); }
      if ( ruoRows[1] ) { ruoRows[1].appendChild($td()); }

      return ruoRows;
   }

   //-------------------------------------------------------------
   // create table to sum the resources
   function uiCreateCumulativeArrivalsTable(title, incomingMerchants)
   {
      
      var i;
      var totRes = [0, 0, 0, 0];
      var resourcesInfo = cloneResourcesInfo(TB3O.ActiveVillageInfo.r);
      var state;

      for ( i = 0; i < incomingMerchants.length; ++i )
      {
         var merchantUnderwayInfo = incomingMerchants[i];
         accumulateResources(totRes, merchantUnderwayInfo.Res);
         state = getCumulativeResourcesInfo(resourcesInfo, merchantUnderwayInfo.ttArrival, merchantUnderwayInfo.Res, state);
      }
      var ttLastArrival = incomingMerchants[i-1].ttArrival;

      var armTable, armBody;
      armTable = $t([['class', 'tbInject'], ['id','tb_arrm']],
                       armBody = $e("tbody",
                           $r(
                              $td([['class', 'cbgx'], ['colspan', '6']],
                                  T('SUMMARY') + " - " + title + " (" + mu.i.length + ")"))));

      var tsCell = uiSetTimeSpan($td(),getTimeSpan(ttLastArrival, TB3O.serverTime),{format:1});
      var rRow = $r($th(I("clock")));
      var qRow = $r(tsCell);
      var tRow = $r($td());

      var xi;
      for ( xi = 0; xi < 5; xi++ )
      {
         var tCell, rCell, qCell;

         if ( xi < 4 )
         {
            rCell = $th(I("r" + (xi+1)));
            qCell = $td([['class', 'tbTotal']],$ls(totRes[xi]));
            var cls = '';
            if ( state.AA.ttf[xi] <= ttLastArrival  )
            {
               cls = state.AA.ev[xi] ? 'tbOver' : 'tbUnder';
            }
            tCell = uiSetTimeout($td([['class', cls]]),getTimeSpan(state.AA.ttf[xi],TB3O.serverTime),resourcesInfo.EPpH[xi],{format:1});
         }
         else
         {
            rCell = $th(T('TOTAL'));
            qCell = $td([['class', 'tbTotal']],$ls(totalResources(totRes)));
            tCell = $td();
         }
         rRow.appendChild(rCell);
         qRow.appendChild(qCell);
         tRow.appendChild(tCell);
      }

      armBody.appendChild(rRow);
      armBody.appendChild(qRow);
      var rowSpan = 1;
      var ruoRows = uiCreateUnderOverrunRows(state);
      if ( ruoRows[0] ) { armBody.appendChild(ruoRows[0]); ++rowSpan; }
      if ( ruoRows[1] ) { armBody.appendChild(ruoRows[1]); ++rowSpan; }
      tsCell.rowSpan = rowSpan;
      armBody.appendChild(tRow);

      
      return armTable;
   }

   //-------------------------------------------------------------
   function uiModifyArrivalsTables(aGroupHeader, incomingMerchants)
   {
      

      if ( TB3O.ActiveVillageInfo.r.dUpd !== undefined )
      {
         var muIterator = new MerchantsUnderwayIterator(document, aGroupHeader);
         var dtNow = getDesiredTimeNow();
         var resourcesInfo = cloneResourcesInfo(TB3O.ActiveVillageInfo.r);

         var aTb, i;
         for ( i = 0; (aTb = muIterator.next()); ++i )
         {
            var resTb, resTbRow;
            var merchantUnderwayInfo = incomingMerchants[i];
            addClass(aTb,"tbIncomingMerc");
            insertAfter(aTb.rows[2].cells[1].lastChild, 
               $span([['class', 'tbInject']],[
                  " = ", I("r0"), " ",
                  $e("b", $ls(totalResources(merchantUnderwayInfo.Res)))
               ])); 
            aTb.appendChild(
               $e("tbody",[['class', 'tbInject']],
                  $r(null,[
                     $td([['class', 'tbArrivalT']],[I("clock")," " + formatDateTime(dtNow,getDesiredTime(merchantUnderwayInfo.ttArrival),2)]),
                     $td([['class', 'tbArrivalRes'],['colspan', '2']], 
                        resTb = $t([['rules', 'cols']],
                           resTbRow = $r()))
                  ]))
            );   

            var state = getCumulativeResourcesInfo(resourcesInfo, merchantUnderwayInfo.ttArrival, merchantUnderwayInfo.Res);

            var uthen = floorResources(cloneArray(resourcesInfo.Res)); 
            var ri;
            for ( ri = 0; ri < 4; ++ri )
            {
               resTbRow.appendChild($td([['class', (resourcesInfo.Res[ri] >= resourcesInfo.Cap[ri] ? 'tbCapReached':null)]],
                                        [I("r"+ (ri + 1))," " + String(uthen[ri])]));
            }
            resTbRow.appendChild($td(null,[I("r0")," " + String(totalResources(uthen))]));

            var ruoRows = uiCreateUnderOverrunRows(state);
            if ( ruoRows[0] ) { resTb.appendChild(ruoRows[0]); }
            if ( ruoRows[1] ) { resTb.appendChild(ruoRows[1]); }
         }
      }
      
   }
}

function getRatioCell(aRow,iSell,iBuy)
{
   var ratio = parseInt10(aRow.cells[iSell].textContent) / parseInt10(aRow.cells[iBuy].textContent);
   var rC = $c(ratio.toFixed(2), [["class", ratio < 1.00 ? "ratio_l": ratio > 1.00 ? "ratio_g":"ratio"]]);
   return rC;
};

function getBuyRatioCell(aRow)
{
   var tC;
   var aC;
   var rC;
   if (aRow.cells.length > 7)
   {
      rC = getRatioCell(aRow, 1, 3)
      tC = aRow.cells[5];
      aC = aRow.cells[6];
   }
   else
   { //M35 = 3;
      rC = getRatioCell(aRow, 0, 1)
      tC = aRow.cells[3];
      aC = aRow.cells[4];
   };
   if (tC) $at(tC, [['style', 'font-size:8pt; padding:1px; width:11%;']]);
   if (aC) $at(aC, [['style', 'font-size:8pt; width:20%;']]);
   return rC;
};

	function getBuyAllyCell(aR) {
		//aliance info from the title property of the player
		var iPC = (aR.cells.length > 6 ? 4 : 2);
		var aN = aR.cells[iPC].getAttribute('title');
		if (!aN || aN == "") aN = "-";
		var aC = $c(aN, [['style', 'font-size:8pt; width:15%;']]);
		return aC;
	};

	function addMarketOfferCellEvents(aR) {
		var noC = [1, 4];
		if (aR.cells.length > 7) noC = [3, 6];
		var aC = aR.cells[noC[0]];
		var bC = aR.cells[noC[1]];
		var quantity = parseInt10(aC.textContent);
		aC.addEventListener('mouseover', showNeededMerchants, false);
		aC.addEventListener("mouseout", onTooltip_Hide, false);
		bC.addEventListener('mouseover', showNeededMerchants, false);
		bC.addEventListener("mouseout", onTooltip_Hide, false);

		function showNeededMerchants() {
			var tt = $g("tb_tooltip");
			if (!tt) tt = uiTooltip_Create();
			var mTot = (TB3O.Mcap != 0 ? Math.ceil(quantity / TB3O.Mcap) + " x " + gIc["merchant"] + ' (' + T('MERCHANTS') + ')' : 0);
			var iW = parseInt10(mTot) * TB3O.Mcap - quantity;
			var aTb = $t([['class', 'tb3tbnb']]);
			var aRow = $r([['class', 'tb3rnb']]);
			aRow.appendChild($c(mTot, [['class', 'tb3cnb'], ['style', 'font-size:8pt; font-weight:bold; color:blue; text-align:' + docDir[0] + ';']]));
			aTb.appendChild(aRow);
			if (iW > 0) {var bRow = $r([['class', 'tb3rnb']]); bRow.appendChild($c(T('MTW') + ": " + iW, [['class', 'tb3cnb'], ['style', 'font-size:8pt; color:red; text-align:' + docDir[0] + ';']])); aTb.appendChild(bRow);};
			tt.innerHTML = "";
			tt.appendChild(aTb);
			tt.style.display = 'block';
		};
	};

	 //Create a new column showing the alliance of the player that offers resources for trade at the market and a ratio column
	function addAllyColumnForMarketOffers() {
		if (crtPage.indexOf('&t=1') == -1 && crtPage.indexOf('build.php?') == -1) return;
		if ($g("summary")) return;
		var aX = $xf("//*[@id='range'] | //*[@id='market_buy']");
		if (!aX) {aX = $xf("//tr[@class='rbg']"); if (aX) aX = aX.parentNode;};
		//prepare insertion of column
		var b = aX.rows;
		$at(b[0].cells[0], [['colspan', '9']]);
		$at(b[b.length - 1].cells[0], [['colspan', '9']]);
		//Create and insert the alliance & ratio columns
		b[1].appendChild($c(T('8')));
		b[1].appendChild($c("%"));
		for(var i = 2; i < b.length - 1; i++) {b[i].appendChild(getBuyAllyCell(b[i])); b[i].appendChild(getBuyRatioCell(b[i])); addMarketOfferCellEvents(b[i]);};
	};

	function quitMarketFilter(aOffer, aFilter, filtros) {
		aOffer.removeAttribute("filtro" + aFilter);
		var rAt = true;
		for (var i = 0; i < filtros.length; i++) if (aOffer.getAttribute("filtro" + filtros[i]) == 'on') rAt = false;
		if (rAt == true) aOffer.removeAttribute("style");
	};

	function marketBuy() {
		if (crtPage.indexOf('&t=1&') != -1 && crtPage.indexOf('&t=1&u=') == -1) return;
		//get the original offers table
		var orOffersTb = $xf("//table[@cellspacing='1' and @cellpadding='2' and @class='tbg' and not(@style)]");
		if (!orOffersTb) orOffersTb = $g("market_buy");
		if (!orOffersTb) orOffersTb = $g("range");
		getSavedMarketFilters();
		createFilterTable(orOffersTb);
		if (TB3O.T35 == false) {var linkid = $xf('//td[@class="rowpic"]/a', 'f', orOffersTb).href.match('id=([0-9]*)&')[1];} else {var lastCell = orOffersTb.rows[orOffersTb.rows.length - 1].cells[0]; var linkid = lastCell.lastChild.href.match('id=([0-9]*)&')[1];};
		//market preload
		marketpreload = parseInt10(TB3O.O[48]) + 1;
		var pageNo1 = crtPage.indexOf("&u=");
		var intPage = 0;
		if (pageNo1 != -1) {var pageNo2 = crtPage.indexOf("#h2"); var pageNoS1 = crtPage.substring(pageNo1 + 3, pageNo2); var intPage = Math.round(parseInt10(pageNoS1) / 40);};
		if (marketpreload > 1) {
			for (var i = 1; i < marketpreload; i++) {setTimeout(createPreloadFunc(i + intPage), getRndTime(1302));};
			var X2 = (marketpreload + intPage) * 40;
			var X1 = (intPage - marketpreload) * 40;
			var backLink = "build.php?id=" + linkid + "&t=1&u=" + X1 + "#h2";
			var forwardLink = "build.php?id=" + linkid + "&t=1&u=" + X2 + "#h2";
			var tdbfLinks = $xf('//td[@class="rowpic"]');
			if (!tdbfLinks) tdbfLinks = orOffersTb.rows[orOffersTb.rows.length - 1].cells[0];
			if (tdbfLinks) {
				if (X1 < 0) {var aSpan = $e("SPAN", "«"); $at(aSpan, [["style", "font-weight:bold;"], ["class", "c"]]);} else {var aSpan = $a("« ", [['href', backLink]]);};
				var fwLink = $a("»&nbsp;", [['href', forwardLink]]);
				tdbfLinks.innerHTML = "";
				tdbfLinks.appendChild(aSpan);
				tdbfLinks.appendChild(fwLink);
			};
		};

		function prepareOrigFilters() {
			var sTb = $g("search_select");
			if (!sTb) return;
			var bTb = $g("bid_select");
			var arrA = sTb.getElementsByTagName("A");
			if (arrA) {for (var i = 0; i < arrA.length; i++) {arrA[i].addEventListener("click", addAllyColumnForMarketOffers, false);};};
			arrA = bTb.getElementsByTagName("A");
			if (arrA) {for (var i = 0; i < arrA.length; i++) {arrA[i].addEventListener("click", addAllyColumnForMarketOffers, false);};};
		};

		function applyFilter(orOffersTb, aType, aOpt) {
			return function() {marketFilters[aType] = aOpt; setGMcookieV2("marketfilters", marketFilters, 'all'); filterMarket(orOffersTb, aType, aOpt);};
		};

		function applyAllFilters(orOffersTb) {for (var i = 0; i < 5; i++) {if (marketFilters[i] != defaultMF[i]) filterMarket(orOffersTb, i , marketFilters[i]);};};

		function filterMarket(orOffersTb, aType, aOpt) {
			for (var i = 2; i < orOffersTb.rows.length - 1; i++) {
				b = orOffersTb.rows[i];
				if (TB3O.T35 == false) {
					var isOfPos = true;
					var error = false;
					if (b.childNodes.length > 8) error = true;
					b.childNodes[error ? 1 : 0].firstChild.src.search(/\/(\d).gif$/);
					var rOf = RegExp.$1;
					b.childNodes[error ? 4 : 2].firstChild.src.search(/\/(\d).gif$/);
					var rSearch = RegExp.$1;
					var qOf = parseInt10(b.childNodes[error ? 2 : 1].textContent);
					var qSearch = parseInt10(b.childNodes[error ? 6 : 3].textContent);
					if (b.childNodes[error ? 11 : 6].className == 'c') isOfPos = false;
					var trTime = toSeconds(b.childNodes[error ? 10 : 5].textContent);
				} else {
					if (b.cells[0].firstChild.className) {//M35 = 2;
						var rOf = b.cells[0].firstChild.className.replace("r", "");
						var qOf = parseInt10(b.cells[1].textContent);
					} else {//M35 = 3;
						var rOf = b.cells[0].getElementsByTagName("IMG")[0].className.replace("r", "");
						var qOf = parseInt10(b.cells[0].textContent);
					};
					var isOfPos = false;
					if (b.cells[2].firstChild.className) {//M35 = 2;
						var rSearch = b.cells[2].firstChild.className.replace("r", "");
						var qSearch = parseInt10(b.cells[3].textContent);
						if (b.cells[6].className == 'act') isOfPos = true;
						var trTime = toSeconds(b.cells[5].textContent);
					} else {//M35 = 3;
						var rSearch = b.cells[1].getElementsByTagName("IMG")[0].className.replace("r", "");
						var qSearch = parseInt10(b.cells[1].textContent);
						if (b.cells[4].className == 'act') isOfPos = true;
						var trTime = toSeconds(b.cells[3].textContent);
					};
				};

				switch (aType) {
					case 0: if ((rOf != aOpt) && aOpt != 5) setOfferFilter(b, "Ofrezco"); else quitMarketFilter(b, "Ofrezco", ["Busco", "Tipo", "Carencia", "Tiempo"]); break;
					case 1: if ((rSearch != aOpt) && aOpt != 5) setOfferFilter(b, "Busco"); else quitMarketFilter(b, "Busco", ["Ofrezco", "Tipo", "Carencia", "Tiempo"]); break;
					case 2: switch(aOpt) {
						case 1: if (qOf <= qSearch) setOfferFilter(b, "Tipo"); else quitMarketFilter(b, "Tipo", ["Ofrezco", "Busco", "Carencia", "Tiempo"]); break;
						case 2: if (qOf != qSearch) setOfferFilter(b, "Tipo"); else quitMarketFilter(b, "Tipo", ["Ofrezco", "Busco", "Carencia", "Tiempo"]); break;
						case 3: if (qOf >= qSearch) setOfferFilter(b, "Tipo"); else quitMarketFilter(b, "Tipo", ["Ofrezco", "Busco", "Carencia", "Tiempo"]); break;
						case 4: quitMarketFilter(b, "Tipo", ["Ofrezco", "Busco", "Carencia", "Tiempo"]); break;
					} break;
					case 3: switch(aOpt) {
						case 1: if (isOfPos == false) setOfferFilter(b, "Carencia"); else quitMarketFilter(b, "Carencia", ["Ofrezco", "Busco", "Tipo", "Tiempo"]); break;
						case 2: quitMarketFilter(b, "Carencia", ["Ofrezco", "Busco", "Tipo", "Tiempo"]); break;
					} break;
					case 4: switch(aOpt) {
						case 1: if (trTime > (60*60)) setOfferFilter(b, "Tiempo"); else quitMarketFilter(b, "Tiempo", ["Ofrezco", "Busco", "Tipo", "Carencia"]); break;
						case 2: if (trTime > (2*60*60)) setOfferFilter(b, "Tiempo"); else quitMarketFilter(b, "Tiempo", ["Ofrezco", "Busco", "Tipo", "Carencia"]); break;
						case 3: if (trTime > (3*60*60)) setOfferFilter(b, "Tiempo"); else quitMarketFilter(b, "Tiempo", ["Ofrezco", "Busco", "Tipo", "Carencia"]); break;
						case 4: quitMarketFilter(b, "Tiempo", ["Ofrezco", "Busco", "Tipo", "Carencia"]); break;
					} break;
				};
			};
			for (var i = 0; i < 5; i++) {for (var j = 0; j < 6; j++){var aFilters = $xf("//td[@id='filtro" + i + j + "']"); if (aFilters) {if (i == aType && j == (aOpt - 1)) $at(aFilters, [['class', 'sf']]); else if (i == aType) aFilters.removeAttribute('class');};};};
		};

		function getSavedMarketFilters() {var cookieMF = getGMcookieV2('marketfilters'); if (cookieMF && cookieMF['all']) marketFilters = cookieMF['all']; else {marketFilters = defaultMF; setGMcookieV2('marketfilters', marketFilters, 'all');};};

		function processOfferPage(ajaxResp) {
			var ad = ajaxNDV2(ajaxResp);
			if (TB3O.T35 == false) {
				var strOffersTableRows = "//table[@cellspacing='1' and @cellpadding='2' and @class='tbg' and not(@style)]/tbody/tr";
				var xpres = $xf(strOffersTableRows, 'l', ad);
				var aRows = $xf(strOffersTableRows, 'l');
				var linktr = aRows.snapshotItem(aRows.snapshotLength - 1);
			} else {
				var strOffersTableRows = "//table[@id='market_buy']/tbody/tr | //table[@id='range']/tbody/tr";
				var xpres = $xf(strOffersTableRows, 'l', ad);
				var aRows = $xf(strOffersTableRows, 'l');
				var linktr = aRows.snapshotItem(1).parentNode;
			};
			
			for (var i = 2; i < xpres.snapshotLength - 1; i++) {
				var mrow = xpres.snapshotItem(i);
				mrow.appendChild(getBuyAllyCell(mrow));
				mrow.appendChild(getBuyRatioCell(mrow));
				addMarketOfferCellEvents(mrow);
				if (TB3O.T35 == false) linktr.parentNode.insertBefore(mrow, linktr); else linktr.appendChild(mrow);
			};
			applyAllFilters(orOffersTb);
		};

		function createPreloadFunc(page) {return function() {ajaxRequest("build.php?id=" + linkid + "&t=1&u=" + (page * 40) + "#h2", "GET", null, processOfferPage, dummy);};};

		function createFilterTable(orOffersTb) {
			var aTb = $t([['id', 'mbuyf']]);
			//filters for offers, searches and ratio
			var aLabels = [orOffersTb.rows[1].cells[0].textContent, orOffersTb.rows[1].cells[1].textContent];
			for (var j = 0; j < 2; j++){
				var tr = $r();
				tr.appendChild($c(aLabels[j]));
				//4 res for offer and search
				for (var i = 0; i < 4; i++){
					var td = $c("", [['id', 'filtro' + j + i]]);
					var ref = $a(gIc['r' + (i + 1)]);
					if (i + 1 == marketFilters[j]) $at(td, [['class', 'sf']]);
					td.addEventListener('click', applyFilter(orOffersTb, j, i  + 1), false);
					td.appendChild(ref);
					tr.appendChild(td);
				};
				var td = $c("", [['id', 'filtro' + j + '4']]);
				if (marketFilters[j] == 5) $at(td, [['class', 'sf']]);
				var ref = $a(T('CUALQUIERA'), [['href', jsVoid]]);
				td.addEventListener('click', applyFilter(orOffersTb, j, 5), false);
				td.appendChild(ref);
				tr.appendChild(td);
				aTb.appendChild(tr);
			};
			//Transation ratio (offer/search)
			var tr = $r();
			tr.appendChild($c(T('TIPO')));
			aLabels = ['1:>1', '1:1', '1:<1', '1:x'];
			for (var i = 0; i < 4; i++){
				var td = $c("", [['id', 'filtro' + 2 + i]]);
				if (i + 1 == marketFilters[2]) $at(td, [['class', 'sf']]);
				var ref = $a(aLabels[i], [['href', jsVoid]]);
				td.addEventListener('click', applyFilter(orOffersTb, 2, i + 1), false);
				td.appendChild(ref);
				tr.appendChild(td);
			};
			tr.appendChild($c(""));
			aTb.appendChild(tr);

			//Max. transport time
			var tr = $r();
			tr.appendChild($c(T('MAXTIME')));
			aLabels = ['1', '2', '3', '>3'];
			for (var i = 0; i < 4; i++){
				var td = $c("", [['id', 'filtro' + 4 + i]]);
				if (i + 1 == marketFilters[4]) $at(td, [['class', 'sf']]);
				var ref = $a(aLabels[i], [['href', jsVoid]]);
				td.addEventListener('click', applyFilter(orOffersTb, 4, i+1), false);
				td.appendChild(ref);
				tr.appendChild(td);
			};
			tr.appendChild($c(""));
			aTb.appendChild(tr);

			//Filter for possible/impossible offers because of the res/merchants availability
			var tr = $r();
			tr.appendChild($c(T('DISPONIBLE')));
			aLabels = [T('YES'), T('NO')];

			for (var i = 0; i < 2; i++){
				var td = $c("", [['colspan', '2'], ['id', 'filtro' + 3 + i]]);
				if (i + 1 == marketFilters[3]) $at(td, [['class', 'sf']]);
				var ref = $a(aLabels[i], [['href', jsVoid]]);
				td.addEventListener('click', applyFilter(orOffersTb, 3, i + 1), false);
				td.appendChild(ref);
				tr.appendChild(td);
			};

			tr.appendChild($c(""));
			aTb.appendChild(tr);

			applyAllFilters(orOffersTb);
			var p = $e("P");
			p.appendChild(aTb);
			orOffersTb.parentNode.insertBefore(p, orOffersTb);
			aLabels = null;
		};
	};

//////////////////////////////////////////////////////////////////////
// market => offer: function marketSellMinMax automatically selects as offering the resource 
// from which you have the most units and searching the resource with the minimum units for the current village
// add option to save the offer
// add option to save the offer as global (Zippo)
function marketSellMinMax()
{
   var aX = $xf("//a[@class='selected' and contains(@href, '&t=2')] | //input[@name='d2'] | //input[@class='fm fm25']");
   if (!aX) return;

   // add option to save the offer
   // add option to save the offer as global (Zippo)
   var pS = $g('soff');
   if (!pS)
   {
      var aTb = $xf("//*[@id='sell']/tbody | //table[@class='f10']");
      if (aTb)
      {
         var sRow1 = $r();
         var sE1 = $c("", [['colspan', TB3O.M35 == 2 ? '3' : '4']]);
         var ciS1 = $c("<input type='checkbox' id='soffG' value='1'></input>" + T('SVGL'),[['class', 'soffall']]);
         sRow1.appendChild(sE1);
         sRow1.appendChild(ciS1);
         aTb.appendChild(sRow1);
         var sRow2 = $r();
         var sE2 = $c("", [['colspan', TB3O.M35 == 2 ? '3' : '4']]);
         var ciS2 = $c("<input type='checkbox' id='soff' value='1'></input>" + T('SAVE'));
         sRow2.appendChild(sE2);
         sRow2.appendChild(ciS2);
         aTb.appendChild(sRow2);
      }
   }

   var mhMH = "";
   var avMerchants = 0;

   //add information about capacity of the merchants and make transport functions available to this page, too
   var merchantsPar = $xf("//form//p | //form//p[@class='f10']");
   if (merchantsPar && merchantsPar.className.indexOf("error") == -1)
   {
      var mHTML = merchantsPar.textContent;
      var parts = mHTML.match(/\S+/g);
      mhMH = parts[0];

      avMerchants = parseInt10(parts[1].split("/")[0]);
      if (mHTML.indexOf("(") == -1) 
         merchantsPar.innerHTML += " (" + TB3O.Mcap + " / " + gIc["merchant"] + ")";
   }
   else 
      return;

   // find max/min resource 
   var maxRes = crtResUnits[0];
   var minRes = crtResUnits[0];
   var idMax = 0;
   var idMin = 0;

   for (var i = 0; i < 4; i++)
   {
      if (maxRes <= parseInt10(crtResUnits[i]))
      {
         maxRes = crtResUnits[i];
         idMax = i;
      }
      if (minRes >= parseInt10(crtResUnits[i]))
      {
         minRes = crtResUnits[i];
         idMin = i;
      }
   }

   var rxI1 = $xf("//input[@class='text' and @name='m1'] | //input[@class='fm' and @name='m1']");
   var rxType1 = $xf("//select[@class='dropdown' and @name='rid1'] | //select[@class='fm' and @name='rid1']");

   var rxI2 = document.getElementsByName("m2");
   if (rxI2) rxI2 = rxI2[0];

   var rxType2 = document.getElementsByName("rid2");
   if (rxType2) rxType2 = rxType2[0];

   if ( !rxI1 || !rxI2 || !rxType1 || !rxType2 ) return;

   if ( !(parseInt10(rxI1.value) > 0 && parseInt10(rxI2.value) > 0) ) // already has offer?
   {
      rxType1.value = (idMax + 1).toString();
      rxType2.value = (idMin + 1).toString();

      if ( TB3O.Mcap <= crtResUnits[idMax] )
      {
         rxI1.value = TB3O.Mcap;
         rxI2.value = TB3O.Mcap;
      }
   }
   mhRowUpdate3();

   rxI1.addEventListener('keyup', mhRowUpdate3, false);
   rxI2.addEventListener('keyup', mhRowUpdate3, false);
   rxType1.addEventListener('change', mhRowUpdate3, false);


   function mhRowUpdate3()
   {
      var totalTransport = 0;
      var maxC = TB3O.Mcap;
      var aR1 = parseInt10(rxI1.value);
      var aR2 = parseInt10(rxI2.value);

      if ( aR1 > 0 )
      {
         if ( crtResUnits[parseInt10(rxType1.value) - 1] < aR1) 
         {
            totalTransport = parseInt10(crtResUnits[parseInt10(rxType1.value) - 1]);
            rxI1.value = totalTransport;
         }
         else
         {
            totalTransport = aR1;
         }
      }

      var totMerchants = Math.ceil(totalTransport / maxC);

      //MarioCheng & DMaster wasted/exceeding resources
      var crtWaste = maxC - (totalTransport - (totMerchants - 1) * maxC);
      var crtExceed = totalTransport - (avMerchants * maxC);
      var mhColor;
      var mhText = "<b>" ;

      if (totMerchants > avMerchants)
         mhText += "*";

      mhText += mhMH + " " + totMerchants + "/" + avMerchants + "<br>" + 
                T('MAX') + ": " + avMerchants * maxC + "<br>";
      if (totMerchants > avMerchants)
      {
         mhColor = "red";
         mhText += T('MTX') + ": " + crtExceed;
      }
      else
      {
         mhColor = "darkgreen";
         mhText += T('MTW') + ": " + crtWaste;
      }
      mhText += "<br>";
      mhText += T('MTC') + ": " + totalTransport;

      if ( totalTransport > 0 && aR2 > 0 )
      {
         mhText += "<br>";

         var ratio = totalTransport/aR2;
         if ( ratio < 0.50 )
         {
            mhColor = "red";
            mhText += "*";
         }
         mhText += T('MTR') + ": " + ratio.toFixed(2);
         if ( ratio < 0.50 )
         {
            mhText += " " + T('MTRMIN');
         }
      }

      mhText += "</b>";
      setMerchantsCell(mhText, mhColor, aTb);
      return;
   }
}

//////////////////////////////////////////////////////////////////////
function marketSell()
{
   

   //global/local option provided by Zippo.
   marketSellMinMax();

   if (!$xf("//input[@type='hidden' and @name='t' and @value='2']")) return;
   $xf("//form").setAttribute("name", "sell");

   var aX = $xf("//input[@type='image' and @name='s1']");
   aX.addEventListener("click", 
      function()
      {
         var soff = $g('soff');
         var soffG = $g('soffG');
         var bSOf = true;
         var bSOfG = true;
         if (soff && soff.checked == false) bSOf = false;
         if (soffG && soffG.checked == false) bSOfG = false;
         if (bSOf == true)
         {
            var param = ["m1", "m2", "rid1", "rid2", "d2"];
            var checks = ["d1", "ally"];
            var values = new Array();
            for (var i = 0; i < param.length; i++) eval("values[" + i + "] = $xf(\"//*[@name='" + param[i] + "']\").value");
            for (var i = 0; i < checks.length; i++)
            {
               try
               {
                  eval("var b = $xf(\"//*[@name='" + checks[i] + "']\").checked");
                  if (b === true) 
                     values[i + param.length] = '1';
                  else 
                     values[i + param.length] = '0';
               }
               catch (e)
               {
               }
            }
            if (bSOfG == false) values[param.length+checks.length] = actV.vID;

            addGMcookieValue("ventas", values, false);
         }
      }, 
      false);

   //get offers string
   var strOffers = getGMcookie("ventas", false);
   if (strOffers == "false")
   {
      setGMcookie("ventas", '', false);
      strOffers = '';
   }

   var ventas = new Array();
   if (strOffers != '')
   {
      var offers = strOffers.split("$$");
      var j = 0;
      for (var i = 0; i < offers.length; i++)
      {
         var strVillage = offers[i].split("$")[7];
         if (strVillage == actV.vID || strVillage == undefined)
         {
            ventas[j] = offers[i].split("$");
            ventas[j][8] = i;
            j++;
         }
      }
   }

   // display saved offers
   if (ventas.length > 0)
   {
      var arH = [T('OFREZCO'), T('BUSCO'), T('MERCHANTS'), T('8'), T('MAXTIME'), '%', T('SELL'), T('DEL')];
      var aTb = $t([["id", "soff"]]);

      var aR = $r();
      aR.appendChild($th([['colspan', arH.length.toString()]],T('VENTAS')));
      var aHead = $e("THEAD");
      aHead.appendChild(aR)

      aR = $r();
      for (var i = 0; i < arH.length; i++) aR.appendChild($c(arH[i], [['class', 'soffhh']]));
      aHead.appendChild(aR);
      aTb.appendChild(aHead);

      var aC;
      for (var i = 0; i < ventas.length; i++)
      {
         var bR = $r();
         if (ventas[i][7] != actV.vID)
         {
            bR.className = "soffall";
         }

         var attrVal = [['class', 'val']];
         var attrOther = [['class', 'soffc']];

         bR.appendChild($c(gIc["r" + (ventas[i][2])] + ' ' + ventas[i][0],attrVal));
         bR.appendChild($c(gIc["r" + (ventas[i][3])] + ' ' + ventas[i][1],attrVal));
         bR.appendChild($c(Math.ceil(ventas[i][0] / TB3O.Mcap), attrOther));
         bR.appendChild($c(ventas[i][6] == '1' ? T('YES') : T('NO'), attrOther));
         bR.appendChild($c(ventas[i][5] == '1' ? ventas[i][4] : T('NO'), attrOther));
         bR.appendChild(getRatioCell(bR,0,1));
         var sally = '';
         if ($xf("//*[@name='ally']")) sally = '; sell.ally.checked=' + (ventas[i][6] == '1');
         bR.appendChild($c('<a href=' + jsVoid + 
                           ' onClick = "sell.m1.value=' + ventas[i][0] + 
                                     '; sell.m2.value=' + ventas[i][1] + 
                                     '; sell.rid1.value=' + ventas[i][2] + 
                                     '; sell.rid2.value=' + ventas[i][3] + 
                                     '; sell.d2.value=' + ventas[i][4] + 
                                     '; sell.d1.checked=' + (ventas[i][5] == '1') + 
                                     sally + 
                                     '; sell.submit();">'+
                           '<img src="' + image["bOK"] + 
                           '" title="' + T('SELL') + 
                           '" alt="' + T('SELL') + '"></a>', attrOther));

         var aL = $a(gIc["del"], [['href', jsVoid]]);
         aL.addEventListener("click", removeGMcookieValue("ventas", ventas[i][8], true, marketSell, false), false);
         var aC = $c("", attrOther);
         aC.appendChild(aL);
         bR.appendChild(aC);
         aTb.appendChild(bR);
      }

      var aPar = $e("P", "");
      aPar.appendChild(aTb);
      insertAfter(aX, aPar);
   }

   var tbSellOverview = $g("sell_overview");
   if ( tbSellOverview )
   {
      //prepare insertion of column
      var aRows = tbSellOverview.rows;
      $at(aRows[0].cells[0], [['colspan', aRows[1].cells.length + 1]]);
      //Create and insert the ratio column
      aRows[1].appendChild($c("%"));
      for(var i = 2; i < aRows.length; i++) 
      {
         aRows[i].appendChild(getRatioCell(aRows[i],1,2)); 
      }
   }

   
}



//////////////////////////////////////////////////////////////////////
function uiModifyPositionDetails()
{
   

   var aContainer = null;
   var tTable = $g("troop_info");
   if ( tTable && !hasClass(tTable,"rep") )
   {
      aContainer = tTable.previousElementSibling;
   }

   uiCreateAttDefInfoSign(tTable, aContainer, false);

   
}
//////////////////////////////////////////////////////////////////////
function uiSetAttackType(act)
{
   if ( act )
   {
      var rbA = $xf("//input[@value='" + act + "' and @name='c']");
      if ( rbA && !rbA.disabled ) 
      {
         rbA.checked = true;
      }
   }
}

//////////////////////////////////////////////////////////////////////
// change to the default attack type on the "Rally Point -> Send Troops" page
function uiModifyDefaultAttackType()
{
   var act, z;
   var villageInfo, villageId, mapId;

   //2:Defend, 3:Attack, 4:Raid
   //OASIS - only attack:raid (fr3nchlover)
   if ( crtUrl.queryKey.o ) 
   {
      act = 4;
   }
   else
   {
      act = parseInt10(TB3O.O[49]) + 2;

      //action = 2 if the destination is one of your own villages
      if ( crtUrl.queryKey.z )
      {
         z = parseInt10(crtUrl.queryKey.z);
         for ( villageId in TB3O.VillagesInfo )
         {
            villageInfo = TB3O.VillagesInfo[villageId];
            mapId = xy2id(villageInfo.x,villageInfo.y);

            if ( z === mapId ) 
            {
               act = 2;
               break;
            }
         }
      }
   }
   uiSetAttackType(act);
}

//////////////////////////////////////////////////////////////////////
function searchRallyPointSendElems()
{
   var sendTable = $g("troops");
   var sendContainer = null;
   if ( sendTable )
   {
      sendContainer = sendTable.parentNode;
   }
   

   return ( sendContainer ) ? [sendContainer,sendTable] : null;
}

//////////////////////////////////////////////////////////////////////
function uiModifyRallyPointSend()
{
   

   var availableTroops, sendTroops;
   var statSendTable;

   //-------------------------------------------------------------
   function getAvailableTroopsInfo(sendTable)
   {
      var troopsInfo = [];
      var i;
      for ( i = 1; i < 12; ++i )
      {
         var aInput = $xf(".//input[@name='t" + i + "']",sendTable);
         if (aInput)
         {
            aInput.id = 'tb_i' + i;
            var aParent = aInput.parentNode;
            var unitImg = $nth_tag(aParent,"img",0);
            var index =  ( unitImg ) ? getTroopIndexTitleFromImg(unitImg)[0] : null;
            if ( index && TB3O.U[1] === '' ) { setRace(index); }

            var aLabel = $nth_tag(aParent,"a",0);
            var count = 0;
            if ( aLabel )
            {
               count = scanIntAny(aLabel.textContent);
            }
            troopsInfo.push([index,count]);
         }
      }
      return troopsInfo;
   }

   //-------------------------------------------------------------
   function uiRefreshStats()
   {   
      if ( statSendTable )
      {
         uiFillTroopsAttDefInfoTable2(statSendTable, sendTroops);
      }
   }

   //-------------------------------------------------------------
   function searchTroopsInput(troopNo)
   {
      return $g("tb_i" + (troopNo + 1));
   }

   //-------------------------------------------------------------
   function updateTroop(troopNo, units)
   {
      sendTroops[troopNo][1] = units; 
   }

   //-------------------------------------------------------------
   function foreachTroop(f)
   {
      var troopNo;
      for ( troopNo = 0; troopNo < availableTroops.length; ++troopNo )
      {
         var count = availableTroops[troopNo][1];
         if ( count > 0 )
         {
            f(troopNo);
         }
      }
   }

   //-------------------------------------------------------------
   function uiSetTroop(troopNo, units)
   {
      var aInput = searchTroopsInput(troopNo);
      if ( aInput )
      {
         aInput.value = ( units ) ? units : "";
         updateTroop(troopNo, units);
      }
   }

   //-------------------------------------------------------------
   function _uiSetMaxTroop(troopNo)
   {
      uiSetTroop(troopNo, availableTroops[troopNo][1]);
   }

   //-------------------------------------------------------------
   function uiSetMaxTroop(troopNo)
   {
      _uiSetMaxTroop(troopNo);
      uiRefreshStats();
   }

   //-------------------------------------------------------------
   function uiSetMaxAllTroops()
   {
      foreachTroop(_uiSetMaxTroop);
      uiRefreshStats();
   }

   //-------------------------------------------------------------
   function _uiSetZeroTroop(troopNo)
   {
      uiSetTroop(troopNo, 0);
   }

   //-------------------------------------------------------------
   function uiSetZeroTroop(troopNo)
   {
      _uiSetZeroTroop(troopNo);
      uiRefreshStats();
   }

   //-------------------------------------------------------------
   function uiSetZeroAllTroops()
   {
      foreachTroop(_uiSetZeroTroop);
      uiRefreshStats();
   }

   //-------------------------------------------------------------
   function onChangeUnitsCount(troopNo)
   {
      var units = 0;
      if ( this.value !== "" ) 
      {
         units = Number(this.value);
         if ( isNaN(units) || units > availableTroops[troopNo][1] )
         {
            units = availableTroops[troopNo][1];
         }
         else if ( units < 0 )
         {
            units = 0;
         }
         this.value = units;
      }
      updateTroop(troopNo, units);
      uiRefreshStats();
   }

   //-------------------------------------------------------------
   function uiSetScout()
   {
      var troopNo = getTroopNoByIndex(availableTroops, getScoutTroopIndex(TB3O.U[1]));
      var scoutsAvailable = availableTroops[troopNo][1];
      var iNoOfScouts = $g('tb_selectscoutnumber');
      var wNoOfScouts = (iNoOfScouts) ? parseInt10(iNoOfScouts.value) : 3;
      if ( wNoOfScouts > 0 )
      {
         TB3O.O[50] = wNoOfScouts;
         saveTBOptions();
      }

      if ( wNoOfScouts > scoutsAvailable ) { wNoOfScouts = scoutsAvailable; }

      foreachTroop(_uiSetZeroTroop);
      uiSetAttackType(4); //set the attack:raid as action
      uiSetTroop(troopNo, wNoOfScouts);
      uiRefreshStats();
   }

   //-------------------------------------------------------------
   function uiSetFakeUnit()
   {
      foreachTroop(_uiSetZeroTroop);
      uiSetAttackType(3); //set the attack:normal as action

      var chk = false;
      var troopNo;
      for( troopNo = 0; troopNo < 8; ++troopNo )
      {
         var faketroopselected = $g("tb_faketroop" + troopNo);
         if ( faketroopselected && faketroopselected.checked )
         {
            uiSetTroop(troopNo, 1);
            chk = true;
         }
      }

      if ( !chk )
      {
         //no troops for fake selected  => use default (most slow unit available)
         var minSpeed = Infinity;
         var slowTroopNo; 
         var scoutTI = getScoutTroopIndex(TB3O.U[1]);
         for( troopNo = 0; troopNo < 8; ++troopNo )
         {
            if ( availableTroops[troopNo][1] > 0 && availableTroops[troopNo][0] !== scoutTI )
            {
               var index = availableTroops[troopNo][0];
               if ( index !== scoutTI && uc[index][8] < minSpeed ) 
               {
                  slowTroopNo = troopNo;
                  minSpeed = uc[index][8];
               }
            }
         }
         uiSetTroop(slowTroopNo, 1); 
      }
      uiRefreshStats();
   }

   //-------------------------------------------------------------
   function uiAddTopMenu(sendContainer)
   {
      //----------------------------------------------------------
      function uiAddActionLink(aCell, bEnabled, label, actionFun)
      {
         if ( bEnabled > 0 )
         {
            aCell.appendChild($action(null, label, actionFun));
         }
         else
         {
            aCell.appendChild($span([['class', 'none']], label));
         }
      }

      //----------------------------------------------------------
      function uiAddSelectAllLink(aTb)
      {
         var aCell;
         var troopNo, totalTroops = 0;
         for ( troopNo = 0; troopNo < availableTroops.length; ++troopNo )
         {
            totalTroops += availableTroops[troopNo][1];
         }

         aTb.appendChild($r([['class', 'tb3rnb']],[aCell = $td([['class', 'tb3cnb']]),$td()]));
         uiAddActionLink(aCell, totalTroops > 0, T('SELECTALLTROOPS'), uiSetMaxAllTroops);
      }

      //----------------------------------------------------------
      function uiAddSelectScoutLink(aTb)
      {
         var aCell, bCell, aInput;
         var scoutTI = getScoutTroopIndex(TB3O.U[1]);
         var troopNo = getTroopNoByIndex(availableTroops, scoutTI);
         var scoutsAvailable = ( troopNo === undefined ) ? 0 : availableTroops[troopNo][1];
         var scouts = parseInt10(TB3O.O[50]);
         if ( isNaN(scouts) ) { scouts = ( scoutsAvailable > 3 ) ? 3 : scoutsAvailable; }

         aTb.appendChild($r([['class', 'tb3rnb']],[
            aCell = $td([['class', 'tb3cnb']]), 
            $td(null,[
               I("u" + scoutTI),
               "\u00A0",
               aInput = $i([['class','text'], ['type','text'], ['id','tb_selectscoutnumber'], ['maxlength','6'], ['value',scouts]])
            ])
         ]));

         uiAddBuiltinUpDownControl(aInput);
         uiAddActionLink(aCell, scoutsAvailable > 0, T('SELECTSCOUT'), uiSetScout);
      }

      //----------------------------------------------------------
      function uiAddSelectFakeLink(aTb)
      {
         var aCell;
         var bCell = $td();
         var scoutTI = getScoutTroopIndex(TB3O.U[1]);
         var bHasTroops = false;
         var troopNo;
         for( troopNo = 0; troopNo < 8; ++troopNo )
         {
            if ( availableTroops[troopNo][1] > 0 && availableTroops[troopNo][0] !== scoutTI )
            {
               addChildren(bCell,[
                  I("u" + availableTroops[troopNo][0]),
                  $i([['type', 'checkbox'], ['id', 'tb_faketroop' + (troopNo)], ['value', '1']])
               ]);
               bHasTroops = true;
            }
         }

         aTb.appendChild($r([['class', 'tb3rnb']],[aCell = $td([['class', 'tb3cnb']]),bCell]));
         uiAddActionLink(aCell, bHasTroops, T('SELECTFAKE'), uiSetFakeUnit);
      }

      //----------------------------------------------------------
      var aTb = $t([["class", "tb3tbnb tbSendTroopsMenu"]]);
      insertBefore(sendContainer, aTb); // add to DOM very first for uiAddBuiltinUpDownControl
      uiAddSelectAllLink(aTb);
      uiAddSelectScoutLink(aTb);
      uiAddSelectFakeLink(aTb);
   }

   //-------------------------------------------------------------
   function uiModifySendTableTroop(troopNo)
   {
      var aInput = searchTroopsInput(troopNo);
      aInput.addEventListener('keyup',  bind(onChangeUnitsCount,[troopNo]), false);
      aInput.addEventListener('change', bind(onChangeUnitsCount,[troopNo]), false);
      uiAddBuiltinUpDownControl(aInput);

      var aParent = aInput.parentNode;
      var unitImg = $nth_tag(aParent,"img",0);
      unitImg.addEventListener('click', bind(uiSetZeroTroop,[troopNo]), false);
      var aLink = $nth_tag(aParent,"a",0);
      aLink.addEventListener('click', bind(uiSetMaxTroop,[troopNo]), false);
      
   }

   //-------------------------------------------------------------
   function uiModifySendTable(sendTable)
   {
      foreachTroop(uiModifySendTableTroop);
      sendTable.appendChild($r($td([['colspan', '12'], ['style', 'text-align:center']],uiCreateTool("bDel", T('MTCL'), uiSetZeroAllTroops))));
   }

   //-------------------------------------------------------------
   function uiAddLastAttackTable()
   {
      
      var aF = $xf("//form[@name='snd']");
      if ( aF )
      {
         var bOK = $xf("//*[@id='btn_ok' and @name='s1']");
         if ( bOK ) { bOK.addEventListener('click', saveLastAttack, false); }

         var cstla = loadPersistentUserObject('stla');
         var stla = cstla[TB3O.ActiveVillageId];
         if ( stla )
         {
            var bsh = false;
            var xi;
            for ( xi = 2; xi < stla.length - 2; xi++ )
            {
               if (stla[xi] !== 0) { bsh = true; }
            }

            if ( bsh )
            {
               //create the last send attack table for this village
               var aTb = $t([['id', 'stla']]);
               var aRow = $r(null,[
                  $td([['class','stlahh1']],I('u' + (    TB3O.U[7]))),
                  $td(stla[2]),
                  $td([['class', 'stlahh']],I('u' + (3 + TB3O.U[7]))),
                  $td(stla[5]),
                  $td([['class', 'stlahh']],I('u' + (6 + TB3O.U[7]))),
                  $td(stla[8]),
                  $td([['class', 'stlahh']],I('u' + (8 + TB3O.U[7]))),
                  $td(stla[10])
               ]);

               var bRow = $r(null,[
                  $td([['class','stlahh1']], I('u' + (1 + TB3O.U[7]))),
                  $td(stla[3]),
                  $td([['class', 'stlahh']], I('u' + (4 + TB3O.U[7]))),
                  $td(stla[6]),
                  $td([['class', 'stlahh']], I('u' + (7 + TB3O.U[7]))),
                  $td(stla[9]),
                  $td([['class', 'stlahh']], I('u' + (9 + TB3O.U[7]))),
                  $td(stla[11])
               ]);

               var cRow = $r(null,[
                  $td([['class','stlahh1']], I('u' + (2 + TB3O.U[7]))),
                  $td(stla[4]),
                  $td([['class', 'stlahh']], I('u' + (5 + TB3O.U[7]))),
                  $td(stla[7]),
                  $td([['colspan', '2']])
               ]);

               if (stla.length > 14)
               {
                  cRow.appendChild($td([['class', 'stlahh']], I('uhero')));
                  cRow.appendChild($td(stla[12]));
               }
               else
               {
                  cRow.appendChild($td([['class', 'stlahh']]));
                  cRow.appendChild($td());
               }

               var dRow = null;
               if ( TB3O.O[52] === "1" )
               {
                  dRow = $r(null,[
                     $td([['class','stlahh1']],I("vmkls")),
                     $td([['class',  'stlac'],['colspan', '4']], uiCreateIntMapLinkXY2(stla[0],stla[1])),
                     $td([['class',  'stlac'],['colspan', '3']], stla[stla.length - 1])
                  ]);
               }

               var eRow = $r(null,[
                  $td([['class','stlahh1'], ['colspan', '2']], T("RESEND")),
                  $td([['class','stlac'], ['colspan','3'], ['style','width:100px;']],
                      uiCreateTool("bOK",T("YES"),setLastAttack)),
                  $td([['class','stlahh2'], ['colspan','2']], T("DEL")),
                  $td([['class', 'stlac']], 
                      uiCreateTool("del",T("DEL"),hideLastAttackSend))
               ]);

               addChildren(aTb, [aRow,bRow,cRow,dRow,eRow]);
               insertAfter($g("troops"), aTb);
            }
         }
      }
      

      function setLastAttack()
      {
         var tx, i;

         foreachTroop(_uiSetZeroTroop);

         for ( i = 2; i < stla.length - 2; i++ )
         {
            var troopNo = i - 2;
            var units = stla[i];
            var availableUnits = availableTroops[troopNo][1];
            if ( availableUnits > 0 )
            {
               if ( units > availableUnits ) { units = availableUnits; }
               uiSetTroop(troopNo, units);
            }
         }

         if (TB3O.O[52] === '1')
         {
            var xNode = $xf("//form[@name='snd']//*[@name='x']");
            var yNode = $xf("//form[@name='snd']//*[@name='y']");

            if ( xNode && yNode )
            {
               xNode.value = stla[0];
               yNode.value = stla[1];

               // force refresh stats
               var e = document.createEvent("Events");
               e.initEvent("change", true, false);
               xNode.dispatchEvent(e);
            }
         }

         uiSetAttackType(stla[stla.length - 2]);
         uiRefreshStats();
      }

      function hideLastAttackSend()
      {
         var xi;
         for (xi = 2; xi < stla.length; xi++)
         {
            stla[xi] = 0;
         }
         savePersistentUserObject('stla', stla, TB3O.ActiveVillageId);
         $g('stla').style.display = 'none';
      }

      function saveLastAttack()
      {
         var stla = [];
         stla[0] = $xf("//form[@name='snd']//*[@name='x']").value;
         stla[1] = $xf("//form[@name='snd']//*[@name='y']").value;
         var i;
         for ( i = 0; i < sendTroops.length; ++i )
         {
            stla[i + 2] = sendTroops[i][1];
         }

         var rbl = $xf("//form//input[@name='c']", 'l');
         for (i = 0; i < rbl.snapshotLength; i++)
         {
            if ( rbl.snapshotItem(i).checked == true )
            {
               stla[stla.length] = rbl.snapshotItem(i).value;
               stla[stla.length] = rbl.snapshotItem(i).parentNode.textContent;
            }
         }

         savePersistentUserObject('stla', stla, TB3O.ActiveVillageId);
      }
   }

   //-------------------------------------------------------------
   var elems = searchRallyPointSendElems();
   if ( elems )
   {
      var sendContainer = elems[0];
      var sendTable = elems[1];
      
      availableTroops = getAvailableTroopsInfo(sendTable);
      sendTroops = cloneObject(availableTroops);
      var i;
      for ( i = 0; i < sendTroops.length; ++i )
      {
         sendTroops[i][1] = 0;
      }

      uiAddTopMenu(sendContainer);
      uiModifySendTable(sendTable);

      statSendTable = uiCreateTroopsAttDefInfoTable2(sendTroops, T("STAT"), true);
      if ( statSendTable )
      {
         statSendTable.id = "tb_sendtroopstat";
         insertAfter(sendTable, statSendTable);
      }

      if ( crtUrl.queryKey.c === undefined ) { uiModifyDefaultAttackType(); }

      

      if ( TB3O.O[51] === "1") 
      {
         uiAddLastAttackTable();
      }
   }

   
}
//////////////////////////////////////////////////////////////////////
function searchRallyPointDismissElems()
{
   var dismissTable = $xf("//table[@class='troop_details']");
   var dismissContainer = null;
   if ( dismissTable )
   {
      dismissContainer = dismissTable.parentNode;
   }
   

   return ( dismissContainer ) ? [dismissContainer,dismissTable] : null;
}

//////////////////////////////////////////////////////////////////////
// for accurate work need to parse RP first
function uiModifyRallyPointDismiss()
{
   var availableTroops, dismissTroops, remainsTroops;
   var statDismissTable, statRemainsTable;

   //-------------------------------------------------------------
   function getDismissTroopsInfo(dismissTable)
   {
      var troopsInfo = [];

      var iCells = dismissTable.rows[1].cells;
      var qCells = dismissTable.rows[2].cells;
      var len = iCells.length;

      var i;
      for ( i = 1; i < len; ++i )
      {
         var unitImg = $nth_tag(iCells[i],"img",0);
         var aInput = $nth_tag(qCells[i],"input",0);
         if ( unitImg && aInput )
         {
            var index = getTroopIndexTitleFromImg(unitImg)[0];
            var count = parseInt10(aInput.value);
            troopsInfo.push([index,count]);
         }
         else
         {
            troopsInfo.push([null,0]);
         }
      }
      return troopsInfo;
   }

   //-------------------------------------------------------------
   function uiRefreshStats()
   {
      if ( statRemainsTable )
      {
         uiFillTroopsAttDefInfoTable2(statRemainsTable, remainsTroops);
      }
      if ( statDismissTable )
      {
         uiFillTroopsAttDefInfoTable2(statDismissTable, dismissTroops);
      }
   }

   //-------------------------------------------------------------
   function searchTroopsInput(troopNo)
   {
      return $xf("//input[@name='t[" + (troopNo+1) + "]']");
   }

   //-------------------------------------------------------------
   function updateTroop(troopNo, units)
   {
      dismissTroops[troopNo][1] = units; 
      remainsTroops[troopNo][1] = availableTroops[troopNo][1] - units;
   }

   //-------------------------------------------------------------
   function foreachTroop(f)
   {
      var troopNo;
      for ( troopNo = 0; troopNo < availableTroops.length; ++troopNo )
      {
         var count = availableTroops[troopNo][1];
         if ( count > 0 )
         {
            f(troopNo);
         }
      }
   }

   //-------------------------------------------------------------
   function uiSetTroop(troopNo, units)
   {
      var aInput = searchTroopsInput(troopNo);
      if ( aInput )
      {
         aInput.value = ( units ) ? units : "";
         updateTroop(troopNo, units);
      }
   }

   //-------------------------------------------------------------
   function _uiSetMaxTroop(troopNo)
   {
      uiSetTroop(troopNo, availableTroops[troopNo][1]);
   }

   //-------------------------------------------------------------
   function uiSetMaxTroop(troopNo)
   {
      _uiSetMaxTroop(troopNo);
      uiRefreshStats();
   }

   //-------------------------------------------------------------
   function uiSetMaxAllTroops()
   {
      foreachTroop(_uiSetMaxTroop);
      uiRefreshStats();
   }

   //-------------------------------------------------------------
   function _uiSetZeroTroop(troopNo)
   {
      uiSetTroop(troopNo, 0);
   }

   //-------------------------------------------------------------
   function uiSetZeroTroop(troopNo)
   {
      _uiSetZeroTroop(troopNo);
      uiRefreshStats();
   }

   //-------------------------------------------------------------
   function uiSetZeroAllTroops()
   {
      foreachTroop(_uiSetZeroTroop);
      uiRefreshStats();
   }

   //-------------------------------------------------------------
   function onChangeUnitsCount(troopNo)
   {
      var units = 0;
      if ( this.value !== "" ) 
      {
         units = Number(this.value);
         if ( isNaN(units) || units > availableTroops[troopNo][1] )
         {
            units = availableTroops[troopNo][1];
         }
         else if ( units < 0 )
         {
            units = 0;
         }
         this.value = units;
      }
      updateTroop(troopNo, units);
      uiRefreshStats();
   }

   //-------------------------------------------------------------
   function uiModifyDismissTable(dismissTable)
   {
      var iCells = dismissTable.rows[1].cells;
      var qCells = dismissTable.rows[2].cells;
      var len = iCells.length;

      iCells[0].textContent = "";
      iCells[0].appendChild(uiCreateTool("del", T('MTCL'), uiSetZeroAllTroops));
      iCells[0].style.textAlign="center";

      var aRow = $r([['class','tbInject']],
                    $td(
                       $action(null, "(" + T('ALL') + ")", uiSetMaxAllTroops)));

      var i;
      for ( i = 1; i < len; ++i )
      {
         var aInput = $nth_tag(qCells[i],"input",0);
         var aCell = $td();
         if ( aInput )
         {
            aInput.addEventListener('keyup',  bind(onChangeUnitsCount,[i-1]), false);
            aInput.addEventListener('change', bind(onChangeUnitsCount,[i-1]), false);

            aCell.appendChild($action([['class',( aInput.value > 9999 ) ? "tbMany" : ""]], 
                                       "(" + aInput.value + ")", 
                                       bind(uiSetMaxTroop,[i-1])));

            var unitImg = $nth_tag(iCells[i],"img",0);
            unitImg.addEventListener('click', bind(uiSetZeroTroop,[i-1]), false);
            unitImg.style.cursor = "pointer";

            iCells[i].appendChild(uiCreateUpDownControl(aInput));
         }
         aRow.appendChild(aCell);
      }
      insertAfter(dismissTable.rows[2],aRow);
   }

   //-------------------------------------------------------------
   function uiAddDistanceInfo(dismissContainer, dismissTable)
   {
      var aLink = $nth_tag(dismissTable.rows[0].cells[0],"a",0);
      if ( aLink )
      {
         var mapId = parseUri(aLink.href).queryKey.d;
         if ( mapId )
         {
            var tRace = TB3O.U[1];
            var tImg = $nth_tag(dismissTable.rows[1].cells[1],"img",0);
            if ( tImg )
            {
               tRace = getRaceFromTroopIndex(getTroopIndexTitleFromImg(tImg)[0]);
            }

            var aTb = uiCreateTroopsMerchantsDistTable("tb_dismisstroopsdist", null, mapId,
                                                   { show_arrival_time:true, race:tRace,
                                                     show_coords:true, show_troops:true });
            if ( aTb ) 
            {
               dismissContainer.appendChild(aTb);
            }
         }
      }
   }

   //-------------------------------------------------------------
   

   var elems = searchRallyPointDismissElems();
   if ( elems )
   {
      var dismissContainer = elems[0];
      var dismissTable = elems[1];

      availableTroops = getDismissTroopsInfo(dismissTable);
      dismissTroops = cloneObject(availableTroops);
      remainsTroops = cloneObject(availableTroops);
      var i;
      for ( i = 0; i < remainsTroops.length; ++i )
      {
         remainsTroops[i][1] = 0;
      }

      uiModifyDismissTable(dismissTable);

      statRemainsTable = uiCreateTroopsAttDefInfoTable2(remainsTroops, T("STAT_REMAINS"), true);
      if ( statRemainsTable )
      {
         insertAfter(dismissTable, statRemainsTable);
      }

      statDismissTable = uiCreateTroopsAttDefInfoTable2(dismissTroops, T("STAT_DISMISS"), true);
      if ( statDismissTable )
      {
         insertAfter(dismissTable, statDismissTable);
      }

      if ( crtUrl.queryKey.newdid === undefined ) 
      {
         uiAddDistanceInfo(dismissContainer, dismissTable);
      }
   }
   
} 


//////////////////////////////////////////////////////////////////////
//return the number of villages that can be built based on the number of CP available
function cp2villages(cp)
{
   var noVil;

   if ( TB3O.nServerType === 1 ) 
   {
      noVil = Math.round(Math.pow(3 * cp / 1600, 1 / 2.3));
   }
   else if ( TB3O.nServerType === 2 ) 
   {
      noVil = Math.round(Math.pow(cp / 800, 1 / 2.3));
   }
   else if ( TB3O.nServerType === 3 ) 
   {
      noVil = Math.round(Math.pow(cp / 320, 1 / 2.3));
   }
   else if ( TB3O.nServerType === 4 ) 
   {
      noVil = Math.round(Math.pow(cp / 160, 1 / 2.3));
   }
   else if ( TB3O.O[1] === "1" ) 
   {
      noVil = Math.round(Math.pow(cp / 2000, 1 / 2));
   }
   else 
   {
      noVil = Math.round(Math.pow(cp / 1600, 1 / 2.3));
   }

   return noVil;
}

//////////////////////////////////////////////////////////////////////
//return the no of CP needed to create a specific no of villages (version from fr3nchlover)
function villages2cp(noVil)
{
   var cp;
   if ( noVil <= 1 )
   {
      cp = 0;
   } 
   else if ( TB3O.nServerType === 1 ) // 3x
   {
      cp = Math.round(1.6 / 3 * Math.pow(noVil-1, 2.3) * 10) * 100;
   }
   else if ( TB3O.nServerType === 2 ) // 2x
   {
      cp = Math.round(8 * Math.pow(noVil-1, 2.3)) * 100;
   }
   else if ( TB3O.nServerType === 3 ) // 5x
   {
      cp = Math.round(3.2 * Math.pow(noVil-1, 2.3)) * 100;
   }
   else if ( TB3O.nServerType === 4 ) // 10x
   {
      cp = Math.round(1.6 * Math.pow(noVil-1, 2.3)) * 100;
   }
   else if ( TB3O.O[1] === "1" ) 
   {
      cp = Math.round(2 * Math.pow(noVil-1, 2) * 10) * 100;
   }
   else 
   {
      cp = Math.round(1.6 * Math.pow(noVil-1, 2.3)) * 1000;
   }
   return cp;
}


//////////////////////////////////////////////////////////////////////
// create the new cp to villages table
function uiCreateCulturePointsTable(titleCP, crtVil, crtTotalCP, prodTotalCP)
{
   var cpTable = $t([['id', 'cptable']],
                    $e("thead",null,
                    [
                       $r(null,
                       [
                          $td([['rowspan', 2]], T('VILLAGE')),
                          $td([['colspan', 2]], I("cp",[['title',titleCP]])),
                          $td([['colspan', 2]], I("clock"))
                       ]),
                       $r(null,
                       [
                          $td([],T('TOTAL')),
                          $td([],T('YOUNEED')),
                          $td([],T('NEWVILLAGEAV')),
                          $td([],T('TIMEUNTIL'))
                       ])
                    ]));

   var maxNewVillages = 1;
   var boolReachedMaxNewVillages = false;
   var i,xi;

   for ( i = 0; i < maxNewVillages && i < 50; i++ )
   {
      var cellsContent, strClass;
      //get the necessary CP for building/conquering a new village
      var reqCP = villages2cp(crtVil + i + 1);

      if ( reqCP <= crtTotalCP )
      {
         cellsContent = [crtVil + i + 1, reqCP, '0', T('NOW'), '0:00:00'];
         strClass = 'CG';
         maxNewVillages += 1;
      }
      else
      {
         if ( !boolReachedMaxNewVillages )
         {
            maxNewVillages += 2;
            boolReachedMaxNewVillages = true;
         }
         //time until able to build/conquer a new village
         var tiempo = ((reqCP - crtTotalCP) / prodTotalCP) * 86400;
         
         cellsContent = [crtVil + i + 1, reqCP, reqCP - crtTotalCP, formatDateTimeRelative(tiempo, 0), formatTimeSpan(tiempo, 1)];
         strClass = 'CR';
      }

      var cpRow = $r();
      for ( xi = 0; xi < 5; xi++ )
      {
         cpRow.appendChild($td([['class', strClass]],cellsContent[xi]));
      }
      cpTable.appendChild(cpRow);
   }
   return cpTable;
}

//////////////////////////////////////////////////////////////////////
function uiModifyCultureTab()
{
   

   var info = getCulturePoints();
   if  ( info )
   {
      var idxItem = 0;
      //CP for all villages
      var prodTotalCP = info.cp[++idxItem];
      
      if ( info.cp.length > 4 )
      {
         // add hero CP production
         prodTotalCP += info.cp[++idxItem];
      }
      
      //Current no of CP
      var crtTotalCP = info.cp[++idxItem];
      //CP needed to create a new village
      var pc_aldea_prox = info.cp[++idxItem];
      //No of current villages
      var crtVil = cp2villages(pc_aldea_prox);

      

      var titleCP = "Culture";
      var menu = searchAndParseTabMenu();
      if ( menu ) { titleCP = menu.items[menu.active][0]; }

      var cpTable = uiCreateCulturePointsTable(titleCP, crtVil, crtTotalCP, prodTotalCP);
      info.container.appendChild(cpTable);
   }

   
}
//////////////////////////////////////////////////////////////////////
function VillagesList()
{
   this.mapIndex2Id = [];
   this.links = {};
   this.vCount = 0;
   this.vActiveId = undefined;

   // vTable - DOM node for villages list
   this.vTable = $g("villageList");

   //-------------------------------------------------------------
   var aSeparators = loadSeparators();

   //-------------------------------------------------------------
   this.getSeparatorState = function (pos)
   {  
      return aSeparators[pos];
   };

   //-------------------------------------------------------------
   this.uiToggleSeparatorState = function (pos)
   {  
      if ( pos > 0 )
      {
         aSeparators[pos] = (!aSeparators[pos]) - 0;
         this.uiDisplaySeparator(pos,aSeparators[pos]);
         saveSeparators(aSeparators);
      }
   };
}


//////////////////////////////////////////////////////////////////////
// prep to resize if need
VillagesList.prototype.prepareTableChanges = function()
{
   //this.dSideInfo.style.width = 'auto';
};

//////////////////////////////////////////////////////////////////////
VillagesList.prototype.fixTableChanges = function()
{
   var width;

   // fix table header
   if ( this.zi === 1 )
   {
      this.vTable.rows[0].cells[0].colSpan = this.vTable.rows[1].cells.length;
   }
};

//////////////////////////////////////////////////////////////////////
VillagesList.prototype.uiDisplaySeparator = function(pos,bShow) 
{
   var vRow;

   if ( pos > 0 && pos < this.vCount )
   {
      vRow = this.vTable.rows[pos+this.zi];
      if ( vRow )
      {
         vRow.className = bShow ? "tb3sep" : "";
      }
   }
};

//////////////////////////////////////////////////////////////////////
VillagesList.prototype.getxVillage = function(pos) 
{
   var vRow = this.vTable.rows[pos+this.zi];
   return getVillageFromRow(vRow,this.zi);
};

//////////////////////////////////////////////////////////////////////
VillagesList.prototype.getLink = function(villageId) 
{
   return this.links[villageId];
};

//////////////////////////////////////////////////////////////////////
//
VillagesList.prototype.uiRefresh = function(villageId /*opt*/)
{
};


//////////////////////////////////////////////////////////////////////
function parseCoords(str)
{
   if ( !parseCoords.re )
   {
      parseCoords.re =
       /(?:\(([+-]?\d+).*[|].*?([+-]?\d+)\))|(?:([+-]?\d+)\).*[|].*?\(([+-]?\d+))/;
   }

   var x = null, y = null;
   var matches = parseCoords.re.exec(str);
   
   if ( matches )
   {
      if ( matches[0].charAt(0) === '(' )
      {
         x = parseInt10(matches[1]); 
         y = parseInt10(matches[2]); 
      }
      else
      {
         x = parseInt10(matches[4]); 
         y = parseInt10(matches[3]); 
      }
   }

   

   return [x,y];
}

//////////////////////////////////////////////////////////////////////
// Read list of villages:
//    - actualize TB3O.VillagesInfo
//    - fill and return VillagesList
function getVillagesList()
{
   

   var villagesList = new VillagesList();
   var pos;
   var villageId,villageInfo;

   // cleanup position in list 
   for ( villageId in TB3O.VillagesInfo ) 
   {
      TB3O.VillagesInfo[villageId].posInListOrg = null;
   }

   if ( villagesList.vTable ) 
   {
      var vlist = $xf(".//ul/li[contains(@class,'entry')]/a", 'l', villagesList.vTable);

      var reCoords = /\(([+-]?\d+).*[|].*?([+-]?\d+)\)/;

      // retrieve villages info
      for ( pos = 0; pos < vlist.snapshotLength; pos++)
      {
         var vLinkNode = vlist.snapshotItem(pos);
         var vLink = vLinkNode.href;
         villageId = parseUri(vLink).queryKey.newdid;
         villagesList.links[villageId] = vLink;

         if ( TB3O.VillagesInfo[villageId] )
         {
            villageInfo = TB3O.VillagesInfo[villageId];
         }
         else
         {
            villageInfo = new VillageInfo();
            TB3O.VillagesInfo[villageId] = villageInfo;
         }

         villageInfo.name = vLinkNode.textContent;
         villageInfo.id = villageId;
         var xy = parseCoords(vLinkNode.title);
         villageInfo.x = xy[0]; 
         villageInfo.y = xy[1]; 

         villageInfo.posInListOrg = pos;
         villagesList.mapIndex2Id[pos] = villageId;

         if ( hasClass(vLinkNode,'active') )
         {
             villagesList.vActiveId = villageId;
         }

         ++villagesList.vCount;
      }
   }

   // cleanup orphaned villages
   for ( villageId in TB3O.VillagesInfo ) 
   {
      if ( TB3O.VillagesInfo[villageId].posInListOrg === null )
      {
         delete TB3O.VillagesInfo[villageId];
      }
   }
   

   return villagesList;
}


//////////////////////////////////////////////////////////////////////
// modify list of villages
function uiModifyVillagesList()
{
   

   var villagesList = TB3O.VillagesList;
   var bAllowCustomization = (TB3O.O[91] === "1");
   var vRow, aCell, aLink;
   var villageInfo,resourcesInfo,villageId,mapId;
   var i,xi,pos;
   var cpph,strImg;
   var fCreateResourceTooltip;
   var aResCells = new Array(5);
   var infoCell;

   if ( !villagesList.vTable ) 
   {
      villagesList.uiCreate();
      if ( !villagesList.vTable ) return;
   }

   villagesList.prepareTableChanges();
   uiModifyVillageListHeader(villagesList);

   if ( bAllowCustomization )
   {
      villagesList.vTable.rules = "rows"; // separators support
      // customize village list order
      uiRestoreListOrder();
   }

   // prepare icon cells and preload info
   if ( TB3O.O[17] === "1" )
   {
      aResCells[0] = $c(" " + "<img src='" + image["pop"] + "'>", [['style', 'text-align:' + docDir[0] + ';']]);
   }

   if ( TB3O.O[15] === "1" || TB3O.O[16] === "1" )
   {
      for ( xi = 1; xi <= 4; xi++ )
      {
         aResCells[xi] = $c(" " + gIc["r" + xi], [['style', 'text-align:' + docDir[0] + ';']]);
      }
   }

   if ( TB3O.O[19] === "1" )
   {
      infoCell = $c();
      infoCell.appendChild($img([['src', image["info"]]]));
   }

   // modify list of villages
   for ( i = villagesList.zi; i < villagesList.vTable.rows.length; i++ )
   {
      pos = i - villagesList.zi;
      vRow = villagesList.vTable.rows[i];
      villageId = villagesList.mapIndex2Id[i];
      villageInfo = TB3O.VillagesInfo[villageId];
      resourcesInfo = villageInfo.r;
      mapId = xy2id(villageInfo.x,villageInfo.y);
      fCreateResourceTooltip = bind(uiCreateResourceTooltip,[villageId]);

      var villageResKnown = ( resourcesInfo.dUpd !== undefined );

      // show population
      if (TB3O.O[17] === "1")
      {
         if ( villageInfo.pop !== undefined )
         {
            aCell = $c(villageInfo.pop, [['style', 'color:darkgreen;']]);
         }
         else
         {
            aCell = $c("<a href='" + spLnk + "'>?</a>");
         }
         vRow.appendChild(aResCells[0].cloneNode(true));
         vRow.appendChild(aCell);
      }

      // show res prod/h
      if ( TB3O.O[15] === "1" )
      {
         for ( xi = 1; xi < 4; xi++ )
         {
            vRow.appendChild(aResCells[xi].cloneNode(true));
            aCell = $c(villageResKnown ? resourcesInfo.EPpH[xi-1] : "?");
            uiAddTooltip(aCell,fCreateResourceTooltip);
            vRow.appendChild(aCell);
         }
      }

      //show effective crop prod/h
      if (TB3O.O[16] === "1")
      {
         vRow.appendChild(aResCells[4].cloneNode(true));
         cpph = villageResKnown ? resourcesInfo.EPpH[3] : "?";
         aCell = $c(cpph);

         if ( villageResKnown )
         {
            uiSetEffectiveCropPpH(aCell,cpph)
         }
         uiAddTooltip(aCell,fCreateResourceTooltip);
         vRow.appendChild(aCell);
      }

      // dorf1 & dorf2
      if (TB3O.O[12] === "1")
      {
         for ( xi = 1; xi < 3; xi++ )
         {
            aCell = $c();
            aLink = $a("", [['href', 'dorf' + xi + '.php?newdid=' + villageId]]);
            strImg = (xi === 1) ? "ov" : "iv";
            aLink.appendChild($img([['src', image[strImg]], ['title', villageInfo.name + " (dorf" + xi + ".php)"]]));
            aCell.appendChild(aLink);
            vRow.appendChild(aCell);
         }
      }

      // center on map
      if ( TB3O.O[13] === "1" )
      {
         aCell = $c();
         aLink = $a("", [['href', 'karte.php?z=' + mapId]]);
         aLink.appendChild($img([['src', image["centermap"]], ['title', T('CENTERMAP') + " (" + villageInfo.name + ")"]]));
         aCell.appendChild(aLink);
         vRow.appendChild(aCell);
      }

      // infotip
      if ( TB3O.O[19] === "1" )
      {
         if ( villageInfo.BiP.length || villageInfo.TM.length ) 
         {
            aCell = infoCell.cloneNode(true);
            uiAddTooltip(aCell,bind(uiCreateBiPTMTooltip,[aCell,villageId]));
         }
         else
         {
            aCell = $c();
         }

         vRow.appendChild(aCell);
      }

      // show send icons
      if ( TB3O.O[99] === "1")
      {
         if ( villageId !== actV.vNewdid)
         {
            vRow.appendChild($c("<a href='a2b.php?z=" + mapId + "'>" + gIc["def1_1"] + "</a>"));
            vRow.appendChild($c("<a href='build.php?z=" + mapId + "&gid=17'>" + gIc["r41"] + "</a>"));
         }
         else
         {
            vRow.appendChild($c());
            vRow.appendChild($c());
         }
      }

      if ( crtUrl.path === "/karte.php" )
      {
         if (TB3O.O[57] === "1" && TB3O.xCrt != -1000 && TB3O.yCrt != -1000)
         {
            var lDist = getDistance(villageInfo.x, villageInfo.y, TB3O.xCrt, TB3O.yCrt);
            vRow.appendChild($c(" " + "<img src='" + image["dist" + docDir[0].substr(0, 1)] + "'>" + " " + lDist.toFixed(2), [['style', 'color:blue;']]));
         }
      }

      // restore separator
      if ( bAllowCustomization )
      {
         if ( villagesList.getSeparatorState(pos) )
         {
            villagesList.uiDisplaySeparator(pos,true);
         }
      }
   }

   if ( TB3O.O[92] !== "1" )
   {
      uiUnlockTable();
   }
   else
   {
      villagesList.fixTableChanges();
   }

   

   return;

   //////////////////////////////////////////////////////////////////////
   // customize village list order
   function uiRestoreListOrder()
   {
      // normalize saved positions in list
      // all position must be between 0 and vCount, no duplicates allowed
      var mapPos2Id = [];
      var aUnPosId = [];
      var i,pos,villageId,villageInfo;

      for ( villageId in TB3O.VillagesInfo ) 
      {
         pos = parseInt10(TB3O.VillagesInfo[villageId].posInListCur);

         if ( !isNaN(pos) && mapPos2Id[pos] === undefined )
            mapPos2Id[pos] = villageId;
         else
            aUnPosId[aUnPosId.length] = villageId;

         TB3O.VillagesInfo[villageId].posInListCur = TB3O.VillagesInfo[villageId].posInListOrg;
      }

      // remove undefined entries
      for ( pos = 0; pos < mapPos2Id.length; ++pos )
      {
         if ( mapPos2Id[pos] === undefined )
            mapPos2Id.splice(pos,1);
      }
      

      // sort unpositioned villages
      aUnPosId.sort(function(id1, id2) 
                    {
                       return TB3O.VillagesInfo[id1].posInListOrg-TB3O.VillagesInfo[id2].posInListOrg;
                       //return compare(TB3O.VillagesInfo[id1].name,TB3O.VillagesInfo[id2].name);
                    });

      // concatenate two arrays
      for ( i = 0; pos < TB3O.VillagesCount; ++pos,++i )
      {
         mapPos2Id[pos] = aUnPosId[i];
      }

      // restore villages order
      for ( pos = 0; pos < TB3O.VillagesCount; ++pos )
      {
          villageInfo = TB3O.VillagesInfo[mapPos2Id[pos]];
          if ( pos !== villageInfo.posInListCur ) 
          {
             uiSwapRows(pos+villagesList.zi,villageInfo.posInListCur+villagesList.zi,true);
          }
      }
   }

   //////////////////////////////////////////////////////////////////////
   function uiLockTable()
   {
      var i,vRow;

      for (i = villagesList.zi; i < villagesList.vTable.rows.length; i++)
      {
         vRow = villagesList.vTable.rows[i];
         vRow.deleteCell(3);
         vRow.deleteCell(2);
         vRow.deleteCell(1);
      }
      villagesList.fixTableChanges();
   }

   //////////////////////////////////////////////////////////////////////
   function uiUnlockTable()
   {
      var i;
      var vRow, upCell, downCell, editCell;

      if ( !bAllowCustomization ) return;

      villagesList.prepareTableChanges();
      for ( i = villagesList.zi; i < villagesList.vTable.rows.length; i++ )
      {
         vRow = villagesList.vTable.rows[i];
         upCell = vRow.insertCell(1);
         if (i > villagesList.zi)
         {
            upCell.appendChild(uiCreateTool("aup",T('VLISTUP'),bind(onSwapRows,[i,i-1])));
         }

         downCell = vRow.insertCell(2);
         if (i < villagesList.vTable.rows.length - 1)
         {
            downCell.appendChild(uiCreateTool("adn",T('VLISTDOWN'),bind(onSwapRows,[i,i+1])));
         }

         editCell = vRow.insertCell(3);
         editCell.appendChild(uiCreateTool("editbookmark",T('VLISTEDIT'),bind(uiProperties,[villagesList.mapIndex2Id[i]])));
      }
      villagesList.fixTableChanges();
      return;

      function onSwapRows(i,j) 
      {
         uiSwapRows(i,j,false) 
         saveVillagesInfo(TB3O.VillagesInfo);    
      }
   }

   //////////////////////////////////////////////////////////////////////
   function uiSwapRows(i,j,bAllCells) 
   {
      var rowI = villagesList.vTable.rows[i];
      var rowJ = villagesList.vTable.rows[j];
      var len = rowI.cells.length;
      var k,tmp;

      for ( k = 0; k < len; ++k )
      {
         // swap all rows without tools
         if ( bAllCells || TB3O.O[92] === "1" || k < 1 || k > 3 )
         {
            var cellI = rowI.cells[k];
            var cellJ = rowJ.cells[k];
            var cellTmp = cellI.parentNode.replaceChild(cellJ.cloneNode(true),cellI);
            cellJ.parentNode.replaceChild(cellTmp,cellJ);
         }
      }

      tmp = TB3O.VillagesInfo[villagesList.mapIndex2Id[j]].posInListCur;
      TB3O.VillagesInfo[villagesList.mapIndex2Id[j]].posInListCur = TB3O.VillagesInfo[villagesList.mapIndex2Id[i]].posInListCur;
      TB3O.VillagesInfo[villagesList.mapIndex2Id[i]].posInListCur = tmp;

      tmp = villagesList.mapIndex2Id[j];
      villagesList.mapIndex2Id[j] = villagesList.mapIndex2Id[i];
      villagesList.mapIndex2Id[i] = tmp;
   }


   //////////////////////////////////////////////////////////////////////
   function uiProperties(villageId) 
   {
      var villageInfo = TB3O.VillagesInfo[villageId];
      
   }

   //////////////////////////////////////////////////////////////////////
   //show Buildings in Progress and Troop Movements in a tooltip
   function uiCreateBiPTMTooltip(cell,villageId)
   {
      var tI = uiCreateBiPTMTable(villageId);

      if ( !tI )
      {
         
         cell.parentNode.replaceChild($c(),cell);
      }
      return tI;
   }

   //////////////////////////////////////////////////////////////////////
   function uiModifyVillageListHeader(villagesList)
   {
      var vlH = $xf(".//a[contains(@href, 'dorf3.php')]",null,villagesList.dlr1);

      if ( vlH )
      {
         var strCount = T('ALDEAS') + " (" + villagesList.vCount + "):&nbsp;&nbsp;"
         vlH.href = modifyDorf3Url(vlH.href);

         if (vlH.parentNode.nodeName === "TD") 
         {
            vlH.innerHTML = strCount;
         }
         else 
         {
            vlH.firstChild.innerHTML = strCount;
         }

         uiModifyVillageListToolbar();
      }
      return;

      function uiModifyVillageListToolbar()
      {
         removeElement($g("TB_VillageListToolbar"));
         var toolbar = uiToolbar_Create("TB_VillageListToolbar",
                       [
                          uiCreateTool("editbookmark",T('VLISTOPTIONS'),onOptions)
                       ]);

         if (TB3O.O[17] === '1')
         {
            uiToolbar_AddTools(toolbar,
                       [
                          uiCreateTool("reload",T('UPDATEPOP'),onUpdatePopulation)
                       ]);
         }

         if ( bAllowCustomization && villagesList.vCount > 1 )
         {
            uiToolbar_AddTools(toolbar,
                       [
                          uiCreateTool("addbmspacer",T('VLISTSEP'),onSeparator),
                          TB3O.O[92] != "1" ?
                             uiCreateTool("unlocked" + docDir[0].substring(0, 1),T('92.L'),onLock) :
                             uiCreateTool("locked" ,T('92.U'),onUnlock) 
                       ]);
         }
         insertAfter(vlH, toolbar);
      }

      //-------------------------------------------------------------
      function onOptions() 
      {
         
      }

      //-------------------------------------------------------------
      function onSeparator() 
      {
         villagesList.uiToggleSeparatorState(TB3O.VillagesInfo[actV.vNewdid].posInListCur);
      }

      //-------------------------------------------------------------
      function onLock() 
      {
         TB3O.O[92] = "1"; 
         uiLockTable();
         uiModifyVillageListToolbar()
         setGMcookieV2('TB3Setup', TB3O.O, 'SETUP'); 
      }

      //-------------------------------------------------------------
      function onUnlock() 
      {
         TB3O.O[92] = "0"; 
         uiUnlockTable();
         uiModifyVillageListToolbar()
         setGMcookieV2('TB3Setup', TB3O.O, 'SETUP'); 
      }
      
      //-------------------------------------------------------------
      function onUpdatePopulation()
      {
         ajaxLoadDocument(spLnk, 
            function (xhr_doc)
            {
               getVillagesPopulation(xhr_doc);
               saveVillagesInfo(TB3O.VillagesInfo);
               // TODO: update population column without reloading
               pauseScript(892);
               location.reload(true);
            });
      }
   }
}


//////////////////////////////////////////////////////////////////////
function uiCreate2ndVillageListWidget()
{
   

   if ( TB3O.O[18] === "1" ) 
   {
      var vL2Tb = uiCreate2ndVLtable();
      var vL2XY = TB3O.O[78].split("|");
      var strTitle = "<a href='dorf3.php" + modifyDorf3Url("") + "'>" + T('VGL') + "</a>";
      $df(250, vL2XY[0], vL2XY[1], strTitle, "vl2table", "vl2tableTT", true, vL2Tb);
      if ( TB3O.O[73] !== "1" ) { vL2Tb.style.display = 'none'; }
   }
   
}

//////////////////////////////////////////////////////////////////////
function uiCreate2ndVLtable()
{
   var bAllowCustomization = (TB3O.O[91] === "1");
   var aTb = $t([['id', 'vl2table']]);
   var mapPos2Id = getVillagesOrder(TB3O.VillagesInfo);
   var maxRows = Math.ceil(mapPos2Id.length / 2);
   var i;
   var aRow,cCell;

   for (i = 1; i <= maxRows; i++)
   {
      aRow = $r();
      uiCreateCells(aRow,i-1);

      cCell = $c('', [['style', 'width:10px;']]);
      aRow.appendChild(cCell);

      if ( i + maxRows <= mapPos2Id.length )
      {
         uiCreateCells(aRow,i-1+maxRows);
      }
      else
      {
         cCell = $c("", [['colspan', '4']]);
         if ( mapPos2Id.length === 1 ) $at(cCell, [['style', 'width:250px;']]);
         aRow.appendChild(cCell);
      }
      aTb.appendChild(aRow);
   }
   return aTb;

   function uiCreateCells(aRow,pos)
   {
      var strBx = '&nbsp;&#8226&nbsp;&nbsp';
      var aCell = $c(strBx);
      var villageId = mapPos2Id[pos];
      var villageInfo = TB3O.VillagesInfo[villageId];
      var mapId = xy2id(villageInfo.x,villageInfo.y);
      var bSep = bAllowCustomization && TB3O.VillagesList.getSeparatorState(pos);

      if ( villageInfo.id === TB3O.ActiveVillageId ) 
      {
         aCell.className = "av";
      }
      if ( bSep ) addClass(aCell,"tb3sep");

      aCell.appendChild($a(villageInfo.name, [['href', TB3O.VillagesList.getLink(villageId)]]));
      aRow.appendChild(aCell);

      aCell = $c("(" + villageInfo.x + "|" + villageInfo.y + ")", [['class', 'coord']]);
      if ( bSep ) addClass(aCell,"tb3sep");
      aRow.appendChild(aCell);

      aCell = $c("<a href='a2b.php?z=" + mapId + "'>" + gIc["def1_1"] + "</a>");
      if ( bSep ) addClass(aCell,"tb3sep");
      aRow.appendChild(aCell);

      aCell = $c("<a href='build.php?z=" + mapId + "&gid=17'>" + gIc["r41"] + "</a>");
      if ( bSep ) addClass(aCell,"tb3sep");
      aRow.appendChild(aCell);
   }
}
//////////////////////////////////////////////////////////////////////
//time and resource counters
// Known problems: for accurate countdown unires (ri=4) need to 
// restart timers when one of resources reach max capacity
function setTimers()
{
   

   function tmUpdateResource(ri, quantum)
   {
      var i;
      var resNodesList = document.getElementsByClassName("timeout" + ri);

      for ( i = 0; i < resNodesList.length; ++i )
      {
         var aResNode = resNodesList.item(i);
         var cap = parseInt10(getTBAttribute(aResNode,"cap"));
         var bCapReached = false;
         var quantity = parseInt10(aResNode.textContent);
         var new_quantity = quantity - quantum;

         if ( !isNaN(cap) && cap > 0 )
         {
            if ( ( quantum < 0 && new_quantity >= cap ) ||
                 ( quantum > 0 && new_quantity <= cap ) ) 
            { 
               new_quantity = cap; 
               if ( quantity !== cap )
               {
                  bCapReached = true;
               }
            }
         }

         if ( new_quantity >= 0 ) 
         {
            aResNode.textContent = new_quantity;
         }

         if ( new_quantity === 0 ) { eventResZeroCountdown(aResNode); }
         else if ( bCapReached )   { eventResCapReached(aResNode); }

         if ( (quantity <  100000 && new_quantity >= 100000 ) ||
              (quantity >= 100000 && new_quantity <  100000 ) ) { eventResThresholdCrossing(aResNode); }

      }
   }

   //-------------------------------------------------------------
   // decrease time
   function tmDecreaseTimeouts()
   {
      function doTimeoutsNodeList(timeoutsList)
      {
         var i;
         for ( i = 0; i < timeoutsList.length; i++ )
         {
            var aTimeout = timeoutsList.item(i);
            var xTime = toSeconds(aTimeout.textContent);
            if ( !isNaN(xTime) )  
            { 
               if ( --xTime >= 0 ) 
               {
                  aTimeout.textContent = formatTimeSpan(xTime, 0); 
               }
            }
         }
      }	

      doTimeoutsNodeList(document.getElementsByClassName("timeouta"));
   }	

   //-------------------------------------------------------------
   function setResourceUpdateInterval(ri, nEPpH)
   {
      var minFrequency = TB3O.Timeouts.min_res_freq; // prevent the too frequent updates 
      var frequency, quantum;

      // milliseconds needed to produce/loose one resource item
      frequency = 3600000 / Math.abs(nEPpH);

      if ( isFinite(frequency) ) 
      {
         quantum = 1;

         if ( frequency < minFrequency )
         {
            quantum = Math.round(minFrequency / frequency);
            frequency *= quantum;
         }

         if ( nEPpH < 0 )
         {
            quantum = -quantum;
         }

         frequency = Math.floor(frequency);
         setInterval(bind(tmUpdateResource,[ri,quantum]), frequency);
      }
   }	

   //-------------------------------------------------------------
   var resourcesInfo = TB3O.ActiveVillageInfo.r;
   var nEPpHTot = 0;
   var ri;

   for ( ri = 0; ri < 4; ri++ )
   {
      var nEPpH = resourcesInfo.EPpH[ri];
      if ( !(nEPpH > 0 && resourcesInfo.Cap[ri] === resourcesInfo.Res[ri]) )
      {
         nEPpHTot += nEPpH;
      }
      setResourceUpdateInterval(ri, nEPpH);
   }
   setResourceUpdateInterval(4, nEPpHTot);

   setInterval(tmDecreaseTimeouts, TB3O.Timeouts.ttf_update);

   
}

//////////////////////////////////////////////////////////////////////
// do additional filtering of unsupported pages
function isExcludedPage()
{
   var bExclude = false;
   var i,e;

   // old versions of game
   var excludedId = ['sright','side_navi','sleft','ltop1','ltop5','lleft','lmidall','lmid2','lright1','lmid1'];
   for ( i = 0; i < excludedId.length; ++i )
   {
      if ( $g(excludedId[i]) )  { bExclude = true; break; }
   }

   if ( !bExclude )
   {
      e = $g("content");
      if ( e && hasClass(e,"login") )
      {
         bExclude = true;
      }
      else
      {
         e = $g("side_info");
         if ( e && hasClass(e,"outgame") )
         {
            bExclude = true;
         }
      }
   }
   
   
   return bExclude;
}

//////////////////////////////////////////////////////////////////////
function doPage()
{
   //===============================================================================
   //General actions
   setDefLang();
   if ( getGeneralData() )
   {
      var fullScreenMap = (crtUrl.path === "/karte.php" && "fullscreen" in crtUrl.queryKey);

      TB3O.VillagesInfo = loadVillagesInfo();

      //===============================================================================
      // Page detection and scanning
      //===============================================================================
      if ( crtUrl.path === "/spieler.php" ) 
      {
         processPlayerProfile();
      }

      if ( crtUrl.path !== "/nachrichten.php" )
      {
         var aI = $xf("//input[@type!='hidden']");
         if (aI) { aI.focus(); }
      } //PepiX

      if ( crtUrl.path === "/statistiken.php" ) 
      {
         getStatisticsMenu();
      }

      toJSvoid();
      //prepareDivDocking();

      TB3O.VillagesList = getVillagesList();
      if (TB3O.VillagesList.vTable)
      {
         TB3O.VillagesCount = TB3O.VillagesList.vCount;
         TB3O.ActiveVillageId = TB3O.VillagesList.vActiveId;

         if ( TB3O.U[4] !== "" && TB3O.U[5] === "")
         {
            getCapitalId();
         }
      }

      //getCrtLocation();

      /*
      if ( crtUrl.path !== "/karte.php" )
      {
         TB3O.boolIsNPCExluded = isThisNPCexcluded();
         if ( TB3O.boolIsThisNPC ) fillinNPCfields(urlNow);
      }
      */

      
      TB3O.ActiveVillageInfo = TB3O.VillagesInfo[TB3O.ActiveVillageId];

      //get special buildings cookie
      var spBcookie = getGMcookieV2("specBuildings");
      if ( spBcookie && spBcookie[TB3O.ActiveVillageId] ) 
      {
         TB3O.d2spB = spBcookie[TB3O.ActiveVillageId];
      }

      setVillageRes(TB3O.ActiveVillageId,document);

      //Actions for specific pages
      /*
      if (crtPage.match(/karte.php\?/) && crtPage.match(/d=/)) addTroopTimes();
      */


      if ( TB3O.pageSelector === "" && crtUrl.path === "/dorf1.php" )
      {
         processDorf1();
      } 
      else if ( TB3O.pageSelector === "" && 
                (crtUrl.path === "/dorf2.php" || 
                  (crtUrl.path === "/build.php" && $g("village_map"))) ) 
      {
         processDorf2();
      }
      else if ( TB3O.pageSelector === "" && crtUrl.path === "/dorf3.php" ) 
      {
         processDorf3();
      }
      else if ( TB3O.pageSelector === "" && crtUrl.path === "/a2b.php" ) 
      {
         //Send/dismiss troops page
         TB3O.pageSelector = ( crtUrl.queryKey.d ) ? "rally_point_dismiss" : "rally_point_send";
      }
      else if ( TB3O.pageSelector === "" && crtUrl.path === "/position_details.php") 
      {
         TB3O.pageSelector = "position_details";
      }
      else if ( TB3O.pageSelector === "" && crtUrl.path === "/berichte.php" ) 
      {
         TB3O.pageSelector = ( crtUrl.queryKey.id === undefined ) ? "report_list" : "report_view";
      }
      else if ( TB3O.pageSelector === "" && crtUrl.path === "/nachrichten.php" ) 
      {
         TB3O.pageSelector = ( crtUrl.queryKey.id !== undefined && crtUrl.queryKey.t === undefined ) ? "message_view" : "message_list";
         if ( crtUrl.queryKey.t === "1" ) { TB3O.pageSelector = "message_post"; }
      }
      else if ( TB3O.pageSelector === "profile_my" ) 
      {
         processMyProfile();
      }
      else if ( TB3O.pageSelector === "" && crtUrl.path === "/allianz.php" )
      {
         if ( !crtUrl.queryKey.s )
         {
            TB3O.pageSelector = "profile_alliance";
         }
         else if ( crtUrl.queryKey.s === "2" )
         {
            TB3O.pageSelector = "alliance_forum";
         }
      }
      else if ( TB3O.pageSelector === "" && crtUrl.path === "/karte.php" && 
                (crtUrl.query === "" || crtUrl.queryKey.z !== undefined ) )
      {
         TB3O.pageSelector = "map";
      }
      else if ( TB3O.pageSelector === "" && crtUrl.path === "/build.php" )
      {
         if ( crtUrl.queryKey.gid === "16" || crtUrl.queryKey.id === "39" ) // Rally point
         {
            TB3O.pageSelector = crtUrl.queryKey.tt ? "rally_point_club" : "rally_point_overview";
         }
         else if ( TB3O.pageSelector === "" && detectMarketSend() )
         {
            if ( TB3O.pageSelector === "market_send" )
            {
               processMarketSend();
            }
            else if ( TB3O.pageSelector === "market_send_confirm" )
            {
               //try to save the last transport for this village
               //processMarketSendConfirm();
            }
         }
      }

      //===============================================================================
      //    Data processing section
      //===============================================================================
      reconcileVillagesInfo(TB3O.VillagesInfo);
      TB3O.ResInfoTotals = getResInfoTotals();

      TB3O.bIsNPCInVillage = TB3O.bIsNPCAvailable &&       
                             isBuildingPresent(TB3O.ActiveVillageId,17);

      //===============================================================================
      //    Page modification section
      //===============================================================================
      setTravianStyles();
      setTBStyles()

      if ( TB3O.VillagesList )
      {
         //uiModifyVillagesList();
      }

      if ( !fullScreenMap )
      {
         hideAd();
         //addFillTimeRow();
         uiModifyBigIconsBar();
         //showDeleteAccount();
         //leftMenuLinks();
         if ( TB3O.VillagesList ) { uiCreate2ndVillageListWidget(); }
         uiCreateResBarWidget();
         showUserBookmarks();
         showNoteBlock();
         //showHeroStatus();
         uiCreateSearchBarWidget();
      }


      if ( crtUrl.path === "/build.php" )
      {
         //setTroopsNPC();
         //TB3O.isTtB = isThisTroopTrainingBuilding();

         if ( TB3O.pageSelector === "" )
         {
            //marketSell();

            if ( crtUrl.queryKey.t === "1" )
            {
               //addAllyColumnForMarketOffers();
               //marketBuy();
            }

            if ( crtUrl.queryKey.s === "2" )
            {
               uiModifyCultureTab();
            }
         }
      }

      if ( crtUrl.path === "/build.php" || crtUrl.path === "/hero_inventory.php" )
      {
         uiModifyContracts();
      }

      //if ( !TB3O.boolIsNPCExluded ) { NPCUpdate(); }
      //if (isPostNPC()) insertNPCHistoryLink();

      /*
      if (crtUrl.path === "/warsim.php" ) 
      {
         fillinwarsim();
      }
      */


      

      switch ( TB3O.pageSelector )
      {
         case "dorf1": 
            uiModifyDorf1(); 
            break;

         case "dorf2": 
            uiModifyDorf2();      
            break;

         case "dorf3": 
            uiModifyDorf3();      
            break;

         case "position_details":
            uiModifyPositionDetails(); 
            break;

         case "market_send": 
            uiModifyMarketSend(); 
            break;

         case "report_list": 
         case "message_list": 
            uiModifyMsgRptList();
            break;

         case "report_view": 
            uiModifyRptView();
            break;

         case "message_view": 
            uiModifyMsgView();
            break;

         case "message_post": 
            uiModifyMsgPost();
            break;

         case "profile_my": 
         case "profile_other": 
            uiModifyPlayerProfile(); 
            break;

         case "profile_alliance":    uiModifyAllianceProfile();   break;
         case "alliance_forum":      uiModifyAllianceForum();   break;

/*
         case "rally_point_overview":
            tableTotalVillageTroopsV3();
            incomeAttackingFillter();
            break;
            */

         case "rally_point_send":    uiModifyRallyPointSend();    break;
         case "rally_point_dismiss": uiModifyRallyPointDismiss(); break;
      }

      saveVillagesInfo(TB3O.VillagesInfo);

      // General actions continued
      if ( !crtPage.match(/\&t=1/) ) // except market buy
      {
         var bAddAttSendResLinks = false;
         var bAddCoordAndDistTT = false;

         if ( TB3O.pageSelector === "rally_point_overview" )
         {
            if ( TB3O.O[80] === "1" ) { uiAddTroopInfoTooltips(document); }
            bAddAttSendResLinks = ( TB3O.O[85] === "1" );
            bAddCoordAndDistTT =  ( TB3O.O[81] === "1" );
         } 
         else 
         {
            if ( TB3O.O[53] === "1" ) { uiAddTroopInfoTooltips(document); }
            bAddAttSendResLinks = ( TB3O.O[99] === "1" && crtUrl.path !== "/hero_adventure.php"
                                                                           && TB3O.pageSelector !== "position_details" );
            bAddCoordAndDistTT =  ( TB3O.O[54] === "1" && (crtUrl.path === "/spieler.php" ||
                                                                       TB3O.pageSelector.indexOf("market_send") === 0 ||
                                                                       isSomeOf(TB3O.pageSelector, "rally_point_dismiss", "message_view", "report_view")));
         }
         uiModifyLinks($g(ID_CONTENT),
                       {add_send_troops:bAddAttSendResLinks, add_coord_dist_tip:bAddCoordAndDistTT,
                        add_center_map:isSomeOf(TB3O.pageSelector, "rally_point_club")});
      }

      uiModifyLinks($g("llist")); 

      if ( !fullScreenMap )
      {
         setTimers();
         showTBTotalRuntime();
      }

      //uiUpdateGameLayout();
      //setTimeout(uiUpdateGameLayout, 0);
   }
}
   if ( !isExcludedPage() )
   {
      doPage();
   }

   /*
   window.addEventListener("beforeunload", 
       function () 
       {
          t = null; bCost = null; uc = null; image = null; TB3O = null; wsAnalysers = null; mapAnalysers = null; repSites = null; crtResUnits = null; capacity = null; prodPerHour = null; timeToFill = null; gIc = null;
          GM_log("beforeunload event");

       }, false);
   */

   
})();