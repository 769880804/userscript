// ==UserScript==
// @name           C++ Codeforces Sample Generator
// @namespace      http://mezhaka.com
// @description    Generate C++ stub for the codeforces problem description.
// @include        http://codeforces.com/contest/*/problem/*
// @include        http://codeforces.ru/contest/*/problem/*
// @include        http://codeforces.com/problemset/problem/*/*
// @include        http://codeforces./problemset/problem/*/*
// @include        http://www.codeforces.com/contest/*/problem/*
// @include        http://www.codeforces.ru/contest/*/problem/*
// @include        http://www.codeforces.com/problemset/problem/*/*
// @include        http://www.codeforces./problemset/problem/*/*
// ==/UserScript==

String.prototype.format = function() {
  var args = arguments;
  return this.replace(/{(\d+)}/g, function(match, number) { 
    return typeof args[number] != 'undefined'
      ? args[number]
      : match
    ;
  });
};

function GetContentElements(rootList) {
    var contentElementsList = [];
    for (var i = 0; i < rootList.length; i++) {
        var rootContentList = rootList[i].getElementsByTagName('pre');
        contentElementsList.push(rootContentList[0].innerHTML); 
    }
    return contentElementsList;
}

function SubstituteBrForNewline(myString) {
    var length;
    do {
        length = myString.length;
        myString = myString.replace('<br>', '\\n');
    } while (length != myString.length);

    if (myString[length - 2] == '\\' &&
        myString[length - 1] == 'n') {
        myString = myString.slice(0, length - 2);
    }
    return myString;
}

function GetInputsOutputs() {
    var inputs = document.getElementsByClassName('input');
    var outputs = document.getElementsByClassName('output');

    inputs = GetContentElements(inputs);
    outputs = GetContentElements(outputs);

    for (var i = 0; i < inputs.length; i++) {
        inputs[i] = SubstituteBrForNewline(inputs[i]);
        outputs[i] = SubstituteBrForNewline(outputs[i]);
    }

    var sampleTests = new Object;
    sampleTests.inputs = inputs;
    sampleTests.outputs = outputs;
    return sampleTests;
}

//var cppTemplate = '#include&nbsp&ltalgorithm><br /> #include&nbsp&ltiostream><br /> #include&nbsp&ltsstream><br /> #include&nbsp&ltstring><br /> #include&nbsp&ltvector><br /> #include&nbsp&ltqueue><br /> #include&nbsp&ltset><br /> #include&nbsp&ltmap><br /> #include&nbsp&ltcstdio><br /> #include&nbsp&ltcstdlib><br /> #include&nbsp&ltcctype><br /> #include&nbsp&ltcmath><br /> #include&nbsp&ltnumeric><br /> #include&nbsp&ltiterator><br /> #include&nbsp&ltstack><br /> #include&nbsp&ltlist><br /> <br /> <br /> #define&nbspfori(i,start,end)&nbspfor(int(i)=int(start);(i)&ltint(end);(i)++)<br /> #define&nbspall(a)&nbsp(a).begin(),&nbsp(a).end()<br /> #define&nbsprep(i,&nbspend)&nbspfori((i),&nbsp0,&nbsp(end))<br /> <br /> using&nbspnamespace&nbspstd;<br /> <br /> #ifndef&nbspONLINE_JUDGE<br /> void&nbspcompare(int&nbsptest_number,&nbspstringstream&&nbspoutput,&nbspstringstream&&nbspsolution)&nbsp{<br /> &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspcout&nbsp&lt&lt&nbsp"Test&nbsp"&nbsp&lt&lt&nbsptest_number&nbsp&lt&lt&nbsp":&nbsp";<br /> &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspif&nbsp(solution.str()&nbsp!=&nbspoutput.str())&nbsp{<br /> &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspcout&nbsp&lt&lt&nbsp"not&nbspok.\\nExpected:\n"&nbsp&lt&lt&nbspsolution.str()&nbsp&lt&lt&nbsp"\\nRecieved:\\n"&nbsp&lt&lt&nbspoutput.str()&nbsp&lt&lt&nbsp"\\n";<br /> &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp}&nbspelse&nbsp{<br /> &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspcout&nbsp&lt&lt&nbsp"ok.\n";<br /> &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp}<br /> }<br /> #endif<br /> <br /> <br /> void&nbspTheSolution(istream&&nbspinput,&nbspostream&&nbspoutput)&nbsp{<br /> <br /> }<br /> <br /> <br /> int&nbspmain()&nbsp{<br /> #ifdef&nbspONLINE_JUDGE<br /> &nbsp&nbsp&nbsp&nbspTheSolution(cin,&nbspcout);<br /> #else<br />{0}<br /> <br /> #endif<br /> &nbsp&nbsp&nbsp&nbspreturn&nbsp0;<br /> }<br />';
var cppTemplate = '/*&nbspPROBLEM=260_A;&nbsprm&nbsp"${PROBLEM}";&nbspmake&nbsp"${PROBLEM}"&nbspCPPFLAGS=-DONLINE_JUDGE;&nbsp./"${PROBLEM}"&nbsp&lt&nbspinput&nbsp*/<br />#include&nbsp&ltalgorithm><br />#include&nbsp&ltbitset><br />#include&nbsp&ltcassert><br />#include&nbsp&ltcctype><br />#include&nbsp&ltcfloat><br />#include&nbsp&ltclimits><br />#include&nbsp&ltcmath><br />#include&nbsp&ltcomplex><br />#include&nbsp&ltcstddef><br />#include&nbsp&ltcstdio><br />#include&nbsp&ltcstdlib><br />#include&nbsp&ltcstring><br />#include&nbsp&ltctime><br />#include&nbsp&ltdeque><br />#include&nbsp&ltfcntl.h><br />#include&nbsp&ltfstream><br />#include&nbsp&ltfunctional><br />#include&nbsp&ltiomanip><br />#include&nbsp&ltiostream><br />#include&nbsp&ltiterator><br />#include&nbsp&ltlimits><br />#include&nbsp&ltlist><br />#include&nbsp&ltmap><br />#include&nbsp&ltmemory.h><br />#include&nbsp&ltmemory><br />#include&nbsp&ltnumeric><br />#include&nbsp&ltqueue><br />#include&nbsp&ltset><br />#include&nbsp&ltsstream><br />#include&nbsp&ltstack><br />#include&nbsp&ltstring><br />#include&nbsp&ltunistd.h><br />#include&nbsp&lttr1/unordered_map><br />#include&nbsp&lttr1/unordered_set><br />#include&nbsp&ltutility><br />#include&nbsp&ltvector><br /><br />using&nbspnamespace&nbspstd;<br /><br />#ifndef&nbspONLINE_JUDGE<br />	#define&nbspDEBUG<br />#endif<br /><br />#define&nbspINF&nbsp(1LL&lt&lt32)<br />#define&nbspLINF&nbsp(long&nbsplong)&nbsp(1E18)<br />#define&nbspNINF&nbsp(-1*1E9)<br />#define&nbspEPS&nbsp(1E-9)<br />#define&nbspMOD&nbsp(1E9+9)<br />#define&nbspRAND&nbsp((rand()&lt&lt15)+rand())<br /><br />#define&nbspFO(i,s,e,p)&nbsp&nbspfor(int&nbspi=(s);i&lt(e);i+=p)<br />#define&nbspFOD(i,s,e,p)&nbspfor(int&nbspi=(s);i>(e);i-=p)<br />#define&nbspFOR(i,a,b)&nbsp&nbsp&nbspfor(int(i)=int(a);(i)&ltint(b);(i)++)<br />#define&nbspFOREQ(i,a,b)&nbspfor(int(i)=int(a);(i)&lt=int(b);(i)++)<br />#define&nbspRFOR(i,a,b)&nbsp&nbspfor(int(i)=(a),_b(b);(i)>=_b;--(i))<br />#define&nbspREP(i,n)&nbsp&nbsp&nbsp&nbsp&nbspFOR((i),0,(n))<br />#define&nbspFOREACH(c,itr)&nbspfor(__typeof((c).begin())&nbspitr=(c).begin();itr!=(c).end();itr++)<br />#define&nbspTR(c,itr)&nbsp&nbsp&nbsp&nbspfor&nbsp(typeof((c).begin())&nbspitr=(c).begin();&nbspitr!=(c).end();&nbspitr++)<br /><br />#define&nbsppresent(c,x)&nbsp&nbsp((c).find(x)&nbsp!=&nbsp(c).end())&nbsp&nbsp&nbsp&nbsp//&nbspSET/MAP<br />#define&nbspcpresent(c,x)&nbsp(find(all(c),x)&nbsp!=&nbsp(c).end())<br /><br />#define&nbspABS(x)&nbsp&nbsp&nbsp((x)&lt0?-(x):(x))<br />#define&nbspMAX(a,b)&nbsp((a)>(b)?(a):(b))<br />#define&nbspMIN(a,b)&nbsp((a)&lt(b)?(a):(b))<br />#define&nbspSQR(a)&nbsp&nbsp&nbsp((a)*(a))<br />#define&nbspSUM(a)&nbsp&nbsp&nbspaccumulate(all(a),string())<br /><br />#define&nbspFILL(arr,val)&nbspmemset((arr),(val),sizeof(arr))<br />#define&nbspCLR(a)&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspmemset((a),0,sizeof(a))<br />#define&nbspCPY(dest,src)&nbspmemcpy((dest),(src),sizeof(dest))<br /><br />#define&nbspALL(a)&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp(a).begin(),(a).end()<br />#define&nbspSZ(a)&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp((int)(a).size())<br />#define&nbspUNIQ(a)&nbsp&nbsp&nbsp&nbsp&nbsp&nbspsort(all(a));&nbsp(a).erase(unique(all(a)),(a).end())<br />#define&nbspIDX(arr,ind)&nbsp(lower_bound(all(arr),ind)-arr.begin())<br /><br />#define&nbspfst&nbspfirst<br />#define&nbspsnd&nbspsecond<br />#define&nbspX&nbsp&nbsp&nbspfirst<br />#define&nbspY&nbsp&nbsp&nbspsecond<br />#define&nbsppb&nbsp&nbsppush_back<br />#define&nbspmp&nbsp&nbspmake_pair<br />#define&nbsptri(a,b,c)&nbspmp(a,mp(b,c))<br /><br />#define&nbspLOG(a)&nbsp(cerr&lt&lt__LINE__&lt&lt":&nbsp"#a"&nbsp=&nbsp"&lt&lt(a)&lt&ltendl)<br />#define&nbspDBG(...)&nbsp(__VA_ARGS__)<br />#define&nbspdebug(args...)&nbsp{dbg,args;&nbspcerr&lt&ltendl;}<br />#define&nbspdline&nbspcerr&lt&ltendl<br />struct&nbspdebugger<br />{<br />&nbsptemplate&lttypename&nbspT>&nbspdebugger&&nbspoperator&nbsp,&nbsp(const&nbspT&&nbspv)<br />&nbsp{<br />&nbsp&nbspcerr&lt&ltv&lt&lt"&nbsp";<br />&nbsp&nbspreturn&nbsp*this;<br />&nbsp}<br />}&nbspdbg;<br />#define&nbspoo&nbsp0x3F3F3F3F<br />#ifdef&nbspDEBUG<br />	#define&nbspcvar(x)&nbspcerr&nbsp&lt&lt&nbsp"&lt"&nbsp&lt&lt&nbsp#x&nbsp&lt&lt&nbsp":&nbsp"&nbsp&lt&lt&nbspx&nbsp&lt&lt&nbsp">"<br />	#define&nbspevar(x)&nbspcvar&nbsp(x)&nbsp&lt&lt&nbspendl<br />	template&ltclass&nbspT>&nbspvoid&nbspDISP(const&nbspchar&nbsp*s,&nbspT&nbspx,&nbspint&nbspn)&nbsp{cerr&nbsp&lt&lt&nbsp"["&nbsp&lt&lt&nbsps&nbsp&lt&lt&nbsp":&nbsp";&nbspFOR(i,0,n)&nbspcerr&nbsp&lt&lt&nbspx[i]&nbsp&lt&lt&nbsp"&nbsp";&nbspcerr&nbsp&lt&lt&nbsp"]"&nbsp&lt&lt&nbspendl;}<br />	#define&nbspdisp(x,n)&nbspDISP(#x&nbsp"&nbspto&nbsp"&nbsp#n,&nbspx,&nbspn)<br />#else<br />	#define&nbspcvar(...)&nbsp({})<br />	#define&nbspevar(...)&nbsp({})<br />	#define&nbspdisp(...)&nbsp({})<br />#endif<br /><br />typedef&nbsplong&nbsplong&nbspLL;<br />typedef&nbspunsigned&nbsplong&nbsplong&nbspULL;<br />typedef&nbsplong&nbsplong&nbspint64;<br />typedef&nbspunsigned&nbsplong&nbsplong&nbspuint64;<br />typedef&nbspunsigned&nbspint&nbspuint;<br />typedef&nbsplong&nbspdouble&nbspreal;<br /><br />typedef&nbsppair&ltint,int>&nbspPII;<br />typedef&nbsppair&ltdouble,double>&nbspPDD;<br />typedef&nbsppair&ltint,double>&nbspPID;<br />typedef&nbsppair&ltLL,LL>&nbspPLL;<br />typedef&nbsppair&ltint,PII>&nbspTRI;<br /><br />typedef&nbspvector&ltint>&nbspVI;<br />typedef&nbspvector&ltLL>&nbspVL;<br />typedef&nbspvector&ltstring>&nbspVS;<br />typedef&nbspvector&ltPII>&nbspVII;<br />typedef&nbspvector&ltPID>&nbspVID;<br />typedef&nbspvector&ltPLL>&nbspVLL;<br />typedef&nbspvector&ltTRI>&nbspVT;<br />typedef&nbspvector&ltVI>&nbspVVI;<br />typedef&nbspvector&ltVL>&nbspVVL;<br />typedef&nbspvector&ltVII>&nbspVVII;<br />typedef&nbspvector&ltVLL>&nbspVVLL;<br />typedef&nbspvector&ltVT>&nbspVVT;<br /><br />typedef&nbspcomplex&ltdouble>&nbsppt;<br />typedef&nbspcomplex&ltLL>&nbsppti;<br /><br />const&nbspdouble&nbspPI&nbsp=&nbspacos(-1);<br /><br />template&ltclass&nbspT>&nbspinline&nbspT&nbspsqr(T&nbspx)&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp{return&nbspx&nbsp*&nbspx;}<br />template&ltclass&nbspT>&nbspinline&nbspT&nbspmin(T&nbspa,&nbspT&nbspb)&nbsp{return&nbsp(a&ltb)?a:b;}<br />template&ltclass&nbspT>&nbspinline&nbspT&nbspmax(T&nbspa,&nbspT&nbspb)&nbsp{return&nbsp(a>b)?a:b;}<br />template&ltclass&nbspT>&nbspinline&nbspbool&nbspchkmin(T&nbsp&a,&nbspT&nbspb)&nbsp{return&nbspa&nbsp>&nbspb&nbsp?&nbspa&nbsp=&nbspb,&nbsptrue&nbsp:&nbspfalse;}<br />template&ltclass&nbspT>&nbspinline&nbspbool&nbspchkmax(T&nbsp&a,&nbspT&nbspb)&nbsp{return&nbspa&nbsp&lt&nbspb&nbsp?&nbspa&nbsp=&nbspb,&nbsptrue&nbsp:&nbspfalse;}<br />//template&ltclass&nbspT>&nbspT&nbspgcd(T&nbspa,&nbspT&nbspb)&nbsp{&nbspreturn&nbspb?gcd(b,a%b):a;&nbsp}<br />template&nbsp&lttypename&nbspT>&nbspT&nbspgcd(T&nbspx,&nbspT&nbspy)&nbsp{for&nbsp(T&nbspt;&nbspx;&nbspt&nbsp=&nbspx,&nbspx&nbsp=&nbspy&nbsp%&nbspx,&nbspy&nbsp=&nbspt);&nbspreturn&nbspy;&nbsp}<br />int64&nbsppow(int64&nbspb,&nbspint64&nbspe,&nbspint64&nbspm)&nbsp{&nbspint64&nbspt&nbsp=&nbsp1;&nbspfor&nbsp(;&nbspe;&nbspe&nbsp>>=&nbsp1,&nbspb&nbsp=&nbspb&nbsp*&nbspb&nbsp%&nbspm)&nbspe&nbsp&&nbsp1&nbsp?&nbspt&nbsp=&nbspt&nbsp*&nbspb&nbsp%&nbspm&nbsp:&nbsp0;&nbspreturn&nbspt;&nbsp}<br />bool&nbspis_prime(int&nbspm)&nbsp{<br />	int&nbspu=sqrt(m);<br />	for&nbsp(int&nbspi=2;&nbspi&lt=u+1;&nbspi++)<br />	{<br />		if&nbsp(m%i==0)<br />		{<br />			return&nbspfalse;<br />		}<br />	}<br />	return&nbsptrue;<br />}<br />template&ltclass&nbspT><br />bool&nbsppairCompare(const&nbspT&nbsp&&nbspx,&nbspconst&nbspT&nbsp&&nbspy)<br />{<br />&nbsp&nbspreturn&nbspx.second&nbsp&lt&nbspy.second;<br />}<br />template&ltclass&nbspT><br />typename&nbspT::const_iterator&nbspmap_max_element(const&nbspT&nbsp&A)<br />{<br />&nbsp&nbsp&nbsp&nbsptypedef&nbsptypename&nbspT::value_type&nbsppair_type;<br />&nbsp&nbsp&nbsp&nbspreturn&nbspmax_element(A.begin(),&nbspA.end(),&nbsppairCompare&lttypename&nbspT::value_type>);<br />}<br />template&ltclass&nbspT><br />typename&nbspT::const_iterator&nbspmap_min_element(const&nbspT&nbsp&A)<br />{<br />&nbsp&nbsp&nbsp&nbsptypedef&nbsptypename&nbspT::value_type&nbsppair_type;<br />&nbsp&nbsp&nbsp&nbspreturn&nbspmin_element(A.begin(),&nbspA.end(),&nbsppairCompare&lttypename&nbspT::value_type>);<br />}<br /><br />template&ltclass&nbspedge>&nbspstruct&nbspGraph<br />{<br />	vector&ltvector&ltedge>&nbsp>&nbspadj;<br />	Graph(int&nbspn)&nbsp{adj.clear&nbsp();&nbspadj.resize&nbsp(n&nbsp+&nbsp5);}<br />	Graph()&nbsp{adj.clear&nbsp();&nbsp}<br />	void&nbspresize(int&nbspn)&nbsp{adj.resize&nbsp(n&nbsp+&nbsp5);&nbsp}<br />	void&nbspadd(int&nbsps,&nbspedge&nbspe){adj[s].push_back&nbsp(e);}<br />	void&nbspdel(int&nbsps,&nbspedge&nbspe)&nbsp{adj[s].erase&nbsp(find&nbsp(iter&nbsp(adj[s]),&nbspe));&nbsp}<br />	vector&ltedge>&&nbspoperator&nbsp[](int&nbspt)&nbsp{return&nbspadj[t];}<br />};<br /><br />struct&nbspPoint<br />{<br />	int&nbspX,Y;<br />};<br />bool&nbspoperator&nbsp&lt(Point&nbspA,Point&nbspB)<br />{<br />	return&nbsp(A.X==B.X)?(A.Y&ltB.Y):(A.X&ltB.X);<br />}<br /><br />#ifndef&nbspONLINE_JUDGE<br />	void&nbspcompare(int&nbsptest_number,&nbspstringstream&&nbspinput,&nbspstringstream&&nbspoutput,<br />	&nbspstringstream&&nbspsolution)<br />	{<br />		if&nbsp(solution.str()&nbsp!=&nbspoutput.str())<br />		{<br />			cout&nbsp&lt&lt&nbsp"Test&nbsp#"&nbsp&lt&lt&nbsptest_number&nbsp&lt&lt&nbsp":&nbsp"&nbsp&lt&lt&nbspinput.str()&nbsp&lt&lt&nbspendl<br />				&nbsp&lt&lt&nbsp"&nbsp&nbsp&nbsp&nbspExpected:&nbsp#"&nbsp&lt&lt&nbspsolution.str()&nbsp&lt&lt&nbsp"#"&nbsp&lt&lt&nbspendl<br />				&nbsp&lt&lt&nbsp"&nbsp&nbsp&nbsp&nbspReceived:&nbsp#"&nbsp&lt&lt&nbspoutput.str()&nbsp&lt&lt&nbsp"#"&nbsp&lt&lt&nbspendl;<br />		}<br />	}<br />#endif<br />#define&nbspASSERT(x,var)&nbsp\<br />	if&nbsp(!(x))&nbsp\<br />	{&nbsp\<br />		cout&nbsp&lt&lt&nbsp"ERROR!!&nbspAssert&nbsp"&nbsp&lt&lt&nbsp#x&nbsp&lt&lt&nbsp"&nbspfailed"&nbsp&lt&lt&nbspendl&nbsp\<br />			&nbsp&lt&lt&nbsp"&nbspvalue&nbsp=&nbsp"&nbsp&lt&lt&nbspvar&nbsp&lt&lt&nbspendl&nbsp\<br />			&nbsp&lt&lt&nbsp"&nbspon&nbspline&nbsp"&nbsp&lt&lt&nbsp__LINE__&nbsp&nbsp&lt&lt&nbspendl&nbsp\<br />			&nbsp&lt&lt&nbsp"&nbspin&nbspfile&nbsp"&nbsp&lt&lt&nbsp__FILE__&nbsp&lt&lt&nbspendl;&nbsp&nbsp\<br />		exit(1);&nbsp\<br />	}<br />///////////////////////////////////////////////////////<br />/**&nbspstring<br />	-&nbspsubstr([start,end])<br />	-&nbspempty()<br />	-&nbsplength()&nbsp**UNSIGNED**<br />	const&nbspstring&&nbsps;&nbspistringstream&nbspis(s);&nbspint&nbsptmp;&nbspis&nbsp>>&nbsptmp;<br />	int&nbsptmp;&nbspostringstream&nbspos;&nbspos&nbsp&lt&lt&nbsptmp;&nbspstring&nbsps&nbsp=&nbspos.str();<br />	-&nbspstring&nbspto&nbspchar*:&nbsp.c_str();&nbsp&#039\0&#039&nbspsuffix<br />	string&nbspstr(date,&nbspfind(date,&nbspdate+strlen(date),&nbsp&#039\0&#039));<br />	-&nbsp&#0391&#039->1:&nbsp-48<br />&nbsp&ltalgorithm><br />	-&nbspswap(a,b)<br />	-&nbspsort([r]begin,[r]end):&nbspasc/desc<br />	-&nbspfind(begin,end,elem)<br />	-&nbspcount(begin,end,elem)<br />	-&nbsp{prev,next}_permutation(begin,end)&nbsp**SORTED**<br />	-&nbspreverse(begin,end)<br />	-&nbsp{min,max}_element(all(v))&nbsp-&nbspv.begin()<br />&nbsp&ltvector>:&nbspvector&lt&nbspvector&ltint>&nbsp>&nbspMatrix(N,&nbspvector&ltint>(M,&nbsp-1));<br />&nbsp&ltset>:&nbsps.erase(s.find(10),&nbsps.find(100));&nbsp->&nbsperase&nbsp[10,100)<br />&nbsp&ltmap>:&nbspuse&nbspfind()&nbspin&nbsploops,&nbspinstead&nbspof&nbspoperator[]<br />&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspoperator[]&nbspinserts&nbspnew&nbspelement&nbspwith&nbspkey&nbspif&nbspnot&nbspfound<br />&nbspmap&ltstring,int>&nbsplookup;<br />&nbsp//&nbspset&nbspwith&nbspelements&nbspin&nbspdescending&nbsporder<br />&nbspset&ltpair&ltint,int>,&nbspgreater&ltpair&ltint,int>&nbsp>&nbsp>&nbsps;<br />*/<br />void&nbspreadonly_vector(const&nbspvector&ltint>&&nbspv)&nbsp{}<br />void&nbspmodify_vector(vector&ltint>&&nbspv)&nbsp{&nbsp/*v[0]++;*/&nbsp}<br />///////////////////////////////////////////////////////<br />int&nbspmain(int&nbspargc,&nbspchar**&nbspargv)<br />{<br />	ios_base::sync_with_stdio(false);<br />/*<br />	stringstream&nbspinput;<br />	input&nbsp&lt&lt&nbsp"260&nbsp150&nbsp10";<br />	stringstream&nbspsolution;<br />	solution&nbsp&lt&lt&nbsp"-1";<br />	stringstream&nbspoutput;<br />	TheSolution(input,&nbspoutput);<br />	compare(0,&nbspoutput,&nbspsolution);<br />*/<br />&nbsp&nbsp&nbsp&nbspreturn&nbsp0;<br />}<br />';
var cppSampleTemplate ='&nbsp&nbsp&nbsp&nbsp{<br />&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspstringstream&nbspinput;<br /> &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinput&nbsp&lt&lt&nbsp"{0}";<br /> &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspstringstream&nbspsolution;<br /> &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspsolution&nbsp&lt&lt&nbsp"{1}";<br /> &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<br /> &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspstringstream&nbspoutput;<br /> &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspTheSolution(input,&nbspoutput);<br /> <br /> &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspcompare({2},&nbspoutput,&nbspsolution);<br /> &nbsp&nbsp&nbsp&nbsp}<br />';

function GenerateSampleCode(template, samples) {
    var sampleCode = '';
    for (var i = 0; i < samples.inputs.length; i++) {
        var sample = template.format(samples.inputs[i], samples.outputs[i], i);
        sampleCode = sampleCode.concat(sample);
    }

    return sampleCode;
}

function main() {
    sampleTests = GetInputsOutputs();
    var stubCode = document.createElement('div');
    var formattedSamples = GenerateSampleCode(cppSampleTemplate, sampleTests);
    stubCode.innerHTML = cppTemplate.format(formattedSamples);
    document.body.appendChild(stubCode);
}

main();
