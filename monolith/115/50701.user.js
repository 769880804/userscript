// ==UserScript==
// @name          WebSVN Compare File Listing Sidebar
// @namespace     http://userscripts.org/scripts/show/50701
// @description   Add an auto-hiding sidebar with a file listing to WebSVN's compare
// @include       */comp.php?*
// ==/UserScript==

/*
 * This is a "user script" intended for use with the Greasemonkey extension for
 * Firefox.  When you view revision comparison results in WebSVN, it will
 * create an auto-hiding sidebar with a list of the files in the page to enable
 * faster navigation amongst the files in a large changeset.
 *
 * To install this script, you need Greasemonkey (see
 * http://greasemonkey.mozdev.org/).  After installation, browse to this
 * script again and Greasemonkey will prompt you to install the script
 * automatically.
 *
 * Tested with:
 *   Mozilla Firefox 3.0.10
 *   Greasemonkey 0.8.20080609.0 and 0.8.20090123.1
 *   WebSVN 2.0rc4 and 2.2.1
 */

/*
 * Copyright (c) 2008-2009, David O'Shea
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *   
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Return the HTML for the sidebar's configuration links that appear at the top
 * of the file listing.
 */
function configLinks(isLeft)
{
  if (isLeft)
  {
    return '<a href="#" class="shrinkSidebar">&lt;&lt; shrink</a> | ' +
           '<a href="#" class="expandSidebar">expand &gt;&gt;</a> | ' +
           '<a href="#" class="switchSides">switch sides</a><br><br>';
  }
  else
  {
    return '<a href="#" class="switchSides">switch sides</a> | ' +
           '<a href="#" class="expandSidebar">&lt;&lt; expand</a> | ' +
           '<a href="#" class="shrinkSidebar">shrink &gt;&gt;</a><br><br>';
  }
}

/*
 * Find the links generated by the code in configLinks() and attach event
 * listeners to them which perform the requested actions.
 */
function setupConfigLinkListeners()
{
  var allAs, thisA;
  allAs = outputDiv.getElementsByTagName('a');
  for (var aIdx = 0; aIdx < allAs.length; aIdx++)
  {
    thisA = allAs[aIdx];
    if (thisA.className == 'expandSidebar')
    {
      thisA.addEventListener('click', expandSidebarEventHandler, false);
    }
    if (thisA.className == 'shrinkSidebar')
    {
      thisA.addEventListener('click', shrinkSidebarEventHandler, false);
    }
    if (thisA.className == 'switchSides')
    {
      thisA.addEventListener('click', switchSidesEventHandler, false);
    }
  }
}

/*
 * Event handler for the "expand" link.
 */
function expandSidebarEventHandler(event) 
{
  var isLeft = GM_getValue("isLeft", true);
  var widthPct = GM_getValue("sidebarWidth", 50);
  if (widthPct < 90)
  {
    setSidebarWidth(widthPct + 10);
  }
  event.preventDefault();
}

/*
 * Event handler for the "shrink" link.
 */
function shrinkSidebarEventHandler(event)
{
  var isLeft = GM_getValue("isLeft", true);
  var widthPct = GM_getValue("sidebarWidth", 50);
  if (widthPct > 10)
  {
    setSidebarWidth(widthPct - 10);
  }
  event.preventDefault();
}

/*
 * Event handler for the "switch sides" link.
 */
function switchSidesEventHandler(event)
{
  var isLeft = GM_getValue("isLeft", true);
  isLeft = !isLeft;
  GM_setValue("isLeft", isLeft);
  applyIsLeft(isLeft);
  outputDiv.firstChild.innerHTML = configLinks(isLeft);
  outputDiv.firstChild.align = isLeft ? "left" : "right";
  setupConfigLinkListeners();
  event.preventDefault();
}

/*
 * Event handler called when the user mouses over mouseDiv (i.e. mouses out of
 * the sidebar) or clicks on a filename.
 */
function hideSidebarEventHandler(event)
{
  document.sidebarDiv.style.visibility = 'hidden';
  document.sidebarOutsideDiv.style.visibility = 'hidden';
}

/*
 * Adjust the BODY and the generated DIVs for the sidebar location isLeft which
 * is true if the sidebar is on the left and false if it is on the right.
 */
function applyIsLeft(isLeft)
{
  var widthPct = GM_getValue("sidebarWidth", 50);
  /*
   * Adjust the BODY's position to account for mouseDiv (so mouseDiv doesn't
   * overlap with the content).
   */
  if (isLeft)
  {
    document.body.style.left = "24px";
    document.body.style.right = "auto";
  }
  else
  {
    document.body.style.left = "auto";
    document.body.style.right = "24px";
  }

  outputDiv.style.left = isLeft ? "0px" : (100 - widthPct) + "%";
  if (isLeft)
  {
    outputDiv.style.borderRight = "2px solid #0000ff";
    outputDiv.style.borderLeftWidth = "0px";
  }
  else
  {
    outputDiv.style.borderLeft = "2px solid #0000ff";
    outputDiv.style.borderRightWidth = "0px";
  }
  if (isLeft)
  {
    mouseDiv.style.left = "0px";
    mouseDiv.style.right = "auto";
  }
  else
  {
    mouseDiv.style.left = "auto";
    mouseDiv.style.right = "0px";
  }
  /*
   * The greater-than or less-than symbol in mouseDiv needs to be adjusted to
   * point in the correct direction.
   */
  mouseDiv.innerHTML = '<tr><td style="vertical-align: middle; padding: 0px;">' + (isLeft ? '&gt;' : '&lt;') + '</td></tr>';

  applySidebarWidth(widthPct);
  hideSidebarEventHandler(null);
}

/*
 * Resize the sidebar DIV to the specified percent of the window size and store
 * it in the user's preferences.
 */
function setSidebarWidth(widthPct)
{
  GM_setValue("sidebarWidth", widthPct);
  applySidebarWidth(widthPct);
}

/*
 * Apply the visual styles to effect the specified sidebar DIV width setting.
 */
function applySidebarWidth(widthPct)
{
  var isLeft = GM_getValue("isLeft", true);

  document.sidebarDiv.style.width = widthPct + "%";
  document.sidebarDiv.style.left = isLeft ? "0px" : (100 - widthPct) + "%";
}

/*
 * Will be filled in with the HTML to be written to the sidebar.
 */
var outputHTML;

/*
 * Persistent configuration option set to true if the sidebar is on the left,
 * false if it is on the right.
 */
var isLeft = GM_getValue("isLeft", true);

/*
 * Sidebar content starts with the configuration links.
 */
if (isLeft)
{
  outputHTML = '<div align="left">' + configLinks(isLeft) + '</div>';
}
else
{
  outputHTML = '<div align="right">' + configLinks(isLeft) + '</div>';
}

/*
 * Following the configuration links, we have a list of files.
 */
outputHTML += '<pre>';
/*
 * Iterate through the DIV tags in the page to find the files - there is one
 * DIV tag per file.
 */
var allDivs, thisDiv;
allDivs = document.getElementsByTagName('div');
for (var divIdx = 0; divIdx < allDivs.length; divIdx++)
{
  thisDiv = allDivs[divIdx];
  if (thisDiv.className == 'newpath')
  {
    var fileName;
    /*
     * Sometimes the filename is shown in a B tag (with the old version/skin),
     * sometimes it is in an A tag (with the new version/skin).
     */
    var allBs = thisDiv.getElementsByTagName('b');
    if (allBs.length == 1)
    {
      fileName = allBs[0].textContent;
    }
    else if (allBs.length > 1)
    {
      alert('Unexpected error: there should be 0 or 1 B tags in DIV.newpath but there are ' + allBs.length);
      return 0;
    }
    else
    {
      var allAs = thisDiv.getElementsByTagName('a');
      if (allAs.length == 1)
      {
        fileName = allAs[0].textContent;
      }
      else
      {
        alert('Unexpected error: in a DIV.newpath, there are no B tags so there should be exactly 1 A tag but there are ' + allAs.length);
        return 0;
      }
    }
    var id = 'sidebar_' + divIdx;
    thisDiv.id = id;

    outputHTML += '<a href="#' + id + '" class="sidebarFileLink" target="_top">'
    + fileName + '</a><br>'
  }
}
outputHTML += '</pre>';

/*
 * Create and insert a DIV containing the content of the outputHTML variable.
 * This will initially be hidden as the sidebar is hidden until mouseover.
 */
var outputDiv = document.createElement('div');
document.body.insertBefore(outputDiv, null);
outputDiv.style.position = "fixed";
outputDiv.style.top = "0px";
outputDiv.style.height = "100%";
outputDiv.style.visibility = "hidden";
outputDiv.style.backgroundColor = "#ffffff";
outputDiv.style.zIndex = 99;
outputDiv.style.borderTopWidth = "0px";
outputDiv.style.borderBottomWidth = "0px";
outputDiv.style.overflow = 'scroll';
outputDiv.style.padding = "0px";
outputDiv.innerHTML = outputHTML;

/*
 * Create and insert a transparent DIV which is "behind" outputDiv (it has a
 * lower z-index) which we use to detect the mouse leaving outputDiv
 */
var outsideOutputDiv = document.createElement('div');
document.body.insertBefore(outsideOutputDiv, null);
outsideOutputDiv.style.position = "fixed";
outsideOutputDiv.style.top = "0px";
outsideOutputDiv.style.left = "0px";
outsideOutputDiv.style.width = "100%";
outsideOutputDiv.style.height = "100%";
outsideOutputDiv.style.visibility = "hidden";
outsideOutputDiv.style.zIndex = 97;

/*
 * Keep references to the above two DIVs in the document object so that event
 * listeners can access them to show/hide them.
 */
document.sidebarDiv = outputDiv;
document.sidebarOutsideDiv = outsideOutputDiv;

/*
 * Create and insert a narrow TABLE at the edge of the screen.  When the user
 * mouses over this element, the sidebar is displayed.
 */
var mouseDiv = document.createElement('table');
document.body.insertBefore(mouseDiv, null);
mouseDiv.style.position = "fixed";
mouseDiv.style.top = "0px";
mouseDiv.style.width = "20px";
mouseDiv.style.height = "100%";
mouseDiv.style.zIndex = 98;
mouseDiv.style.backgroundColor = "#0000ff";
mouseDiv.style.border = "2px outset #0000ff";
mouseDiv.style.color = "#ffffff";
mouseDiv.style.padding = "0px";

/*
 * When the user mouses over mouseDiv, show the two DIVs (sidebarDiv and
 * sidebarOutsideDiv).
 */
mouseDiv.addEventListener('mouseover', function(event) { document.sidebarDiv.style.visibility = 'visible'; document.sidebarOutsideDiv.style.visibility = 'visible'; }, false);
/*
 * When the user mouses over sidebarOutsideDiv (which is only visible if the
 * sidebar is visible), hide both DIVs.
 */
outsideOutputDiv.addEventListener('mouseover', hideSidebarEventHandler, false);

/*
 * applyIsLeft() adjusts the BODY's margins so that there is room for
 * mouseDiv; we need to set this to allow that to work.
 */
document.body.style.position = "absolute";

applyIsLeft(isLeft);
applySidebarWidth(GM_getValue("sidebarWidth", 50));

/*
 * Add click event listeners to the generated A HREF links in the sidebar.
 */
var allAs, thisA;
allAs = outputDiv.getElementsByTagName('a');
for (var aIdx = 0; aIdx < allAs.length; aIdx++)
{
  thisA = allAs[aIdx];
  if (thisA.className == 'sidebarFileLink')
  {
    thisA.addEventListener('click', hideSidebarEventHandler, false);
  }
}
/*
 * Add click event listeners for the config links.
 */
setupConfigLinkListeners();

/*
 * Set up CSS rules for our generated HTML.  Based on
 * http://diveintogreasemonkey.org/patterns/add-css.html
 */
var head, style;
head = outputDiv.getElementsByTagName('head')[0];
if (!head) {
  return;
}
style = document.createElement('style');
style.type = 'text/css';
style.innerHTML = 'A.sidebarFileLink:hover, A.expandSidebar:hover, A.shrinkSidebar:hover, A.switchSides:hover { background-color: #cfcfcf; }';
head.appendChild(style);
style = document.createElement('style');
style.type = 'text/css';
style.innerHTML = 'A.sidebarFileLink, A.expandSidebar, A.shrinkSidebar, A.switchSides { text-decoration: none; color: #000000; }';
head.appendChild(style);
