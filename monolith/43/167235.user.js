// ==UserScript==
// @name           iLight Library
// @version        1.0.0
// @author         ww_start_t - نايف الرشيدي
// @copyright      ©iLight inc.
// @license        LGPL
// @description    iLight JavaScript Library
// @include        *
// ==/UserScript==
/*!
 * iLight JavaScript Library v1.0.0
 *
 * Copyright 2012, 2013, iLight Inc. and other contributors
 * Released under the LGPL license
 * http://www.gnu.org/licenses/lgpl.html
 *
 * Date: 2013-5-11
 */
(function () { function isList(e) { if (e instanceof HTMLCollection) return true; else if (e instanceof NodeList) return true; return false } function $R(e, t) { if (window === this) return new $R(e, t ? t : null); var r = this; if (/\<(\!|)(\w+|\-*)(\s+[^>]+|)(\/|)\>/.test(e)) { function i() { var t = doc.createDocumentFragment(); var n = doc.createElement("div"); n.innerHTML = e; while (n.firstChild) t.appendChild(n.firstChild); return t } r.func = true; r.node = i; iLight.data = r; return this } else if (typeof e == "string") { if (t) r.node = t; else r.node = doc; var s = t instanceof DocumentFragment; if (/\/\//.test(e)) { var o = 0, u = e.split("//"), a = u.length; for (; o < a; o++) { con = /\[\d+\]/.test(u[o]); if (isList(r.node)) r.node = r.node[0]; if (!r.node || r.node == undefined) { return console.log('iLight: cannot find "' + u[o] + '"'); break } if (u[o].charAt(0) == "#" && o == 0 && !t && !con) r.node = r.node.getElementById(u[o].substring(1)); else if (u[o].charAt(0) == "." && !s) { if (con) r.node = r.node.getElementsByClassName(u[o].split("[")[0])[e.split("[")[1].split("]")[0]]; else r.node = r.node.getElementsByClassName(u[o]) } else if (/\[\D+]|\#|\w+\./.test(u[o]) || s) { if (o == a - 1 || con) { if (con) { j = u[o].match(/\[\d+\]/).toString().match(/\d+/), n = u[o].replace(/\[\d+\]/, ""); r.node = r.node.querySelectorAll(n)[j] } else { n = u[o]; r.node = r.node.querySelectorAll(n) } } else r.node = r.node.querySelector(u[o]) } else { if (con) r.node = r.node.getElementsByTagName(u[o].split("[")[0])[e.split("[")[1].split("]")[0]]; else r.node = r.node.getElementsByTagName(u[o]) } } } else { con = /\[\d+\]/.test(e); if (e.charAt(0) == "#" && !t && !con) r.node = r.node.getElementById(e.substring(1)); else if (e.charAt(0) == "." && !s) { if (con) r.node = r.node.getElementsByClassName(e.split("[")[0])[e.split("[")[1].split("]")[0]]; else r.node = r.node.getElementsByClassName(e) } else if (/\[\D+]|\#|\w+\./.test(e) || s) { if (con) { j = e.match(/\[\d+\]/).toString().match(/\d+/), n = e.replace(/\[\d+\]/, ""); r.node = r.node.querySelectorAll(n)[j] } else { r.node = r.node.querySelectorAll(e) } } else { if (con) r.node = r.node.getElementsByTagName(e.split("[")[0])[e.split("[")[1].split("]")[0]]; else r.node = r.node.getElementsByTagName(e) } } if (!r.node || r.node == undefined) { return console.log('iLight: $R("' + e + '") is undefined') } if (r.node && r.node.length) r.length = r.node.length; r.func = false } else { r.func = false; r.node = e } iLight.data = r; return this } function insert(e, t, n) { var r = t.node, i = typeof r == "function"; if (e.node) e = e.node; if (typeof e == "string") e = $R(e).node; if (isList(e)) { var s = 0, o = e.length; while (s < o) { if (isList(i ? r() : r)) { c = 0, ci = (i ? r() : r).length; while (c < ci) { if (e[s].parentNode) { if (e[s].previousElementSibling != null || n) { e[s].parentNode.insertBefore(i ? r()[c] : r[c], !n ? e[s].nextSibling : e[s]) } else e[s].parentNode.appendChild(i ? r()[c] : r[c]) } else e[s].appendChild(i ? r()[c] : r[c]); c++ } } else { if (e[s].parentNode) { if (e[s].nextElementSibling != null || n) { e[s].parentNode.insertBefore(i ? r() : r, !n ? e[s].nextSibling : e[s]) } else e[s].parentNode.appendChild(i ? r() : r) } else e[s].appendChild(i ? r() : r) } s++ } } else { if (isList(i ? r() : r)) { c = 0, ci = (i ? r() : r).length; while (c < ci) { if (e.parentNode) { if (e.nextElementSibling != null || n) { e.parentNode.insertBefore(i ? r()[c] : r[c], !n ? e.nextSibling : e) } else e.parentNode.appendChild(i ? r()[c] : r[c]) } else e.appendChild(i ? r()[c] : r[c]); c++ } } else { if (e.parentNode) { if (e.nextElementSibling != null || n) { e.parentNode.insertBefore(i ? r() : r, !n ? e.nextSibling : e) } else e.parentNode.appendChild(i ? r() : r) } else e.appendChild(i ? r() : r) } } return t } var ms = (new Date).getTime(), js = window, doc = document; js.iLight = js.$R = function (e, t) { if (e) return new $R(e, t ? t : null); return null }; js.iLight.data = {}; $R.prototype = { at: function (e) { if (isList(this.node)) this.node = this.node[e]; return this }, find: function (e) { return $R(e, isList(this.func ? this.node() : this.node) ? this.func ? this.node()[0] : this.node[0] : this.func ? this.node() : this.node) }, "this": function (e) { g = this.func ? this.node() : this.node; if (isList(g)) for (var t = 0; t < g.length; t++) e(g[t]); else e(g) }, remove: function () { var e = this, t = this.func ? e.node() : e.node, n; if (isList(t)) { n = t[0].parentNode; var r = 0, i = t.length; while (r < i) { t[r].parentNode.removeChild(t[r]); r++ } } else { n = t.parentNode; t.parentNode.removeChild(e.e) } return n }, empty: function () { var e = this, t = this.func ? e.node() : e.node; if (isList(t)) { var n = 0, r = t.length; while (n < r) { while (t[n].firstChild) t[n].removeChild(t[n].firstChild); n++ } } else while (t.firstChild) t.removeChild(t.firstChild); return this }, isEmpty: function () { var e = this, t = this.func ? e.node() : e.node; if (isList(t)) { var n = 0, r = t.length; while (n < r) { if (t[n].hasChildNodes()) { return false; break } } return true } else { if (t.hasChildNodes()) return false; else return true } }, appendText: function (e) { var t = this, n = this.func ? t.node() : t.node; if (isList(n)) { var r = 0, i = n.length; while (r < i) { n[r].appendChild(doc.createTextNode(e)); r++ } } else n.appendChild(doc.createTextNode(e)); return t }, appendHTML: function (e) { var t = this, n = this.func ? t.node() : t.node; if (isList(n)) { var r = 0, i = n.length; while (r < i) { n[r].insertAdjacentHTML("beforeend", e); r++ } } else n.insertAdjacentHTML("beforeend", e); return t }, setHTML: function (e) { var t = this, n = this.func ? t.node() : t.node; if (isList(n)) { var r = 0, i = n.length; while (r < i) { n[r].innerHTML = e; r++ } } else n.innerHTML = e; return t }, setText: function (e) { var t = this, n = this.func ? t.node() : t.node; if (isList(n)) { var r = 0, i = n.length; while (r < i) { n[r].textContent = e; r++ } } else n.textContent = e; return t }, getHTML: function () { var e = this, t = this.func ? e.node() : e.node; if (isList(t)) return t[0].innerHTML; else return t.innerHTML }, getText: function () { var e = this, t = this.func ? e.node() : e.node; if (isList(t)) return t[0].textContent; else return t.textContent }, appendTo: function (e) { j = this.node, f = typeof j == "function"; if (e.node) e = e.node; if (typeof e == "string") e = $R(e).node; if (isList(e)) { i = 0, li = e.length; while (i < li) { if (isList(f ? j() : j)) { c = 0, ci = (f ? j() : j).length; while (c < ci) { e.appendChild(f ? j()[c] : j[c]); c++ } } else e[i].appendChild(f ? j() : j); i++ } } else { if (isList(f ? j() : j)) { c = 0, ci = (f ? j() : j).length; while (c < ci) { e.appendChild(f ? j()[c] : j[c]); c++ } } else e.appendChild(f ? j() : j) } return this }, insertAfter: function (e) { return insert(e, this) }, insertBefore: function (e) { return insert(e, this, true) }, selectedOption: function (e) { g = this.func ? this.node() : this.node; if (isList(g)) g = g[0]; if (g.tagName != "SELECT") return this; if (e) { g.options[e].selected = "selected" } else { this.node = g.options[g.selectedIndex] } return this }, selectedIndex: function () { g = this, i = g.func ? g.node() : g.node; g.node = i.options[i.selectedIndex]; return g }, css: function (e, t) { if (e) { g = this.func ? this.node() : this.node; if (/\-/.test(e)) { var n = e.toLowerCase(); var r = [n.split("-")[0], n.split("-")[1].charAt(0).toUpperCase() + n.split("-")[1].slice(1)]; var i = r[0] + r[1]; if (t || t == "") if (isList(g)) for (var r = 0; r < g.length; r++) g[r].style[i] = t; else g.style[i] = t; else return (isList(g) ? g[0] : g).style[i]; return this } else { if (t || t == "") if (isList(g)) for (var r = 0; r < g.length; r++) g[r].style[e] = t; else g.style[e] = t; else return (isList(g) ? g[0] : g).style[e]; return this } } return this }, hide: function () { g = this.func ? this.node() : this.node; if (isList(g)) { c = g.length, i = 0; while (i < c) { g[i].style.display = "none"; i++ } } else g.style.display = "none"; return this }, show: function () { g = this.func ? this.node() : this.node; if (isList(g)) { c = g.length, i = 0; while (i < c) { g[i].style.display = ""; i++ } } else g.style.display = ""; return this }, toggle: function () { g = this.func ? this.node() : this.node; if (isList(g)) { c = g.length, i = 0; while (i < c) { g[i].style.display = g[i].style.display == "none" ? "" : "none"; i++ } } else g.style.display = g.style.display == "none" ? "" : "none"; return this }, prop: function (e) { g = this.func ? this.node() : this.node; if (isList(g)) g = this.node[0]; if (g[e]) return g[e]; else console.log("iLight: " + g + " has no " + e + ""); return g[e] }, value: function (e) { var t = this, n = t.func ? t.node() : t.node; if (e) { if (isList(n)) { var r = 0, i = n.length; while (r < i) { n[r].value = e; r++ } } else n.value = e; return t } else { if (isList(n)) n = n[0]; return n.value } return t }, setAttribute: function (e, t) { var n = this, r = n.func ? n.node() : n.node; if (typeof e == "object") { var i; if (isList(r)) { var s = 0, o = r.length; while (s < o) { for (i in e) r[s].setAttribute(i, e[i]); s++ } } else for (i in e) r.setAttribute(i, e[i]) } else if (e && t) { if (isList(r)) { var s = 0, o = r.length; while (s < o) { r[s].setAttribute(e, t); s++ } } else r.setAttribute(e, t) } return n }, getAttribute: function (e) { var t = this, n = t.func ? t.node() : t.node; if (isList(n)) return n[0].getAttribute(e); else return n.getAttribute(e) }, removeAttribute: function (e) { g = this.func ? this.node() : this.node; if (isList(g)) { c = g.length, i = 0; while (i < c) { if (/\,/.test(e)) { v = 0, nv = e.split(","), vi = nv.length; while (v < vi) { g[i].removeAttribute(nv[v]); v++ } } else g[i].removeAttribute(e); i++ } } else { if (/\,/.test(e)) { v = 0, nv = e.split(","), vi = nv.length; while (v < vi) { g.removeAttribute(nv[v]); v++ } } else g.removeAttribute(e) } return this }, click: function (e) { g = this.func ? this.node() : this.node; if (isList(g)) { c = g.length, i = 0; while (i < c) { if (e) g[i].addEventListener("click", e); else g[i].click(); i++ } } else { if (e) g.addEventListener("click", e); else g.click() } return this }, on: function (e, t) { if (!e || !t) { console.log("iLight: cannot set empty event!"); return this } g = this.func ? this.node() : this.node; if (isList(g)) { c = g.length, i = 0; while (i < c) { g[i]["on" + e] = t; i++ } } else g["on" + e] = t; return this }, event: function (e, t) { if (!e || !t) { console.log("iLight: cannot set empty event!"); return this } g = this.func ? this.node() : this.node; if (isList(g)) { c = g.length, i = 0; while (i < c) { g[i].addEventListener(e, t); i++ } } else g.addEventListener(e, t); return this }, hover: function (e, t) { g = this.func ? this.node() : this.node; if (isList(g)) { c = g.length, i = 0; while (i < c) { if (e) g[i].addEventListener("mouseover", e); if (t) g[i].addEventListener("mouseout", t); i++ } } else { if (e) g.addEventListener("mouseover", e); if (t) g.addEventListener("mouseout", t) } return this }, parent: function (e) { if (isList(this.node)) this.node = this.node[0]; if (this.node.parentNode) { if (e) { if (typeof e == "number") { var t = 0, n = this.node; while (t < e) { if (n.parentNode) { n = n.parentNode; if (t == e - 1) { this.node = n; return this; break } } else { console.log("iLight: " + n + " has less than " + e + " parents"); break } t++ } } else if (typeof e == "string") { e = e.toLowerCase(); var t = 0, n = this.node; while (n.parentNode) { if (n.parentNode.tagName != undefined) { n = n.parentNode; if (n.tagName.toLowerCase() == e) { this.node = n; return this; break } } else { console.log('iLight: cannot find parent("' + e + '")'); break } } } } else { this.node = this.node.parentNode } } else console.log("iLight: " + this.node + " has no parents"); return this }, next: function (e) { if (isList(this.node)) this.node = this.node[0]; if (this.node.nextElementSibling) { if (e) { if (typeof e == "number") { var t = 0, n = this.node; while (t < e) { if (n.nextElementSibling) { n = n.nextElementSibling; if (t == e - 1) { this.node = n; return this; break } } else { console.log("iLight: " + n + " has less than " + e + " siblings"); break } t++ } } else if (typeof e == "string") { e = e.toLowerCase(); var t = 0, n = this.node; while (n.nextElementSibling) { if (n.nextElementSibling.tagName != undefined) { n = n.nextElementSibling; if (n.tagName.toLowerCase() == e) { this.node = n; return this; break } } else { console.log('iLight: cannot find sibling("' + e + '")'); break } } } } else { this.node = this.node.nextElementSibling } } else console.log("iLight: " + this.node + " has no siblings"); return this }, prev: function (e) { if (isList(this.node)) this.node = this.node[0]; if (this.node.previousElementSibling) { if (e) { if (typeof e == "number") { var t = 0, n = this.node; while (t < e) { if (n.previousElementSibling) { n = n.previousElementSibling; if (t == e - 1) { this.node = n; return this; break } } else { console.log("iLight: " + n + " has less than " + e + " siblings"); break } t++ } } else if (typeof e == "string") { e = e.toLowerCase(); var t = 0, n = this.node; while (n.previousElementSibling) { if (n.previousElementSibling.tagName != undefined) { n = n.previousElementSibling; if (n.tagName.toLowerCase() == e) { this.node = n; return this; break } } else { console.log('iLight: cannot find sibling("' + e + '")'); break } } } } else { this.node = this.node.previousElementSibling } } else console.log("iLight: " + this.node + " has no siblings"); return this } }; js.iLight.ajax = function (e, t) { var n = e; var r = new XMLHttpRequest; if (n.method && n.url) { r.open(n.method, n.url); if (t) r.onload = function () { return t(r) }; if (n.send) r.send(n.send); else r.send(null) } return r }; js.iLight.parseJSON = function (a) { if (eval) return eval("(" + a + ")"); else return JSON.parse(a) }; js.iLight.loadTime = (new Date).getTime() - ms })(window);