// ==UserScript==
// @name           tweet this
// @namespace      twitter
// @description    integrates twitter with the set page
// @include        http://www.flickr.com/photos/*/sets/*
// ==/UserScript==
(function(){
	var set = unsafeWindow.page_set;
	var Y = unsafeWindow.YAHOO;
	var dom = Y.util.Dom;
	var h = document.getElementsByTagName('head')[0];
	var OAuth = null;
	
	// sha1.js and oauth.js from http://oauth.googlecode.com/svn/code/javascript
	var sha1_js = 'data:application/javascript;base64,LyoKICogQSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBTZWN1cmUgSGFzaCBBbGdvcml0aG0sIFNIQS0xLCBhcyBkZWZpbmVkCiAqIGluIEZJUFMgUFVCIDE4MC0xCiAqIFZlcnNpb24gMi4xYSBDb3B5cmlnaHQgUGF1bCBKb2huc3RvbiAyMDAwIC0gMjAwMi4KICogT3RoZXIgY29udHJpYnV0b3JzOiBHcmVnIEhvbHQsIEFuZHJldyBLZXBlcnQsIFlkbmFyLCBMb3N0aW5ldAogKiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQlNEIExpY2Vuc2UKICogU2VlIGh0dHA6Ly9wYWpob21lLm9yZy51ay9jcnlwdC9tZDUgZm9yIGRldGFpbHMuCiAqLwoKLyoKICogQ29uZmlndXJhYmxlIHZhcmlhYmxlcy4gWW91IG1heSBuZWVkIHRvIHR3ZWFrIHRoZXNlIHRvIGJlIGNvbXBhdGlibGUgd2l0aAogKiB0aGUgc2VydmVyLXNpZGUsIGJ1dCB0aGUgZGVmYXVsdHMgd29yayBpbiBtb3N0IGNhc2VzLgogKi8KdmFyIGhleGNhc2UgPSAwOyAgLyogaGV4IG91dHB1dCBmb3JtYXQuIDAgLSBsb3dlcmNhc2U7IDEgLSB1cHBlcmNhc2UgICAgICAgICovCnZhciBiNjRwYWQgID0gIiI7IC8qIGJhc2UtNjQgcGFkIGNoYXJhY3Rlci4gIj0iIGZvciBzdHJpY3QgUkZDIGNvbXBsaWFuY2UgICAqLwp2YXIgY2hyc3ogICA9IDg7ICAvKiBiaXRzIHBlciBpbnB1dCBjaGFyYWN0ZXIuIDggLSBBU0NJSTsgMTYgLSBVbmljb2RlICAgICAgKi8KCi8qCiAqIFRoZXNlIGFyZSB0aGUgZnVuY3Rpb25zIHlvdSdsbCB1c3VhbGx5IHdhbnQgdG8gY2FsbAogKiBUaGV5IHRha2Ugc3RyaW5nIGFyZ3VtZW50cyBhbmQgcmV0dXJuIGVpdGhlciBoZXggb3IgYmFzZS02NCBlbmNvZGVkIHN0cmluZ3MKICovCmZ1bmN0aW9uIGhleF9zaGExKHMpe3JldHVybiBiaW5iMmhleChjb3JlX3NoYTEoc3RyMmJpbmIocykscy5sZW5ndGggKiBjaHJzeikpO30KZnVuY3Rpb24gYjY0X3NoYTEocyl7cmV0dXJuIGJpbmIyYjY0KGNvcmVfc2hhMShzdHIyYmluYihzKSxzLmxlbmd0aCAqIGNocnN6KSk7fQpmdW5jdGlvbiBzdHJfc2hhMShzKXtyZXR1cm4gYmluYjJzdHIoY29yZV9zaGExKHN0cjJiaW5iKHMpLHMubGVuZ3RoICogY2hyc3opKTt9CmZ1bmN0aW9uIGhleF9obWFjX3NoYTEoa2V5LCBkYXRhKXsgcmV0dXJuIGJpbmIyaGV4KGNvcmVfaG1hY19zaGExKGtleSwgZGF0YSkpO30KZnVuY3Rpb24gYjY0X2htYWNfc2hhMShrZXksIGRhdGEpeyByZXR1cm4gYmluYjJiNjQoY29yZV9obWFjX3NoYTEoa2V5LCBkYXRhKSk7fQpmdW5jdGlvbiBzdHJfaG1hY19zaGExKGtleSwgZGF0YSl7IHJldHVybiBiaW5iMnN0cihjb3JlX2htYWNfc2hhMShrZXksIGRhdGEpKTt9CgovKgogKiBQZXJmb3JtIGEgc2ltcGxlIHNlbGYtdGVzdCB0byBzZWUgaWYgdGhlIFZNIGlzIHdvcmtpbmcKICovCmZ1bmN0aW9uIHNoYTFfdm1fdGVzdCgpCnsKICByZXR1cm4gaGV4X3NoYTEoImFiYyIpID09ICJhOTk5M2UzNjQ3MDY4MTZhYmEzZTI1NzE3ODUwYzI2YzljZDBkODlkIjsKfQoKLyoKICogQ2FsY3VsYXRlIHRoZSBTSEEtMSBvZiBhbiBhcnJheSBvZiBiaWctZW5kaWFuIHdvcmRzLCBhbmQgYSBiaXQgbGVuZ3RoCiAqLwpmdW5jdGlvbiBjb3JlX3NoYTEoeCwgbGVuKQp7CiAgLyogYXBwZW5kIHBhZGRpbmcgKi8KICB4W2xlbiA+PiA1XSB8PSAweDgwIDw8ICgyNCAtIGxlbiAlIDMyKTsKICB4WygobGVuICsgNjQgPj4gOSkgPDwgNCkgKyAxNV0gPSBsZW47CgogIHZhciB3ID0gQXJyYXkoODApOwogIHZhciBhID0gIDE3MzI1ODQxOTM7CiAgdmFyIGIgPSAtMjcxNzMzODc5OwogIHZhciBjID0gLTE3MzI1ODQxOTQ7CiAgdmFyIGQgPSAgMjcxNzMzODc4OwogIHZhciBlID0gLTEwMDk1ODk3NzY7CgogIGZvcih2YXIgaSA9IDA7IGkgPCB4Lmxlbmd0aDsgaSArPSAxNikKICB7CiAgICB2YXIgb2xkYSA9IGE7CiAgICB2YXIgb2xkYiA9IGI7CiAgICB2YXIgb2xkYyA9IGM7CiAgICB2YXIgb2xkZCA9IGQ7CiAgICB2YXIgb2xkZSA9IGU7CgogICAgZm9yKHZhciBqID0gMDsgaiA8IDgwOyBqKyspCiAgICB7CiAgICAgIGlmKGogPCAxNikgd1tqXSA9IHhbaSArIGpdOwogICAgICBlbHNlIHdbal0gPSByb2wod1tqLTNdIF4gd1tqLThdIF4gd1tqLTE0XSBeIHdbai0xNl0sIDEpOwogICAgICB2YXIgdCA9IHNhZmVfYWRkKHNhZmVfYWRkKHJvbChhLCA1KSwgc2hhMV9mdChqLCBiLCBjLCBkKSksCiAgICAgICAgICAgICAgICAgICAgICAgc2FmZV9hZGQoc2FmZV9hZGQoZSwgd1tqXSksIHNoYTFfa3QoaikpKTsKICAgICAgZSA9IGQ7CiAgICAgIGQgPSBjOwogICAgICBjID0gcm9sKGIsIDMwKTsKICAgICAgYiA9IGE7CiAgICAgIGEgPSB0OwogICAgfQoKICAgIGEgPSBzYWZlX2FkZChhLCBvbGRhKTsKICAgIGIgPSBzYWZlX2FkZChiLCBvbGRiKTsKICAgIGMgPSBzYWZlX2FkZChjLCBvbGRjKTsKICAgIGQgPSBzYWZlX2FkZChkLCBvbGRkKTsKICAgIGUgPSBzYWZlX2FkZChlLCBvbGRlKTsKICB9CiAgcmV0dXJuIEFycmF5KGEsIGIsIGMsIGQsIGUpOwoKfQoKLyoKICogUGVyZm9ybSB0aGUgYXBwcm9wcmlhdGUgdHJpcGxldCBjb21iaW5hdGlvbiBmdW5jdGlvbiBmb3IgdGhlIGN1cnJlbnQKICogaXRlcmF0aW9uCiAqLwpmdW5jdGlvbiBzaGExX2Z0KHQsIGIsIGMsIGQpCnsKICBpZih0IDwgMjApIHJldHVybiAoYiAmIGMpIHwgKCh+YikgJiBkKTsKICBpZih0IDwgNDApIHJldHVybiBiIF4gYyBeIGQ7CiAgaWYodCA8IDYwKSByZXR1cm4gKGIgJiBjKSB8IChiICYgZCkgfCAoYyAmIGQpOwogIHJldHVybiBiIF4gYyBeIGQ7Cn0KCi8qCiAqIERldGVybWluZSB0aGUgYXBwcm9wcmlhdGUgYWRkaXRpdmUgY29uc3RhbnQgZm9yIHRoZSBjdXJyZW50IGl0ZXJhdGlvbgogKi8KZnVuY3Rpb24gc2hhMV9rdCh0KQp7CiAgcmV0dXJuICh0IDwgMjApID8gIDE1MTg1MDAyNDkgOiAodCA8IDQwKSA/ICAxODU5Nzc1MzkzIDoKICAgICAgICAgKHQgPCA2MCkgPyAtMTg5NDAwNzU4OCA6IC04OTk0OTc1MTQ7Cn0KCi8qCiAqIENhbGN1bGF0ZSB0aGUgSE1BQy1TSEExIG9mIGEga2V5IGFuZCBzb21lIGRhdGEKICovCmZ1bmN0aW9uIGNvcmVfaG1hY19zaGExKGtleSwgZGF0YSkKewogIHZhciBia2V5ID0gc3RyMmJpbmIoa2V5KTsKICBpZihia2V5Lmxlbmd0aCA+IDE2KSBia2V5ID0gY29yZV9zaGExKGJrZXksIGtleS5sZW5ndGggKiBjaHJzeik7CgogIHZhciBpcGFkID0gQXJyYXkoMTYpLCBvcGFkID0gQXJyYXkoMTYpOwogIGZvcih2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKQogIHsKICAgIGlwYWRbaV0gPSBia2V5W2ldIF4gMHgzNjM2MzYzNjsKICAgIG9wYWRbaV0gPSBia2V5W2ldIF4gMHg1QzVDNUM1QzsKICB9CgogIHZhciBoYXNoID0gY29yZV9zaGExKGlwYWQuY29uY2F0KHN0cjJiaW5iKGRhdGEpKSwgNTEyICsgZGF0YS5sZW5ndGggKiBjaHJzeik7CiAgcmV0dXJuIGNvcmVfc2hhMShvcGFkLmNvbmNhdChoYXNoKSwgNTEyICsgMTYwKTsKfQoKLyoKICogQWRkIGludGVnZXJzLCB3cmFwcGluZyBhdCAyXjMyLiBUaGlzIHVzZXMgMTYtYml0IG9wZXJhdGlvbnMgaW50ZXJuYWxseQogKiB0byB3b3JrIGFyb3VuZCBidWdzIGluIHNvbWUgSlMgaW50ZXJwcmV0ZXJzLgogKi8KZnVuY3Rpb24gc2FmZV9hZGQoeCwgeSkKewogIHZhciBsc3cgPSAoeCAmIDB4RkZGRikgKyAoeSAmIDB4RkZGRik7CiAgdmFyIG1zdyA9ICh4ID4+IDE2KSArICh5ID4+IDE2KSArIChsc3cgPj4gMTYpOwogIHJldHVybiAobXN3IDw8IDE2KSB8IChsc3cgJiAweEZGRkYpOwp9CgovKgogKiBCaXR3aXNlIHJvdGF0ZSBhIDMyLWJpdCBudW1iZXIgdG8gdGhlIGxlZnQuCiAqLwpmdW5jdGlvbiByb2wobnVtLCBjbnQpCnsKICByZXR1cm4gKG51bSA8PCBjbnQpIHwgKG51bSA+Pj4gKDMyIC0gY250KSk7Cn0KCi8qCiAqIENvbnZlcnQgYW4gOC1iaXQgb3IgMTYtYml0IHN0cmluZyB0byBhbiBhcnJheSBvZiBiaWctZW5kaWFuIHdvcmRzCiAqIEluIDgtYml0IGZ1bmN0aW9uLCBjaGFyYWN0ZXJzID4yNTUgaGF2ZSB0aGVpciBoaS1ieXRlIHNpbGVudGx5IGlnbm9yZWQuCiAqLwpmdW5jdGlvbiBzdHIyYmluYihzdHIpCnsKICB2YXIgYmluID0gQXJyYXkoKTsKICB2YXIgbWFzayA9ICgxIDw8IGNocnN6KSAtIDE7CiAgZm9yKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGggKiBjaHJzejsgaSArPSBjaHJzeikKICAgIGJpbltpPj41XSB8PSAoc3RyLmNoYXJDb2RlQXQoaSAvIGNocnN6KSAmIG1hc2spIDw8ICgzMiAtIGNocnN6IC0gaSUzMik7CiAgcmV0dXJuIGJpbjsKfQoKLyoKICogQ29udmVydCBhbiBhcnJheSBvZiBiaWctZW5kaWFuIHdvcmRzIHRvIGEgc3RyaW5nCiAqLwpmdW5jdGlvbiBiaW5iMnN0cihiaW4pCnsKICB2YXIgc3RyID0gIiI7CiAgdmFyIG1hc2sgPSAoMSA8PCBjaHJzeikgLSAxOwogIGZvcih2YXIgaSA9IDA7IGkgPCBiaW4ubGVuZ3RoICogMzI7IGkgKz0gY2hyc3opCiAgICBzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoYmluW2k+PjVdID4+PiAoMzIgLSBjaHJzeiAtIGklMzIpKSAmIG1hc2spOwogIHJldHVybiBzdHI7Cn0KCi8qCiAqIENvbnZlcnQgYW4gYXJyYXkgb2YgYmlnLWVuZGlhbiB3b3JkcyB0byBhIGhleCBzdHJpbmcuCiAqLwpmdW5jdGlvbiBiaW5iMmhleChiaW5hcnJheSkKewogIHZhciBoZXhfdGFiID0gaGV4Y2FzZSA/ICIwMTIzNDU2Nzg5QUJDREVGIiA6ICIwMTIzNDU2Nzg5YWJjZGVmIjsKICB2YXIgc3RyID0gIiI7CiAgZm9yKHZhciBpID0gMDsgaSA8IGJpbmFycmF5Lmxlbmd0aCAqIDQ7IGkrKykKICB7CiAgICBzdHIgKz0gaGV4X3RhYi5jaGFyQXQoKGJpbmFycmF5W2k+PjJdID4+ICgoMyAtIGklNCkqOCs0KSkgJiAweEYpICsKICAgICAgICAgICBoZXhfdGFiLmNoYXJBdCgoYmluYXJyYXlbaT4+Ml0gPj4gKCgzIC0gaSU0KSo4ICApKSAmIDB4Rik7CiAgfQogIHJldHVybiBzdHI7Cn0KCi8qCiAqIENvbnZlcnQgYW4gYXJyYXkgb2YgYmlnLWVuZGlhbiB3b3JkcyB0byBhIGJhc2UtNjQgc3RyaW5nCiAqLwpmdW5jdGlvbiBiaW5iMmI2NChiaW5hcnJheSkKewogIHZhciB0YWIgPSAiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLyI7CiAgdmFyIHN0ciA9ICIiOwogIGZvcih2YXIgaSA9IDA7IGkgPCBiaW5hcnJheS5sZW5ndGggKiA0OyBpICs9IDMpCiAgewogICAgdmFyIHRyaXBsZXQgPSAoKChiaW5hcnJheVtpICAgPj4gMl0gPj4gOCAqICgzIC0gIGkgICAlNCkpICYgMHhGRikgPDwgMTYpCiAgICAgICAgICAgICAgICB8ICgoKGJpbmFycmF5W2krMSA+PiAyXSA+PiA4ICogKDMgLSAoaSsxKSU0KSkgJiAweEZGKSA8PCA4ICkKICAgICAgICAgICAgICAgIHwgICgoYmluYXJyYXlbaSsyID4+IDJdID4+IDggKiAoMyAtIChpKzIpJTQpKSAmIDB4RkYpOwogICAgZm9yKHZhciBqID0gMDsgaiA8IDQ7IGorKykKICAgIHsKICAgICAgaWYoaSAqIDggKyBqICogNiA+IGJpbmFycmF5Lmxlbmd0aCAqIDMyKSBzdHIgKz0gYjY0cGFkOwogICAgICBlbHNlIHN0ciArPSB0YWIuY2hhckF0KCh0cmlwbGV0ID4+IDYqKDMtaikpICYgMHgzRik7CiAgICB9CiAgfQogIHJldHVybiBzdHI7Cn0K';
	var oauth_js = 'data:application/javascript;base64,';

	var oauth_client = {
		'consumerKey': 'dtsfN6UjMAXBlQScsA4nQ',
		'consumerSecret': 'fcaVVNkiRL75INMmcpMJhWH5AOx67QPhKKk6oamEf2o',
		'serviceProvider': {
			'signatureMethod': 'HMAC-SHA1',
			'requestTokenURL': 'http://twitter.com/oauth/request_token',
			'userAuthorizationURL': 'http://twitter.com/oauth/authorize',
			'accessTokenURL': 'http://twitter.com/oauth/access_token',
			'updateStatusURL': 'http://twitter.com/statuses/update.json'
		}
	}

	function load_script(src) {
		var s = document.createElement('script');
		s.src = src
		s.type = 'text/javascript';
		h.appendChild(s);
	}
	
	function get_short_url(xhr, callback) {
		if(xhr) {
			try {
				r = JSON.parse(xhr.responseText);
			} catch(e) {
				GM_log(e);
				return;
			}
			if(r.statusCode == "OK" && r.results[unsafeWindow.location.href]) {
				var short_url = r.results[unsafeWindow.location.href].shortUrl;
				if(typeof callback == 'function') {
					callback.call(null, short_url);
				}
			}
			return;
		}
		
		var user = GM_getValue('jmp.user', null);
		var key = GM_getValue('jmp.key', null);
		if(!user) {
			user = prompt('j.mp user:');
			GM_setValue('jmp.user', user);
		}
		if(!key) {
			key = prompt('j.mp API key:');
			GM_setValue('jmp.key', key);
		}
		
		var jmp = ['http://api.j.mp/shorten?version=2.0.1&longUrl=', unsafeWindow.location.href, '&login=', user, '&apiKey=', key].join('');
		var xhr = GM_xmlhttpRequest({
			url: jmp,
			method: 'GET',
			onload: function(x) { get_short_url(x, callback); }
		});
	}
	
	function setup_ui(short_url) {
		if(!short_url) {
			return;
		}
		var bb = dom.get('gray_set_button_bar');
		var ul = dom.getChildrenBy(bb, function(x){return x.nodeName == 'UL' && dom.hasClass(x, 'gray_menu_buttons');})[0];

		var li = document.createElement('li');
		li.id = 'candy_set_button_tweet';
		li.className = 'no_menu_li';
		li.innerHTML = '<span class="button"><span class="left padded"><a onclick="return false;">Tweet this</a></span><img width="2" height="22" class="gray_button_no_caret" src="http://l.yimg.com/g/images/gray_button_no_caret_default.gif"></span>';

		var img = li.getElementsByClassName('gray_button_no_caret')[0];
		li.addEventListener('mouseover', function(){dom.addClass(li, 'hover'); img.src='http://l.yimg.com/g/images/gray_button_no_caret_hover.gif';}, false);
		li.addEventListener('mouseout', function(){dom.removeClass(li, 'hover'); img.src='http://l.yimg.com/g/images/gray_button_no_caret_default.gif';}, false);
		
		var lnk = li.getElementsByTagName('a')[0];
		lnk.addEventListener('click', function(e){
			get_tokens(function(){ 
				var srv = oauth_client.serviceProvider;
				
				var msg = {};
				msg.action = srv.updateStatusURL;
				msg.method = 'POST';

				var st = prompt('Status', set.title)
				st = st && st.trim();

				if(st) {
					st = st.substring(0, 140 - 1 - short_url.length) + ' ' + short_url;
					OAuth.setParameter(msg, 'status', st);
					send_request(msg, function(){ alert('Posted :D'); });
				}
			});
			var d = document.createElement('div');
			d.innerHTML = '';
			e.preventDefault();
		}, false);

		ul.appendChild(li);
	}

	function get_tokens(callback) {
		if(!unsafeWindow.OAuth) {
			return;
		}

		OAuth = unsafeWindow.OAuth;

		var msg = {};
		var srv = oauth_client.serviceProvider;

		oauth_client.token = GM_getValue('oauth.token', null);
		oauth_client.tokenSecret = GM_getValue('oauth.tokenSecret', null);

		if(oauth_client.token && oauth_client.tokenSecret) {
			if(typeof callback == 'function') {
				callback.call();
			}
			return;
		}

		oauth_client.token = GM_getValue('oauth.r_token', null);
		oauth_client.tokenSecret = GM_getValue('oauth.r_tokenSecret', null);

		msg.method = 'POST';

		function rt_received(xhr) {
			rt = OAuth.decodeForm(xhr.responseText);

			oauth_client.token = OAuth.getParameter(rt, 'oauth_token');
			oauth_client.tokenSecret = OAuth.getParameter(rt, 'oauth_token_secret');

			GM_setValue('oauth.r_token', oauth_client.token);
			GM_setValue('oauth.r_tokenSecret', oauth_client.tokenSecret);
			
			if(confirm('You need to allow this application to access Twitter first\n\n You will need to refresh this page afterwards')) {
				window.open(srv.userAuthorizationURL + '?oauth_token=' + oauth_client.token);
			}
		}

		function at_received(xhr) {
			at = OAuth.decodeForm(xhr.responseText);

			oauth_client.token = OAuth.getParameter(at, 'oauth_token');
			oauth_client.tokenSecret = OAuth.getParameter(at, 'oauth_token_secret');

			if(!oauth_client.token) {
				GM_log(xhr.responseText);
				return;
			}

			GM_setValue('oauth.token', oauth_client.token);
			GM_setValue('oauth.tokenSecret', oauth_client.tokenSecret);

			GM_setValue('oauth.r_token', false);
			GM_setValue('oauth.r_tokenSecret', false);

			if(typeof callback == 'function') {
				callback.call();
			}
		}

		if(oauth_client.token && oauth_client.tokenSecret) {
			msg.action = srv.accessTokenURL;
			var pin = prompt('Please enter the PIN you got from Twitter');
			pin = pin && pin.trim();
			if(!pin) {
				return;
			}
			OAuth.setParameter(msg, 'oauth_verifier', pin);
			send_request(msg, at_received);
		} else {
			msg.action = srv.requestTokenURL;
			send_request(msg, rt_received);
		}


	}

	function send_request(m, callback) {
		var data = m.parameters && OAuth.formEncode(m.parameters);
		OAuth.setTimestampAndNonce(m);
		OAuth.completeRequest(m, oauth_client);

		var tok = GM_xmlhttpRequest({
			'url': m.action, 
			'method': m.method,
			'headers': {
				'Authorization': OAuth.getAuthorizationHeader('', m.parameters),
				'Content-type': 'application/x-www-form-urlencoded'
			},
			'data': data || '',
			'onload': callback
		});
	}
	
	get_short_url(null, setup_ui);
	load_script(sha1_js);
	load_script(oauth_js);
})()
