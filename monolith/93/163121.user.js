// ==UserScript==
// @name        pycon2013video
// @namespace   http://userscripts.org/scripts/show/163121/
// @description crudely adds pyvideo.org links to https://us.pycon.org/2013/schedule/talks/
// @include     https://us.pycon.org/2013/schedule/talks/
// @version     3
// @grant       none
// ==/UserScript==

// dictionary generated by:
// on pyvideo.org:

/*
video_links = document.getElementsByClassName("span7")
s = 'videos = {\n'
for (i = 0; i < video_links.length; i++) {
    if ('Keynote' != a.text) {
	a = video_links[i].children[0].children[0]
	s += '"' + escape(a.text) + '": ' + a.href.match(/\/video\/(\d+)\//)[1] + ',\n'
    }
}
s += '}'

videos = {
"%22Good%20enough%22%20is%20good%20enough%21": 1738,
"Closing%20Address": 1763,
"How%20Import%20Works": 1707,
"Internationalization%20and%20Localization%20Done%20Right": 1746,
"Keynote": 1666,
"Keynote": 1667,
"Plover%3A%20Thought%20to%20Text%20at%20240%20WPM": 1706,
"Server%20Log%20Analysis%20with%20Pandas": 1745,
"Using%20Python%20to%20Code%20by%20Voice": 1735,
"Worry-Free%20Parsers%20with%20Parsley": 1736,
"All-Singing%20All-Dancing%20Python%20Bytecode": 1777,
"Asset%20Management%20in%20Python": 1792,
"Beyond%20Passwords%3A%20Secure%20Authentication%20with%20Mozilla%20Persona": 1764,
"Building%20an%20image%20processing%20pipeline%20with%20Python": 1702,
"Building%20full-stack%20scientific%20applications%20in%20Python": 1751,
"Community%20Event%20Planning": 1775,
"Crypto%20101": 1778,
"Cython%20vs%20SWIG%2C%20Fight%21": 1692,
"Death%20by%20a%20thousand%20leaks%3A%20what%20statically-analysing%20370%20Python%20extensions%20looks%20like": 1698,
"Designers%20+%20Developers%3A%20Collaborating%20on%20your%20Python%20project": 1732,
"Dispatch%20Magic": 1696,
"Dynamic%20Code%20Patterns%3A%20Extending%20Your%20Applications%20with%20Plugins": 1789,
"Getting%20started%20with%20automated%20testing": 1674,
"How%20%28Not%29%20To%20Build%20An%20OSS%20Community": 1742,
"Keynote": 1669,
"Let%20Them%20Configure%21": 1772,
"Location%2C%20Location%2C%20Location": 1752,
"Logical%20Failures": 1753,
"Making%20Apache%20suck%20less%20for%20hosting%20Python%20web%20applications.": 1773,
"Mobile%20Application%20Testing%20with%20Python%20and%20Selenium": 1699,
"MTO%20On%20Blast%3A%20Using%20Python%27s%20Natural%20Language%20Toolkit%20to%20Model%20Gossip%20Blogs": 1790,
"Panel%3A%20Directions%20for%20Packaging": 1731,
"Porting%20Django%20apps%20to%20Python%203": 1787,
"Pyramid%20Auth%20Is%20Hard%2C%20Let%27s%20Ride%20Bikes": 1691,
"Python%20at%20Netflix": 1743,
"Python%27s%20%20Law": 1675,
"Python%27s%20Class%20Development%20Toolkit": 1779,
"Realtime%20Tracking%20and%20Mapping%20of%20Geographic%20Objects%20using%20Python": 1771,
"Scaling%20community%20diversity%20outreach": 1687,
"Sink%20or%20swim%3A%205%20life%20jackets%20to%20throw%20to%20New%20Coders": 1782,
"So%20Easy%20You%20Can%20Even%20Do%20It%20in%20JavaScript%3A%20Event-Driven%20Architecture%20for%20Regular%20Programmers": 1681,
"Solid%20Python%20Application%20Deployments%20For%20Everybody": 1727,
"Teaching%20with%20the%20IPython%20Notebook": 1744,
"Things%20to%20make%20writing%20tests%20easier": 1690,
"What%20is%20the%20Python%20Software%20Foundation%3F": 1791,
"What%20teachers%20really%20need%20from%20us": 1697,
"Who%20are%20we%3F%20A%20sociological%20analysis%20of%20the%20indigenous%20Python%20tribe": 1754,
"Who%u2019s%20there%3F%20%20-%20Home%20Automation%20with%20Arduino/RaspberryPi": 1688,
"Why%20you%20should%20use%20Python%203%20for%20text%20processing": 1704,
"API%20Design%20for%20Library%20Authors": 1705,
"Awesome%20Big%20Data%20Algorithms": 1781,
"Better%20Documentation%20Through%20Automation%3A%20Creating%20Sphinx%20Extensions": 1703,
"Blame%20it%20on%20Caesar%3A%20What%20you%20need%20to%20know%20about%20dates%2C%20times%20and%20time%20zones": 1765,
"Deploy%20your%20Python%20app%20in%205%20min%20with%20a%20PaaS": 1776,
"EduPsych%20Theory%20for%20Python%20Hackers%3A%20A%20Whirlwind%20Overview": 1783,
"Elasticsearch%20%28Part%201%29%3A%20Indexing%20and%20Querying": 1784,
"Encapsulation%20with%20descriptors": 1760,
"Fighting%20Cancer%20with%20Python": 1761,
"Functional%20Programming%20with%20Python": 1799,
"How%20the%20Internet%20works": 1677,
"How%20to%20Except%20When%20You%27re%20Excepting": 1680,
"If%20You%20Code%2C%20You%20Should%20Write": 1786,
"Keynote%20-%20Eben%20Upton": 1668,
"Kivy%3A%20Building%20GUI%20and%20Mobile%20apps%20with%20Python": 1701,
"Lightning%20Talk%20-%20The%20future%20of%20Linux%20Containers": 1852,
"Loop%20like%20a%20native%3A%20while%2C%20for%2C%20iterators%2C%20generators": 1758,
"Make%20More%20Responsive%20Web%20Applications%20with%20SocketIO%20and%20gevent": 1798,
"Making%20DISQUS%20Realtime.": 1700,
"Messaging%20at%20Scale%20at%20Instagram": 1671,
"Music%20Theory%20and%20Performance%20Analysis%20with%20Sebastian%20and%20Czerny": 1769,
"Opening%20Statements": 1848,
"PyPy%20without%20the%20GIL": 1739,
"Python%203.3%3A%20Trust%20Me%2C%20It%27s%20Better%20than%202.7": 1730,
"Python%20Profiling": 1770,
"Python%3A%20A%20%22Toy%22%20Language": 1729,
"Scrapy%3A%20it%20GETs%20the%20web": 1685,
"SimpleCV%20-%20Computer%20Vision%20using%20Python": 1796,
"So%20you%20want%20to%20write%20an%20interpreter%3F": 1694,
"The%20End%20Of%20Object%20Inheritance%20%26%20The%20Beginning%20Of%20A%20New%20Modularity": 1684,
"The%20Guts%20of%20Unicode%20in%20Python": 1768,
"The%20SQLAlchemy%20Session%20-%20In%20Depth": 1767,
"This%20Old%20Video%20Site%3A%20How%20PBS%20streams%20video%20-%20and%20you%20can%20too%21": 1682,
"Transforming%20Code%20into%20Beautiful%2C%20Idiomatic%20Python": 1780,
"Twisted%20Logic%3A%20Endpoints%20and%20Why%20You%20Shouldn%27t%20Be%20Scared%20of%20Twisted": 1740,
"Using%20futures%20for%20async%20GUI%20programming%20in%20Python%203.3": 1762,
"Visualizing%20Github%2C%20Part%20I%3A%20Data%20to%20Information": 1759,
"Visualizing%20Github%2C%20Part%20II%3A%20Information%20to%20Meaning": 1766,
"Whoosh%2C%20the%20open-source%20Python%20search%20library": 1788,
"Write%20the%20Docs": 1795,
"Advanced%20Machine%20Learning%20with%20scikit-learn": 1719,
"Introduction%20to%20PyGame": 1718,
"Introduction%20to%20SQLAlchemy": 1711,
"Python%203%20Metaprogramming": 1716,
"Analyzing%20Social%20Networks%20with%20Python": 1714,
"Effective%20Django": 1717,
"Going%20from%20web%20pages%20to%20web%20apps%20with%20Python": 1663,
"Rapid%20Web%20Prototyping%20with%20Lightweight%20Tools": 1723,
}

talks = {};
titles = document.getElementsByClassName("title");
speakers = document.getElementsByClassName("speaker");
for (i = 0; i < titles.length; i++) {
    talks[escape(titles[i].children[0].text)] = {
	'pycon_id': titles[i].children[0].href.match(/\/2013\/schedule\/presentation\/(\d+)\//)[1],
	'speaker': speakers[i].textContent.trim(),
    }
}

for (k in videos) {
    if (talks[k]) {
	talks[k]['pyvideo_id'] = videos[k];
    }
}

s = 'd = {\n'
for (i = 0; i < titles.length; i++) {
    title = titles[i].children[0].text
    s += '// '+ speakers[i].textContent.trim() + ': ' + title + '\n'
    if (talks[escape(title)]) {
	s += '    ' + titles[i].children[0].href.match(/\/2013\/schedule\/presentation\/(\d+)\//)[1] + ': ' + talks[escape(title)]['pyvideo_id'] + ',\n'
    }
    else {
	s += '//    ' + titles[i].children[0].href.match(/\/2013\/schedule\/presentation\/(\d+)\//)[1] + ': ,\n'
    }
}
s += '}'
*/

// query-replace-regexp \(.*undefined,\) //\1

// pycon.org schedule link, pyvideo.org link
d = {
// Jesse Noller: Opening Statements
    218: 1848,
// Chad Whitacre: Gittip: Inspiring Generosity
//    116: undefined,
// Rick Branson: Messaging at Scale at Instagram
    106: 1671,
// Esther Nam: How to Except When You're Excepting
    35: 1680,
// Łukasz Langa: Composability Through Multiple Inheritance
//    110: undefined,
// Jessica McKellar: How the Internet works
    50: 1677,
// Brandon Rhodes: The Naming of Ducks: Where Dynamic Types Meet Smart Conventions
//    38: undefined,
// Bradley M. Kuhn: Funding and Coordinating Python Projects via Non-Profits
//    48: undefined,
// Edgar Roman: This Old Video Site: How PBS streams video - and you can too!
    133: 1682,
// Bruce Eckel: Rethinking Errors: Learning from Scala and Go
//    52: undefined,
// Augie Fackler, Nathaniel Manista: The End Of Object Inheritance & The Beginning Of A New Modularity
    68: 1684,
// Asheesh Laroia: Scrapy: it GETs the web
    135: 1685,
// Steve Dower: Windows 8 Apps and Python (Making Money in the Windows App Store)
//    127: undefined,
// Alex Gaynor: So you want to write an interpreter?
    44: 1694,
// Adam Hitchcock: Making DISQUS Realtime.
    46: 1700,
// Chris McDonough: API Design for Library Authors
    39: 1705,
// Doug Hellmann: Better Documentation Through Automation: Creating Sphinx Extensions
    89: 1703,
// Jeff Rush: The Magic of Metaprogramming
//    99: undefined,
// Thomas Hansen, Mathieu Virbel: Kivy: Building GUI and Mobile apps with Python
    63: 1701,
// Anna Ravenscroft: You can be a speaker at PyCon!
//    54: undefined,
// Brett Cannon: Python 3.3: Trust Me, It's Better than 2.7
    117: 1730,
// Armin Rigo: PyPy without the GIL
    37: 1739,
// Ashwini Oruganti: Twisted Logic: Endpoints and Why You Shouldn't Be Scared of Twisted
    40: 1740,
// Jeff Elmore: Measuring and modeling the complexity of children's books
//    132: undefined,
// Leonardo Rochael: sys._current_frames(): Take real-time x-rays of your software for fun and performance
//    123: undefined,
// Ned Batchelder: Loop like a native: while, for, iterators, generators
    76: 1758,
// Dana Bauer, Idan Gazit: Visualizing Github, Part I: Data to Information
    112: 1759,
// Luciano Ramalho: Encapsulation with descriptors
    145: 1760,
// Erik Evensen: Fighting Cancer with Python
    142: 1761,
// Dino Viehland: Using futures for async GUI programming in Python 3.3
    62: 1762,
// Mike Bayer: The SQLAlchemy Session - In Depth
    88: 1767,
// Amjith Ramanujam: Python Profiling
    86: 1770,
// Idan Gazit, Dana Bauer: Visualizing Github, Part II: Information to Meaning
    108: 1766,
// James Tauber: Music Theory and Performance Analysis with Sebastian and Czerny
    136: 1769,
// Lennart Regebro: Blame it on Caesar: What you need to know about dates, times and time zones
    140: 1765,
// Benjamin Peterson: The Guts of Unicode in Python
    45: 1768,
// Titus Brown: Awesome Big Data Algorithms
    53: 1781,
// Nate Aune: Deploy your Python app in 5 min with a PaaS
    118: 1776,
// Raymond Hettinger: Transforming Code into Beautiful, Idiomatic Python
    126: 1780,
// Erik Rose: Elasticsearch (Part 1): Indexing and Querying
    100: 1784,
// Mel Chua: EduPsych Theory for Python Hackers: A Whirlwind Overview
    98: 1783,
// Brian K. Jones: If You Code, You Should Write
    124: 1786,
// Matt Chaput: Whoosh, the open-source Python search library
    60: 1788,
// Katherine Scott: SimpleCV - Computer Vision using Python
    65: 1796,
// Kurt Grandis: Planning and Tending the Garden: The Future of Early Childhood Python Education
//    96: undefined,
// Luke Sneeringer: Make More Responsive Web Applications with SocketIO and GEvent
//    59: undefined,
// James Bennett: Write the Docs
    113: 1795,
// Mike Müller: Functional Programming with Python
    143: 1799,
// Gary Bernhardt: Boundaries
//    61: undefined,
// Jonathan Foote: Python for Robotics and Hardware Control
//    78: undefined,
// Stephen McJohn: Python's  Law
    131: 1675,
// Carl Meyer: Getting started with automated testing
    83: 1674,
// Carlos de la Guardia: 5 powerful pyramid features
//    129: undefined,
// Glyph: So Easy You Can Even Do It in JavaScript: Event-Driven Architecture for Regular Programmers
    120: 1681,
// Asheesh Laroia, Jessica McKellar, Dana Bauer, Daniel Choi: Scaling community diversity outreach
    104: 1687,
// Rupa Dachere: Who’s there?  - Home Automation with Arduino/RaspberryPi
    75: 1688,
// Frank Siler: Copyright and You
//    41: undefined,
// Chris Withers: Things to make writing tests easier
    71: 1690,
// Chris McDonough: Pyramid Auth Is Hard, Let's Ride Bikes
    70: 1691,
// Mark Kohler: Cython vs SWIG, Fight!
    111: 1692,
// Selena Deckelmann: What teachers really need from us
    42: 1697,
// Franck Chastagnol: Building an image processing pipeline with Python
    107: 1702,
// David Mertz: Why you should use Python 3 for text processing
    114: 1704,
// Jason Carr: Mobile Application Testing with Python and Selenium
    79: 1699,
// Ben Bangert: Dispatch Magic
    51: 1696,
// David Malcolm: Death by a thousand leaks: what statically-analysing 370 Python extensions looks like
    95: 1698,
// Julia Elman, Mark Lavin: Designers + Developers: Collaborating on your Python project
    56: 1732,
// Hynek Schlawack: Solid Python Application Deployments For Everybody
    49: 1727,
// Nick Coghlan, Barry Warsaw, Éric Araujo: Panel: Directions for Packaging
    34: 1731,
// Daniel Lindsley: How (Not) To Build An OSS Community
    55: 1742,
// Matt Davis: Teaching with the IPython Notebook
    122: 1744,
// Jacqueline Kazil: Who are we? A sociological analysis of the indigenous Python tribe
    141: 1754,
// Luke Sneeringer: Logical Failures
    115: 1753,
// Luke Lee: Building full-stack scientific applications in Python
    67: 1751,
// Kate Heddleston: Chef: Automating web application infrastructure
//    87: undefined,
// Lakshman Prasad: Customizing the Django Admin: The How and the Why
//    146: undefined,
// Julia Grace: Location, Location, Location
    92: 1752,
// Christie Koehler: Community Event Planning
    94: 1775,
// Łukasz Langa: Let Them Configure!
    109: 1772,
// Travis Oliphant, Siu Kwan Lam, Mark Florisson: Numba: A Dynamic Python compiler for Science
//    130: undefined,
// Graham Dumpleton: Making Apache suck less for hosting Python web applications.
    80: 1773,
// Dan Callahan: Beyond Passwords: Secure Authentication with Mozilla Persona
    105: 1764,
// Ragi Burhum: Realtime Tracking and Mapping of Geographic Objects using Python
    121: 1771,
// Larry Hastings: All-Singing All-Dancing Python Bytecode
    47: 1777,
// Laurens Van Houtven: Crypto 101
    74: 1778,
// Raymond Hettinger: Python's Class Development Toolkit
    125: 1779,
// Lynn Root: Sink or swim: 5 life jackets to throw to New Coders
    144: 1782,
// Jacob Kaplan-Moss: Porting Django apps to Python 3
    97: 1787,
// Alexandra Strong, Christine Cheung: Lessons Learned in Teaching Python
//    81: undefined,
// Robert Elwell: MTO On Blast: Using Python's Natural Language Toolkit to Model Gossip Blogs
    138: 1790,
// Jim Baker, Shashank Bharadwaj: Integrating Jython with Java
//    139: undefined,
// Brian Curtin: What is the Python Software Foundation?
    103: 1791,
// Robert Kluin, Beau Lyddon: Asset Management in Python
    128: 1792,
// Doug Hellmann: Dynamic Code Patterns: Extending Your Applications with Plugins
    90: 1789,
// Mirabai Knight: Plover: Thought to Text at 240 WPM
    36: 1706,
// Brett Cannon: How Import Works
    82: 1707,
// Ben Bangert: Distributed Coordination with Python
//    66: undefined,
// Luciano Ramalho: Iteration & Generators: the Python Way
//    72: undefined,
// James Tauber: ApplePy: An Apple ][ emulator in Python
//    134: undefined,
// Tavis Rudd: Using Python to Code by Voice
    43: 1735,
// Craig Kerstiens: Going beyond the Django ORM limitations with Postgres
//    119: undefined,
// Allen Short: Worry-Free Parsers with Parsley
    84: 1736,
// Gavin M. Roy: Become a logging expert in 30 minutes
//    69: undefined,
// Alex Martelli: "Good enough" is good enough!
    64: 1738,
// Guto Maia: PyNES: Python programming for Nintendo 8 bits.
//    77: undefined,
// Ruchi Varshney: Internationalization and Localization Done Right
    85: 1746,
// Andy Dirnberger: A Crash Course in MongoDB
//    73: undefined,
// Taavi Burns: Server Log Analysis with Pandas
    33: 1745,
// Jonas Obrist: Purely Python Imaging with Pymaging
//    137: undefined,
// Eric Snow: Namespaces in Python
//    57: undefined,
// Sean Zicari: Use curses, don't swear
//    91: undefined,
// Jesse Noller: Closing Address
    219: 1763,
}

// keynotes all have the same title, which breaks my dict.
// Eben Upton: Keynote
d[213] = 1668
// Jessica McKellar: Keynote
//d[214] = 
// Raymond Hettinger: Keynote
d[215] = 1669
// Van Lindberg: Keynote
d[217] = 1666
// Guido van Rossum: Keynote
d[216] = 1667

function appendVideoLinks() {
    as = document.getElementsByTagName("a")
    for (var i = 0; i < as.length; i++) {
	a = as[i]
	if (!a.classList.contains("btn")) {
	    matches = a.href.match(/\/2013\/schedule\/presentation\/(\d+)\//)
	    if (matches) {
		if (d[matches[1]])
		    a.parentNode.parentNode.insertAdjacentHTML('beforeend', '(<a href="http://pyvideo.org/video/' + d[matches[1]] + '" target="_blank">video</a>)')
	    }
	}
    }
}

appendVideoLinks()