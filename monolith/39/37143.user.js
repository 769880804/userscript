scr_meta=<><![CDATA[
// ==UserScript==
// @name		Script <_O M I_>
// @version             2.3.9
// @author		BILLBIDU
// @profile             http://www.orkut.com.br/Main#Profile.aspx?uid=15180496878304785242
// @namespace           System
// @description		Script criado para adicionar alguns recursos ao Orkut  -   Script da Comunidade <_ O Melhor da Internet _>
// @include             http://*.orkut.*
// @require        http://userscripts.org/scripts/source/56489.user.js
// @require        http://userscripts.org/scripts/source/57312.user.js
// ==/UserScript==
]]></>.toString();




// ==/UserScript==

function close(){
	var dn = document.getElementById('HelperDiv'); dn.parentNode.removeChild(dn);
	var du = document.getElementsByName('graylayer')[0]; du.parentNode.removeChild(du);
}

function create(confirm)
{
	var div = document.createElement('div');
	div.setAttribute("id","HelperDiv");
	document.body.appendChild(div);
	var graylayer = document.createElement('div');
	graylayer.setAttribute("id","graylayer");
	graylayer.setAttribute("name","graylayer");
	graylayer.setAttribute("style","display: block; width: 1344px; height: 1685px;");
	document.body.appendChild(graylayer);

	var sharedFloatParent = document.createElement('div');
	sharedFloatParent.setAttribute("id","sharedFloatParent");
	sharedFloatParent.setAttribute("class","floatdiv");
	sharedFloatParent.setAttribute("style","position: fixed; top: 170px; left: 200px; margin-right: 100px; text-align: left; z-index: 10001; display: block;");
	div.appendChild(sharedFloatParent);

	var sharedFloat = document.createElement('div');
	sharedFloat.setAttribute("id","sharedFloat");
	sharedFloat.setAttribute("class","floatcontent");
	sharedFloat.innerHTML=confirm;
	sharedFloatParent.appendChild(sharedFloat);
	
	if(document.getElementById("gsjs_unjoin"))
	{
		document.evaluate("id('form')/span[1]/a", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.addEventListener("click", close, true);
		document.evaluate("id('HelperDiv')//table/tbody/tr[2]/td[1]/div[4]/span[1]/a", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.href='javascript: void(0);';
		document.evaluate("id('HelperDiv')//table/tbody/tr[2]/td[1]/div[4]/span[1]/a", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.addEventListener("click", close, true);
	}
	else
	{
		document.evaluate("id('f')/div[4]/span[1]/a", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.addEventListener("click", close, true);
		document.evaluate("id('f')/div[4]/span[3]/a", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.href='javascript: void(0);';
		document.evaluate("id('f')/div[4]/span[3]/a", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.addEventListener("click", close, true);
	}
}
function request(URL)
{
		HttpRequest.open({
		"method":"get",
		"url":URL,
		"onsuccess":function(params)
		{	
			confirm = params.response.xml.getElementById("mbox").innerHTML;
			confirm = confirm.replace('<DIV class="listdivi"/>', '<DIV class="listdivi"></div>');
			confirm = confirm.replace('<DIV class="listdivi ln"/>', '<DIV class="listdivi ln"></div>');
			confirm = confirm.replace('<DIV class="listdivi ln"/>', '<DIV class="listdivi ln"></div>');
			create(confirm);
		}
	}).send();
}
if(document.getElementById("gsjs_unjoin"))
{
	var URL = document.getElementById("gsjs_unjoin").href;
	URL = URL.replace(/Main#/g, "");
	document.getElementById("gsjs_unjoin").href='javascript: void(0);';
	document.getElementById("gsjs_unjoin").addEventListener("click", function(){ request(URL);}, true);
	
}
if(document.getElementById("gsjs_join"))
{
	var URL = document.getElementById("gsjs_join").href;
	URL = URL.replace(/Main#/g, "");
	document.getElementById("gsjs_join").href='javascript: void(0);';
	document.getElementById("gsjs_join").addEventListener("click", function(){ request(URL);}, true);
}




// Teclado virtual

/* ********************************************************************
 * HTML Virtual Keyboard Interface User Javascript - v1.0
 *   Copyright (c) 2009 - GreyWyvern
 *
 *  - Licenced for free distribution under the BSDL
 *          http://www.opensource.org/licenses/bsd-license.php
 * ********************************************************************
*/

window.addEventListener('load', function() {
  function VKI_buildKeyboardInputsUserScript() {
    var self = this;

    this.VKI_version = " 1.0   <_O M I_>";
    this.VKI_showVersion = true;
    this.VKI_target = this.VKI_visible = false;
    this.VKI_shift = this.VKI_shiftlock = false;
    this.VKI_altgr = this.VKI_altgrlock = false;
    this.VKI_dead = false;
    this.VKI_deadkeysOn = false;
    this.VKI_kt = "US Int'l";  // Default keyboard layout
    this.VKI_clearPasswords = false;  // Clear password fields on focus
    this.VKI_imageURI = "keyboard.png";
    this.VKI_clickless = 0;  // 0 = disabled, > 0 = delay in ms
    this.VKI_keyCenter = 3;

    this.VKI_isIE = /*@cc_on!@*/false;
    this.VKI_isIE6 = /*@if(@_jscript_version == 5.6)!@end@*/false;
    this.VKI_isIElt8 = /*@if(@_jscript_version < 5.8)!@end@*/false;
    this.VKI_isMoz = (navigator.product == "Gecko");
    this.VKI_isWebKit = RegExp("KHTML").test(navigator.userAgent);


    /* ***** Create keyboards ************************************** */
    this.VKI_layout = {};

    this.VKI_layout.Arabic = [ // Arabic Keyboard
      [["\u0630", "\u0651 "], ["1", "!", "\u00a1", "\u00b9"], ["2", "@", "\u00b2"], ["3", "#", "\u00b3"], ["4", "$", "\u00a4", "\u00a3"], ["5", "%", "\u20ac"], ["6", "^", "\u00bc"], ["7", "&", "\u00bd"], ["8", "*", "\u00be"], ["9", "(", "\u2018"], ["0", ")", "\u2019"], ["-", "_", "\u00a5"], ["=", "+", "\u00d7", "\u00f7"], ["Bksp", "Bksp"]],
      [["Tab", "Tab"], ["\u0636", "\u064e"], ["\u0635", "\u064b"], ["\u062b", "\u064f"], ["\u0642", "\u064c"], ["\u0641", "\u0644"], ["\u063a", "\u0625"], ["\u0639", "\u2018"], ["\u0647", "\u00f7"], ["\u062e", "\u00d7"], ["\u062d", "\u061b"], ["\u062c", "\u003c"], ["\u062f", "\u003e"], ["\u005c", "\u007c"]],
      [["Caps", "Caps"], ["\u0634", "\u0650"], ["\u0633", "\u064d"], ["\u064a", "\u005d"], ["\u0628", "\u005b"], ["\u0644", "\u0644"], ["\u0627", "\u0623"], ["\u062a", "\u0640"], ["\u0646", "\u060c"], ["\u0645", "\u002f"], ["\u0643", "\u003a"], ["\u0637", "\u0022"], ["Enter", "Enter"]],
      [["Shift", "Shift"], ["\u0626", "\u007e"], ["\u0621", "\u0652"], ["\u0624", "\u007d"], ["\u0631", "\u007b"], ["\u0644", "\u0644"], ["\u0649", "\u0622"], ["\u0629", "\u2019"], ["\u0648", "\u002c"], ["\u0632", "\u002e"], ["\u0638", "\u061f"], ["Shift", "Shift"]],
      [[" ", " ", " ", " "], ["Alt", "Alt"]]
    ];

    this.VKI_layout.Belarusian = [ // Belarusian Standard Keyboard
      [["\u0451", "\u0401"], ["1", "!"], ["2", '"'], ["3", "\u2116"], ["4", ";"], ["5", "%"], ["6", ":"], ["7", "?"], ["8", "*"], ["9", "("], ["0", ")"], ["-", "_"], ["=", "+"], ["Bksp", "Bksp"]],
      [["Tab", "Tab"], ["\u0439", "\u0419"], ["\u0446", "\u0426"], ["\u0443", "\u0423"], ["\u043a", "\u041a"], ["\u0435", "\u0415"], ["\u043d", "\u041d"], ["\u0433", "\u0413"], ["\u0448", "\u0428"], ["\u045e", "\u040e"], ["\u0437", "\u0417"], ["\u0445", "\u0425"], ["'", "'"], ["\\", "/"]],
      [["Caps", "Caps"], ["\u0444", "\u0424"], ["\u044b", "\u042b"], ["\u0432", "\u0412"], ["\u0430", "\u0410"], ["\u043f", "\u041f"], ["\u0440", "\u0420"], ["\u043e", "\u041e"], ["\u043b", "\u041b"], ["\u0434", "\u0414"], ["\u0436", "\u0416"], ["\u044d", "\u042d"], ["Enter", "Enter"]],
      [["Shift", "Shift"], ["/", "|"], ["\u044f", "\u042f"], ["\u0447", "\u0427"], ["\u0441", "\u0421"], ["\u043c", "\u041c"], ["\u0456", "\u0406"], ["\u0442", "\u0422"], ["\u044c", "\u042c"], ["\u0431", "\u0411"], ["\u044e", "\u042e"], [".", ","], ["Shift", "Shift"]],
      [[" ", " "]]
    ];

    this.VKI_layout.Belgian = [ // Belgian Standard Keyboard
      [["\u00b2", "\u00b3"], ["&", "1", "|"], ["\u00e9", "2", "@"], ['"', "3", "#"], ["'", "4"], ["(", "5"], ["\u00a7", "6", "^"], ["\u00e8", "7"], ["!", "8"], ["\u00e7", "9", "{"], ["\u00e0", "0", "}"], [")", "\u00b0"], ["-", "_"], ["Bksp", "Bksp"]],
      [["Tab", "Tab"], ["a", "A"], ["z", "Z"], ["e", "E", "\u20ac"], ["r", "R"], ["t", "T"], ["y", "Y"], ["u", "U"], ["i", "I"], ["o", "O"], ["p", "P"], ["\u005e", "\u00a8", "["], ["$", "*", "]"], ["Enter", "Enter"]],
      [["Caps", "Caps"], ["q", "Q"], ["s", "S"], ["d", "D"], ["f", "F"], ["g", "G"], ["h", "H"], ["j", "J"], ["k", "K"], ["l", "L"], ["m", "M"], ["\u00f9", "%", "\u00b4"], ["\u03bc", "\u00a3", "`"]],
      [["Shift", "Shift"], ["<", ">", "\\"], ["w", "W"], ["x", "X"], ["c", "C"], ["v", "V"], ["b", "B"], ["n", "N"], [",", "?"], [";", "."], [":", "/"], ["=", "+", "~"], ["Shift", "Shift"]],
      [[" ", " ", " ", " "], ["AltGr", "AltGr"]]
    ];

    this.VKI_layout['Bulgarian Ph'] = [ // Bulgarian Phonetic Keyboard
      [["\u0447", "\u0427"], ["1", "!"], ["2", "@"], ["3", "#"], ["4", "$"], ["5", "%"], ["6", "^"], ["7", "&"], ["8", "*"], ["9", "("], ["0", ")"], ["-", "_"], ["=", "+"], ["Bksp", "Bksp"]],
      [["Tab", "Tab"], ["\u044F", "\u042F"], ["\u0432", "\u0412"], ["\u0435", "\u0415"], ["\u0440", "\u0420"], ["\u0442", "\u0422"], ["\u044A", "\u042A"], ["\u0443", "\u0423"], ["\u0438", "\u0418"], ["\u043E", "\u041E"], ["\u043F", "\u041F"], ["\u0448", "\u0428"], ["\u0449", "\u0429"], ["\u044E", "\u042E"]],
      [["Caps", "Caps"], ["\u0430", "\u0410"], ["\u0441", "\u0421"], ["\u0434", "\u0414"], ["\u0444", "\u0424"], ["\u0433", "\u0413"], ["\u0445", "\u0425"], ["\u0439", "\u0419"], ["\u043A", "\u041A"], ["\u043B", "\u041B"], [";", ":"], ["'", '"'], ["Enter", "Enter"]],
      [["Shift", "Shift"], ["\u0437", "\u0417"], ["\u044C", "\u042C"], ["\u0446", "\u0426"], ["\u0436", "\u0416"], ["\u0431", "\u0411"], ["\u043D", "\u041D"], ["\u043C", "\u041C"], [",", "<"], [".", ">"], ["/", "?"], ["Shift", "Shift"]],
      [[" ", " "]]
    ];

    this.VKI_layout.Burmese = [ // Burmese Keyboard
      [["\u1039`", "~"], ["\u1041", "\u100D"], ["\u1042", "\u100E"], ["\u1043", "\u100B"], ["\u1044", "\u1000\u103B\u1015\u103A"], ["\u1045", "%"], ["\u1046", "\u002F"], ["\u1047", "\u101B"], ["\u1048", "\u1002"], ["\u1049", "("], ["\u1040", ")"], ["-", "_"], ["=", "+"], ["Bksp", "Bksp"]],
      [["Tab", "Tab"], ["\u1006", "\u1029"], ["\u1010", "\u1040"], ["\u1014", "\u103F"], ["\u1019", "\u1023"], ["\u1021", "\u1024"], ["\u1015", "\u104C"], ["\u1000", "\u1009"], ["\u1004", "\u104D"], ["\u101E", "\u1025"], ["\u1005", "\u100F"], ["\u101F", "\u1027"], ["\u2018", "\u2019"], ["\u104F", "\u100B\u1039\u100C"]],
      [["Caps", "Caps"], ["\u200B\u1031", "\u1017"], ["\u200B\u103B", "\u200B\u103E"], ["\u200B\u102D", "\u200B\u102E"], ["\u200B\u103A","\u1004\u103A\u1039\u200B"], ["\u200B\u102B", "\u200B\u103D"], ["\u200B\u1037", "\u200B\u1036"], ["\u200B\u103C", "\u200B\u1032"], ["\u200B\u102F", "\u200B\u102F"], ["\u200B\u1030", "\u200B\u1030"], ["\u200B\u1038", "\u200B\u102B\u103A"], ["\u1012", "\u1013"], ["Enter", "Enter"]],
      [["Shift", "Shift"], ["\u1016", "\u1007"], ["\u1011", "\u100C"], ["\u1001", "\u1003"], ["\u101C", "\u1020"], ["\u1018", "\u1026"], ["\u100A", "\u1008"], ["\u200B\u102C", "\u102A"], ["\u101A", "\u101B"], ["\u002E", "\u101B"], ["\u104B", "\u104A"], ["Shift", "Shift"]],
      [[" ", " "]]
    ];

    this.VKI_layout.Czech = [ // Czech Keyboard
     [[";", "\u00b0", "`", "~"], ["+", "1", "!"], ["\u011B", "2", "@"], ["\u0161", "3", "#"], ["\u010D", "4", "$"], ["\u0159", "5", "%"], ["\u017E", "6", "^"], ["\u00FD", "7", "&"], ["\u00E1", "8", "*"], ["\u00ED", "9", "("], ["\u00E9", "0", ")"], ["=", "%", "-", "_"], ["\u00B4", "\u02c7", "=", "+"], ["Bksp", "Bksp"]],
     [["Tab", "Tab"], ["q", "Q"], ["w", "W"], ["e", "E", "\u20AC"], ["r", "R"], ["t", "T"], ["y", "Y"], ["u", "U"], ["i", "I"], ["o", "O"], ["p", "P"], ["\u00FA", "/", "[", "{"], [")", "(", "]", "}"], ["Enter", "Enter"]],
     [["Caps", "Caps"], ["a", "A"], ["s", "S"], ["d", "D"], ["f", "F"], ["g", "G"], ["h", "H"], ["j", "J"], ["k", "K"], ["l", "L"], ["\u016F", '"', ";", ":"], ["\u00A7", "!", "\u00a4", "^"], ["\u00A8", "'", "\\", "|"]],
     [["Shift", "Shift"], ["\\", "|", "", "\u02dd"], ["z", "Z"], ["x", "X"], ["c", "C"], ["v", "V"], ["b", "B"], ["n", "N"], ["m", "M"], [",", "?", "<", "\u00d7"], [".", ":", ">", "\u00f7"], ["-", "_", "/", "?"], ["Shift", "Shift"]],
     [[" ", " ", " ", " "], ["Alt", "Alt"]]
    ];

    this.VKI_layout.Danish = [ // Danish Standard Keyboard
      [["\u00bd", "\u00a7"], ["1", "!"], ["2", '"', "@"], ["3", "#", "\u00a3"], ["4", "\u00a4", "$"], ["5", "%", "\u20ac"], ["6", "&"], ["7", "/", "{"], ["8", "(", "["], ["9", ")", "]"], ["0", "=", "}"], ["+", "?"], ["\u00b4", "`", "|"], ["Bksp", "Bksp"]],
      [["Tab", "Tab"], ["q", "Q"], ["w", "W"], ["e", "E", "\u20ac"], ["r", "R"], ["t", "T"], ["y", "Y"], ["u", "U"], ["i", "I"], ["o", "O"], ["p", "P"], ["\u00e5", "\u00c5"], ["\u00a8", "^", "~"], ["Enter", "Enter"]],
      [["Caps", "Caps"], ["a", "A"], ["s", "S"], ["d", "D"], ["f", "F"], ["g", "G"], ["h", "H"], ["j", "J"], ["k", "K"], ["l", "L"], ["\u00e6", "\u00c6"], ["\u00f8", "\u00d8"], ["'", "*"]],
      [["Shift", "Shift"], ["<", ">", "\\"], ["z", "Z"], ["x", "X"], ["c", "C"], ["v", "V"], ["b", "B"], ["n", "N"], ["m", "M", "\u03bc", "\u039c"], [",", ";"], [".", ":"], ["-", "_"], ["Shift", "Shift"]],
      [[" ", " ", " ", " "], ["AltGr", "AltGr"]]
    ];

    this.VKI_layout.Dutch = [ // Dutch Standard Keyboard
      [["@", "\u00a7", "\u00ac"], ["1", "!", "\u00b9"], ["2", '"', "\u00b2"], ["3", "#", "\u00b3"], ["4", "$", "\u00bc"], ["5", "%", "\u00bd"], ["6", "&", "\u00be"], ["7", "_", "\u00a3"], ["8", "(", "{"], ["9", ")", "}"], ["0", "'"], ["/", "?", "\\"], ["\u00b0", "~", "\u00b8"], ["Bksp", "Bksp"]],
      [["Tab", "Tab"], ["q", "Q"], ["w", "W"], ["e", "E", "\u20ac"], ["r", "R", "\u00b6"], ["t", "T"], ["y", "Y"], ["u", "U"], ["i", "I"], ["o", "O"], ["p", "P"], ["\u00a8", "^"], ["*", "|"], ["<", ">"]],
      [["Caps", "Caps"], ["a", "A"], ["s", "S", "\u00df"], ["d", "D"], ["f", "F"], ["g", "G"], ["h", "H"], ["j", "J"], ["k", "K"], ["l", "L"], ["+", "\u00b1"], ["\u00b4", "\u0060"], ["Enter", "Enter"]],
      [["Shift", "Shift"], ["]", "[", "\u00a6"], ["z", "Z", "\u00ab"], ["x", "X", "\u00bb"], ["c", "C", "\u00a2"], ["v", "V"], ["b", "B"], ["n", "N"], ["m", "M", "\u00b5"], [",", ";"], [".", ":", "\u00b7"], ["-", "="], ["Shift", "Shift"]],
      [[" ", " ", " ", " "], ["AltGr", "AltGr"]]
    ];

    this.VKI_layout.Dvorak = [ // Dvorak Keyboard
      [["`", "~"], ["1", "!"], ["2", "@"], ["3", "#"], ["4", "$"], ["5", "%"], ["6", "^"], ["7", "&"], ["8", "*"], ["9", "("], ["0", ")"], ["[", "{"], ["]", "}"], ["Bksp", "Bksp"]],
      [["Tab", "Tab"],["'", '"'], [",", "<"], [".", ">"], ["p", "P"], ["y", "Y"], ["f", "F"], ["g", "G"], ["c", "C"], ["r", "R"], ["l", "L"], ["/", "?"], ["=", "+"], ["\\", "|"]],
      [["Caps", "Caps"], ["a", "A"], ["o", "O"], ["e", "E"], ["u", "U"], ["i", "I"], ["d", "D"], ["h", "H"], ["t", "T"], ["n", "N"], ["s", "S"], ["-", "_"], ["Enter", "Enter"]],
      [["Shift", "Shift"], [";", ":"], ["q", "Q"], ["j", "J"], ["k", "K"], ["x", "X"], ["b", "B"], ["m", "M"], ["w", "W"], ["v", "V"], ["z", "Z"], ["Shift", "Shift"]],
      [[" ", " "]]
    ];

    this.VKI_layout.Farsi = [ // Farsi Keyboard
      [["\u067e", "\u0651 "], ["1", "!", "\u00a1", "\u00b9"], ["2", "@", "\u00b2"], ["3", "#", "\u00b3"], ["4", "$", "\u00a4", "\u00a3"], ["5", "%", "\u20ac"], ["6", "^", "\u00bc"], ["7", "&", "\u00bd"], ["8", "*", "\u00be"], ["9", "(", "\u2018"], ["0", ")", "\u2019"], ["-", "_", "\u00a5"], ["=", "+", "\u00d7", "\u00f7"], ["Bksp", "Bksp"]],
      [["Tab", "Tab"], ["\u0636", "\u064e"], ["\u0635", "\u064b"], ["\u062b", "\u064f"], ["\u0642", "\u064c"], ["\u0641", "\u0644"], ["\u063a", "\u0625"], ["\u0639", "\u2018"], ["\u0647", "\u00f7"], ["\u062e", "\u00d7"], ["\u062d", "\u061b"], ["\u062c", "\u003c"], ["\u0686", "\u003e"], ["\u0698", "\u007c"]],
      [["Caps", "Caps"], ["\u0634", "\u0650"], ["\u0633", "\u064d"], ["\u064a", "\u005d"], ["\u0628", "\u005b"], ["\u0644", "\u0644"], ["\u0627", "\u0623"], ["\u062a", "\u0640"], ["\u0646", "\u060c"], ["\u0645", "\u005c"], ["\u06af", "\u003a"], ["\u0643", "\u0022"], ["Enter", "Enter"]],
      [["Shift", "Shift"], ["\u0626", "\u007e"], ["\u0621", "\u0652"], ["\u0632", "\u007d"], ["\u0631", "\u007b"], ["\u0630", "\u0644"], ["\u062f", "\u0622"], ["\u0626", "\u0621"], ["\u0648", "\u002c"], [".", "\u002e"], ["/", "\u061f"], ["Shift", "Shift"]],
      [[" ", " ", " ", " "], ["Alt", "Alt"]]
    ];

    this.VKI_layout.French = [ // French Standard Keyboard
      [["\u00b2", "\u00b3"], ["&", "1"], ["\u00e9", "2", "~"], ['"', "3", "#"], ["'", "4", "{"], ["(", "5", "["], ["-", "6", "|"], ["\u00e8", "7", "\u0060"], ["_", "8", "\\"], ["\u00e7", "9", "\u005e"], ["\u00e0", "0", "\u0040"], [")", "\u00b0", "]"], ["=", "+", "}"], ["Bksp", "Bksp"]],
      [["Tab", "Tab"], ["a", "A"], ["z", "Z"], ["e", "E", "\u20ac"], ["r", "R"], ["t", "T"], ["y", "Y"], ["u", "U"], ["i", "I"], ["o", "O"], ["p", "P"], ["^", "\u00a8"], ["$", "\u00a3", "\u00a4"], ["Enter", "Enter"]],
      [["Caps", "Caps"], ["q", "Q"], ["s", "S"], ["d", "D"], ["f", "F"], ["g", "G"], ["h", "H"], ["j", "J"], ["k", "K"], ["l", "L"], ["m", "M"], ["\u00f9", "%"], ["*", "\u03bc"]],
      [["Shift", "Shift"], ["<", ">"], ["w", "W"], ["x", "X"], ["c", "C"], ["v", "V"], ["b", "B"], ["n", "N"], [",", "?"], [";", "."], [":", "/"], ["!", "\u00a7"], ["Shift", "Shift"]],
      [[" ", " ", " ", " "], ["AltGr", "AltGr"]]
    ];

    this.VKI_layout.German = [ // German Standard Keyboard
      [["\u005e", "\u00b0"], ["1", "!"], ["2", '"', "\u00b2"], ["3", "\u00a7", "\u00b3"], ["4", "$"], ["5", "%"], ["6", "&"], ["7", "/", "{"], ["8", "(", "["], ["9", ")", "]"], ["0", "=", "}"], ["\u00df", "?", "\\"], ["\u00b4", "\u0060"], ["Bksp", "Bksp"]],
      [["Tab", "Tab"], ["q", "Q", "\u0040"], ["w", "W"], ["e", "E", "\u20ac"], ["r", "R"], ["t", "T"], ["z", "Z"], ["u", "U"], ["i", "I"], ["o", "O"], ["p", "P"], ["\u00fc", "\u00dc"], ["+", "*", "~"], ["Enter", "Enter"]],
      [["Caps", "Caps"], ["a", "A"], ["s", "S"], ["d", "D"], ["f", "F"], ["g", "G"], ["h", "H"], ["j", "J"], ["k", "K"], ["l", "L"], ["\u00f6", "\u00d6"], ["\u00e4", "\u00c4"], ["#", "'"]],
      [["Shift", "Shift"], ["<", ">", "\u00a6"], ["y", "Y"], ["x", "X"], ["c", "C"], ["v", "V"], ["b", "B"], ["n", "N"], ["m", "M", "\u00b5"], [",", ";"], [".", ":"], ["-", "_"], ["Shift", "Shift"]],
      [[" ", " ", " ", " "], ["AltGr", "AltGr"]]
    ];

    this.VKI_layout.Greek = [ // Greek Standard Keyboard
      [["`", "~"], ["1", "!"], ["2", "@", "\u00b2"], ["3", "#", "\u00b3"], ["4", "$", "\u00a3"], ["5", "%", "\u00a7"], ["6", "^", "\u00b6"], ["7", "&"], ["8", "*", "\u00a4"], ["9", "(", "\u00a6"], ["0", ")", "\u00ba"], ["-", "_", "\u00b1"], ["=", "+", "\u00bd"], ["Bksp", "Bksp"]],
      [["Tab", "Tab"], [";", ":"], ["\u03c2", "^"], ["\u03b5", "\u0395"], ["\u03c1", "\u03a1"], ["\u03c4", "\u03a4"], ["\u03c5", "\u03a5"], ["\u03b8", "\u0398"], ["\u03b9", "\u0399"], ["\u03bf", "\u039f"], ["\u03c0", "\u03a0"], ["[", "{", "\u201c"], ["]", "}", "\u201d"], ["Enter", "Enter"]],
      [["Caps", "Caps"], ["\u03b1", "\u0391"], ["\u03c3", "\u03a3"], ["\u03b4", "\u0394"], ["\u03c6", "\u03a6"], ["\u03b3", "\u0393"], ["\u03b7", "\u0397"], ["\u03be", "\u039e"], ["\u03ba", "\u039a"], ["\u03bb", "\u039b"], ["\u0384", "\u00a8", "\u0385"], ["'", '"'], ["\\", "|", "\u00ac"]],
      [["Shift", "Shift"], ["<", ">"], ["\u03b6", "\u0396"], ["\u03c7", "\u03a7"], ["\u03c8", "\u03a8"], ["\u03c9", "\u03a9"], ["\u03b2", "\u0392"], ["\u03bd", "\u039d"], ["\u03bc", "\u039c"], [",", "<"], [".", ">"], ["/", "?"], ["Shift", "Shift"]],
      [[" ", " ", " ", " "], ["AltGr", "AltGr"]]
    ];

    this.VKI_layout.Hebrew = [ // Hebrew Standard Keyboard
      [["~", "`"], ["1", "!"], ["2", "@"], ["3", "#"], ["4" , "$", "\u20aa"], ["5" , "%"], ["6", "^"], ["7", "&"], ["8", "*"], ["9", ")"], ["0", "("], ["-", "_"], ["=", "+"], ["\\", "|"], ["Bksp", "Bksp"]],
      [["Tab", "Tab"], ["/", "Q"], ["'", "W"], ["\u05e7", "E", "\u20ac"], ["\u05e8", "R"], ["\u05d0", "T"], ["\u05d8", "Y"], ["\u05d5", "U", "\u05f0"], ["\u05df", "I"], ["\u05dd", "O"], ["\u05e4", "P"], ["]", "}"], ["[", "{"]],
      [["Caps", "Caps"], ["\u05e9", "A"], ["\u05d3", "S"], ["\u05d2", "D"], ["\u05db", "F"], ["\u05e2", "G"], ["\u05d9", "H", "\u05f2"], ["\u05d7", "J", "\u05f1"], ["\u05dc", "K"], ["\u05da", "L"], ["\u05e3", ":"], ["," , '"'], ["Enter", "Enter"]],
      [["Shift", "Shift"], ["\u05d6", "Z"], ["\u05e1", "X"], ["\u05d1", "C"], ["\u05d4", "V"], ["\u05e0", "B"], ["\u05de", "N"], ["\u05e6", "M"], ["\u05ea", ">"], ["\u05e5", "<"], [".", "?"], ["Shift", "Shift"]],
      [[" ", " ", " ", " "], ["AltGr", "AltGr"]]
    ];

    this.VKI_layout.Hungarian = [ // Hungarian Standard Keyboard
      [["0", "\u00a7"], ["1", "'", "\u007e"], ["2", '"', "\u02c7"], ["3", "+", "\u02c6"], ["4", "!", "\u02d8"], ["5", "%", "\u00b0"], ["6", "/", "\u02db"], ["7", "=", "\u0060"], ["8", "(", "\u02d9"], ["9", ")", "\u00b4"], ["\u00f6", "\u00d6", "\u02dd"], ["\u00fc", "\u00dc", "\u00a8"], ["\u00f3", "\u00d3", "\u00b8"], ["Bksp", "Bksp"]],
      [["Tab", "Tab"], ["q", "Q", "\u005c"], ["w", "W", "\u007c"], ["e", "E", "\u00c4"], ["r", "R"], ["t", "T"], ["z", "Z"], ["u", "U", "\u20ac"], ["i", "I", "\u00cd"], ["o", "O"], ["p", "P"], ["\u0151", "\u0150", "\u00f7"], ["\u00fa", "\u00da", "\u00d7"], ["Enter", "Enter"]],
      [["Caps", "Caps"], ["a", "A", "\u00e4"], ["s", "S","\u0111"], ["d", "D","\u0110"], ["f", "F","\u005b"], ["g", "G","\u005d"], ["h", "H"], ["j", "J","\u00ed"], ["k", "K","\u0141"], ["l", "L","\u0142"], ["\u00e9", "\u00c9","\u0024"], ["\u00e1", "\u00c1","\u00df"], ["\u0171", "\u0170","\u00a4"]],
      [["Shift", "Shift"], ["\u00ed", "\u00cd","\u003c"], ["y", "Y","\u003e"], ["x", "X","\u0023"], ["c", "C","\u0026"], ["v", "V","\u0040"], ["b", "B","\u007b"], ["n", "N","\u007d"], ["m", "M","\u003c"], [",", "?","\u003b"], [".", ":","\u003e"], ["-", "_","\u002a"], ["Shift", "Shift"]],
      [[" ", " ", " ", " "], ["AltGr", "AltGr"]]
    ];

    this.VKI_layout.Italian = [ // Italian Standard Keyboard
      [["\u005c", "\u007c"], ["1", "!"], ["2", '"'], ["3", "\u00a3"], ["4", "$", "\u20ac"], ["5", "%"], ["6", "&"], ["7", "/"], ["8", "("], ["9", ")"], ["0", "="], ["'", "?"], ["\u00ec", "\u005e"], ["Bksp", "Bksp"]],
      [["Tab", "Tab"], ["q", "Q"], ["w", "W"], ["e", "E", "\u20ac"], ["r", "R"], ["t", "T"], ["y", "Y"], ["u", "U"], ["i", "I"], ["o", "O"], ["p", "P"], ["\u00e8", "\u00e9", "[", "{"], ["+", "*", "]", "}"], ["Enter", "Enter"]],
      [["Caps", "Caps"], ["a", "A"], ["s", "S"], ["d", "D"], ["f", "F"], ["g", "G"], ["h", "H"], ["j", "J"], ["k", "K"], ["l", "L"], ["\u00f2", "\u00e7", "@"], ["\u00e0", "\u00b0", "#"], ["\u00f9", "\u00a7"]],
      [["Shift", "Shift"], ["<", ">"], ["z", "Z"], ["x", "X"], ["c", "C"], ["v", "V"], ["b", "B"], ["n", "N"], ["m", "M"], [",", ";"], [".", ":"], ["-", "_"], ["Shift", "Shift"]],
      [[" ", " ", " ", " "], ["AltGr", "AltGr"]]
    ];

    this.VKI_layout.Kazakh = [ // Kazakh Standard Keyboard
      [["(", ")"], ['"', "!"], ["\u04d9", "\u04d8"], ["\u0456", "\u0406"], ["\u04a3", "\u04a2"], ["\u0493", "\u0492"], [",", ";"], [".", ":"], ["\u04af", "\u04ae"], ["\u04b1", "\u04b0"], ["\u049b", "\u049a"], ["\u04e9", "\u04e8"], ["\u04bb", "\u04ba"], ["Bksp", "Bksp"]],
      [["Tab", "Tab"], ["\u0439", "\u0419"], ["\u0446", "\u0426"], ["\u0443", "\u0423"], ["\u043A", "\u041A"], ["\u0435", "\u0415"], ["\u043D", "\u041D"], ["\u0433", "\u0413"], ["\u0448", "\u0428"], ["\u0449", "\u0429"], ["\u0437", "\u0417"], ["\u0445", "\u0425"], ["\u044A", "\u042A"], ["\\", "/"]],
      [["Caps", "Caps"], ["\u0444", "\u0424"], ["\u044B", "\u042B"], ["\u0432", "\u0412"], ["\u0430", "\u0410"], ["\u043F", "\u041F"], ["\u0440", "\u0420"], ["\u043E", "\u041E"], ["\u043B", "\u041B"], ["\u0434", "\u0414"], ["\u0436", "\u0416"], ["\u044D", "\u042D"], ["Enter", "Enter"]],
      [["Shift", "Shift"], ["\\", "|"], ["\u044F", "\u042F"], ["\u0447", "\u0427"], ["\u0441", "\u0421"], ["\u043C", "\u041C"], ["\u0438", "\u0418"], ["\u0442", "\u0422"], ["\u044C", "\u042C"], ["\u0431", "\u0411"], ["\u044E", "\u042E"], ["\u2116", "?"], ["Shift", "Shift"]],
      [[" ", " "]]
    ];

    this.VKI_layout.Lithuanian = [ // Lithuanian Standard Keyboard
      [["`", "~"], ["\u0105", "\u0104"], ["\u010D", "\u010C"], ["\u0119", "\u0118"], ["\u0117", "\u0116"], ["\u012F", "\u012E"], ["\u0161", "\u0160"], ["\u0173", "\u0172"], ["\u016B", "\u016A"], ["\u201E", "("], ["\u201C", ")"], ["-", "_"], ["\u017E", "\u017D"], ["Bksp", "Bksp"]],
      [["Tab", "Tab"], ["q", "Q"], ["w", "W"], ["e", "E"], ["r", "R"], ["t", "T"], ["y", "Y"], ["u", "U"], ["i", "I"], ["o", "O"], ["p", "P"], ["[", "{"], ["]", "}"], ["Enter", "Enter"]],
      [["Caps", "Caps"], ["a", "A"], ["s", "S"], ["d", "D"], ["f", "F"], ["g", "G"], ["h", "H"], ["j", "J"], ["k", "K"], ["l", "L"], [";", ":"], ["'", '"'], ["\\", "|"]],
      [["Shift", "Shift"], ["\u2013", "\u20AC"], ["z", "Z"], ["x", "X"], ["c", "C"], ["v", "V"], ["b", "B"], ["n", "N"], ["m", "M"], [",", "<"], [".", ">"], ["/", "?"], ["Shift", "Shift"]],
      [[" ", " "]]
    ];

    this.VKI_layout.Norwegian = [ // Norwegian Standard Keyboard
      [["|", "\u00a7"], ["1", "!"], ["2", '"', "@"], ["3", "#", "\u00a3"], ["4", "\u00a4", "$"], ["5", "%"], ["6", "&"], ["7", "/", "{"], ["8", "(", "["], ["9", ")", "]"], ["0", "=", "}"], ["+", "?"], ["\\", "`", "\u00b4"], ["Bksp", "Bksp"]],
      [["Tab", "Tab"], ["q", "Q"], ["w", "W"], ["e", "E", "\u20ac"], ["r", "R"], ["t", "T"], ["y", "Y"], ["u", "U"], ["i", "I"], ["o", "O"], ["p", "P"], ["\u00e5", "\u00c5"], ["\u00a8", "^", "~"], ["Enter", "Enter"]],
      [["Caps", "Caps"], ["a", "A"], ["s", "S"], ["d", "D"], ["f", "F"], ["g", "G"], ["h", "H"], ["j", "J"], ["k", "K"], ["l", "L"], ["\u00f8", "\u00d8"], ["\u00e6", "\u00c6"], ["'", "*"]],
      [["Shift", "Shift"], ["<", ">"], ["z", "Z"], ["x", "X"], ["c", "C"], ["v", "V"], ["b", "B"], ["n", "N"], ["m", "M", "\u03bc", "\u039c"], [",", ";"], [".", ":"], ["-", "_"], ["Shift", "Shift"]],
      [[" ", " ", " ", " "], ["AltGr", "AltGr"]]
    ];

    this.VKI_layout.Numpad = [ // Number pad
      [["$"], ["\u00a3"], ["\u20ac"], ["\u00a5"], ["/"], ["^"], ["Bksp", "Bksp"]],
      [["."], ["7"], ["8"], ["9"], ["*"], ["<"], ["("], ["["]],
      [["="], ["4"], ["5"], ["6"], ["-"], [">"], [")"], ["]"]],
      [["0"], ["1"], ["2"], ["3"], ["+"], ["Enter", "Enter"]],
      [[" "]]
    ];
    this.VKI_layout.Numpad.DDK = true;

    this.VKI_layout.Pinyin = [ // Pinyin Keyboard
      [["`", "~", "\u4e93", "\u301C"], ["1", "!", "\uFF62"], ["2", "@", "\uFF63"], ["3", "#", "\u301D"], ["4", "$", "\u301E"], ["5", "%", "\u301F"], ["6", "^", "\u3008"], ["7", "&", "\u3009"], ["8", "*", "\u302F"], ["9", "(", "\u300A"], ["0", ")", "\u300B"], ["-", "_", "\u300E"], ["=", "+", "\u300F"], ["Bksp", "Bksp"]],
      [["Tab", "Tab"], ["q", "Q", "\u0101", "\u0100"], ["w", "W", "\u00E1", "\u00C1"], ["e", "E", "\u01CE", "\u01CD"], ["r", "R", "\u00E0", "\u00C0"], ["t", "T", "\u0113", "\u0112"], ["y", "Y", "\u00E9", "\u00C9"], ["u", "U", "\u011B", "\u011A"], ["i", "I", "\u00E8", "\u00C8"], ["o", "O", "\u012B", "\u012A"], ["p", "P", "\u00ED", "\u00CD"], ["[", "{", "\u01D0", "\u01CF"], ["]", "}", "\u00EC", "\u00CC"], ["\\", "|", "\u3020"]],
      [["Caps", "Caps"], ["a", "A", "\u014D", "\u014C"], ["s", "S", "\u00F3", "\u00D3"], ["d", "D", "\u01D2", "\u01D1"], ["f", "F", "\u00F2", "\u00D2"], ["g", "G", "\u00fc", "\u00dc"], ["h", "H", "\u016B", "\u016A"], ["j", "J", "\u00FA", "\u00DA"], ["k", "K", "\u01D4", "\u01D3"], ["l", "L", "\u00F9", "\u00D9"], [";", ":"], ["'", '"'], ["Enter", "Enter"]],
      [["Shift", "Shift"], ["z", "Z", "\u01D6", "\u01D5"], ["x", "X", "\u01D8", "\u01D7"], ["c", "C", "\u01DA", "\u01D9"], ["v", "V", "\u01DC", "\u01DB"], ["b", "B"], ["n", "N"], ["m", "M"], [",", "<", "\u3001"], [".", ">", "\u3002"], ["/", "?"], ["Shift", "Shift"]],
      [["AltLk", "AltLk"], [" ", " ", " ", " "], ["Alt", "Alt"]]
    ];

    this.VKI_layout["Polish Prog"] = [ // Polish Programmers Keyboard
      [["`", "~"], ["1", "!"], ["2", "@"], ["3", "#"], ["4", "$"], ["5", "%"], ["6", "^"], ["7", "&"], ["8", "*"], ["9", "("], ["0", ")"], ["-", "_"], ["=", "+"], ["Bksp", "Bksp"]],
      [["Tab", "Tab"], ["q", "Q"], ["w", "W"], ["e", "E", "\u0119", "\u0118"], ["r", "R"], ["t", "T"], ["y", "Y"], ["u", "U"], ["i", "I"], ["o", "O", "\u00f3", "\u00d3"], ["p", "P"], ["[", "{"], ["]", "}"], ["\\", "|"]],
      [["Caps", "Caps"], ["a", "A", "\u0105", "\u0104"], ["s", "S", "\u015b", "\u015a"], ["d", "D"], ["f", "F"], ["g", "G"], ["h", "H"], ["j", "J"], ["k", "K"], ["l", "L", "\u0142", "\u0141"], [";", ":"], ["'", '"'], ["Enter", "Enter"]],
      [["Shift", "Shift"], ["z", "Z", "\u017c", "\u017b"], ["x", "X", "\u017a", "\u0179"], ["c", "C", "\u0107", "\u0106"], ["v", "V"], ["b", "B"], ["n", "N", "\u0144", "\u0143"], ["m", "M"], [",", "<"], [".", ">"], ["/", "?"], ["Shift", "Shift"]],
      [[" ", " ", " ", " "], ["Alt", "Alt"]]
    ];

    this.VKI_layout["Portuguese Br"] = [ // Portuguese (Brazil) Standard Keyboard
      [["'", '"'], ["1", "!", "\u00b9"], ["2", "@", "\u00b2"], ["3", "#", "\u00b3"], ["4", "$", "\u00a3"], ["5", "%", "\u00a2"], ["6", "\u00a8", "\u00ac"], ["7", "&"], ["8", "*"], ["9", "("], ["0", ")"], ["-", "_"], ["=", "+", "\u00a7"], ["Bksp", "Bksp"]],
      [["Tab", "Tab"], ["q", "Q", "/"], ["w", "W", "?"], ["e", "E", "\u20ac"], ["r", "R"], ["t", "T"], ["y", "Y"], ["u", "U"], ["i", "I"], ["o", "O"], ["p", "P"], ["\u00b4", "`"], ["[", "{", "\u00aa"], ["Enter", "Enter"]],
      [["Caps", "Caps"], ["a", "A"], ["s", "S"], ["d", "D"], ["f", "F"], ["g", "G"], ["h", "H"], ["j", "J"], ["k", "K"], ["l", "L"], ["\u00e7", "\u00c7"], ["~", "^"], ["]", "}", "\u00ba"], ["/", "?"]],
      [["Shift", "Shift"], ["\\", "|"], ["z", "Z"], ["x", "X"], ["c", "C", "\u20a2"], ["v", "V"], ["b", "B"], ["n", "N"], ["m", "M"], [",", "<"], [".", ">"], [":", ":"], ["Shift", "Shift"]],
      [[" ", " ", " ", " "], ["AltGr", "AltGr"]]
    ];

    this.VKI_layout["Portuguese Pt"] = [ // Portuguese (Portugal) Standard Keyboard
      [["\\", "|"], ["1", "!"], ["2", '"', "@"], ["3", "#", "\u00a3"], ["4", "$", "\u00a7"], ["5", "%"], ["6", "&"], ["7", "/", "{"], ["8", "(", "["], ["9", ")", "]"], ["0", "=", "}"], ["'", "?"], ["\u00ab", "\u00bb"], ["Bksp", "Bksp"]],
      [["Tab", "Tab"], ["q", "Q"], ["w", "W"], ["e", "E", "\u20ac"], ["r", "R"], ["t", "T"], ["y", "Y"], ["u", "U"], ["i", "I"], ["o", "O"], ["p", "P"], ["+", "*", "\u00a8"], ["\u00b4", "`"], ["Enter", "Enter"]],
      [["Caps", "Caps"], ["a", "A"], ["s", "S"], ["d", "D"], ["f", "F"], ["g", "G"], ["h", "H"], ["j", "J"], ["k", "K"], ["l", "L"], ["\u00e7", "\u00c7"], ["\u00ba", "\u00aa"], ["~", "^"]],
      [["Shift", "Shift"], ["<", ">", "\\"], ["z", "Z"], ["x", "X"], ["c", "C"], ["v", "V"], ["b", "B"], ["n", "N"], ["m", "M"], [",", ";"], [".", ":"], ["-", "_"], ["Shift", "Shift"]],
      [[" ", " ", " ", " "], ["AltGr", "AltGr"]]
    ];

    this.VKI_layout.Romanian = [ // Romanian Standard Keyboard
     [["\u201E", "\u201D", "\u0060", "~"], ["1", "!","~"], ["2", "\u0040", "\u02C7"], ["3", "#","\u005E"], ["4", "$", "\u02D8"], ["5", "%", "\u00B0"], ["6", "\u005E", "\u02DB"], ["7", "&", "\u0060"], ["8", "*", "\u02D9"], ["9", "(", "\u00B4"], ["0", ")", "\u02DD"], ["-", "_", "\u00A8"], ["=", "+", "\u00B8", "\u00B1"], ["Bksp", "Bksp"]],
     [["Tab", "Tab"], ["q", "Q"], ["w", "W"], ["e", "E", "\u20AC"], ["r", "R"], ["t", "T"], ["y", "Y"], ["u", "U"], ["i", "I"], ["o", "O"], ["p", "P", "\u00A7"], ["\u0103", "\u0102", "[", "{"], ["\u00EE", "\u00CE", "]","}"], ["\u00E2", "\u00C2", "\\", "|"]],
     [["Caps", "Caps"], ["a", "A"], ["s", "S", "\u00df"], ["d", "D", "\u00f0", "\u00D0"], ["f", "F"], ["g", "G"], ["h", "H"], ["j", "J"], ["k", "K"], ["l", "L", "\u0142", "\u0141"], [(this.VKI_isIElt8) ? "\u015F" : "\u0219", (this.VKI_isIElt8) ? "\u015E" : "\u0218", ";", ":"], [(this.VKI_isIElt8) ? "\u0163" : "\u021B", (this.VKI_isIElt8) ? "\u0162" : "\u021A", "\'", "\""], ["Enter", "Enter"]],
     [["Shift", "Shift"], ["\\", "|"], ["z", "Z"], ["x", "X"], ["c", "C", "\u00A9"], ["v", "V"], ["b", "B"], ["n", "N"], ["m", "M"], [",", ";", "<", "\u00AB"], [".", ":", ">", "\u00BB"], ["/", "?"], ["Shift", "Shift"]],
     [[" ", " ", " ", " "], ["AltGr", "AltGr"]]
    ];

    this.VKI_layout.Russian = [ // Russian Standard Keyboard
      [["\u0451", "\u0401"], ["1", "!"], ["2", '"'], ["3", "\u2116"], ["4", ";"], ["5", "%"], ["6", ":"], ["7", "?"], ["8", "*"], ["9", "("], ["0", ")"], ["-", "_"], ["=", "+"], ["Bksp", "Bksp"]],
      [["Tab", "Tab"], ["\u0439", "\u0419"], ["\u0446", "\u0426"], ["\u0443", "\u0423"], ["\u043A", "\u041A"], ["\u0435", "\u0415"], ["\u043D", "\u041D"], ["\u0433", "\u0413"], ["\u0448", "\u0428"], ["\u0449", "\u0429"], ["\u0437", "\u0417"], ["\u0445", "\u0425"], ["\u044A", "\u042A"], ["Enter", "Enter"]],
      [["Caps", "Caps"], ["\u0444", "\u0424"], ["\u044B", "\u042B"], ["\u0432", "\u0412"], ["\u0430", "\u0410"], ["\u043F", "\u041F"], ["\u0440", "\u0420"], ["\u043E", "\u041E"], ["\u043B", "\u041B"], ["\u0434", "\u0414"], ["\u0436", "\u0416"], ["\u044D", "\u042D"], ["\\", "/"]],
      [["Shift", "Shift"], ["/", "|"], ["\u044F", "\u042F"], ["\u0447", "\u0427"], ["\u0441", "\u0421"], ["\u043C", "\u041C"], ["\u0438", "\u0418"], ["\u0442", "\u0422"], ["\u044C", "\u042C"], ["\u0431", "\u0411"], ["\u044E", "\u042E"], [".", ","], ["Shift", "Shift"]],
      [[" ", " "]]
    ];

    this.VKI_layout.SerbianCyr = [ // Serbian Cyrillic Standard Keyboard
      [["`", "~"], ["1", "!"], ["2", '"'], ["3", "#"], ["4", "$"], ["5", "%"], ["6", "&"], ["7", "/"], ["8", "("], ["9", ")"], ["0", "="], ["'", "?"], ["+", "*"], ["Bksp", "Bksp"]],
      [["Tab", "Tab"], ["\u0459", "\u0409"], ["\u045a", "\u040a"], ["\u0435", "\u0415", "\u20ac"], ["\u0440", "\u0420"], ["\u0442", "\u0422"], ["\u0437", "\u0417"], ["\u0443", "\u0423"], ["\u0438", "\u0418"], ["\u043e", "\u041e"], ["\u043f", "\u041f"], ["\u0448", "\u0428"], ["\u0452", "\u0402"], ["Enter", "Enter"]],
      [["Caps", "Caps"], ["\u0430", "\u0410"], ["\u0441", "\u0421"], ["\u0434", "\u0414"], ["\u0444", "\u0424"], ["\u0433", "\u0413"], ["\u0445", "\u0425"], ["\u0458", "\u0408"], ["\u043a", "\u041a"], ["\u043b", "\u041b"], ["\u0447", "\u0427"], ["\u045b", "\u040b"], ["\u0436", "\u0416"]],
      [["Shift", "Shift"], ["<", ">"], ["\u0455", "\u0405"], ["\u045f", "\u040f"], ["\u0446", "\u0426"], ["\u0432", "\u0412"], ["\u0431", "\u0411"], ["\u043d", "\u041d"], ["\u043c", "\u041c"], [",", ";", "<"], [".", ":", ">"], ["-", "_", "\u00a9"], ["Shift", "Shift"]],
      [[" ", " ", " ", " "], ["AltGr", "AltGr"]]
    ];

    this.VKI_layout.SerbianLat = [ // Serbian Latin Standard Keyboard
      [["\u201a", "~"], ["1", "!", "~"], ["2", '"', "\u02c7"], ["3", "#", "^"], ["4", "$", "\u02d8"], ["5", "%", "\u00b0"], ["6", "&", "\u02db"], ["7", "/", "`"], ["8", "(", "\u02d9"], ["9", ")", "\u00b4"], ["0", "=", "\u02dd"], ["'", "?", "\u00a8"], ["+", "*", "\u00b8"], ["Bksp", "Bksp"]],
      [["Tab", "Tab"], ["q", "Q", "\\"], ["w", "W","|"], ["e", "E", "\u20ac"], ["r", "R"], ["t", "T"], ["z", "Z"], ["u", "U"], ["i", "I"], ["o", "O"], ["p", "P"], ["\u0161", "\u0160", "\u00f7"], ["\u0111", "\u0110", "\u00d7"], ["Enter", "Enter"]],
      [["Caps", "Caps"], ["a", "A"], ["s", "S"], ["d", "D"], ["f", "F", "["], ["g", "G", "]"], ["h", "H"], ["j", "J"], ["k", "K", "\u0142"], ["l", "L", "\u0141"], ["\u010d", "\u010c"], ["\u0107", "\u0106", "\u00df"], ["\u017e", "\u017d", "\u00a4"]],
      [["Shift", "Shift"], ["<", ">"], ["y", "Y"], ["x", "X"], ["c", "C"], ["v", "V", "@"], ["b", "B", "{",], ["n", "N", "}"], ["m", "M", "\u00a7"], [",", ";", "<"], [".", ":", ">"], ["-", "_", "\u00a9"], ["Shift", "Shift"]],
      [[" ", " ", " ", " "], ["AltGr", "AltGr"]]
    ];

    this.VKI_layout.Slovak = [ // Slovak Keyboard
     [[";", "\u00b0"], ["+", "1", "~"], ["\u013E", "2", "\u02C7"], ["\u0161", "3", "\u005E"], ["\u010D", "4", "\u02D8"], ["\u0165", "5", "\u00B0"], ["\u017E", "6", "\u02DB"], ["\u00FD", "7", "\u0060"], ["\u00E1", "8", "\u02D9"], ["\u00ED", "9", "\u00B4"], ["\u00E9", "0", "\u02DD"], ["=", "%", "\u00A8"], ["\u00B4", "\u02c7", "\u00B8"], ["Bksp", "Bksp"]],
     [["Tab", "Tab"], ["q", "Q","\u005C"], ["w", "W","\u007C"], ["e", "E", "\u20AC"], ["r", "R"], ["t", "T"], ["z", "Z"], ["u", "U"], ["i", "I"], ["o", "O"], ["p", "P","\u0027"], ["\u00FA", "/", "\u00F7"], ["\u00E4", "(", "\u00D7"], ["Enter", "Enter"]],
     [["Caps", "Caps"], ["a", "A"], ["s", "S","\u0111"], ["d", "D","\u0110"], ["f", "F","\u005B"], ["g", "G","\u005D"], ["h", "H"], ["j", "J"], ["k", "K","\u0142"], ["l", "L","\u0141"], ["\u00F4", '"', "\u0024"], ["\u00A7", "!", "\u00DF",], ["\u0148", ")","\u00A4"]],
     [["Shift", "Shift"], ["&", "*", "\u003C"], ["y", "Y","\u003E"], ["x", "X","\u0023"], ["c", "C","\u0026"], ["v", "V","\u0040"], ["b", "B","\u007B"], ["n", "N","\u007D"], ["m", "M"], [",", "?", "<"], [".", ":", ">"], ["-", "_", "\u002A", ], ["Shift", "Shift"]],
     [[" ", " ", " ", " "], ["AltGr", "AltGr"]]
    ];

    this.VKI_layout.Slovenian = [ // Slovenian Standard Keyboard
      [["\u00a8", "\u00a8", "\u00b8"], ["1", "!", "~"], ["2", '"', "\u02c7"], ["3", "#", "^"], ["4", "$", "\u02d8"], ["5", "%", "\u00b0"], ["6", "&", "\u02db"], ["7", "/", "\u0060"], ["8", "(", "\u00B7"], ["9", ")", "\u00b4"], ["0", "=", "\u2033"], ["'", "?", "\u00a8"], ["+", "*", "\u00b8"], ["Bksp", "Bksp"]],
      [["Tab", "Tab"], ["q", "Q", "\\"], ["w", "W","|"], ["e", "E", "\u20ac"], ["r", "R"], ["t", "T"], ["z", "Z"], ["u", "U"], ["i", "I"], ["o", "O"], ["p", "P"], ["\u0161", "\u0160", "\u00f7"], ["\u0111", "\u0110", "\u00d7"], ["Enter", "Enter"]],
      [["Caps", "Caps"], ["a", "A"], ["s", "S"], ["d", "D"], ["f", "F", "["], ["g", "G", "]"], ["h", "H"], ["j", "J"], ["k", "K", "\u0142"], ["l", "L", "\u0141"], ["\u010D", "\u010C"], ["\u0107", "\u0106", "\u00df"], ["\u017E", "\u017D", "\u00a4"]],
      [["Shift", "Shift"], ["<", ">"], ["y", "Y"], ["x", "X"], ["c", "C"], ["v", "V", "@"], ["b", "B", "{",], ["n", "N", "}"], ["m", "M", "\u00a7"], [",", ";"], [".", ":"], ["-", "_"], ["Shift", "Shift"]],
      [[" ", " ", " ", " "], ["AltGr", "AltGr"]]
    ];

    this.VKI_layout["Spanish Es"] = [ // Spanish (Spain) Standard Keyboard
      [["\u00ba", "\u00aa", "\\"], ["1", "!", "|"], ["2", '"', "@"], ["3", "'", "#"], ["4", "$", "~"], ["5", "%", "\u20ac"], ["6", "&","\u00ac"], ["7", "/"], ["8", "("], ["9", ")"], ["0", "="], ["'", "?"], ["\u00a1", "\u00bf"], ["Bksp", "Bksp"]],
      [["Tab", "Tab"], ["q", "Q"], ["w", "W"], ["e", "E"], ["r", "R"], ["t", "T"], ["y", "Y"], ["u", "U"], ["i", "I"], ["o", "O"], ["p", "P"], ["\u0060", "^", "["], ["\u002b", "\u002a", "]"], ["Enter", "Enter"]],
      [["Caps", "Caps"], ["a", "A"], ["s", "S"], ["d", "D"], ["f", "F"], ["g", "G"], ["h", "H"], ["j", "J"], ["k", "K"], ["l", "L"], ["\u00f1", "\u00d1"], ["\u00b4", "\u00a8", "{"], ["\u00e7", "\u00c7", "}"]],
      [["Shift", "Shift"], ["<", ">"], ["z", "Z"], ["x", "X"], ["c", "C"], ["v", "V"], ["b", "B"], ["n", "N"], ["m", "M"], [",", ";"], [".", ":"], ["-", "_"], ["Shift", "Shift"]],
      [[" ", " ", " ", " "], ["AltGr", "AltGr"]]
    ];

    this.VKI_layout.Swedish = [ // Swedish Standard Keyboard
      [["\u00a7", "\u00bd"], ["1", "!"], ["2", '"', "@"], ["3", "#", "\u00a3"], ["4", "\u00a4", "$"], ["5", "%", "\u20ac"], ["6", "&"], ["7", "/", "{"], ["8", "(", "["], ["9", ")", "]"], ["0", "=", "}"], ["+", "?", "\\"], ["\u00b4", "`"], ["Bksp", "Bksp"]],
      [["Tab", "Tab"], ["q", "Q"], ["w", "W"], ["e", "E", "\u20ac"], ["r", "R"], ["t", "T"], ["y", "Y"], ["u", "U"], ["i", "I"], ["o", "O"], ["p", "P"], ["\u00e5", "\u00c5"], ["\u00a8", "^", "~"], ["Enter", "Enter"]],
      [["Caps", "Caps"], ["a", "A"], ["s", "S"], ["d", "D"], ["f", "F"], ["g", "G"], ["h", "H"], ["j", "J"], ["k", "K"], ["l", "L"], ["\u00f6", "\u00d6"], ["\u00e4", "\u00c4"], ["'", "*"]],
      [["Shift", "Shift"], ["<", ">", "|"], ["z", "Z"], ["x", "X"], ["c", "C"], ["v", "V"], ["b", "B"], ["n", "N"], ["m", "M", "\u03bc", "\u039c"], [",", ";"], [".", ":"], ["-", "_"], ["Shift", "Shift"]],
      [[" ", " ", " ", " "], ["AltGr", "AltGr"]]
    ];

    this.VKI_layout["Turkish-F"] = [ // Turkish F Keyboard Layout
      [['+', "*", "\u00ac"], ["1", "!", "\u00b9", "\u00a1"], ["2", '"', "\u00b2"], ["3", "^", "#", "\u00b3"], ["4", "$", "\u00bc", "\u00a4"], ["5", "%", "\u00bd"], ["6", "&", "\u00be"], ["7", "'", "{"], ["8", "(", '['], ["9", ")", ']'], ["0", "=", "}"], ["/", "?", "\\", "\u00bf"], ["-", "_", "|"], ["Bksp", "Bksp"]],
      [["Tab", "Tab"], ["f", "F", "@"], ["g", "G"], ["\u011f", "\u011e"], ["\u0131", "\u0049", "\u00b6", "\u00ae"], ["o", "O"], ["d", "D", "\u00a5"], ["r", "R"], ["n", "N"], ["h", "H", "\u00f8", "\u00d8"], ["p", "P", "\u00a3"], ["q", "Q", "\u00a8"], ["w", "W", "~"], ["Enter", "Enter"]],
      [["Caps", "Caps"], ["u", "U", "\u00e6", "\u00c6"], ["i", "\u0130", "\u00df", "\u00a7"], ["e", "E", "\u20ac"], ["a", "A", " ", "\u00aa"], ["\u00fc", "\u00dc"], ["t", "T"], ["k", "K"], ["m", "M"], ["l", "L"], ["y", "Y", "\u00b4"], ["\u015f", "\u015e"], ["x", "X", "`"]],
      [["Shift", "Shift"], ["<", ">", "|", "\u00a6"], ["j", "J", "\u00ab", "<"], ["\u00f6", "\u00d6", "\u00bb", ">"], ["v", "V", "\u00a2", "\u00a9"], ["c", "C"], ["\u00e7", "\u00c7"], ["z", "Z"], ["s", "S", "\u00b5", "\u00ba"], ["b", "B", "\u00d7"], [".", ":", "\u00f7"], [",", ";", "-"], ["Shift", "Shift"]],
      [[" ", " ", " ", " "],  ["AltGr", "AltGr"]]
    ];

    this.VKI_layout["Turkish-Q"] = [ // Turkish Q Keyboard Layout
      [['"', "\u00e9", "<"], ["1", "!", ">"], ["2", "'", "\u00a3"], ["3", "^", "#"], ["4", "+", "$"], ["5", "%", "\u00bd"], ["6", "&"], ["7", "/", "{"], ["8", "(", '['], ["9", ")", ']'], ["0", "=", "}"], ["*", "?", "\\"], ["-", "_", "|"], ["Bksp", "Bksp"]],
      [["Tab", "Tab"], ["q", "Q", "@"], ["w", "W"], ["e", "E", "\u20ac"], ["r", "R"], ["t", "T"], ["y", "Y"], ["u", "U"], ["\u0131", "\u0049", "\u0069", "\u0130"], ["o", "O"], ["p", "P"], ["\u011f", "\u011e", "\u00a8"], ["\u00fc", "\u00dc", "~"], ["Enter", "Enter"]],
      [["Caps", "Caps"], ["a", "A", "\u00e6", "\u00c6"], ["s", "S", "\u00df"], ["d", "D"], ["f", "F"], ["g", "G"], ["h", "H"], ["j", "J"], ["k", "K"], ["l", "L"], ["\u015f", "\u015e", "\u00b4"], ["\u0069", "\u0130"], [",", ";", "`"]],
      [["Shift", "Shift"], ["<", ">", "|"], ["z", "Z"], ["x", "X"], ["c", "C"], ["v", "V"], ["b", "B"], ["n", "N"], ["m", "M"], ["\u00f6", "\u00d6"], ["\u00e7", "\u00c7"], [".", ":"], ["Shift", "Shift"]],
      [[" ", " ", " ", " "],  ["AltGr", "AltGr"]]
    ];

    this.VKI_layout.UK = [ // UK Standard Keyboard
      [["`", "\u00ac", "\u00a6"], ["1", "!"], ["2", '"'], ["3", "\u00a3"], ["4", "$", "\u20ac"], ["5", "%"], ["6", "^"], ["7", "&"], ["8", "*"], ["9", "("], ["0", ")"], ["-", "_"], ["=", "+"], ["Bksp", "Bksp"]],
      [["Tab", "Tab"], ["q", "Q"], ["w", "W"], ["e", "E", "\u00e9", "\u00c9"], ["r", "R"], ["t", "T"], ["y", "Y"], ["u", "U", "\u00fa", "\u00da"], ["i", "I", "\u00ed", "\u00cd"], ["o", "O", "\u00f3", "\u00d3"], ["p", "P"], ["[", "{"], ["]", "}"], ["Enter", "Enter"]],
      [["Caps", "Caps"], ["a", "A", "\u00e1", "\u00c1"], ["s", "S"], ["d", "D"], ["f", "F"], ["g", "G"], ["h", "H"], ["j", "J"], ["k", "K"], ["l", "L"], [";", ":"], ["'", "@"], ["#", "~"]],
      [["Shift", "Shift"], ["\\", "|"], ["z", "Z"], ["x", "X"], ["c", "C"], ["v", "V"], ["b", "B"], ["n", "N"], ["m", "M"], [",", "<"], [".", ">"], ["/", "?"], ["Shift", "Shift"]],
      [[" ", " ", " ", " "], ["AltGr", "AltGr"]]
    ];

    this.VKI_layout.US = [ // US Standard Keyboard
      [["`", "~"], ["1", "!"], ["2", "@"], ["3", "#"], ["4", "$"], ["5", "%"], ["6", "^"], ["7", "&"], ["8", "*"], ["9", "("], ["0", ")"], ["-", "_"], ["=", "+"], ["Bksp", "Bksp"]],
      [["Tab", "Tab"], ["q", "Q"], ["w", "W"], ["e", "E"], ["r", "R"], ["t", "T"], ["y", "Y"], ["u", "U"], ["i", "I"], ["o", "O"], ["p", "P"], ["[", "{"], ["]", "}"], ["\\", "|"]],
      [["Caps", "Caps"], ["a", "A"], ["s", "S"], ["d", "D"], ["f", "F"], ["g", "G"], ["h", "H"], ["j", "J"], ["k", "K"], ["l", "L"], [";", ":"], ["'", '"'], ["Enter", "Enter"]],
      [["Shift", "Shift"], ["z", "Z"], ["x", "X"], ["c", "C"], ["v", "V"], ["b", "B"], ["n", "N"], ["m", "M"], [",", "<"], [".", ">"], ["/", "?"], ["Shift", "Shift"]],
      [[" ", " "]]
    ];

    this.VKI_layout["US Int'l"] = [ // US International Keyboard
      [["`", "~"], ["1", "!", "\u00a1", "\u00b9"], ["2", "@", "\u00b2"], ["3", "#", "\u00b3"], ["4", "$", "\u00a4", "\u00a3"], ["5", "%", "\u20ac"], ["6", "^", "\u00bc"], ["7", "&", "\u00bd"], ["8", "*", "\u00be"], ["9", "(", "\u2018"], ["0", ")", "\u2019"], ["-", "_", "\u00a5"], ["=", "+", "\u00d7", "\u00f7"], ["Bksp", "Bksp"]],
      [["Tab", "Tab"], ["q", "Q", "\u00e4", "\u00c4"], ["w", "W", "\u00e5", "\u00c5"], ["e", "E", "\u00e9", "\u00c9"], ["r", "R", "\u00ae"], ["t", "T", "\u00fe", "\u00de"], ["y", "Y", "\u00fc", "\u00dc"], ["u", "U", "\u00fa", "\u00da"], ["i", "I", "\u00ed", "\u00cd"], ["o", "O", "\u00f3", "\u00d3"], ["p", "P", "\u00f6", "\u00d6"], ["[", "{", "\u00ab"], ["]", "}", "\u00bb"], ["\\", "|", "\u00ac", "\u00a6"]],
      [["Caps", "Caps"], ["a", "A", "\u00e1", "\u00c1"], ["s", "S", "\u00df", "\u00a7"], ["d", "D", "\u00f0", "\u00d0"], ["f", "F"], ["g", "G"], ["h", "H"], ["j", "J"], ["k", "K"], ["l", "L", "\u00f8", "\u00d8"], [";", ":", "\u00b6", "\u00b0"], ["'", '"', "\u00b4", "\u00a8"], ["Enter", "Enter"]],
      [["Shift", "Shift"], ["z", "Z", "\u00e6", "\u00c6"], ["x", "X"], ["c", "C", "\u00a9", "\u00a2"], ["v", "V"], ["b", "B"], ["n", "N", "\u00f1", "\u00d1"], ["m", "M", "\u00b5"], [",", "<", "\u00e7", "\u00c7"], [".", ">"], ["/", "?", "\u00bf"], ["Shift", "Shift"]],
      [[" ", " ", " ", " "], ["Alt", "Alt"]]
    ];


    /* ***** Define Dead Keys ************************************** */
    this.VKI_deadkey = {};

    this.VKI_deadkey['"'] = this.VKI_deadkey['\u00a8'] = [ // Umlaut / Diaeresis / Greek Dialytika
      ["a", "\u00e4"], ["e", "\u00eb"], ["i", "\u00ef"], ["o", "\u00f6"], ["u", "\u00fc"], ["y", "\u00ff"], ["\u03b9", "\u03ca"], ["\u03c5", "\u03cb"], ["\u016B", "\u01D6"], ["\u00FA", "\u01D8"], ["\u01D4", "\u01DA"], ["\u00F9", "\u01DC"],
      ["A", "\u00c4"], ["E", "\u00cb"], ["I", "\u00cf"], ["O", "\u00d6"], ["U", "\u00dc"], ["Y", "\u0178"], ["\u0399", "\u03aa"], ["\u03a5", "\u03ab"], ["\u016A", "\u01D5"], ["\u00DA", "\u01D7"], ["\u01D3", "\u01D9"], ["\u00D9", "\u01DB"]
    ];
    this.VKI_deadkey['~'] = [ // Tilde / Stroke
      ["a", "\u00e3"], ["l", "\u0142"], ["n", "\u00f1"], ["o", "\u00f5"],
      ["A", "\u00c3"], ["L", "\u0141"], ["N", "\u00d1"], ["O", "\u00d5"]
    ];
    this.VKI_deadkey['^'] = [ // Circumflex
      ["a", "\u00e2"], ["e", "\u00ea"], ["i", "\u00ee"], ["o", "\u00f4"], ["u", "\u00fb"], ["w", "\u0175"], ["y", "\u0177"],
      ["A", "\u00c2"], ["E", "\u00ca"], ["I", "\u00ce"], ["O", "\u00d4"], ["U", "\u00db"], ["W", "\u0174"], ["Y", "\u0176"]
    ];
    this.VKI_deadkey['\u02c7'] = [ // Baltic caron
      ["c", "\u010D"], ["d", "\u010f"], ["e", "\u011b"], ["s", "\u0161"], ["l", "\u013e"], ["n", "\u0148"], ["r", "\u0159"], ["t", "\u0165"], ["u", "\u01d4"], ["z", "\u017E"], ["\u00fc", "\u01da"],
      ["C", "\u010C"], ["D", "\u010e"], ["E", "\u011a"], ["S", "\u0160"], ["L", "\u013d"], ["N", "\u0147"], ["R", "\u0158"], ["T", "\u0164"], ["U", "\u01d3"], ["Z", "\u017D"], ["\u00dc", "\u01d9"]
    ];
    this.VKI_deadkey['\u02d8'] = [ // Romanian and Turkish breve
      ["a", "\u0103"], ["g", "\u011f"],
      ["A", "\u0102"], ["G", "\u011e"]
    ];
    this.VKI_deadkey['-'] = this.VKI_deadkey['\u00af'] = [ // Macron
      ["a", "\u0101"], ["e", "\u0113"], ["i", "\u012b"], ["o", "\u014d"], ["u", "\u016B"], ["y", "\u0233"], ["\u00fc", "\u01d6"],
      ["A", "\u0100"], ["E", "\u0112"], ["I", "\u012a"], ["O", "\u014c"], ["U", "\u016A"], ["Y", "\u0232"], ["\u00dc", "\u01d5"]
    ];
    this.VKI_deadkey['`'] = [ // Grave
      ["a", "\u00e0"], ["e", "\u00e8"], ["i", "\u00ec"], ["o", "\u00f2"], ["u", "\u00f9"], ["\u00fc", "\u01dc"],
      ["A", "\u00c0"], ["E", "\u00c8"], ["I", "\u00cc"], ["O", "\u00d2"], ["U", "\u00d9"], ["\u00dc", "\u01db"]
    ];
    this.VKI_deadkey["'"] = this.VKI_deadkey['\u00b4'] = this.VKI_deadkey['\u0384'] = [ // Acute / Greek Tonos
      ["a", "\u00e1"], ["e", "\u00e9"], ["i", "\u00ed"], ["o", "\u00f3"], ["u", "\u00fa"], ["y", "\u00fd"], ["\u03b1", "\u03ac"], ["\u03b5", "\u03ad"], ["\u03b7", "\u03ae"], ["\u03b9", "\u03af"], ["\u03bf", "\u03cc"], ["\u03c5", "\u03cd"], ["\u03c9", "\u03ce"], ["\u00fc", "\u01d8"],
      ["A", "\u00c1"], ["E", "\u00c9"], ["I", "\u00cd"], ["O", "\u00d3"], ["U", "\u00da"], ["Y", "\u00dd"], ["\u0391", "\u0386"], ["\u0395", "\u0388"], ["\u0397", "\u0389"], ["\u0399", "\u038a"], ["\u039f", "\u038c"], ["\u03a5", "\u038e"], ["\u03a9", "\u038f"], ["\u00dc", "\u01d7"]
    ];
    this.VKI_deadkey['\u02dd'] = [ // Hungarian Double Acute Accent
      ["o", "\u0151"], ["u", "\u0171"],
      ["O", "\u0150"], ["U", "\u0170"]
    ];
    this.VKI_deadkey['\u0385'] = [ // Greek Dialytika + Tonos
      ["\u03b9", "\u0390"], ["\u03c5", "\u03b0"]
    ];
    this.VKI_deadkey['\u00b0'] = this.VKI_deadkey['\u00ba'] = [ // Ring
      ["a", "\u00e5"], ["u", "\u016f"],
      ["A", "\u00c5"], ["U", "\u016e"]
    ];
    this.VKI_deadkey['\u02DB'] = [ // Ogonek
      ["a", "\u0106"], ["e", "\u0119"], ["i", "\u012f"], ["o", "\u01eb"], ["u", "\u0173"], ["y", "\u0177"],
      ["A", "\u0105"], ["E", "\u0118"], ["I", "\u012e"], ["O", "\u01ea"], ["U", "\u0172"], ["Y", "\u0176"]
    ];
    this.VKI_deadkey['\u02D9'] = [ // Dot-above
      ["c", "\u010B"], ["e", "\u0117"], ["g", "\u0121"], ["z", "\u017C"],
      ["C", "\u010A"], ["E", "\u0116"], ["G", "\u0120"], ["Z", "\u017B"]
    ];
    this.VKI_deadkey['\u00B8'] = this.VKI_deadkey['\u201a'] = [ // Cedilla
      ["c", "\u00e7"], ["s", "\u015F"],
      ["C", "\u00c7"], ["S", "\u015E"]
    ];
    this.VKI_deadkey[','] = [ // Comma
      ["s", (this.VKI_isIElt8) ? "\u015F" : "\u0219"], ["t", (this.VKI_isIElt8) ? "\u0163" : "\u021B"],
      ["S", (this.VKI_isIElt8) ? "\u015E" : "\u0218"], ["T", (this.VKI_isIElt8) ? "\u0162" : "\u021A"]
    ];



    /* ****************************************************************
     * Attach the keyboard to an element
     *
     */
    this.VKI_attachKeyboardUserScript = function(elem) {
      if (elem.VKI_attached) return false;
      elem.addEventListener('dblclick', function() { self.VKI_show(this); }, false);
      elem.VKI_attachedUserScript = true;
      if (this.VKI_isIE) {
        elem.onclick = elem.onselect = elem.onkeyup = function(e) {
          if ((e || event).type != "keyup" || !this.readOnly)
            this.range = document.selection.createRange();
        };
      }
    };


    /* ***** Find tagged input & textarea elements ***************** */
    var inputElems = [
      document.getElementsByTagName('input'),
      document.getElementsByTagName('textarea')
    ];
    for (var x = 0, elem; elem = inputElems[x++];)
      for (var y = 0, ex; ex = elem[y++];)
        if (ex.nodeName == "TEXTAREA" || ex.type == "text" || ex.type == "password")
          this.VKI_attachKeyboardUserScript(ex);

    document.documentElement.addEventListener('dblclick', (function(self) { return function(e) {
      e = e || event;
      if ((e.target.nodeName == "TEXTAREA" || e.target.type == "text" || e.target.type == "password") && !e.target.VKI_attachedUserScript) {
        self.VKI_attachKeyboardUserScript(e.target);
        self.VKI_show(e.target);
      }
    }})(this), false);


    /* ***** Build the keyboard interface ************************** */
    this.VKI_keyboard = document.createElement('table');
    this.VKI_keyboard.id = "keyboardInputMasterUserScript";
    this.VKI_keyboard.dir = "ltr";
    this.VKI_keyboard.cellSpacing = this.VKI_keyboard.border = "0";

    var thead = document.createElement('thead');
      var tr = document.createElement('tr');
        var th = document.createElement('th');
          var kblist = document.createElement('select');
            for (ktype in this.VKI_layout) {
              if (typeof this.VKI_layout[ktype] == "object") {
                var opt = document.createElement('option');
                    opt.value = ktype;
                    opt.appendChild(document.createTextNode(ktype));
                  kblist.appendChild(opt);
              }
            }
            if (kblist.options.length) {
                kblist.value = this.VKI_kt;
                kblist.addEventListener('change', function() {
                  self.VKI_kt = this.value;
                  self.VKI_buildKeys();
                  self.VKI_position();
                }, false);
              th.appendChild(kblist);
            }

            var label = document.createElement('label');
              var checkbox = document.createElement('input');
                  checkbox.type = "checkbox";
                  checkbox.title = "Dead keys: " + ((this.VKI_deadkeysOn) ? "On" : "Off");
                  checkbox.defaultChecked = this.VKI_deadkeysOn;
                  checkbox.addEventListener('click', function() {
                    self.VKI_deadkeysOn = this.checked;
                    this.title = "Dead keys: " + ((this.checked) ? "On" : "Off");
                    self.VKI_modify("");
                    return true;
                  }, false);
                label.appendChild(this.VKI_deadkeysElem = checkbox);
                  checkbox.checked = this.VKI_deadkeysOn;
            th.appendChild(label);
          tr.appendChild(th);

        var td = document.createElement('td');
          var clearer = document.createElement('span');
              clearer.id = "keyboardInputClear";
              clearer.appendChild(document.createTextNode("Limpar"));
              clearer.title = "Limpar tudo";
              clearer.addEventListener('mousedown', function() { this.className = "pressed"; }, false);
              clearer.addEventListener('mouseup', function() { this.className = ""; }, false);
              clearer.addEventListener('click', function() {
                self.VKI_target.value = "";
                self.VKI_target.focus();
                return false;
              }, false);
            td.appendChild(clearer);

          var closer = document.createElement('span');
              closer.id = "keyboardInputClose";
              closer.appendChild(document.createTextNode('X'));
              closer.title = "Fechar teclado virtual";
              closer.addEventListener('mousedown', function() { this.className = "pressed"; }, false);
              closer.addEventListener('mouseup', function() { this.className = ""; }, false);
              closer.addEventListener('click', function() { self.VKI_close(); }, false);
            td.appendChild(closer);

          tr.appendChild(td);
        thead.appendChild(tr);
    this.VKI_keyboard.appendChild(thead);

    var tbody = document.createElement('tbody');
      var tr = document.createElement('tr');
        var td = document.createElement('td');
            td.colSpan = "2";
          var div = document.createElement('div');
              div.id = "keyboardInputLayout";
            td.appendChild(div);
          if (this.VKI_showVersion) {
            var div = document.createElement('div');
              var ver = document.createElement('var');
                  ver.appendChild(document.createTextNode("v" + this.VKI_version));
                div.appendChild(ver);
              td.appendChild(div);
          }
          tr.appendChild(td);
        tbody.appendChild(tr);
    this.VKI_keyboard.appendChild(tbody);

    if (this.VKI_isIE6) {
      this.VKI_iframe = document.createElement('iframe');
      this.VKI_iframe.style.position = "absolute";
      this.VKI_iframe.style.border = "0px none";
      this.VKI_iframe.style.filter = "mask()";
      this.VKI_iframe.style.zIndex = "999999";
      this.VKI_iframe.src = this.VKI_imageURI;
    }


    /* ****************************************************************
     * Build or rebuild the keyboard keys
     *
     */
    this.VKI_buildKeys = function() {
      this.VKI_shift = this.VKI_shiftlock = this.VKI_altgr = this.VKI_altgrlock = this.VKI_dead = false;
      this.VKI_deadkeysOn = (this.VKI_layout[this.VKI_kt].DDK) ? false : this.VKI_keyboard.getElementsByTagName('label')[0].getElementsByTagName('input')[0].checked;

      var container = this.VKI_keyboard.tBodies[0].getElementsByTagName('div')[0];
      while (container.firstChild) container.removeChild(container.firstChild);

      for (var x = 0, hasDeadKey = false, lyt; lyt = this.VKI_layout[this.VKI_kt][x++];) {
        var table = document.createElement('table');
            table.cellSpacing = table.border = "0";
        if (lyt.length <= this.VKI_keyCenter) table.className = "keyboardInputCenter";
          var tbody = document.createElement('tbody');
            var tr = document.createElement('tr');
            for (var y = 0, lkey; lkey = lyt[y++];) {
              var td = document.createElement('td');
                  td.appendChild(document.createTextNode(lkey[0]));

                var className = [];
                if (this.VKI_deadkeysOn)
                  for (key in this.VKI_deadkey)
                    if (key === lkey[0]) { className.push("alive"); break; }
                if (lyt.length > this.VKI_keyCenter && y == lyt.length) className.push("last");
                if (lkey[0] == " ") className.push("space");
                  td.className = className.join(" ");

                  td.VKI_clickless = 0;
                  if (!td.click) {
                    td.click = function() {
                      var evt = this.ownerDocument.createEvent('MouseEvents');
                      evt.initMouseEvent('click', true, true, this.ownerDocument.defaultView, 1, 0, 0, 0, 0, false, false, false, false, 0, null);
                      this.dispatchEvent(evt);
                    };
                  }
                  td.addEventListener('mouseover', function() {
                    if (self.VKI_clickless) {
                      var _self = this;
                      clearTimeout(this.VKI_clickless);
                      this.VKI_clickless = setTimeout(function() { _self.click(); }, self.VKI_clickless);
                    }
                    if (this.firstChild.nodeValue != "\xa0") this.className += " hover";
                  }, false);
                  td.addEventListener('mouseout', function() {
                    if (self.VKI_clickless) clearTimeout(this.VKI_clickless);
                    this.className = this.className.replace(/ ?(hover|pressed)/g, "");
                  }, false);
                  td.addEventListener('mousedown', function() {
                    if (self.VKI_clickless) clearTimeout(this.VKI_clickless);
                    if (this.firstChild.nodeValue != "\xa0") this.className += " pressed";
                  }, false);
                  td.addEventListener('mouseup', function() {
                    if (self.VKI_clickless) clearTimeout(this.VKI_clickless);
                    this.className = this.className.replace(/ ?pressed/g, "");
                  }, false);
                  td.addEventListener('dblclick', function() { return false; }, false);

                switch (lkey[1]) {
                  case "Caps": case "Shift":
                  case "Alt": case "AltGr": case "AltLk":
                    td.addEventListener('click', (function(type) { return function() { self.VKI_modify(type); return false; }})(lkey[1]), false);
                    break;
                  case "Tab":
                    td.addEventListener('click', function() { self.VKI_insert("\t"); return false; }, false);
                    break;
                  case "Bksp":
                    td.addEventListener('click', function() {
                      self.VKI_target.focus();
                      if (self.VKI_target.setSelectionRange) {
                        if (self.VKI_target.readOnly && self.VKI_isWebKit) {
                          var rng = [self.VKI_target.selStart || 0, self.VKI_target.selEnd || 0];
                        } else var rng = [self.VKI_target.selectionStart, self.VKI_target.selectionEnd];
                        if (rng[0] < rng[1]) rng[0]++;
                        self.VKI_target.value = self.VKI_target.value.substr(0, rng[0] - 1) + self.VKI_target.value.substr(rng[1]);
                        self.VKI_target.setSelectionRange(rng[0] - 1, rng[0] - 1);
                        if (self.VKI_target.readOnly && self.VKI_isWebKit) {
                          var range = window.getSelection().getRangeAt(0);
                          self.VKI_target.selStart = range.startOffset;
                          self.VKI_target.selEnd = range.endOffset;
                        }
                      } else if (self.VKI_target.createTextRange) {
                        try {
                          self.VKI_target.range.select();
                        } catch(e) { self.VKI_target.range = document.selection.createRange(); }
                        if (!self.VKI_target.range.text.length) self.VKI_target.range.moveStart('character', -1);
                        self.VKI_target.range.text = "";
                      } else self.VKI_target.value = self.VKI_target.value.substr(0, self.VKI_target.value.length - 1);
                      if (self.VKI_shift) self.VKI_modify("Shift");
                      if (self.VKI_altgr) self.VKI_modify("AltGr");
                      self.VKI_target.focus();
                      return true;
                    }, false);
                    break;
                  case "Enter":
                    td.addEventListener('click', function() {
                      if (self.VKI_target.nodeName != "TEXTAREA") {
                        self.VKI_close();
                        this.className = this.className.replace(/ ?(hover|pressed)/g, "");
                      } else self.VKI_insert("\n");
                      return true;
                    }, false);
                    break;
                  default:
                    td.addEventListener('click', function() {
                      if (self.VKI_deadkeysOn && self.VKI_dead) {
                        if (self.VKI_dead != this.firstChild.nodeValue) {
                          for (key in self.VKI_deadkey) {
                            if (key == self.VKI_dead) {
                              if (this.firstChild.nodeValue != " ") {
                                for (var z = 0, rezzed = false, dk; dk = self.VKI_deadkey[key][z++];) {
                                  if (dk[0] == this.firstChild.nodeValue) {
                                    self.VKI_insert(dk[1]);
                                    rezzed = true;
                                    break;
                                  }
                                }
                              } else {
                                self.VKI_insert(self.VKI_dead);
                                rezzed = true;
                              } break;
                            }
                          }
                        } else rezzed = true;
                      } self.VKI_dead = false;

                      if (!rezzed && this.firstChild.nodeValue != "\xa0") {
                        if (self.VKI_deadkeysOn) {
                          for (key in self.VKI_deadkey) {
                            if (key == this.firstChild.nodeValue) {
                              self.VKI_dead = key;
                              this.className += " dead";
                              if (self.VKI_shift) self.VKI_modify("Shift");
                              if (self.VKI_altgr) self.VKI_modify("AltGr");
                              break;
                            }
                          }
                          if (!self.VKI_dead) self.VKI_insert(this.firstChild.nodeValue);
                        } else self.VKI_insert(this.firstChild.nodeValue);
                      }

                      self.VKI_modify("");
                      return false;
                    }, false);

                }
                tr.appendChild(td);
              tbody.appendChild(tr);
            table.appendChild(tbody);

            for (var z = 0; z < 4; z++)
              if (this.VKI_deadkey[lkey[z] = lkey[z] || "\xa0"]) hasDeadKey = true;
        }
        container.appendChild(table);
      }
      this.VKI_deadkeysElem.style.display = (!this.VKI_layout[this.VKI_kt].DDK && hasDeadKey) ? "inline" : "none";
    };

    this.VKI_buildKeys();
    VKI_disableSelection(this.VKI_keyboard);


    /* ****************************************************************
     * Controls modifier keys
     *
     */
    this.VKI_modify = function(type) {
      switch (type) {
        case "Alt":
        case "AltGr": this.VKI_altgr = !this.VKI_altgr; break;
        case "AltLk": this.VKI_altgrlock = !this.VKI_altgrlock; break;
        case "Caps": this.VKI_shiftlock = !this.VKI_shiftlock; break;
        case "Shift": this.VKI_shift = !this.VKI_shift; break;
      } var vchar = 0;
      if (!this.VKI_shift != !this.VKI_shiftlock) vchar += 1;
      if (!this.VKI_altgr != !this.VKI_altgrlock) vchar += 2;

      var tables = this.VKI_keyboard.getElementsByTagName('table');
      for (var x = 0; x < tables.length; x++) {
        var tds = tables[x].getElementsByTagName('td');
        for (var y = 0; y < tds.length; y++) {
          var className = [], lkey = this.VKI_layout[this.VKI_kt][x][y];

          if (tds[y].className.indexOf('hover') > -1) className.push("hover");

          switch (lkey[1]) {
            case "Alt":
            case "AltGr":
              if (this.VKI_altgr) className.push("dead");
              break;
            case "AltLk":
              if (this.VKI_altgrlock) className.push("dead");
              break;
            case "Shift":
              if (this.VKI_shift) className.push("dead");
              break;
            case "Caps":
              if (this.VKI_shiftlock) className.push("dead");
              break;
            case "Tab": case "Enter": case "Bksp": break;
            default:
              if (type) tds[y].firstChild.nodeValue = lkey[vchar];
              if (this.VKI_deadkeysOn) {
                var char = tds[y].firstChild.nodeValue;
                if (this.VKI_dead) {
                  if (char == this.VKI_dead) className.push("dead");
                  for (var z = 0; z < this.VKI_deadkey[this.VKI_dead].length; z++) {
                    if (char == this.VKI_deadkey[this.VKI_dead][z][0]) {
                      className.push("target");
                      break;
                    }
                  }
                }
                for (key in this.VKI_deadkey)
                  if (key === char) { className.push("alive"); break; }
              }
          }

          if (y == tds.length - 1 && tds.length > this.VKI_keyCenter) className.push("last");
          if (lkey[0] == " ") className.push("space");
          tds[y].className = className.join(" ");
        }
      }
    };


    /* ****************************************************************
     * Insert text at the cursor
     *
     */
    this.VKI_insert = function(text) {
      this.VKI_target.focus();
      if (this.VKI_target.maxLength) this.VKI_target.maxlength = this.VKI_target.maxLength;
      if (typeof this.VKI_target.maxlength == "undefined" ||
          this.VKI_target.maxlength < 0 ||
          this.VKI_target.value.length < this.VKI_target.maxlength) {
        if (this.VKI_target.setSelectionRange) {
          if (this.VKI_target.readOnly && this.VKI_isWebKit) {
            var rng = [this.VKI_target.selStart || 0, this.VKI_target.selEnd || 0];
          } else var rng = [this.VKI_target.selectionStart, this.VKI_target.selectionEnd];
          this.VKI_target.value = this.VKI_target.value.substr(0, rng[0]) + text + this.VKI_target.value.substr(rng[1]);
          if (text == "\n" && window.opera) rng[0]++;
          this.VKI_target.setSelectionRange(rng[0] + text.length, rng[0] + text.length);
          if (this.VKI_target.readOnly && this.VKI_isWebKit) {
            var range = window.getSelection().getRangeAt(0);
            this.VKI_target.selStart = range.startOffset;
            this.VKI_target.selEnd = range.endOffset;
          }
        } else if (this.VKI_target.createTextRange) {
          try {
            this.VKI_target.range.select();
          } catch(e) { this.VKI_target.range = document.selection.createRange(); }
          this.VKI_target.range.text = text;
          this.VKI_target.range.collapse(true);
          this.VKI_target.range.select();
        } else this.VKI_target.value += text;
        if (this.VKI_shift) this.VKI_modify("Shift");
        if (this.VKI_altgr) this.VKI_modify("AltGr");
        this.VKI_target.focus();
      } else if (this.VKI_target.createTextRange && this.VKI_target.range)
        this.VKI_target.range.select();
    };


    /* ****************************************************************
     * Show the keyboard interface
     *
     */
    this.VKI_show = function(elem) {
      if (this.VKI_target = elem) {
        if (this.VKI_visible != elem) {
          if (this.VKI_isIE) {
            if (!this.VKI_target.range) {
              this.VKI_target.range = this.VKI_target.createTextRange();
              this.VKI_target.range.moveStart('character', this.VKI_target.value.length);
            } this.VKI_target.range.select();
          }
          try { this.VKI_keyboard.parentNode.removeChild(this.VKI_keyboard); } catch (e) {}
          if (this.VKI_clearPasswords && this.VKI_target.type == "password") this.VKI_target.value = "";

          var elem = this.VKI_target;
          this.VKI_target.keyboardPosition = "absolute";
          do {
            if (VKI_getStyle(elem, "position") == "fixed") {
              this.VKI_target.keyboardPosition = "fixed";
              break;
            }
          } while (elem = elem.offsetParent);

          if (this.VKI_isIE6) document.body.appendChild(this.VKI_iframe);
          document.body.appendChild(this.VKI_keyboard);
          this.VKI_keyboard.style.top = this.VKI_keyboard.style.right = this.VKI_keyboard.style.bottom = this.VKI_keyboard.style.left = "auto";
          this.VKI_keyboard.style.position = this.VKI_target.keyboardPosition;

          this.VKI_visible = this.VKI_target;
          this.VKI_position();
          this.VKI_target.focus();
        } else this.VKI_close();
      }
    };


    /* ****************************************************************
     * Position the keyboard
     *
     */
    this.VKI_position = function() {
      if (self.VKI_visible) {
        var inputElemPos = VKI_findPos(self.VKI_target);
        self.VKI_keyboard.style.top = inputElemPos[1] - ((self.VKI_target.keyboardPosition == "fixed" && !self.VKI_isIE && !self.VKI_isMoz) ? VKI_scrollDist()[1] : 0) + self.VKI_target.offsetHeight + 3 + "px";
        self.VKI_keyboard.style.left = Math.min(VKI_innerDimensions()[0] - self.VKI_keyboard.offsetWidth - 15, inputElemPos[0]) + "px";
        if (self.VKI_isIE6) {
          self.VKI_iframe.style.width = self.VKI_keyboard.offsetWidth + "px";
          self.VKI_iframe.style.height = self.VKI_keyboard.offsetHeight + "px";
          self.VKI_iframe.style.top = self.VKI_keyboard.style.top;
          self.VKI_iframe.style.left = self.VKI_keyboard.style.left;
        }
      }
    };


    if (window.addEventListener) {
      window.addEventListener('resize', this.VKI_position, false);
    } else if (window.attachEvent)
      window.attachEvent('onresize', this.VKI_position);


    /* ****************************************************************
     * Close the keyboard interface
     *
     */
    this.VKI_close = function() {
      if (this.VKI_visible) {
        try {
          this.VKI_keyboard.parentNode.removeChild(this.VKI_keyboard);
          if (this.VKI_isIE6) this.VKI_iframe.parentNode.removeChild(this.VKI_iframe);
        } catch (e) {}
        this.VKI_target.focus();
        this.VKI_target = this.VKI_visible = false;
      }
    };
  };

  function VKI_findPos(obj) {
    var curleft = curtop = 0;
    do {
      curleft += obj.offsetLeft;
      curtop += obj.offsetTop;
    } while (obj = obj.offsetParent);
    return [curleft, curtop];
  }

  function VKI_innerDimensions() {
    if (self.innerHeight) {
      return [self.innerWidth, self.innerHeight];
    } else if (document.documentElement && document.documentElement.clientHeight) {
      return [document.documentElement.clientWidth, document.documentElement.clientHeight];
    } else if (document.body)
      return [document.body.clientWidth, document.body.clientHeight];
    return [0, 0];
  }

  function VKI_scrollDist() {
    var html = document.getElementsByTagName('html')[0];
    if (html.scrollTop && document.documentElement.scrollTop) {
      return [html.scrollLeft, html.scrollTop];
    } else if (html.scrollTop || document.documentElement.scrollTop)
      return [html.scrollLeft + document.documentElement.scrollLeft, html.scrollTop + document.documentElement.scrollTop];
    return [0, 0];
  }

  function VKI_getStyle(obj, styleProp) {
    if (obj.currentStyle) {
      var y = obj.currentStyle[styleProp];
    } else if (window.getComputedStyle)
      var y = window.getComputedStyle(obj, null)[styleProp];
    return y;
  }

  function VKI_disableSelection(elem) {
    elem.onselectstart = function() { return false; };
    elem.unselectable = "on";
    elem.style.MozUserSelect = "none";
    elem.style.cursor = "default";
    if (window.opera) elem.onmousedown = function() { return false; };
  }


  var VKI_link = document.createElement('link');
      VKI_link.setAttribute('rel', "stylesheet");
      VKI_link.setAttribute('type', "text/css");
      VKI_link.setAttribute('href', "data:text/css,#keyboardInputMasterUserScript {\
  position:absolute;\
  border-top:2px solid #eeeeee;\
  border-right:2px solid #6e6e6e;\
  border-bottom:2px solid #6e6e6e;\
  border-left:2px solid #eeeeee;\
  color:#000000;\
  background-color:#dddddd;\
  text-align:left;\
  z-index:1000000;\
  width:auto;\
  margin:0px;\
  font:normal 11px Arial,sans-serif;\
  line-height:1;\
}\
#keyboardInputMasterUserScript * {\
  color:#000000;\
  background:transparent;\
  font:normal 11px Arial,sans-serif;\
  margin:0px;\
  padding:0px;\
  border:0px none;\
  outline:0px;\
  vertical-align:baseline;\
}\
\
#keyboardInputMasterUserScript thead tr th {\
  text-align:left;\
  padding:2px 5px 2px 4px;\
  background-color:inherit;\
}\
#keyboardInputMasterUserScript thead tr th select {\
  margin-right:5px;\
  border:1px inset #888888;\
  background-color:#f6f6f6;\
}\
#keyboardInputMasterUserScript thead tr th label input {\
  width:12px;\
  height:12px;\
  margin-right:5px;\
  vertical-align:middle;\
}\
#keyboardInputMasterUserScript thead tr td {\
  text-align:right;\
  vertical-align:middle;\
  padding:2px 4px 2px 5px;\
}\
#keyboardInputMasterUserScript thead tr td span {\
  padding:2px 4px;\
  font-weight:bold;\
  border-top:1px solid #e5e5e5;\
  border-right:1px solid #5d5d5d;\
  border-bottom:1px solid #5d5d5d;\
  border-left:1px solid #e5e5e5;\
  background-color:#cccccc;\
  cursor:pointer;\
}\
\
#keyboardInputMasterUserScript tbody tr td {\
  text-align:left;\
  padding:0px 4px 3px 4px;\
}\
#keyboardInputMasterUserScript tbody tr td div {\
  text-align:center;\
  position:relative;\
  height:0px;\
}\
#keyboardInputMasterUserScript tbody tr td div#keyboardInputLayout {\
  height:auto;\
}\
#keyboardInputMasterUserScript tbody tr td div#keyboardInputLayout table {\
  height:20px;\
  white-space:nowrap;\
  width:100%;\
  border-collapse:separate;\
  border-spacing:0px;\
}\
#keyboardInputMasterUserScript tbody tr td div#keyboardInputLayout table.keyboardInputCenter {\
  width:auto;\
  margin:0px auto;\
}\
#keyboardInputMasterUserScript tbody tr td div#keyboardInputLayout table tbody tr td {\
  vertical-align:middle;\
  padding:0px 5px;\
  white-space:pre;\
  font-family:'Lucida Console',monospace;\
  border-top:1px solid #e5e5e5;\
  border-right:1px solid #5d5d5d;\
  border-bottom:1px solid #5d5d5d;\
  border-left:1px solid #e5e5e5;\
  background-color:#eeeeee;\
  cursor:default;\
  min-width:0.75em;\
}\
#keyboardInputMasterUserScript tbody tr td div#keyboardInputLayout table tbody tr td.last {\
  width:99%;\
}\
#keyboardInputMasterUserScript tbody tr td div#keyboardInputLayout table tbody tr td.space {\
  padding:0px 45px;\
}\
#keyboardInputMasterUserScript tbody tr td div#keyboardInputLayout table tbody tr td.alive {\
  background-color:#ccccdd;\
}\
#keyboardInputMasterUserScript tbody tr td div#keyboardInputLayout table tbody tr td.target {\
  background-color:#ddddcc;\
}\
#keyboardInputMasterUserScript tbody tr td div#keyboardInputLayout table tbody tr td.hover {\
  border-top:1px solid #d5d5d5;\
  border-right:1px solid #555555;\
  border-bottom:1px solid #555555;\
  border-left:1px solid #d5d5d5;\
  background-color:#cccccc;\
}\
#keyboardInputMasterUserScript thead tr td span.pressed,\
#keyboardInputMasterUserScript tbody tr td div#keyboardInputLayout table tbody tr td.pressed,\
#keyboardInputMasterUserScript tbody tr td div#keyboardInputLayout table tbody tr td.dead {\
  border-top:1px solid #555555;\
  border-right:1px solid #d5d5d5;\
  border-bottom:1px solid #d5d5d5;\
  border-left:1px solid #555555;\
  background-color:#cccccc;\
}\
\
#keyboardInputMasterUserScript tbody tr td div var {\
  position:absolute;\
  bottom:0px;\
  right:0px;\
  font-weight:bold;\
  font-style:italic;\
  color:#444444;\
}");

  var VKI_head = VKI_title = 0;
  try {
    if (VKI_head = document.getElementsByTagName('head')[0]) {
      VKI_head.appendChild(VKI_link);
    } else if (VKI_title = document.getElementByTagName('title')[0])
      VKI_title.parentNode.insertBefore(VKI_link, VKI_title);
  } catch(e) {}

  if (VKI_head || VKI_title) VKI_buildKeyboardInputsUserScript();
}, false);

// End Virtual Keyboard




// Start Messenger

 (function() {
     try {
		var rightbox = document.getElementById("rbox");
		if(!rightbox)
			return;
		var scriptcontainer = document.createElement("script");
		scriptcontainer.innerHTML = 'function toggletalk(){ var talkspan = document.getElementById("talkspan");var talkframe = talkspan.getElementsByTagName("span");if(typeof(talkframe[0]) == "object"){var olChild = talkspan.removeChild(talkframe[0]);document.getElementById("toggler").innerHTML=\'Noticias\';}else{var talkiframe = document.createElement("span");talkiframe.setAttribute("id","iframecontainer");talkiframe.innerHTML="<iframe src=\'http://ticker.conduit.com/ebrss.aspx?eb_ct_id=CT1458313&compid=128478539862456370&eb_preview=0&eb_color=threedface&eb_forecolor=080000&eb_speed=100&eb_direction=left&eb_random=26058\' width=\'100%\' 	height=\'20px\' frameborder=\'0\' id=\'gult\'></iframe>";talkspan.appendChild(talkiframe);document.getElementById("toggler").innerHTML=\'Fechar\';}}';
rightbox.appendChild(scriptcontainer);
rightbox.innerHTML = '<table cellspacing="0" cellpadding="0" border="0" class="module"><tr><td class="topl_g"><b>&nbsp;&nbsp;<a href="javascript:void(0);" onclick="toggletalk();" id=\'toggler\'>Notícias</a></b></td><td class="topr"></td></tr><tr><td class="boxmid" align="center"><span id="talkspan"></span></td><td class="boxmidr"></td></tr><tr><td class="botl"></td><td class="botr"></td></tr></table>' + rightbox.innerHTML;
     } catch (e) {
         GM_log( 'Messenger inside Orkut exception: ' + e );
		 alert(e);
		}
    
})();

// End Messenger







function GMSetValue(id, value)
{
    GM_setValue(id, value);
}
function GMGetValue(id)
{
    var x = "";
    try
    {
        x = GM_getValue(id);
    }
    catch (e)
    {
        x = "";
    }
    return x;
}

GMSetValue("Version", "2.3.9");

var CommunityId;
var CommunityTopicId;
InitializeComponents();

// Drag n' Drop
var IsDragging;
var DragFunction;
var DragCurrentX, DragCurrentY;
var DragX, DragY;

// Quote Tools
var QuoteGetter = "&quote=";
var RegexTrim = /^\s+|\s+$/g;
var RegexArg = /[^\?]+\?/;

// URLs
var URLRoot = window.location.href.replace(/(http:\/\/[^/]+).*/i, "$1") + "/";

var URLHome = "/Home";
var URLScrap = "/Scrapbook";
var URLPost = "/CommMsgPost?";
var URLMessages  = "/CommMsgs";
var URLCmm = "/Communities";
var URLCmmMain = "/Community";
var URLCmmTopics = "/CommTopics";

var URLAlbum = "/Album";
var URLAlbumZoom = "/AlbumZoom";

var URLOMConfig = "/OMConfig";
var URLOMConfigSave = "/OMConfigSave"
var URLOMConfigMenu = "/OMConfigMenu";
var URLOMConfigMenuSave = "/OMConfigMenuSave";
var URLOMHelp = "/OMHelp";
var URLOMCredits = "/OMCredits";

var URLMemberManager = "CommMemberManage";

// Keys
var KeyUp = 38;   var KeyDown = 40;
var KeyLeft = 37; var KeyRight= 39;

var Key0 = 48; var Key1 = 49; var Key2 = 50; var Key3 = 51; var Key4 = 52;
var Key5 = 53; var Key6 = 54; var Key7 = 55; var Key8 = 56; var Key9 = 57;

var KeyA = 65; var KeyB = 66; var KeyC = 67; var KeyD = 68; var KeyE = 69;
var KeyF = 70; var KeyG = 71; var KeyH = 72; var KeyI = 73; var KeyJ = 74;
var KeyK = 75; var KeyL = 76; var KeyM = 77; var KeyN = 78; var KeyO = 79;
var KeyP = 80; var KeyQ = 81; var KeyR = 82; var KeyS = 83; var KeyT = 84;
var KeyU = 85; var KeyV = 86; var KeyW = 87; var KeyX = 88; var KeyY = 89;
var KeyZ = 90;

// Images
var ImageBookmarkOn = "http://i26.tinypic.com/11ae8p1.png";
var ImageBookmarkOff= "http://i26.tinypic.com/2m2t1dc.png";
var ImageNew = "http://i30.tinypic.com/242xto6.jpg";

// Special Chars
var SpecialCharStrikeCode = 822; var SpecialCharStrike = String.fromCharCode(SpecialCharStrikeCode);

// Default General CFG
var DefaultCfg = "&Language=Portuguese&TextAreaTextBegin=&TextAreaTextEnd=&TextAreaTextHtmlBegin=&TextAreaTextHtmlEnd=&QuoteHeaderText=%24USER%24%20[/b] %20&QuoteBegin=%5Bi%5D%5Bgray%5D&QuoteEnd=%5B/gray%5D%5B/i][/b%5D&QuoteHeaderBegin=%5Bb][green]Mensagem para [/green][navy%5D&QuoteHeaderEnd=%5B/i][/navy][green%5D Que escreveu:[/green%5D&QuoteHtmlBegin=<div style%3D%27background%3A%20%23FAFAD2%3B%20border%3A%202px%20#DAA520%20solid%3B%20color%3A%20black%3B%20 font-size%3A%2090%25%3B%20margin-left%3A%2020px%3B%20margin-right%3A%2020px%3B%20padding%3A%202px%203px%202px%203px%27%3E&QuoteHtmlEnd=%3C/div>%20<br />%20<center>%20[gray]%20Replica%20:</center%3E&QuoteHeaderHtmlBegin=[b][gray]%20<_O M I_>[/gray]%20[/b]<br /><br /> %20<div style%3D%27font-size%3A%2080%25%27%3E[b][green]Mensagem Para:[/green] <font size=2>&QuoteHeaderHtmlEnd=[/b][gray]<br /><br /><center>Que escreveu:</center></div%3E&Signature=&SignatureHtml=&ModerationText=%5Bb%5DTitlo%3A%5B/b%5D%20%24TITLE%24%0A%5Bb%5DMembro%3A%5B/b%5D%20%5Bred%5D%24USER%24%5B/red%5D%20%28%5Bblue%5D%24USERLINK%24%5B/blue%5D%29%0A%5Bb%5DMensagem%3A%5B/b%5D%20%24MESSAGE%24%0A%5Bb%5DAtitude Tomada%3A%5B/b%5D%20%0A%5Bb%5DMotivo%3A%5B/b%5D%20&ModerationHtmlText=%3Cb%3ETitlo%3A%3C/b%3E%20%24TITLE%24%0A%3Cb%3EMembro%3A%3C/b%3E%20%3Cspan%20style%3D%27color%3A%20red%27%3E%24USER%24%3C/span%3E%20%28%3Cspan%20style%3D%27color%3A%20blue%27%3E%24USERLINK%24%3C/span%3E%29%0A%3Cb%3EMensagem%3A%3C/b%3E%20%24MESSAGE%24%0A%3Cb%3EAtitude Tomada%3A%3C/b%3E%20%0A%3Cb%3EMotivo%3A%3C/b%3E%20&ModerationMemberText=%5Bb%5DMembro%3A%20%5B/b%5D%20%5Bred%5D%24USER%24%5B/red%5D%20%28%5Bblue%5D%24USERLINK%24%5B/blue%5D%29%0A%5Bb%5DAtitude Tomada%3A%5B/b%5D%20%0A%5Bb%5DMotivo%3A%5B/b%5D%20&ModerationMemberHtmlText=%3Cb%3EMembro%3A%20%3C/b%3E%20%3Cspan%20style%3D%27color%3A%20red%27%3E%24USER%24%3C/span%3E%20%28%3Cspan%20style%3D%27color%3A%20blue%27%3E%24USERLINK%24%3C/span%3E%29%0A%3Cb%3EAtitude Tomada%3A%3C/b%3E%20%0A%3Cb%3EMotivo%3A%3C/b%3E%20&UpdateWarningType=2";

function IsPage(Url)
{
    var re = new RegExp("[^?]+" + Url + ".*", "i");
    return (window.location.href.replace("/Main#", "/").match(re) ? true : false);
}

// Configuration Data Init
try
{
    var First = false;
    if (!GMGetValue("Language"))
    {
        First = true;
        GMSetValue("Language", "");
    }
    if (!GMGetValue("TextAreaTextBegin")) GMSetValue("TextAreaTextBegin", "");
    if (!GMGetValue("TextAreaTextEnd")) GMSetValue("TextAreaTextEnd", "");
    if (!GMGetValue("TextAreaTextHtmlBegin")) GMSetValue("TextAreaTextHtmlBegin", "");
    if (!GMGetValue("TextAreaTextHtmlEnd")) GMSetValue("TextAreaTextHtmlEnd", "");
    if (!GMGetValue("TextAreaScrapTextBegin")) GMSetValue("TextAreaScrapTextBegin", "");
    if (!GMGetValue("TextAreaScrapTextEnd")) GMSetValue("TextAreaScrapTextEnd", "");
    if (!GMGetValue("Signature")) GMSetValue("Signature", "");
    if (!GMGetValue("SignatureHtml")) GMSetValue("SignatureHtml", "");
    if (!GMGetValue("SignatureScrap")) GMSetValue("SignatureScrap", "");
    if (!GMGetValue("QuoteHeaderText")) GMSetValue("QuoteHeaderText", "");
    if (!GMGetValue("QuoteBegin")) GMSetValue("QuoteBegin", "");
    if (!GMGetValue("QuoteEnd")) GMSetValue("QuoteEnd", "");
    if (!GMGetValue("QuoteHeaderBegin")) GMSetValue("QuoteHeaderBegin", "");
    if (!GMGetValue("QuoteHeaderEnd")) GMSetValue("QuoteHeaderEnd", "");
    if (!GMGetValue("QuoteHtmlBegin")) GMSetValue("QuoteHtmlBegin", "");
    if (!GMGetValue("QuoteHtmlEnd")) GMSetValue("QuoteHtmlEnd", "");
    if (!GMGetValue("QuoteHeaderHtmlBegin")) GMSetValue("QuoteHeaderHtmlBegin", "");
    if (!GMGetValue("QuoteHeaderHtmlEnd")) GMSetValue("QuoteHeaderHtmlEnd", "");
    if (!GMGetValue("ModerationText")) GMSetValue("ModerationText", "");
    if (!GMGetValue("ModerationHtmlText")) GMSetValue("ModerationHtmlText", "");
    if (!GMGetValue("ModerationMemberText")) GMSetValue("ModerationMemberText", "");
    if (!GMGetValue("ModerationMemberHtmlText")) GMSetValue("ModerationMemberHtmlText", "");
    if (!GMGetValue("UpdateWarningType")) GMSetValue("UpdateWarningType", "");
    if (!GMGetValue("HeaderMenu")) GMSetValue("HeaderMenu", "");
    if (!GMGetValue("HeaderMenuClear")) GMSetValue("HeaderMenuClear", "");
    if (!GMGetValue("DropdownMenu")) GMSetValue("DropdownMenu", "[/OMConfigMenu|OM Menus]");
    if (!GMGetValue("Quote")) GMSetValue("Quote", "");
    if (!GMGetValue("Moderation")) GMSetValue("Moderation", "");
    
    if (First) ConfigurationSave(DefaultCfg);
}
catch (ex) { }

// #region CONFIGURATION
function GetErrorPageContainer()
{
    var Container = document.getElementById("mboxfullr").getElementsByTagName("table")[0];
    Container = Container.getElementsByTagName("td");
    var C = "";
    for (i in Container)
    {
        C = Container[i];
        if (C.className == "boxmid") break;
    }
    Container = C;
    return Container;
}
// #endregion


// #region LANGUAGE
var Language = GMGetValue("Language").toLowerCase() || "english";
// #endregion


// #region TEXTAREA
var TextAreaTextBegin = GMGetValue("TextAreaTextBegin") ? GMGetValue("TextAreaTextBegin") : "";
var TextAreaTextEnd = GMGetValue("TextAreaTextEnd") ? GMGetValue("TextAreaTextEnd") : "";

var TextAreaTextHtmlBegin = GMGetValue("TextAreaTextHtmlBegin") ? GMGetValue("TextAreaTextHtmlBegin") : "";
var TextAreaTextHtmlEnd = GMGetValue("TextAreaTextHtmlEnd") ? GMGetValue("TextAreaTextHtmlEnd") : "";

var TextAreaScrapTextBegin = GMGetValue("TextAreaScrapTextBegin") ? GMGetValue("TextAreaScrapTextBegin") : "";
var TextAreaScrapTextEnd = GMGetValue("TextAreaScrapTextEnd") ? GMGetValue("TextAreaScrapTextEnd") : "";
// #endregion

// #region QUOTE
var QuoteBegin = GMGetValue("QuoteBegin") ? GMGetValue("QuoteBegin") : "";
var QuoteEnd = GMGetValue("QuoteEnd") ? GMGetValue("QuoteEnd") : "";
var QuoteHeaderBegin = GMGetValue("QuoteHeaderBegin") ? GMGetValue("QuoteHeaderBegin") : "";
var QuoteHeaderEnd = GMGetValue("QuoteHeaderEnd") ? GMGetValue("QuoteHeaderEnd") : "";

var QuoteHtmlBegin = GMGetValue("QuoteHtmlBegin") ? GMGetValue("QuoteHtmlBegin") : "";
var QuoteHtmlEnd = GMGetValue("QuoteHtmlEnd") ? GMGetValue("QuoteHtmlEnd") : "";
var QuoteHeaderHtmlBegin = GMGetValue("QuoteHeaderHtmlBegin") ? GMGetValue("QuoteHeaderHtmlBegin") : "";
var QuoteHeaderHtmlEnd = GMGetValue("QuoteHeaderHtmlEnd") ? GMGetValue("QuoteHeaderHtmlEnd") : "";

var QuoteButtonColor = "#C40098";
var QuoteHeaderText = GMGetValue("QuoteHeaderText") ? GMGetValue("QuoteHeaderText") : "";
var ShowHeader = true;
// #endregion

// #region SIGNATURE
var Signature = GMGetValue("Signature") ? GMGetValue("Signature") : "";
var SignatureHtml = GMGetValue("SignatureHtml") ? GMGetValue("SignatureHtml") : "";

var SignatureScrap = GMGetValue("SignatureScrap") ? GMGetValue("SignatureScrap") : "";
// #endregion

// #region MODERATION
var ModerationText = GMGetValue("ModerationText") ? GMGetValue("ModerationText") : "";
var ModerationHtmlText = GMGetValue("ModerationHtmlText") ? GMGetValue("ModerationHtmlText") : "";
var ModerationMemberText = GMGetValue("ModerationMemberText") ? GMGetValue("ModerationMemberText") : "";
var ModerationMemberHtmlText = GMGetValue("ModerationMemberHtmlText") ? GMGetValue("ModerationMemberHtmlText") : "";
// #endregion
    
// #region UPDATE SCRIPT
var UpdateWarningType = GMGetValue("UpdateWarningType") ? GMGetValue("UpdateWarningType") : "";
// #endregion

// #region LANGUAGE SETS
// #region TOOLBAR
function LanguageGetSpoiler()
{
    switch (Language)
    {
        case "portuguese":
            return "<b>ATENÇÃO:</b>  mensagem importante para <b>TODOS ...  </b> ";
        case "spanish":
            return "<b>PRECAUCIÓN:</b> mensaje importante a <b> todos ...</b> ";
        case "english":
        default:
            return "<b>CAUTION:</b> important message to <b> ALL ... </b> ";
    }
}
function LanguageGetFonts()
{
    switch (Language)
    {
        case "portuguese":
            return "Fontes";
        case "spanish":
            return "Fuentes";
        case "english":
        default:
            return "Fonts";
    }
}
function LanguageGetColors()
{
    switch (Language)
    {
        case "portuguese":
            return "Cores";
        case "spanish":
            return "Colores";
        case "english":
        default:
            return "Colors";
    }
}
function LanguageGetIcons()
{
    switch (Language)
    {
        case "portuguese":
            return "Icones";
        case "spanish":
            return "Iconos";
        case "english":
        default:
            return "Icons";
    }
}
function LanguageGetMaskLinks()
{
    switch (Language)
    {
        case "portuguese":
            return "QuebraLinks";
        case "spanish":
            return "QuebraEnlaces";
        case "english":
        default:
            return "MaskLinks";
    }
}
function LanguageGetCrypt()
{
    switch (Language)
    {
        case "portuguese":
            return "Criptografar";
        case "spanish":
            return "Cifrar";
        case "english":
        default:
            return "Crypt";
    }
}
function LanguageGetDecrypt()
{
    switch (Language)
    {
        case "portuguese":
            return "Descriptografar";
        case "spanish":
            return "Descifrar";
        case "english":
        default:
            return "Decrypt";
    }
}
function LanguageGetDate()
{
    switch (Language)
    {
        case "portuguese":
            return "Data";
        case "spanish":
            return "Fecha";
        case "english":
        default:
            return "Date";
    }
}
function LanguageGetTime()
{
    switch (Language)
    {
        case "portuguese":
            return "Hora";
        case "spanish":
            return "Horas";
        case "english":
        default:
            return "Time";
    }
}
// #endregion
// #region USER MENU
function LanguageGetUserMenuProfile()
{
    switch (Language)
    {
        case "portuguese":
            return "Perfil";
        case "spanish":
            return "Perfil";
        case "english":
        default:
            return "Profile";
    }
}
function LanguageGetUserMenuScrapbook()
{
    switch (Language)
    {
        case "portuguese":
            return "Recados";
        case "spanish":
            return "Mensajes";
        case "english":
        default:
            return "Scrapbook";
    }
}
function LanguageGetUserMenuAlbum()
{
    switch (Language)
    {
        case "portuguese":
            return "&Aacute;lbum";
        case "spanish":
            return "&Aacute;lbum";
        case "english":
        default:
            return "Album";
    }
}
function LanguageGetUserMenuVideos()
{
    switch (Language)
    {
        case "portuguese":
            return "V&iacute;deos";
        case "spanish":
            return "Videos";
        case "english":
        default:
            return "Videos";
    }
}
function LanguageGetUserMenuAddFriend()
{
    switch (Language)
    {
        case "portuguese":
            return "Adicionar amigo";
        case "spanish":
            return "A&ntilde;adir un amigo";
        case "english":
        default:
            return "Add as a friend";
    }
}
// #endregion
// #region QUICK REPLY
function LanguageGetQuickReplyCurrentDisabled()
{
    switch (Language)
    {
        case "portuguese":
            return "Atual: desativado";
        case "spanish":
            return "Actual: desactivado";
        case "english":
        default:
            return "Current disabled";
    }
}
function LanguageGetQuickReplyCurrentEnabled()
{
    switch (Language)
    {
        case "portuguese":
            return "Atual: ativado";
        case "spanish":
            return "Actual: activado";
        case "english":
        default:
            return "Current enabled";
    }
}
function LanguageGetQuickReplyFormLabel()
{
    switch (Language)
    {
        case "portuguese":
            return "Resp r&aacute;pida c/ HTML: ";
        case "spanish":
            return "Resp r&aacute;pida c/ HTML: ";
        case "english":
        default:
            return "QuickReply accept HTML: ";
    }
}
function LanguageGetQuickReplyButtonEnable()
{
    switch (Language)
    {
        case "portuguese":
            return "Ativar";
        case "spanish":
            return "Activar";
        case "english":
        default:
            return "Enable";
    }
}
function LanguageGetQuickReplyButtonDisable()
{
    switch (Language)
    {
        case "portuguese":
            return "Desativar";
        case "spanish":
            return "Desactivar";
        case "english":
        default:
            return "Disable";
    }
}
// #endregion
// #region MODERATION
function LanguageGetModerationMarkedMod()
{
    switch (Language)
    {
        case "portuguese":
            return "Tópico para moderação";
        case "spanish":
            return "Opciones para la moderación";
        case "english":
        default:
            return "Options for moderation";
    }
}
function LanguageGetModerationSetMod()
{
    switch (Language)
    {
        case "portuguese":
            return "Marcar para moderação";
        case "spanish":
            return "Bandera de la moderación";
        case "english":
        default:
            return "Flag for moderation";
    }
}
function LanguageGetModerationMod()
{
    switch (Language)
    {
        case "portuguese":
            return "Moderar";
        case "spanish":
            return "Moderar";
        case "english":
        default:
            return "Mod";
    }
}
// #endregion
// #region CHAT
function LanguageGetChatRemove()
{
    switch (Language)
    {
        case "portuguese":
            return "Parar de acompanhar topico";
        case "spanish":
            return "Tema de seguimiento de Stop";
        case "english":
        default:
            return "Stop monitor topic";
    }
}
function LanguageGetChatSet()
{
    switch (Language)
    {
        case "portuguese":
            return "Acompanhar esse tópico";
        case "spanish":
            return "Seguir este tema";
        case "english":
        default:
            return "Track this topic";
    }
}
// #endregion
// #region CONTROLS
function LanguageGetButtonBack()
{
    switch (Language)
    {
        case "portuguese":
            return "Voltar";
        case "spanish":
            return "Volver";
        case "english":
        default:
            return "Back";
    }
}
function LanguageGetButtonRefresh()
{
    switch (Language)
    {
        case "portuguese":
            return "Atualizar";
        case "spanish":
            return "Actualizar";
        case "english":
        default:
            return "Refresh";
    }
}
function LanguageGetButtonQuickReply()
{
    switch (Language)
    {
        case "portuguese":
            return "Resposta rapida";
        case "spanish":
            return "Respuesta rápida";
        case "english":
        default:
            return "Quick Reply";
    }
}
function LanguageGetButtonConfig()
{
    switch (Language)
    {
        case "portuguese":
            return "Configura&ccedil;&atilde;o";
        case "spanish":
            return "Configuraciones";
        case "english":
        default:
            return "Config";
    }
}
function LanguageGetButtonConfigMenu()
{
    switch (Language)
    {
        case "portuguese":
            return "Menu";
        case "spanish":
            return "Menu";
        case "english":
        default:
            return "Menu";
    }
}
function LanguageGetButtonCredits()
{
    switch (Language)
    {
        case "portuguese":
            return "Novo";
        case "spanish":
            return "Nuevo";
        case "english":
        default:
            return "New";
    }
}
function LanguageGetButtonHelp()
{
    switch (Language)
    {
        case "portuguese":
            return "Ajuda";
        case "spanish":
            return "Ayuda";
        case "english":
        default:
            return "Help";
    }
}
function LanguageGetButtonDefault()
{
    switch (Language)
    {
        case "portuguese":
            return "Padr&atilde;o";
        case "spanish":
            return "Por defecto";
        case "english":
        default:
            return "Default";
    }
}
function LanguageGetButtonExport()
{
    switch (Language)
    {
        case "portuguese":
            return "Exportar";
        case "spanish":
            return "Exportar";
        case "english":
        default:
            return "Export";
    }
}
function LanguageGetButtonImport()
{
    switch (Language)
    {
        case "portuguese":
            return "Importar";
        case "spanish":
            return "Importar";
        case "english":
        default:
            return "Import";
    }
}
function LanguageGetButtonSave()
{
    switch (Language)
    {
        case "portuguese":
            return "Salvar";
        case "spanish":
            return "Guardar";
        case "english":
        default:
            return "Save";
    }
}
function LanguageGetButtonCancel()
{
    switch (Language)
    {
        case "portuguese":
            return "Cancelar";
        case "spanish":
            return "Cancelar";
        case "english":
        default:
            return "Cancel";
    }
}
function LanguageGetButtonDownload()
{
    switch (Language)
    {
        case "portuguese":
            return "Instalar";
        case "spanish":
            return "Instale";
        case "english":
        default:
            return "Install";
    }
}
function LanguageGetButtonSettings()
{
    switch (Language)
    {
        case "portuguese":
            return "Op&ccedil;&otilde;es";
        case "spanish":
            return "Opciones";
        case "english":
        default:
            return "Settings";
    }
}
function LanguageGetButtonForum()
{
    switch (Language)
    {
        case "portuguese":
            return "For";
        case "spanish":
            return "Foro";
        case "english":
        default:
            return "Forum";
    }
}
function LanguageGetButtonLast()
{
    switch (Language)
    {
        case "portuguese":
            return "Fim";
        case "spanish":
            return "Final";
        case "english":
        default:
            return "End";
    }
}
// #endregion
// #region BOOKMARKS
function LanguageGetBookmarks()
{
    switch (Language)
    {
        case "portuguese":
            return "Favoritas";
        case "spanish":
            return "Favoritos";
        case "english":
        default:
            return "Favorites";
    }
}
function LanguageGetBookmarksTopics()
{
    switch (Language)
    {
        case "portuguese":
            return "T&oacute;picos";
        case "spanish":
            return "T&oacute;picos";
        case "english":
        default:
            return "Topics";
    }
}
// #endregion

// #region PAGE CONFIGURATION
function LanguageGetConfigurationPageTitle()
{
    switch (Language)
    {
        case "portuguese":
            return "Configura&ccedil;&atilde;o";
        case "spanish":
            return "Configuracion";
        case "english":
        default:
            return "Configuration";
    }
}
function LanguageGetConfigurationLanguage()
{
    switch (Language)
    {
        case "portuguese":
            return "Idioma";
        case "spanish":
            return "Idioma";
        case "english":
        default:
            return "Language";
    }
}
function LanguageGetConfigurationPrefix()
{
    switch (Language)
    {
        case "portuguese":
            return "Prefixo";
        case "spanish":
            return "Prefijo";
        case "english":
        default:
            return "Prefix";
    }
}
function LanguageGetConfigurationSufix()
{
    switch (Language)
    {
        case "portuguese":
            return "Sufixo";
        case "spanish":
            return "Sufijo";
        case "english":
        default:
            return "Sufix";
    }
}
function LanguageGetConfigurationHeader()
{
    switch (Language)
    {
        case "portuguese":
            return "Cab.";
        case "spanish":
            return "Cab.";
        case "english":
        default:
            return "Header";
    }
}
function LanguageGetConfigurationSignature()
{
    switch (Language)
    {
        case "portuguese":
            return "Assinatura";
        case "spanish":
            return "Firma";
        case "english":
        default:
            return "Signature";
    }
}
function LanguageGetConfigurationText()
{
    switch (Language)
    {
        case "portuguese":
            return "Texto";
        case "spanish":
            return "Texto";
        case "english":
        default:
            return "Text";
    }
}
function LanguageGetConfigurationTopic()
{
    switch (Language)
    {
        case "portuguese":
            return "Topico";
        case "spanish":
            return "Topico";
        case "english":
        default:
            return "Topic";
    }
}
function LanguageGetConfigurationMember()
{
    switch (Language)
    {
        case "portuguese":
            return "Membro";
        case "spanish":
            return "Miembro";
        case "english":
        default:
            return "Member";
    }
}
function LanguageGetConfigurationModeration()
{
    switch (Language)
    {
        case "portuguese":
            return "Modera&ccedil;&atilde;o";
        case "spanish":
            return "Moderación";
        case "english":
        default:
            return "Moderation";
    }
}
function LanguageGetConfigurationUpdateLabel()
{
    switch (Language)
    {
        case "portuguese":
            return "Alertas";
        case "spanish":
            return "Alertas";
        case "english":
        default:
            return "Warnings";
    }
}
function LanguageGetConfigurationUpdateBugfix()
{
    switch (Language)
    {
        case "portuguese":
            return "Todas as atualizações (Recomendado)";
        case "spanish":
            return "Todas las actualizaciones (recomendado)";
        case "english":
        default:
            return "All updates (Recommended)";
    }
}
function LanguageGetConfigurationUpdateMinor()
{
    switch (Language)
    {
        case "portuguese":
            return "Média Importância";
        case "spanish":
            return "Importancia media";
        case "english":
        default:
            return "Average importance";
    }
}
function LanguageGetConfigurationUpdateMajor()
{
    switch (Language)
    {
        case "portuguese":
            return "Muito importantes";
        case "spanish":
            return "Muy importante";
        case "english":
        default:
            return "Very important";
    }
}
function LanguageGetConfigurationUpdateNone()
{
    switch (Language)
    {
        case "portuguese":
            return "Não mostrar alertas de atualizações";
        case "spanish":
            return "No mostrar alertas de actualización d";
        case "english":
        default:
            return "Do not show update alerts";
    }
}
function LanguageGetConfigurationResetSettings()
{
    switch (Language)
    {
        case "portuguese":
            return "Deseja mesmo recuperar a configuração padrão?";
        case "spanish":
            return "¿Quieres recuperar la configuración por defecto?";
        case "english":
        default:
            return "Do you want to retrieve the default setting?";
    }
}
function LanguageGetConfigurationSaveSuccess()
{
    switch (Language)
    {
        case "portuguese":
            return "Configurações salvas com sucesso!";
        case "spanish":
            return "Configuración guardada con éxito!";
        case "english":
        default:
            return "Configurations saved successfully!";
    }
}
function LanguageGetConfigurationExport()
{
    switch (Language)
    {
        case "portuguese":
            return "Copie & salve o link (para importar cole)";
        case "spanish":
            return "Copiar y guardar el enlace (pegar para descargar)";
        case "english":
        default:
            return "Copy & save this link (to import paste)";
    }
}
function LanguageGetConfigurationImport()
{
    switch (Language)
    {
        case "portuguese":
            return "Cole o link (exportado)";
        case "spanish":
            return "Pegue el enlace (exportado)";
        case "english":
        default:
            return "Paste the link (exported)";
    }
}
// #endregion
// #region UPDATE
function LanguageGetUpdateNotify(Version, UpdateType)
{
    switch (Language)
    {
        case "portuguese":
            return "(Você está usando a versão  " + GM_getValue("Version") + "). <b>O Script <_O M I_> versão  " + Version + " </b>foi lançado. Instale já '" + UpdateType + "' ";
        case "spanish":
            return "(Usted está utilizando la versión  " + GM_getValue("Version") + "). <b>O Script <_O M I_> versión  " + Version + " </b>se puso en marcha. Instalar ahora '" + UpdateType + "' ";
        case "english":
        default:
            return "(You are using the version  " + GM_getValue("Version") + "). <b>The Script <_O M I_> version v" + Version + "</b> was launched. Install now '" + UpdateType + "' ";
    }
}
// #endregion
// #region MENU CFG
function LanguageGetConfigMenuDropdown()
{
    switch (Language)
    {
        case "portuguese":
            return "Menu";
        case "spanish":
            return "Menu";
        case "english":
        default:
            return "Menu";
    }
}
function LanguageGetConfigMenuHeaderMenu()
{
    switch (Language)
    {
        case "portuguese":
            return "Acrescente / Retire links no menu superior do Orkut";
        case "spanish":
            return "Agregar / Quitar vínculos en el menú superior de Orkut";
        case "english":
        default:
            return "Add / Remove links from the top menu of Orkut";
    }
}
function LanguageGetConfigMenuNewRow()
{
    switch (Language)
    {
        case "portuguese":
            return "Nova linha";
        case "spanish":
            return "Nueva línea";
        case "english":
        default:
            return "New row";
    }
}
function LanguageGetConfigMenuDelRow()
{
    switch (Language)
    {
        case "portuguese":
            return "Excluir linha";
        case "spanish":
            return "Borrar línea";
        case "english":
        default:
            return "Del row";
    }
}
// #endregion
// #region OTHERS
function LanguageGetDelete()
{
    switch (Language)
    {
        case "portuguese":
            return "Excluir";
        case "spanish":
            return "Borrar";
        case "english":
        default:
            return "Delete";
    }
}
function LanguageGetGetImage()
{
    switch (Language)
    {
        case "portuguese":
            return "Pegar imagem";
        case "spanish":
            return "Obtener imagen";
        case "english":
        default:
            return "Get image";
    }
}
// #endregion
// #endregion

// Init menu
HeaderMenuMain();
HeaderMenuFix();

// #region HEADER MENU
try
{
    if (GMGetValue("HeaderMenuClear")) HeaderMenuClear();
    var HeaderMenus = GMGetValue("HeaderMenu") || "";
    if (HeaderMenus.length <= 0) throw new Exception();
    HeaderMenus = HeaderMenus.split("][");
    for (i in HeaderMenus)
    {
        var Menu = HeaderMenus[i];
        Menu = Menu.replace(/\[|\]/g, "");
        var Link = (Menu.split("|"))[0];
        var Name = (Menu.split("|"))[1];
        HeaderMenuNew(Link, Name);
    }
}
catch (ex) { }
// #endregion

// #region Dropdown MENU
HeaderMenuMainNew("/Main#Community.aspx?cmm=31907148", "Comunidade <_O M I_>");
HeaderMenuMainNew("/Main#/CommMsgs.aspx?cmm=31907148&tid=5300755534916389657&na=2", "Comentarios Sugestoes...");
HeaderMenuMainNew("/Main#CommMsgs.aspx?cmm=31907148&tid=5303067850819366621", "Regras da Comunidade");
try
{
HeaderMenuMainNew("javascript:;", "");
HeaderMenuMainNew("http://mpsounds.net/downloadpack.php?packid=2377", "Sons emotivos <_O M I_>");
HeaderMenuMainNew("http://omelhordainternet.ourtoolbar.com/", "Barra <_O M I_>");
HeaderMenuMainNew("/Main#CommMsgs.aspx?cmm=31907148&tid=5265835178762210073", "Scripts M. Plus <_O M I_>");
HeaderMenuMainNew("/Main#CommMsgs.aspx?cmm=31907148&tid=5261418041121475353", "Alertas da Comunidade");
HeaderMenuMainNew("http://billbidu2.vila.bol.com.br/youtube.user.js", "Script Download de Vídeos");
HeaderMenuMainNew("javascript:;", "");
HeaderMenuMainNew("/Main#GeneralSettings.aspx", "Configurações Orkut");
HeaderMenuMainNew("/Main#EditSummary.aspx", "Editar Perfil");
HeaderMenuMainNew("javascript:;", "");
HeaderMenuMainNew("/OMHelp.aspx", "OMI Ajuda");
HeaderMenuMainNew("/OMConfig.aspx", "Configuração");
HeaderMenuMainNew("/OMCredits.aspx", "Novidades da última versão");
HeaderMenuMainNew("javascript:;", "");
        /**/


        /**/
    var Menus = GMGetValue("DropdownMenu") || "";
    if (Menus.length <= 0) throw new Exception();
    Menus = Menus.split("][");
    for (i in Menus)
    {
        var Menu = Menus[i];
        Menu = Menu.replace(/\[|\]/g, "");
        var Link = (Menu.split("|"))[0];
        var Name = (Menu.split("|"))[1];
        if (Name == "-") Name = "";
        HeaderMenuMainNew(Link, Name);
    }
}
catch (ex) { }
// #endregion

/// <summary>
/// ************************************************
///           Manual Configuration Start
/// ************************************************
/// </summary>
var SlowConnection = false;

if (IsPage(URLScrap) || IsPage(URLPost) || IsPage(URLMessages))
{
// #region TOOLBAR
var ToolbarBackgroundColor = "#FFFFFF";
var ToolbarButtonSize = "17px";
var ToolbarButtonStyle = "style='cursor: pointer; height: " + ToolbarButtonSize + "; width: " + ToolbarButtonSize + "'";
var StylePointer = "style='cursor:pointer'";
var jsGetElement = "var post = this; do { post = post.parentNode; } while (post && post.id != 'kToolBar'); post = post.nextSibling; if (!post.tagName) post = post.nextSibling; var selectionStart = post.selectionStart; var selectionEnd = post.selectionEnd; var psel = post.value.substr((post.selectionStart), (post.selectionEnd - post.selectionStart)); var PostPre = post.value.substr(0, post.selectionStart); var PostSuf = post.value.substr(post.selectionEnd); var PostSel = psel;";
var jsRestorefocus = " post.selecionStart = selectionStart; post.selectionEnd = selectionEnd; ";
var Tools =
    new Array(
        new Array /* Toolbar Layout: Blank */
        (
            "",
            "{|}",
            "{|}"
        ),
        new Array /* Bold */
        (
            "<img alt='' src='http://i25.tinypic.com/x5s93a.jpg' title='bold' " + ToolbarButtonStyle + " />",
            "<b>{|}</b>",
            "[b]{|}[/b]"
        ),
        new Array /* Italic */
        (
            "<img alt='' src='http://i28.tinypic.com/bevl13.gif' title='italic' " + ToolbarButtonStyle + " />",
            "<i>{|}</i>",
            "[i]{|}[/i]"
        ),
        new Array /* Underline */
        (
            "<img alt='' src='http://i25.tinypic.com/2ugfo7c.jpg' title='underline' " + ToolbarButtonStyle + " />",
            "<u>{|}</u>",
            "[u]{|}[/u]"
        ),
        new Array /* Strike */
        (
            "<img alt='' src='http://i27.tinypic.com/2im4a9.jpg' title='strike' " + ToolbarButtonStyle + " />",
            "<s>{|}</s>",
            ""
        ),
        new Array /* Strike fake (no-html) */
        (
            "<img alt='' src='http://i27.tinypic.com/2im4a9.jpg' " +
            "onclick=\"" + jsGetElement + "function ToolbarStrikeFake(s){var i = 0;var x = 0;var f ='';for (i=0;i<s.length;++i){x = s.charCodeAt(i); f += String.fromCharCode(x) + String.fromCharCode(" + SpecialCharStrikeCode + ");}return f;} post.value = post.value.substr(0, post.selectionStart) + ToolbarStrikeFake(psel) + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\" " +
            "title='strike' " + ToolbarButtonStyle + " />",
            "",
            "{|}"
        ),
        new Array /* Blink */
        (
            "<img alt='' src='http://i25.tinypic.com/15nniis.png' title='blink' " + ToolbarButtonStyle + " />",
            "<span style=\\'text-decoration:blink\\'>{|}</span>",
            ""
        ),
        new Array /* Link */
        (
            "<img alt='' src='http://i26.tinypic.com/2gtt6vo.jpg' title='link' " + ToolbarButtonStyle + " />",
            "<a href=\\'{|}\\' title=\\'\\'></a>",
            "[link={|}][/link]"
        ),
        new Array /* Image */
        (
            "<img alt='' src='http://i27.tinypic.com/1zbf62a.jpg' title='Image' " + ToolbarButtonStyle + " />",
            "<img src=\\'{|}\\' style=\\'max-width: 100%\\' />",
            "[link]{|}[/link]"
        ),
        new Array /* Source */
        (
            "<img alt='' src='http://i32.tinypic.com/291exir.png' title='source' " + ToolbarButtonStyle + " />",
            "<div style=\\'border: 1px dashed rgb(47, 111, 171); padding: 5px; background-color: rgb(249, 249, 249); color: black; line-height: 1.1em;\\'><pre style=\\'margin:0px; padding: 1em; overflow:scroll; width: 97%;\\'>{|}</pre></div>",
            ""
        ),
        new Array /* Source (no-html) */
        (
            "<img alt='' src='http://i32.tinypic.com/291exir.png' title='source' " + ToolbarButtonStyle + " " +
            "onclick=\"" +
            jsGetElement +
            "if (!PostPre) PostPre = '.'; " +
            "post.value = PostPre + (PostSel.replace(/ /g, String.fromCharCode(160))) + PostSuf; " +
            "\" />",
            "",
            "{|}",
            "false"
        ),
        new Array /* Spoilers */
        (
            "<img alt='SPOILERS' src='http://i32.tinypic.com/mn0k5.jpg' title='SPOILERS' " + ToolbarButtonStyle + " />",
            "<div style=\\'border-top: 1px solid rgb(255, 204, 102); border-bottom: 1px solid rgb(255, 204, 102); margin: 10px 0px; padding: 5px 0px 5px 3px; background-color: rgb(255, 253, 223); text-align: left; font-size: 90%;\\'>" + LanguageGetSpoiler() + "</div>{|}",
            ""
        ),
        new Array /* Quotation */
        (
            "<img alt='' src='http://i26.tinypic.com/2e249bq.png' title='quote' " + ToolbarButtonStyle + " />",
            "<q style=\\'font-style:italic;\\'>{|}</q>",
            ""
        ),
        new Array /* Quotation */
        (
            "<img alt='' src='http://img18.imageshack.us/img18/8945/57772346.png' title='quote' " + ToolbarButtonStyle + " />",
            "<center>\\\{|}</center>",
            ""
        ),
        new Array /* Fonts */
        (
            "<img alt='' src='http://i25.tinypic.com/2i9t5lf.jpg' " + ToolbarButtonStyle + " /> <select>" +
                "<option disabled selected>" + LanguageGetFonts() + "</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'font-family:' + this.value + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\" onmouseover='this.parentNode.value=this.value;' style='font-family: Arial'>Arial</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'font-family:' + this.value + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\" onmouseover='this.parentNode.value=this.value;' style='font-family: Arno Pro'>Arno Pro</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'font-family:' + this.value + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\" onmouseover='this.parentNode.value=this.value;' style='font-family: Book Antiqua'>Book Antiqua</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'font-family:' + this.value + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\" onmouseover='this.parentNode.value=this.value;' style='font-family: Bookman Old Style'>Bookman Old Style</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'font-family:' + this.value + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\" onmouseover='this.parentNode.value=this.value;' style='font-family: Calibri'>Calibri</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'font-family:' + this.value + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\" onmouseover='this.parentNode.value=this.value;' style='font-family: Comic Sans MS'>Comic Sans MS</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'font-family:' + this.value + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\" onmouseover='this.parentNode.value=this.value;' style='font-family: DEATH FONT ver1\.0'>DEATH FONT ver1\\.0</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'font-family:' + this.value + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\" onmouseover='this.parentNode.value=this.value;' style='font-family: Diablo'>Diablo</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'font-family:' + this.value + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\" onmouseover='this.parentNode.value=this.value;' style='font-family: Final Fantasy '>Final Fantasy</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'font-family:' + this.value + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\" onmouseover='this.parentNode.value=this.value;' style='font-family: MS Mincho'>MS Mincho</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'font-family:' + this.value + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\" onmouseover='this.parentNode.value=this.value;' style='font-family: Ninja Naruto'>Ninja Naruto</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'font-family:' + this.value + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\" onmouseover='this.parentNode.value=this.value;' style='font-family: Sand'>Sand</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'font-family:' + this.value + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\" onmouseover='this.parentNode.value=this.value;' style='font-family: Tahoma'>Tahoma</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'font-family:' + this.value + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\" onmouseover='this.parentNode.value=this.value;' style='font-family: Time New Roman'>Time New Roman</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'font-family:' + this.value + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\" onmouseover='this.parentNode.value=this.value;' style='font-family: Verdana'>Verdana</option>" +
            "</select>",
            "{|}",
            "",
            "false"
        ),
        new Array /* Font Grow */
        (
            "<img alt='' src='http://i28.tinypic.com/34yu4xe.jpg' " + ToolbarButtonStyle + " />",
            "<big>{|}</big>",
            ""
        ),
        new Array /* Font Shrink */
        (
            "<img alt='' src='http://i30.tinypic.com/fxgysk.jpg' " + ToolbarButtonStyle + " />",
            "<small>{|}</small>",
            ""
        ),
        new Array /* Font Size */
        (
            "<img alt='' src='http://i27.tinypic.com/303gz2v.jpg' " + ToolbarButtonStyle + " /> <select>" +
            "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'font-size:' + this.value + 'px\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\">0</option>" +
            "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'font-size:' + this.value + 'px\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\">6</option>" +
            "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'font-size:' + this.value + 'px\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\">8</option>" +
            "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'font-size:' + this.value + 'px\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\">9</option>" +
            "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'font-size:' + this.value + 'px\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\">10</option>" +
            "<option selected onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'font-size:' + this.value + 'px\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\">11</option>" +
            "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'font-size:' + this.value + 'px\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\">12</option>" +
            "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'font-size:' + this.value + 'px\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\">14</option>" +
            "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'font-size:' + this.value + 'px\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\">16</option>" +
            "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'font-size:' + this.value + 'px\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\">18</option>" +
            "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'font-size:' + this.value + 'px\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\">20</option>" +
            "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'font-size:' + this.value + 'px\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\">22</option>" +
            "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'font-size:' + this.value + 'px\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\">26</option>" +
            "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'font-size:' + this.value + 'px\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\">30</option>" +
            "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'font-size:' + this.value + 'px\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\">36</option>" +
            "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'font-size:' + this.value + 'px\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\">48</option>" +
            "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'font-size:' + this.value + 'px\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\">72</option>" +
            "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'font-size:' + this.value + 'px\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\">100</option>" +
            "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'font-size:' + this.value + 'px\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\">500</option>" +
            "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'font-size:' + this.value + 'px\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\">1000</option>" +
            "</select>",
            "{|}",
            "",
            "false"
        ),
        new Array /* Toolbar Layout: New Line */
        (
            "<br />",
            "{|}",
            "{|}"
        ),
        new Array /* Highlight HTML */
        (
            "<span style=\"width: 20px;background-color:navy; background-position: -3px 50%;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> <select style='width: 80px'>" +
                "<option disabled selected>" + "Fundo" + "</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'background-color: ' + this.style.backgroundColor + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundImage= 'url(http://i32.tinypic.com/161108p.png)';\"  style='background-color: maroon'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'background-color: ' + this.style.backgroundColor + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundImage= 'url(http://i28.tinypic.com/2vum07a.png)';\"  style='background-color: red'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'background-color: ' + this.style.backgroundColor + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundImage= 'url(http://i30.tinypic.com/29cweio.png)';\"  style='background-color: orange'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'background-color: ' + this.style.backgroundColor + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundImage= 'url(http://i26.tinypic.com/1zc0km8.jpg)';\"  style='background-color: navy'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'background-color: ' + this.style.backgroundColor + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundImage= 'url(http://i26.tinypic.com/1zc0km8.png)'\"  style='background-color: blue'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'background-color: ' + this.style.backgroundColor + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundImage= 'url(http://i31.tinypic.com/ionqwy.png)'\"  style='background-color: aqua'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'background-color: ' + this.style.backgroundColor + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundImage= 'url(http://i27.tinypic.com/2csgnx0.png)'\"  style='background-color: teal'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'background-color: ' + this.style.backgroundColor + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundImage= 'url(http://i31.tinypic.com/f3xag9.png)'\"  style='background-color: green'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'background-color: ' + this.style.backgroundColor + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundImage= 'url(http://i30.tinypic.com/wu1jdd.png)'\"  style='background-color: lime'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'background-color: ' + this.style.backgroundColor + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundImage= 'url(http://i28.tinypic.com/28k0ady.png)'\"  style='background-color: olive'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'background-color: ' + this.style.backgroundColor + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundImage= 'url(http://i27.tinypic.com/2jg80uv.png)'\"  style='background-color: gold'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'background-color: ' + this.style.backgroundColor + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundImage= 'url(http://i29.tinypic.com/2pseuqt.png)'\"  style='background-color: yellow'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'background-color: ' + this.style.backgroundColor + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundImage= 'url(http://i26.tinypic.com/1sd1e1.png)'\"  style='background-color: gray'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'background-color: ' + this.style.backgroundColor + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundImage= 'url(http://i29.tinypic.com/2qizpqx.png)'\"  style='background-color: silver'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'background-color: ' + this.style.backgroundColor + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundImage= 'url(http://i32.tinypic.com/znmzwz.png)'\"  style='background-color: purple'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'background-color: ' + this.style.backgroundColor + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundImage= 'url(http://i29.tinypic.com/s4vrkx.png)'\"  style='background-color: fuchsia'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'background-color: ' + this.style.backgroundColor + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundImage= 'url(http://i30.tinypic.com/rit2j4.png)'\"  style='background-color: violet'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'background-color: ' + this.style.backgroundColor + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundImage= 'url(http://i25.tinypic.com/6xpyxd.png)'\"  style='background-color: pink'>&nbsp;</option>" +
            "</select>",
            "{|}",
            "",
            "false"
        ),
        new Array /* Color picker HTML */
        (
            "<span style='width: 16px;background-color:navy;'>&nbsp;&nbsp;&nbsp;&nbsp;</span> <select style='width: 65px'>" +
                "<option disabled selected>" + LanguageGetColors() + "</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'color: ' + this.style.backgroundColor + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundColor=this.style.backgroundColor;\"  style='background-color: maroon'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'color: ' + this.style.backgroundColor + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundColor=this.style.backgroundColor;\"  style='background-color: red'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'color: ' + this.style.backgroundColor + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundColor=this.style.backgroundColor;\"  style='background-color: orange'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'color: ' + this.style.backgroundColor + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundColor=this.style.backgroundColor;\"  style='background-color: navy'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'color: ' + this.style.backgroundColor + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundColor=this.style.backgroundColor;\"  style='background-color: blue'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'color: ' + this.style.backgroundColor + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundColor=this.style.backgroundColor;\"  style='background-color: aqua'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'color: ' + this.style.backgroundColor + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundColor=this.style.backgroundColor;\"  style='background-color: teal'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'color: ' + this.style.backgroundColor + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundColor=this.style.backgroundColor;\"  style='background-color: green'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'color: ' + this.style.backgroundColor + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundColor=this.style.backgroundColor;\"  style='background-color: lime'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'color: ' + this.style.backgroundColor + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundColor=this.style.backgroundColor;\"  style='background-color: olive'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'color: ' + this.style.backgroundColor + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundColor=this.style.backgroundColor;\"  style='background-color: gold'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'color: ' + this.style.backgroundColor + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundColor=this.style.backgroundColor;\"  style='background-color: yellow'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'color: ' + this.style.backgroundColor + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundColor=this.style.backgroundColor;\"  style='background-color: gray'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'color: ' + this.style.backgroundColor + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundColor=this.style.backgroundColor;\"  style='background-color: silver'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'color: ' + this.style.backgroundColor + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundColor=this.style.backgroundColor;\"  style='background-color: purple'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'color: ' + this.style.backgroundColor + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundColor=this.style.backgroundColor;\"  style='background-color: fuchsia'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'color: ' + this.style.backgroundColor + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundColor=this.style.backgroundColor;\"  style='background-color: violet'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '<span style=\\'color: ' + this.style.backgroundColor + '\\'>{|}</span>' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundColor=this.style.backgroundColor;\"  style='background-color: pink'>&nbsp;</option>" +
            "</select>",
            "{|}",
            "",
            "false"
        ),
        new Array /* Color picker */
        (
            "<span style='width: 16px;background-color:navy;'>&nbsp;&nbsp;&nbsp;&nbsp;</span> <select style='width: 65px'>" +
                "<option disabled selected>" + LanguageGetColors() + "</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '[' + this.style.backgroundColor + ']{|}[/' + this.style.backgroundColor + ']' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundColor=this.style.backgroundColor;\" style='background-color: maroon'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '[' + this.style.backgroundColor + ']{|}[/' + this.style.backgroundColor + ']' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundColor=this.style.backgroundColor;\"  style='background-color: red'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '[' + this.style.backgroundColor + ']{|}[/' + this.style.backgroundColor + ']' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundColor=this.style.backgroundColor;\"  style='background-color: orange'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '[' + this.style.backgroundColor + ']{|}[/' + this.style.backgroundColor + ']' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundColor=this.style.backgroundColor;\"  style='background-color: navy'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '[' + this.style.backgroundColor + ']{|}[/' + this.style.backgroundColor + ']' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundColor=this.style.backgroundColor;\"  style='background-color: blue'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '[' + this.style.backgroundColor + ']{|}[/' + this.style.backgroundColor + ']' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundColor=this.style.backgroundColor;\"  style='background-color: aqua'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '[' + this.style.backgroundColor + ']{|}[/' + this.style.backgroundColor + ']' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundColor=this.style.backgroundColor;\"  style='background-color: teal'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '[' + this.style.backgroundColor + ']{|}[/' + this.style.backgroundColor + ']' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundColor=this.style.backgroundColor;\"  style='background-color: green'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '[' + this.style.backgroundColor + ']{|}[/' + this.style.backgroundColor + ']' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundColor=this.style.backgroundColor;\"  style='background-color: lime'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '[' + this.style.backgroundColor + ']{|}[/' + this.style.backgroundColor + ']' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundColor=this.style.backgroundColor;\"  style='background-color: olive'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '[' + this.style.backgroundColor + ']{|}[/' + this.style.backgroundColor + ']' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundColor=this.style.backgroundColor;\"  style='background-color: gold'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '[' + this.style.backgroundColor + ']{|}[/' + this.style.backgroundColor + ']' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundColor=this.style.backgroundColor;\"  style='background-color: yellow'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '[' + this.style.backgroundColor + ']{|}[/' + this.style.backgroundColor + ']' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundColor=this.style.backgroundColor;\"  style='background-color: gray'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '[' + this.style.backgroundColor + ']{|}[/' + this.style.backgroundColor + ']' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundColor=this.style.backgroundColor;\"  style='background-color: silver'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '[' + this.style.backgroundColor + ']{|}[/' + this.style.backgroundColor + ']' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundColor=this.style.backgroundColor;\"  style='background-color: purple'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '[' + this.style.backgroundColor + ']{|}[/' + this.style.backgroundColor + ']' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundColor=this.style.backgroundColor;\"  style='background-color: fuchsia'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '[' + this.style.backgroundColor + ']{|}[/' + this.style.backgroundColor + ']' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundColor=this.style.backgroundColor;\"  style='background-color: violet'>&nbsp;</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '[' + this.style.backgroundColor + ']{|}[/' + this.style.backgroundColor + ']' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus(); this.parentNode.selectedIndex=0;\" onmouseover=\"this.parentNode.parentNode.firstChild.style.backgroundColor=this.style.backgroundColor;\"  style='background-color: pink'>&nbsp;</option>" +
            "</select>",
            "",
            "{|}",
            "false"
        ),
        new Array /* Emoticons */
        (
            "<b><img alt='' src='http://img1.orkut.com/img/i_bigsmile.gif' /></b> <select>" +
                "<option disabled selected>" + LanguageGetIcons() + "</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '[' + this.value + ']{|}' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\" onmouseover='this.parentNode.value=this.value; this.parentNode.previousSibling.previousSibling.firstChild.src=\"http://img1.orkut.com/img/i_smile.gif\";' style='background-image: url(http://img1.orkut.com/img/i_smile.gif); background-repeat: no-repeat; background-position: left; padding-left: 20px;'>:)</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '[' + this.value + ']{|}' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\" onmouseover='this.parentNode.value=this.value; this.parentNode.previousSibling.previousSibling.firstChild.src=\"http://img1.orkut.com/img/i_wink.gif\";' style='background-image: url(http://img1.orkut.com/img/i_wink.gif); background-repeat: no-repeat; background-position: left; padding-left: 20px;'>;)</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '[' + this.value + ']{|}' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\" onmouseover='this.parentNode.value=this.value; this.parentNode.previousSibling.previousSibling.firstChild.src=\"http://img1.orkut.com/img/i_bigsmile.gif\";' style='background-image: url(http://img1.orkut.com/img/i_bigsmile.gif); background-repeat: no-repeat; background-position: left; padding-left: 20px;'>:D</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '[' + this.value + ']{|}' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\" onmouseover='this.parentNode.value=this.value; this.parentNode.previousSibling.previousSibling.firstChild.src=\"http://img1.orkut.com/img/i_funny.gif\";' style='background-image: url(http://img3.orkut.com/img/i_funny.gif); background-repeat: no-repeat; background-position: left; padding-left: 20px;'>:P</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '[' + this.value + ']{|}' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\" onmouseover='this.parentNode.value=this.value; this.parentNode.previousSibling.previousSibling.firstChild.src=\"http://img1.orkut.com/img/i_confuse.gif\";' style='background-image: url(http://img4.orkut.com/img/i_confuse.gif); background-repeat: no-repeat; background-position: left; padding-left: 20px;'>/)</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '[' + this.value + ']{|}' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\" onmouseover='this.parentNode.value=this.value; this.parentNode.previousSibling.previousSibling.firstChild.src=\"http://img1.orkut.com/img/i_cool.gif\";' style='background-image: url(http://img3.orkut.com/img/i_cool.gif); background-repeat: no-repeat; background-position: left; padding-left: 20px;'>8)</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '[' + this.value + ']{|}' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\" onmouseover='this.parentNode.value=this.value; this.parentNode.previousSibling.previousSibling.firstChild.src=\"http://img1.orkut.com/img/i_surprise.gif\";' style='background-image: url(http://img4.orkut.com/img/i_surprise.gif); background-repeat: no-repeat; background-position: left; padding-left: 20px;'>:o</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '[' + this.value + ']{|}' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\" onmouseover='this.parentNode.value=this.value; this.parentNode.previousSibling.previousSibling.firstChild.src=\"http://img1.orkut.com/img/i_sad.gif\";' style='background-image: url(http://img4.orkut.com/img/i_sad.gif); background-repeat: no-repeat; background-position: left; padding-left: 20px;'>:(</option>" +
                "<option onclick=\"" + jsGetElement + " post.value = post.value.substr(0, post.selectionStart) + '[' + this.value + ']{|}' + post.value.substr(post.selectionEnd); var focus = post.value.lastIndexOf('{|}'); post.value = post.value.replace('{|}', psel); post.selectionStart = focus; post.selectionEnd = focus + psel.length; post.focus();\" onmouseover='this.parentNode.value=this.value; this.parentNode.previousSibling.previousSibling.firstChild.src=\"http://img1.orkut.com/img/i_angry.gif\";' style='background-image: url(http://img2.orkut.com/img/i_angry.gif); background-repeat: no-repeat; background-position: left; padding-left: 20px;'>:x</option>" +
            "</select>",
            "{|}",
            "{|}",
            "false"
        ),
        new Array /* Mask Links HTML */
        (
            "<span style='cursor: pointer; font-size: 85%; font-weight: bold;' " +
            "onclick=\"" +
            jsGetElement +
            "post.value = post.value.replace(/(http:\\/)()(\\/)/, '$1[b]$2[/b]$3'); " +
            "post.value = post.value.replace(/(.*?)()(\\.)([A-Z]+|[0-9]+)/ig, '$1$3[b]$2[/b]$4');" +
            "\"" +
            ">" + LanguageGetMaskLinks() + "</span>",
            "{|}",
            "",
            "false"
        ),
        new Array /* Mask Links */
        (
            "<span style='cursor: pointer; font-size: 85%; font-weight: bold;' " +
            "onclick=\"" +
            jsGetElement +
            "post.value = post.value.replace(/(http:\\/)()(\\/)/, '$1[b]$2[/b]$3'); " +
            "post.value = post.value.replace(/(.*?)()(\\.)([A-Z]+|[0-9]+)/ig, '$1*$3$4');" +
            "\"" +
            ">" + LanguageGetMaskLinks() + "</span>",
            "",
            "{|}",
            "false"
        ),
        new Array /* New Line */
        (
            "<span style='cursor: pointer; font-size: 85%; font-weight: bold;'>&lt;br /&gt;</span>",
            "<br />{|}",
            ""
        ),
        new Array /* Crypt */
        (
            "<span style='cursor: pointer; font-size: 85%; font-weight: bold;' onclick=\"" + jsGetElement + "function crypt(s, secret){var i = 0;var x = 0;var f ='';for (i=0;i<s.length;++i){x = s.charCodeAt(i);if (x == 32){f += String.fromCharCode(x); continue;} f += String.fromCharCode(x+secret);}return f;} post.value = (crypt(post.value, 77))\">" + LanguageGetCrypt() + "</span>",
            "{|}",
            "{|}"
        ),
        new Array /* Decrypt */
        (
            "<span style='cursor: pointer; font-size: 85%; font-weight: bold;' onclick=\"" + jsGetElement + "function crypt(s, secret){var i = 0;var x = 0;var f ='';for (i=0;i<s.length;++i){x = s.charCodeAt(i);if (x == 32){f += String.fromCharCode(x); continue;} f += String.fromCharCode(x+secret);}return f;} post.value = (crypt(post.value, -77))\">" + LanguageGetDecrypt() + "</span>",
            "{|}",
            "{|}"
        ),
        new Array /* Date */
        (
            "<span style='cursor: pointer; font-size: 85%; font-weight: bold;' onclick=\"" + jsGetElement + "function GetDate(){var dt = new Date();var d = dt.getDate() < 10 ? '0' + dt.getDate() : dt.getDate();var m = dt.getMonth() < 10 ? '0' + (dt.getMonth()+1) : (dt.getMonth()+1);var y = dt.getFullYear(); return y + '-' + m + '-' + d;} post.value= post.value.substr(0, post.selectionStart) + GetDate() + post.value.substring(post.selectionEnd);\">" + LanguageGetDate() + "</span>",
            "{|}",
            "{|}"
        ),
        new Array /* Time */
        (
            "<span style='cursor: pointer; font-size: 85%; font-weight: bold;' onclick=\"" + jsGetElement + "function GetTime(){var dt = new Date();var s = dt.getSeconds() < 10 ? '0' + dt.getSeconds() : dt.getSeconds();var m = dt.getMinutes() < 10 ? '0' + (dt.getMinutes()) : (dt.getMinutes());var h = dt.getHours() < 10 ? '0' + dt.getHours() : dt.getHours(); return h + ':' + m + ':' + s;} post.value= post.value.substr(0, post.selectionStart) + GetTime() + post.value.substring(post.selectionEnd);\">" + LanguageGetTime() + "</span>",
            "{|}",
            "{|}"
        )
    );
// #endregion
}

/// <summary>
/// ************************************************
///           Manual Configuration End
/// ************************************************
/// </summary>

// #region SYSTEM SETUP
function InitializeComponents()
{
    var args = (window.location.href.replace(RegexArg, "")).split("&");
    CommunityId = args[0] ? args[0].split("=")[1] : 0;
    CommunityTopicId = args[1] ? args[1].split("=")[1] : 0;
}

// #region SYSTEM SETTINGS
if (!IsPage(URLOMConfig))
{
    TextAreaTextBegin = (IsHtmlEnabled() ? TextAreaTextHtmlBegin : TextAreaTextBegin);
    TextAreaTextEnd = (IsHtmlEnabled() ? TextAreaTextHtmlEnd : TextAreaTextEnd);

    QuoteBegin = (IsHtmlEnabled() ? QuoteHtmlBegin : QuoteBegin);
    QuoteEnd = (IsHtmlEnabled() ? QuoteHtmlEnd : QuoteEnd);
    QuoteHeaderBegin = (IsHtmlEnabled() ? QuoteHeaderHtmlBegin : QuoteHeaderBegin);
    QuoteHeaderEnd = (IsHtmlEnabled() ? QuoteHeaderHtmlEnd : QuoteHeaderEnd);

    Signature = (IsHtmlEnabled() ? SignatureHtml : Signature);
}

if (IsPage("Scrapbook"))
{
    TextAreaTextBegin = TextAreaScrapTextBegin;
    TextAreaTextEnd = TextAreaScrapTextEnd;
    Signature = SignatureScrap;
}

// Focus length
var FocusLength = TextAreaTextEnd.length + Signature.length;
// #endregion
// #endregion


// #region SYSTEM FUNCTIONS
window.mouseX = 200;
window.mouseY = 200;
window.addEventListener("mousemove",
    function (e)
    {
        window.mouseX = e.pageX;
        window.mouseY = e.pageY;
    }, false);
function ArrayRemoveNullValues(arr)
{
    for (i = 0; i < arr.length; ++i)
    {
        if (arr[i].replace(RegexTrim, "") == "" || arr[i] == null)
        {
            arr.splice(i, 1);
            --i;
        }
    }
    return arr;
}

function GetElementsByClassName(TagName, ClassName, Parent)
{
    if (!Parent) Parent = document;
    var Els = Parent.getElementsByTagName(TagName);
    var C = new Array();
    for (i in Els)
    {
        var E = Els[i];
        if (!E) continue;
        if (E.className && E.className.toLowerCase() == ClassName.toLowerCase())
        {
            C.push(E);
        }
    }
    return C;
}

function StringCommaArrayRemove(StringArray, Id)
{
    StringArray = StringArray.split(",");
    StringArray.splice(StringArray.indexOf(Id), 1);
    return StringArray.join(",");
}

function StringUpperFirst(Str)
{
    return Str.substr(0, 1).toUpperCase() + Str.substr(1);
}

// #region DRAG N' DROP
function DragMouseDown(e, Element, Function)
{
    IsDragging = true;
    DragFunction = Function;
    DragCurrentX = Element.offsetLeft;
    DragCurrentY = Element.offsetTop;
    DragX = e.pageX;
    DragY = e.pageY;
    window.status = IsDragging;
}

function DragMouseUp()
{
    IsDragging = false;
    DragFunction = "";
}

function DragMouseMove(e, Element)
{
    if (IsDragging)
    {
        if (DragFunction == "Move")
        {
            Element.style.position = "absolute";
            Element.style.left = (e.pageX - DragX + DragCurrentX);
            Element.style.top  = (e.pageY - DragY + DragCurrentY);
        }
        if (DragFunction == "Resize")
        {
            Element.style.width = (e.pageX - DragCurrentX) + "px";
            Element.style.height = (e.pageY - DragCurrentY - 27) + "px";
        }
    }
}
// #endregion

/// <summary>
/// Ajax Request Page handle in Func
/// </summary>
/// <Param name="Page">Url</Param>
/// <Param name="Func">Function to handle</Param>
function AjaxRequest(Page, Func)
{
    GM_xmlhttpRequest({
        method: 'GET',
        url: (window.location.href.match(/^(http:\/\/[^/]+)/)[0]) + Page + "cache=" + (new Date().getTime()),
        onload: Func
    });
}

/// <summary>
/// Ajax Request Page handle in Func
/// </summary>
/// <Param name="Page">Url</Param>
/// <Param name="Func">Function to handle</Param>
function AjaxRequestExtern(Page, Func)
{
    GM_xmlhttpRequest({
        method: 'GET',
        url: Page + "cache=" + (new Date().getTime()),
        onload: Func
    });
}
// #endregion

// #region SCRIPT FUNCTIONS
function GetParam(Name)
{
    var p;
    var r = new RegExp("(\\?|&)" + Name + "=([^&]*)")
    try
    {
        p = (window.location.href).match(r);
        if (p.length >= 3) return p[2];
        else return "";
    }
    catch (ex) { return false; }
}
function IsHtmlEnabled(IsFrame)
{
    if (IsPage(URLScrap)) return true;
    if (!IsPage("/Comm")) return false;
    if (!IsPage("/CommMsgPost")) return IsQuickReply();
    
    var Container = window.document;
    if (IsFrame)
        Container = document.getElementById("orkutFrame").contentDocument;

    var Check = Container.getElementById("charCount");
    if (!Check) return false;
    Check = Check.parentNode.parentNode;
    var Permission = Check.innerHTML.replace(/<.*?>/g, "");
    Permission = Permission.substr(Permission.indexOf("HTML"));

    if (Permission.match(/^\s*HTML.{10,}\.\s*$/i))
        return true;
    else
        return false;
    return false;
}

function GetTextPreview(Prev)
{
    if (!IsHtmlEnabled()) Prev = Prev.replace(/</ig, "&lt;").replace(/>/ig, "&gt;");
    Prev = Prev.replace(/([^>])\r*\n/g, "$1<br />");
    
    Prev = Prev.replace(/\[b\]/ig, "<b>");
    Prev = Prev.replace(/\[\/b\]/ig, "</b>");
    Prev = Prev.replace(/\[i\]/ig, "<i>");
    Prev = Prev.replace(/\[\/i\]/ig, "</i>");
    Prev = Prev.replace(/\[u\]/ig, "<u>");
    Prev = Prev.replace(/\[\/u\]/ig, "</u>");
    
    Prev = Prev.replace(/\[:\)\]/g, "<img alt='' src='http://img1.orkut.com/img/i_smile.gif' />");
    Prev = Prev.replace(/\[;\)\]/g, "<img alt='' src='http://img1.orkut.com/img/i_wink.gif' />");
    Prev = Prev.replace(/\[:D\]/g, "<img alt='' src='http://img1.orkut.com/img/i_bigsmile.gif' />");
    Prev = Prev.replace(/\[:P\]/g, "<img alt='' src='http://img1.orkut.com/img/i_funny.gif' />");
    Prev = Prev.replace(/\[\/\)\]/g, "<img alt='' src='http://img1.orkut.com/img/i_confuse.gif' />");
    Prev = Prev.replace(/\[8\)\]/g, "<img alt='' src='http://img1.orkut.com/img/i_cool.gif' />");
    Prev = Prev.replace(/\[:o\]/g, "<img alt='' src='http://img1.orkut.com/img/i_surprise.gif' />");
    Prev = Prev.replace(/\[:\(\]/g, "<img alt='' src='http://img1.orkut.com/img/i_sad.gif' />");
    Prev = Prev.replace(/\[:x\]/g, "<img alt='' src='http://img1.orkut.com/img/i_angry.gif' />");
    
    Prev = Prev.replace(/\[maroon\]/ig, "<span style='color: maroon'>");
    Prev = Prev.replace(/\[\/maroon\]/ig, "</span>");
    Prev = Prev.replace(/\[red\]/ig, "<span style='color: red'>");
    Prev = Prev.replace(/\[\/red\]/ig, "</span>");
    Prev = Prev.replace(/\[orange\]/ig, "<span style='color: orange'>");
    Prev = Prev.replace(/\[\/orange\]/ig, "</span>");
    Prev = Prev.replace(/\[navy\]/ig, "<span style='color: navy'>");
    Prev = Prev.replace(/\[\/navy\]/ig, "</span>");
    Prev = Prev.replace(/\[blue\]/ig, "<span style='color: blue'>");
    Prev = Prev.replace(/\[\/blue\]/ig, "</span>");
    Prev = Prev.replace(/\[aqua\]/ig, "<span style='color: aqua'>");
    Prev = Prev.replace(/\[\/aqua\]/ig, "</span>");
    Prev = Prev.replace(/\[teal\]/ig, "<span style='color: teal'>");
    Prev = Prev.replace(/\[\/teal\]/ig, "</span>");
    Prev = Prev.replace(/\[green\]/ig, "<span style='color: green'>");
    Prev = Prev.replace(/\[\/green\]/ig, "</span>");
    Prev = Prev.replace(/\[lime\]/ig, "<span style='color: lime'>");
    Prev = Prev.replace(/\[\/lime\]/ig, "</span>");
    Prev = Prev.replace(/\[olive\]/ig, "<span style='color: olive'>");
    Prev = Prev.replace(/\[\/olive\]/ig, "</span>");
    Prev = Prev.replace(/\[gold\]/ig, "<span style='color: gold'>");
    Prev = Prev.replace(/\[\/gold\]/ig, "</span>");
    Prev = Prev.replace(/\[yellow\]/ig, "<span style='color: yellow'>");
    Prev = Prev.replace(/\[\/yellow\]/ig, "</span>");
    Prev = Prev.replace(/\[gray\]/ig, "<span style='color: gray'>");
    Prev = Prev.replace(/\[\/gray\]/ig, "</span>");
    Prev = Prev.replace(/\[silver\]/ig, "<span style='color: silver'>");
    Prev = Prev.replace(/\[\/silver\]/ig, "</span>");
    Prev = Prev.replace(/\[purple\]/ig, "<span style='color: purple'>");
    Prev = Prev.replace(/\[\/purple\]/ig, "</span>");
    Prev = Prev.replace(/\[fuchsia\]/ig, "<span style='color: fuchsia'>");
    Prev = Prev.replace(/\[\/fuchsia\]/ig, "</span>");
    Prev = Prev.replace(/\[violet\]/ig, "<span style='color: violet'>");
    Prev = Prev.replace(/\[\/violet\]/ig, "</span>");
    Prev = Prev.replace(/\[pink\]/ig, "<span style='color: pink'>");
    Prev = Prev.replace(/\[\/pink\]/ig, "</span>");
    
    return Prev;
}

function GetProfileGadgetsButton(Label, Url)
{
    var Link = document.createElement("a");
    Link.href = Url;
    Link.className = "ht";
    var But = document.createElement("p");
    But.className = "lf";
    But.innerHTML = Label + "<br />";
    var Img = document.createElement("img");
    Img.style.width = "14px";
    Img.style.height = "14px";
    Img.border = "0";
    Img.src = "http://static3.orkut.com/img/castro/p_video.gif";
    But.appendChild(Img);
    var Count = document.createElement("span");
    Count.className = "largenum";
    Count.innerHTML = "X";
    But.appendChild(Count);
    Link.appendChild(But);
    
    return Link;
}

function SetTextArea(TextArea, IfEmpty)
{
    if (IfEmpty && (!TextArea.value || TextArea.value == ""))
    {
        TextArea.value = TextAreaTextBegin + TextAreaTextEnd + Signature;
        TextArea.selectionStart = TextArea.selectionEnd = TextAreaTextBegin.length;
        return;
    }
    if (IfEmpty) return;
    if (!TextArea.value ||
        (TextArea.value.indexOf(TextAreaTextBegin) == -1 ||
        TextArea.value.indexOf(TextAreaTextEnd) == -1))
    {
        TextArea.value = TextAreaTextBegin + TextAreaTextEnd;
        TextArea.selectionStart = TextArea.selectionEnd = TextAreaTextBegin.length;
    }
    if (!TextArea.value || TextArea.value.indexOf(Signature) == -1)
    {
        TextArea.value += Signature;
        TextArea.selectionStart = TextArea.selectionEnd = TextAreaTextBegin.length;
    }
}

/// <summary>
/// Create Button
/// </summary>
/// <param name="Text">Button text</param>
/// <param name="Func">Button function</param>
/// <param name="Event">Function event</param>
/// <param name="Tooltip">Tooltip</param>
function ButtonCreate(Text, Func, Event, Tooltip)
{
    var ButtonContainer = document.createElement("span");
    var ButtonPlaceHolder = document.createElement("span");
    ButtonPlaceHolder.className = "grabtn";
    
    var Button = document.createElement("a");
    Button.id = "id" + Text + CommunityId;
    Button.innerHTML = Text;
    Button.className = "btn";
    Button.href = "javascript:;";
    
    ButtonPlaceHolder.appendChild(Button);
    ButtonContainer.appendChild(ButtonPlaceHolder);
    
    var BorderRight = document.createElement("span");
    BorderRight.className = "btnboxr";
    var PixImg = document.createElement("img");
    PixImg.height = "1";
    PixImg.width = "5";
    PixImg.src = "http://img1.orkut.com/img/b.gif";
    PixImg.alt = "";
    
    if (Tooltip)
        ButtonContainer.title = Tooltip;
    
    BorderRight.appendChild(PixImg);
    ButtonContainer.appendChild(BorderRight);
    
    if (Func)
        ButtonContainer.addEventListener(Event, Func, false);
    
    return ButtonContainer;
}

// #region CHAT
function BuildChatBox()
{
    var ContainerPanel = document.createElement("div");
    var ContainerChat = document.createElement("table");
    
    ContainerPanel.id = "Chat";
    ContainerPanel.style.position = "absolute";
    ContainerPanel.style.width = "142px";
    ContainerPanel.style.zIndex= "5000";
    ContainerPanel.style.minWidth = "118px";
    ContainerPanel.style.maxWidth = "1000px";
    ContainerPanel.style.maxHeight = "700px";
    
    // Top, title
    var ContainerChatTopRow = document.createElement("tr");
    var ContainerChatBorderTopLeft = document.createElement("td");
    var ContainerChatBorderTopRight = document.createElement("td");
    ContainerChat.id = "Chat" + CommunityId;
    ContainerChat.className = "module";
    ContainerChat.style.width = "100%";
    ContainerChat.style.height= "100%";
    ContainerChat.cellSpacing = "0";
    ContainerChat.cellPadding = "0";
    
    ContainerChatBorderTopLeft.style.width = "99%";
    ContainerChatBorderTopRight.style.width= "8px";
    
    ContainerChatBorderTopLeft.style.margin = "5px 0 6px 10px";
    ContainerChatBorderTopLeft.style.lineHeight = "21px";
    ContainerChatBorderTopLeft.style.fontSize = "10px";
    ContainerChatBorderTopLeft.style.textAlign = "center";
    ContainerChatBorderTopLeft.className = "topl";
    ContainerChatBorderTopRight.className = "topr";
    ContainerChatBorderTopLeft.style.backgroundRepeat = "no-repeat";
    ContainerChatBorderTopRight.style.backgroundRepeat = "no-repeat";
    
    var ChatQuickReply = document.createElement("a");
    ChatQuickReply.href = "javascript:;";
    ChatQuickReply.innerHTML = " Postar -";
    ChatQuickReply.style.cursor = "pointer";
    ChatQuickReply.addEventListener("click",
        function ()
        {
            QuickReply(ChatTopicId);
        }, false);
    
    var ChatGo = document.createElement("a");
    ChatGo.href = URLMessages + "?cmm=" + CommunityId + "&tid=" + ChatTopicId + "&na=2&Scroll=-1";
    ChatGo.innerHTML = " Entrar -";
    ChatGo.style.cursor = "pointer";
    
    var ExpandCollapse = document.createElement("a");
    ExpandCollapse.href = "javascript:;";
    ExpandCollapse.innerHTML = " [+] ";
    ExpandCollapse.style.cursor = "pointer";
    ExpandCollapse.addEventListener("click",
        function ()
        {
            var Chat = document.getElementById("Chat");
            var Width = 700;
            if (parseInt(Chat.style.width.replace(/[a-z]*/i, "")) >= Width)
            {
                Chat.style.width = "140px";
                this.innerHTML = " [+]";
            }
            else
            {
                Chat.style.width = Width + "px";
                this.innerHTML = " [-]";
            }
        }, false);
    
    ContainerChatBorderTopLeft.appendChild(ChatQuickReply);
    ContainerChatBorderTopLeft.appendChild(ChatGo);
    ContainerChatBorderTopLeft.appendChild(ExpandCollapse);
    
    ContainerChatTopRow.appendChild(ContainerChatBorderTopLeft);
    ContainerChatTopRow.appendChild(ContainerChatBorderTopRight);
    ContainerChat.appendChild(ContainerChatTopRow);
    
    // Mid, messages
    var ContainerChatRow = document.createElement("tr");
    var ContainerChatMessages = document.createElement("td");
    var ContainerChatMessagesBorder = document.createElement("td");
    ContainerChatMessages.className = "boxmid";
    ContainerChatMessagesBorder.className = "boxmidr";
    ContainerChatMessages.style.paddingBottom = "5px";
    ContainerChatMessages.style.verticalAlign = "top";

    var ContainerChatMessagesDiv = document.createElement("div");
    ContainerChatMessagesDiv.id = "ChatMessages";
    ContainerChatMessagesDiv.style.overflowY = "scroll";
    ContainerChatMessagesDiv.style.overflowX = "hidden";
    ContainerChatMessagesDiv.style.height = "200px";
    ContainerChatMessagesDiv.style.fontSize = "10px";
    ContainerChatMessagesDiv.style.backgroundColor = "#EFF7FF";
    ContainerChatMessagesDiv.innerHTML = "Carregando...";
    
    ContainerChatMessages.appendChild(ContainerChatMessagesDiv);
    ContainerChatRow.appendChild(ContainerChatMessages);
    ContainerChatRow.appendChild(ContainerChatMessagesBorder);
    ContainerChat.appendChild(ContainerChatRow);
    
    // Bot, footer
    var ContainerChatBottomRow = document.createElement("tr");
    var ContainerChatBorderBottomLeft = document.createElement("td");
    var ContainerChatBorderBottomRight = document.createElement("td");
    ContainerChatBorderBottomLeft.className = "botl";
    ContainerChatBorderBottomRight.className = "botr";
    ContainerChatBorderBottomLeft.style.backgroundRepeat = "no-repeat";
    ContainerChatBorderBottomRight.style.backgroundRepeat = "no-repeat";
    
    ContainerChatBottomRow.appendChild(ContainerChatBorderBottomLeft);
    ContainerChatBottomRow.appendChild(ContainerChatBorderBottomRight);
    ContainerChat.appendChild(ContainerChatBottomRow);
    
    ContainerPanel.appendChild(ContainerChat);

    // Events
    document.body.addEventListener("mouseup", DragMouseUp, false);    
    // Move
    ContainerChatTopRow.style.cursor = "move";
    ContainerChatTopRow.addEventListener("mousedown", function (e) { DragMouseDown(e, this.parentNode.parentNode, "Move"); }, false);
    document.body.addEventListener("mousemove", function (e) { DragMouseMove(e, document.getElementById('Chat')); }, false);
    
    // Resize
    ContainerChatMessagesBorder.style.cursor = "crosshair";
    ContainerChatMessagesBorder.addEventListener("mousedown",  function (e) { DragMouseDown(e, this.parentNode.parentNode.parentNode, "Resize"); }, false);
    
    ContainerChatBottomRow.style.cursor = "crosshair";
    ContainerChatBottomRow.addEventListener("mousedown",  function (e) { DragMouseDown(e, this.parentNode.parentNode, "Resize"); }, false);
    
    document.body.addEventListener("mousemove",
        function (e)
        {
            var Messages = document.getElementById("ChatMessages");
            DragMouseMove(e, document.getElementById('Chat'));
            if (IsDragging && DragFunction == "Resize")
                Messages.style.height = Messages.parentNode.parentNode.parentNode.parentNode.style.height;
        }, false);
    
    return ContainerPanel;
}

function ChatGetMessages()
{
    function GetMessages(response)
    {
        var Page = response.responseText;
        var TemporaryContainer = document.createElement("div");
        TemporaryContainer.innerHTML = Page;
        var Elements = TemporaryContainer.getElementsByTagName("div");
        var El;
        for (var Element in Elements)
        {
            if (Elements[Element].id == "mboxfull")
            {
                El = Elements[Element];
                break;
            }
        }
        if (!El) return;
        Elements = El.getElementsByTagName("div");

        var Users = new Array();
        var Msgs = new Array();
        for (var Element in Elements)
        {
            if (Elements[Element].className == "listitem")
            {
                Users.push(Elements[Element].getElementsByTagName("H3")[0].innerHTML);
                Msgs.push(Elements[Element].getElementsByTagName("DIV")[1].innerHTML);
            }
        }

        var ChatMessageContainer = document.getElementById("ChatMessages");
        ChatMessageContainer.innerHTML = "";
        for (var Info in Users)
        {
            ChatMessageContainer.innerHTML += "<small><b>" + Users[Info] + ":</b><br />" + Msgs[Info] + "<br /><br /></small>";
        }
        ChatMessageContainer.scrollTop = 9999999 + ChatMessageContainer.offsetHeight;
        
        Links = ChatMessageContainer.getElementsByTagName("a");
        OrkutLinksFix(Links);
    }
    AjaxRequest(URLMessages + "?cmm=" + CommunityId + "&tid=" + GMGetValue("Chat" + CommunityId) + "&na=2&", GetMessages);
}
// #endregion

// #region QUICK REPLY
/// <summary>
/// Check if community accepts quickreply
/// </summary>
function IsQuickReply()
{
    return (((GMGetValue(("QuickReply" + CommunityId))) != "") ? 1 : 0);
}

/// <summary>
/// Prompt text and post
/// </summary>
/// <Param name="Tid">Topic ID, default page's tid</Param>
function QuickReply(Tid)
{
    var Header = IsQuickReply() ? TextAreaTextHtmlBegin : TextAreaTextBegin;
    var Footer = IsQuickReply() ? TextAreaTextHtmlEnd : TextAreaTextEnd;
    var Sig = IsQuickReply() ? SignatureHtml : Signature;
    
    if (!Tid) Tid = CommunityTopicId;
    
    window.addEventListener("keydown",
        function (e)
        {
            if (e.shiftKey && e.keyCode == 13)
            {
                var Area = document.getElementById("TextBoxQReply");
                var Text;
                if (!Area) return;
                Text = Area.value;
                if (Text.replace(/\s|\n|\r/g, "") == "") return;
                Text = encodeURIComponent(Header + Text + Footer + Sig);
                var Frm = document.forms[1];
                Frm.action = "/CommMsgPost?cmm=" + CommunityId + "&tid=" + Tid + "&bodyText=" + Text + "&Action.submit";
                Area.value = "";
                Frm.submit();
            }
        }, false);
    
    var Input = InputBoxCreate("QReply", "Responder Rapidamente",
        "<textarea id='TextBoxQReply' style='width:100%'></textarea>" +
        "<br />" +
        "<div style='float: right'>" +
        "<a id='QReplySend' href='javascript:;' " +
        "onclick=\"" +
        "var Text = '" + encodeURIComponent(Header) + "' + encodeURIComponent(document.getElementById('TextBoxQReply').value) + '" + encodeURIComponent(Footer) + encodeURIComponent(Sig) + "';" +
        " document.getElementById('TextBoxQReply').value = ''; " +
        "var Frm = document.forms[1];" +
        "Frm.action = '/CommMsgPost?cmm=" + CommunityId + "&tid=" + Tid + "&bodyText=' + Text + '&Action.submit';" +
        "Frm.submit();" +
        "\"" +
        ">Enviar (Shift+Enter)</a>" +
        "&nbsp;&nbsp;&nbsp;" +
        "<a href='javascript:;' onclick=\"document.getElementById('QReply').style.display = 'none'; document.getElementById('OMLayer').style.display = 'none';\">Cancelar</a>" +
        "</div>"
        );
    if (Input)
        document.body.appendChild(Input);
    
    LayerShow();
    ElementShow("QReply", window.mouseX - 100, window.mouseY - 50);
    document.getElementById("TextBoxQReply").focus();
}
function QuickReplyThis(Id)
{
    if (!Id) Id = "QTextboxReply";
    var Area = document.getElementById(Id);
    var Text;
    if (!Area) return;
    Text = Area.value;
    if (Text.replace(/\s|\n|\r/g, "") == "") return;
    Text = encodeURIComponent(Text);
    var Frm = document.forms[1];
    Frm.action = "/CommMsgPost?cmm=" + CommunityId + "&tid=" + CommunityTopicId + "&bodyText=" + Text + "&Action.submit";
    Area.value = "";
    Frm.submit();
}
function QuickReplyShow()
{
    var div = document.getElementById("Footage").getElementsByTagName("div")[0];
    if (div.style.display == "none")
    {
        div.style.display = "";
        try
        {
            div.getElementsByTagName("textarea")[0].selectionStart =
                div.getElementsByTagName("textarea")[0].selectionEnd = TextAreaTextBegin.length;
            div.getElementsByTagName("textarea")[0].focus();
        }
        catch (e) {}
    }
    else
        div.style.display = "none";
}
// #endregion // Quick Reply

// #region TOOLBAR
function ToolbarCreate(Id, IsFrame, Mode)
{
    if (!Id) Id = "messageBody";

    var ContainerToolbar = document.getElementById(Id);
    if (!ContainerToolbar)
        ContainerToolbar = document.getElementById("orkutFrame").contentDocument.getElementById('messageBody');
    if (ContainerToolbar)
    {
        ContainerToolbar.style.width = "100%";
        ContainerToolbar = ContainerToolbar.parentNode;
        ContainerToolbar.style.width = "99%";
        
        var items = "";
        var mode;
        if (Mode == 1 || Mode == 2)
            mode = Mode;
        else
            mode = (IsHtmlEnabled(IsFrame) ? 1 : 2);
        for (i = 0; i < Tools.length; ++i)
        {
            var ToolAuto = true;
            if (Tools[i][mode].length == 0) continue;
            if (Tools[i].length > 3)
            {
                ToolAuto = (Tools[i][3] == "true");
            }
            items += "<span style='vertical-align:middle;' ";
            if (ToolAuto)
                items +=
                    "onclick=\"";
                    items += "var post = document.getElementById('" + Id + "'); ";
                    items += "var psel = post.value.substr((post.selectionStart), (post.selectionEnd - post.selectionStart));"+
                    "post.value = post.value.substr(0, post.selectionStart) + '" +
                    Tools[i][mode] +
                    "' + post.value.substr(post.selectionEnd);" +
                    "var focus = post.value.lastIndexOf('{|}');" +
                    "post.value = post.value.replace('{|}', psel);" + 
                    "post.selectionStart = focus; post.selectionEnd = focus + psel.length;" +
                    "post.focus(); \"";
            items += ">" +
                Tools[i][0] +
                "</span>" +
                " <span style='border-left: 1px solid silver; padding-top: 0px;'>&nbsp;</span>";
        }
        var Sep = document.createElement("div");
        Sep.style.lineHeight = "5px";
        var Bar = document.createElement("div");
        Bar.id = "kToolBar";
        Bar.style.border = "1px solid silver";
        Bar.style.padding = "2px 2px 2px 2px";
        Bar.style.backgroundColor = ToolbarBackgroundColor;
        Bar.innerHTML = items;
        ContainerToolbar.insertBefore(Bar, ContainerToolbar.firstChild);
        ContainerToolbar.insertBefore(Sep, ContainerToolbar.firstChild);
    }
}
// #endregion

// #region Header Menu Items
function HeaderMenuGetContainer()
{
    var Container;
    var Uls = document.getElementById("headerin").getElementsByTagName("ul");
    for (i in Uls)
    {
        var Ul = Uls[i];
        if (Ul.className == "menu")
        {
            Container = Ul;
            break;
        }
    }
    return Container;
}

function HeaderMenuMain()
{
    var Container = HeaderMenuGetContainer();
    var MenuButton = Container.getElementsByTagName("li")[0].getElementsByTagName("a")[0];
    MenuButton.href = "javascript:;";

    MenuButton.addEventListener("click",
        function ()
        {
            var Menu = document.getElementById("OMMenu");
            if (Menu.style.display == "none")
            {
                Menu.style.display = "";
            }
            else
            {
                Menu.style.display = "none";
            }
        }, false);
    
    var Menu = document.createElement("div");
    Menu.id = "OMMenu";
    Menu.style.backgroundColor = "#5888C6";
    Menu.style.border = "2px solid white";
    Menu.style.color = "white";
    Menu.style.padding = "5px";
    Menu.style.overflow = "hidden";
    
    Menu.style.display = "none";
    Menu.style.position = "absolute";
    Menu.style.top = "30px";
    Menu.style.zIndex = "500";
    Menu.style.width = "200px";
    document.getElementById("container").appendChild(Menu);
}

function HeaderMenuMainNew(Link, Text)
{
    var Menu = document.getElementById("OMMenu");
    var Item = document.createElement("a");
    if (Text)
    {
        Item.style.color = "white";
        Item.style.fontSize = "11px";
        Item.href = Link;
        Text = (IsPage(Link.replace("Main#", "")) ? "<b>" + Text + "</b>" : Text);
        Item.innerHTML = "- " + Text;
        Menu.appendChild(Item);
        Menu.appendChild(document.createElement("br"));
    }
    else
    {
        var Sep = document.createElement("div");
        Sep.style.borderTop = "1px solid #DEEFFF";
        Sep.style.margin = "5px 2px 5px 2px";
        Sep.style.fontSize = "0px";
        Sep.innerHTML = "&nbsp;";
        Menu.appendChild(Sep);
    }
}

function HeaderMenuNew(Link, Text, FontSize)
{
    var Container = HeaderMenuGetContainer();
    var ContainerItem = document.createElement("li");
    var Item = document.createElement("a");
    if (FontSize) Item.style.fontSize = FontSize;
    Item.href = Link;
    Text = (IsPage(Link.replace("Main#", "")) ? "<b>" + Text + "</b>" : Text);
    Item.innerHTML = Text;
    
    ContainerItem.appendChild(Item);
    ContainerItem.appendChild(document.createTextNode("\u00a0|\u00a0"));
    Container.appendChild(ContainerItem);
}

function HeaderMenuClear()
{
    var Container = HeaderMenuGetContainer();
    var Lis = Container.getElementsByTagName("li");
    for (i = 1; i < Lis.length; ++i)
    {
        var Li = Lis[i];
        Li.style.display = "none";
    }
}

function HeaderMenuFix()
{
    var Container = HeaderMenuGetContainer();
    var Lis = Container.getElementsByTagName("li");
    for (i = 1; i < Lis.length; ++i)
    {
        var Li = Lis[i];
        var Link = Li.getElementsByTagName("a")[0];
        var Fix = Link.innerHTML.replace(/P.gina de (.*?)/i, "$1");
        Link.innerHTML = StringUpperFirst(Fix);
        
        if (Link.href.match(/Scrapbook/i))
            Link.href = Link.href.replace("Main#", "");
            
        if (i == (Lis.length - 1))
        {
            Li.appendChild(document.createTextNode("\u00a0|\u00a0"));
        }
    }
}
// #endregion

// #region TOOLTIP
function TooltipCreate(Id, Text)
{
    var Tooltip = document.getElementById(Id);
    if (Tooltip) return;
    Tooltip = document.createElement("div");
    Tooltip.id = Id;
    Tooltip.innerHTML = Text;
    
    // Style
    Tooltip.style.backgroundColor = "#FFFFDE";
    Tooltip.style.border = "1px solid #FFCF63";
    
    // Position
    Tooltip.style.position = "absolute";
    Tooltip.style.zIndex = "10000";
}
// #endregion

function ElementShow(Id, X, Y)
{
    var Element = document.getElementById(Id);
    Element.style.display = "";
    Element.style.left = X;
    Element.style.top = Y;
}
function ElementHide(Id)
{
    var Element = document.getElementById(Id);
    Element.style.display = "none";
}
function ElementHideFade(Id)
{
    var Element = document.getElementById(Id);
    if (Element.style.opacity == "") Element.style.opacity = "1";
    setTimeout("function a() { var el = document.getElementById('" + Id + "'); if (el.style.opacity > 0.03) { el.style.opacity = el.style.opacity - 0.02; setTimeout('a()', 150); } else { el.style.display = 'none'; } } a();", 1000);
}

// #region BOX
function InputBoxCreate(Id, Title, Content, Width, Height)
{
    var ContainerPanel = document.createElement("div");
    ContainerPanel.id = Id;
    ContainerPanel.style.width = Width ? Width : "300px";
    ContainerPanel.style.height = Height ? Height : "100px";
    ContainerPanel.style.zIndex = "10001";
    ContainerPanel.style.position = "absolute";
    ContainerPanel.style.display = "none";
    var Table = document.createElement("table");
    Table.className = "module";
    Table.style.width = "100%";
    Table.style.height= "100%";
    Table.cellSpacing = "0";
    Table.cellPadding = "0";
    
    // Header
    var ContainerInputTopRow = document.createElement("tr");
    var ContainerInputBorderTopLeft = document.createElement("td");
    var ContainerInputBorderTopRight = document.createElement("td");
    
    ContainerInputTopRow.style.height = "14px";
    ContainerInputBorderTopLeft.style.width = "99%";
    ContainerInputBorderTopRight.style.width= "8px";
    ContainerInputBorderTopLeft.style.margin = "5px 0 6px 10px";
    ContainerInputBorderTopLeft.style.lineHeight = "21px";
    ContainerInputBorderTopLeft.style.fontSize = "10px";
    ContainerInputBorderTopLeft.style.textAlign = "center";
    ContainerInputBorderTopLeft.className = "topl_g";
    ContainerInputBorderTopRight.className = "topr_g";
    ContainerInputBorderTopLeft.style.backgroundRepeat = "no-repeat";
    ContainerInputBorderTopRight.style.backgroundRepeat = "no-repeat";
    
    if (Title != "")
        Title = "<h2>" + Title + "</h2>";
    ContainerInputBorderTopLeft.innerHTML = Title;
    var Close = document.createElement("div");
    Close.style.cssFloat = "right";
    Close.style.position = "absolute";
    Close.style.top = "0";
    Close.style.right = "15";
    Close.style.fontSize = "11px";
    Close.style.color = "red";
    Close.style.cursor = "pointer";
    Close.innerHTML = " x ";
    Close.addEventListener("click",
        function ()
        {
            document.getElementById(Id).style.display = "none";
            try
            {
                document.getElementById("OMLayer").style.display = "none";
            }
            catch (ex) {}
        }, false);
    
    ContainerInputBorderTopLeft.appendChild(Close);
    
    ContainerInputTopRow.appendChild(ContainerInputBorderTopLeft);
    ContainerInputTopRow.appendChild(ContainerInputBorderTopRight);
    Table.appendChild(ContainerInputTopRow);
    
    // Content
    var ContainerInputRow = document.createElement("tr");
    var ContainerInputLeft = document.createElement("td");
    var ContainerInputRight = document.createElement("td");
    ContainerInputLeft.className = "boxmidlrg";
    ContainerInputRight.className = "boxmidr";
    ContainerInputLeft.style.paddingBottom = "5px";
    ContainerInputLeft.style.verticalAlign = "top";
    
    ContainerInputLeft.innerHTML = Content;
    
    ContainerInputRow.appendChild(ContainerInputLeft);
    ContainerInputRow.appendChild(ContainerInputRight);
    Table.appendChild(ContainerInputRow);
    
    // Footer
    var ContainerInputBottomRow = document.createElement("tr");
    var ContainerInputBorderBottomLeft = document.createElement("td");
    var ContainerInputBorderBottomRight = document.createElement("td");
    ContainerInputBorderBottomLeft.className = "botl";
    ContainerInputBorderBottomRight.className = "botr";
    ContainerInputBorderBottomLeft.style.backgroundRepeat = "no-repeat";
    ContainerInputBorderBottomRight.style.backgroundRepeat = "no-repeat";
    
    ContainerInputBottomRow.appendChild(ContainerInputBorderBottomLeft);
    ContainerInputBottomRow.appendChild(ContainerInputBorderBottomRight);
    Table.appendChild(ContainerInputBottomRow);
    
    ContainerPanel.appendChild(Table);
    
    return ContainerPanel;
}
// #endregion

// #region User Menu
function UserMenuCreate(Index, Uid, Width, Height)
{
    if (!Width) Width = 180;
    if (!Height) Height = 100;
    var Return = InputBoxCreate("UserMenu" + Index, "User Menu",
        "<div style='font-size: 11px'>" +
        "<a href='/Main#Profile?uid=" + Uid + "'><img alt='' src='http://static4.orkut.com/img/castro/p_profile.gif' /> " + LanguageGetUserMenuProfile() + "</a>" +
        "<br />" +
        "<a href='/Scrapbook?uid=" + Uid + "'><img alt='' src='http://static1.orkut.com/img/castro/p_scrap.gif' /> " + LanguageGetUserMenuScrapbook() + "</a>" +
        "<br />" +
        "<a href='/Main#AlbumList?uid=" + Uid + "'><img alt='' src='http://static4.orkut.com/img/castro/p_camera.gif' /> " + LanguageGetUserMenuAlbum() + "</a>" +
        "<br />" +
        "<a href='/Main#FavoriteVideos?uid=" + Uid + "'><img alt='' src='http://static3.orkut.com/img/castro/p_video.gif' /> " + LanguageGetUserMenuVideos() + "</a>" +
        "<br />" +
        "<a href='/Main#FriendAdd?uid=" + Uid + "'><img alt='' src='/img/castro/i_friend.png' /> " + LanguageGetUserMenuAddFriend() + "</a>" +
        "</div>",
        Width, Height);
    return Return;
}
// #endregion

// #region LAYERS
window.addEventListener("keydown",
    function (e)
    {
        if (e.keyCode == 27) // ESC
        {
            var Divs = document.getElementsByTagName("div");
            for (i in Divs)
            {
                var Div = Divs[i];
                if (Div.style.zIndex > 9999)
                    Div.style.display = "none";
            }
        }
    }, false);
function LayerShow(Opacity)
{
    var Layer = document.getElementById("OMLayer");
    if (!Layer)
    {
        if (!Opacity) Opacity = "0.7";
        Layer = document.createElement("div");
        Layer.innerHTML = "&nbsp;";
        Layer.id = "OMLayer";
        Layer.style.zIndex = "10000";
        Layer.style.opacity = Opacity;
        Layer.style.position = "fixed";
        Layer.style.top = "0";
        Layer.style.left = "0";
        Layer.style.width = "100%";
        Layer.style.height = "100%";
        Layer.style.backgroundColor = "black";
        document.body.appendChild(Layer);
    }
    else
    {
        Layer.style.opacity = Opacity;
        Layer.style.display = "";
    }
}
// #endregion

function OrkutLinksFix(Links)
{
    for (i in Links)
    {
        var Link = Links[i];
        var l = Link.getAttribute("onclick");
        if (l && l.match(/_linkInterstitial/i))
        {
            l = l.match(/\'([^\']*)\'/)[1];
            l = l.replace(/\\0?74wbr\\0?76/g, "");
            l = l.replace(/\\0?75/g, "=").replace(/\\0?46/g, "&").replace(/\\76/g, "+");
            Link.setAttribute("onclick", "");
            Link.href = l;
        }
    }
}

//////
// #region Request page updates
// Name-Id
function RequestBookmarkButton(Id)
{
    if (!GMGetValue("Bookmarks")) GMSetValue("Bookmarks", "");
    var IsBookmark = GMGetValue("Bookmarks").indexOf(Id + "]") != -1 ? true : false;
    var ImageBookmark = IsBookmark ? ImageBookmarkOn : ImageBookmarkOff;
    var EImageBookmark = document.createElement("img");
    EImageBookmark.align = "left";
    EImageBookmark.alt = "   ";
    EImageBookmark.src = ImageBookmark;
    EImageBookmark.style.cursor = "pointer";

    return EImageBookmark;
}
function RequestForumButton(Id)
{
    var Url = "/Main#CommTopics?cmm=" + Id;
    var ForumDiv = document.createElement("div");
    var Link = document.createElement("a");
    Link.style.cssFloat = "right";
    Link.style.fontSize = "10px";
    Link.href = Url;
    Link.innerHTML = "(" + LanguageGetButtonForum().toLowerCase() + ")";
    ForumDiv.style.cssFloat = "right";
    ForumDiv.style.fontSize = "10px";
    ForumDiv.appendChild(Link);
    
    return ForumDiv;
}
function RequestCmmListBookmarkAddEventListener(Length)
{
    for (i = 1; i < Length; ++i)
    {
        var Img = document.getElementById("Bookmark" + i);
        Img.addEventListener("click", BookmarkSet(), false);
    }
}
function BookmarkSet()
{
    return function ()
        {
            var El = this.parentNode.getElementsByTagName("a");
            El = (El.length >= 2) ? El[1] : El[0];
            var Id = El.href.match(/cmm=([^&]+|[^$]+)/i)[1];
            var Name = El;
            Name = Name.innerHTML.replace(/\n|<.*?>/g, "");
            var IsBookmark = GMGetValue("Bookmarks").indexOf(Id + "]") != -1 ? true : false;
            var ImageBookmark = IsBookmark ? ImageBookmarkOn : ImageBookmarkOff;
            
            if (this.src == ImageBookmarkOn)
            {
                var Values = GMGetValue("Bookmarks") || "";
                Values = Values.replace("[" + escape(Name) + "|" + (Id) + "]", "");
                GMSetValue("Bookmarks", Values);
                this.src = ImageBookmarkOff;
            }
            else
            {
                var Values = GMGetValue("Bookmarks") || "";
                GMSetValue("Bookmarks", Values + "[" + escape(Name) + "|" + (Id) + "]");
                this.src = ImageBookmarkOn;
            }
        };
}

// CmmName-Cmm-Name-Tid
function RequestBookmarkTopicButton(Id, Tid)
{
    if (!GMGetValue("BookmarksTopic")) GMSetValue("BookmarksTopic", "");
    var IsBookmark = GMGetValue("BookmarksTopic").indexOf(Tid + "]") != -1 ? true : false;
    var ImageBookmark = IsBookmark ? ImageBookmarkOn : ImageBookmarkOff;
    var EImageBookmark = document.createElement("img");
    EImageBookmark.align = "left";
    EImageBookmark.alt = "   ";
    EImageBookmark.src = ImageBookmark;
    EImageBookmark.style.cursor = "pointer";

    return EImageBookmark;
}
function RequestLastButton(Id, Tid)
{
    var Url = "/Main#CommMsgs?cmm=" + Id + "&tid=" + Tid + "&na=2&Scroll=-1";
    var ForumDiv = document.createElement("div");
    var Link = document.createElement("a");
    Link.style.cssFloat = "right";
    Link.style.fontSize = "10px";
    Link.href = Url;
    Link.innerHTML = "(" + LanguageGetButtonLast().toLowerCase() + ")";
    ForumDiv.style.fontSize = "10px";
    ForumDiv.style.cssFloat = "right";
    ForumDiv.appendChild(Link);
    
    return ForumDiv;
}
function RequestTopicListBookmarkAddEventListener(Length)
{
    for (i = 1; i < Length; ++i)
    {
        var Img = document.getElementById("Bookmark" + i);
        Img.addEventListener("click", BookmarkSetTopic(), false);
    }
}
function BookmarkSetTopic()
{
    return function ()
        {
            var CmmName;
            if (!IsPage("Communities"))
            {
                CmmName = document.getElementById("lbox").getElementsByTagName("a")[1];
                CmmName = CmmName.innerHTML.replace(/<.*?>/ig, "");
            }
            else
            {
                var sel = document.getElementById("OMCmmTopicSelect");
                CmmName = sel.options[sel.selectedIndex].innerHTML;
            }
            var Id = this.parentNode.getElementsByTagName("a")[1].href.match(/cmm=([^&]+|[^$]+)/i)[1];
            var Tid= this.parentNode.getElementsByTagName("a")[1].href.match(/tid=([^&]+|[^$]+)/i)[1];
            var Name = this.parentNode.getElementsByTagName("a")[1];
            Name = Name.innerHTML.replace(/\n|<.*?>/g, "");
            var IsBookmark = GMGetValue("BookmarksTopic").indexOf(Tid + "]") != -1 ? true : false;
            var ImageBookmark = IsBookmark ? ImageBookmarkOn : ImageBookmarkOff;

            if (this.src == ImageBookmarkOn)
            {
                var Values = GMGetValue("BookmarksTopic") || "";
                Values = Values.replace("[" + escape(CmmName) + "|" + Id + "|" + escape(Name) + "|" + Tid + "]", "");
                GMSetValue("BookmarksTopic", Values);
                this.src = ImageBookmarkOff;
            }
            else
            {
                var Values = GMGetValue("BookmarksTopic") || "";
                GMSetValue("BookmarksTopic", Values + "[" + escape(CmmName) + "|" + Id + "|" + escape(Name) + "|" + Tid + "]");
                this.src = ImageBookmarkOn;
            }
        };
}


function CommunityBookmarkButtonCreate()
{
    if (window.location.href.match(/cmm=([0-9]+)/))
    {
        var Container = document.getElementById("lbox").getElementsByTagName("a")[1];
        Container.parentNode.insertBefore(RequestBookmarkButton(CommunityId), Container.parentNode.firstChild);
        Container.parentNode.firstChild.addEventListener("click", BookmarkSet(), false);
    }
}

// #endregion
//////

// Cmms
try
{
    var CmmTopMainfix = true;
    if (IsPage(URLCmm))
    {
        var Container = document.getElementById("divBody0");
        var Cmm = document.createElement("div");
        Cmm.className = "listdark";
        Cmm.innerHTML = "<img alt='   ' align='left' src='" + ImageBookmarkOn + "' />" + "<a href='/Community?cmm=31907148'><_ O Melhor da Internet _></a>     <b><a href='/Main#CommTopics?cmm=31907148'>Fórum </a></b>    <b><a href='http://www.topicos.rg3.net/'>Todos os tópicos</a></b>";
        Container.insertBefore(Cmm, Container.firstChild);
    }
}
catch (ex) {}

// #region TABS
function BookmarkCommunityListCreate()
{
    var Communities = GMGetValue("Bookmarks").split("][");
    Communities = ArrayRemoveNullValues(Communities);
    Communities.sort();
    var Table = document.createElement("table");
    Table.className = "displaytable";
    Table.cellspacing = "0";

    var Color = true;
    for (i in Communities)
    {
        var Cmm = Communities[i];
        Cmm = Cmm.replace(/\[|\]/g, "");
        var CmmName = unescape(Cmm.split("|")[0]);
        var CmmId   = Cmm.split("|")[1];
        var Tr = document.createElement("tr");
        Tr.className = Color ? "listlight" : "listdark";
        var TdName = document.createElement("td");
        TdName.style.overflow = "hidden";
        var Link = document.createElement("a");
        Link.href = URLCmmMain + "?cmm=" + CmmId;
        Link.innerHTML = CmmName;
        
        var BookmarkButton = RequestBookmarkButton(CmmId);
        BookmarkButton.addEventListener("click", BookmarkSet(), false);
        TdName.appendChild(RequestForumButton(CmmId));
        TdName.appendChild(BookmarkButton);
        TdName.appendChild(Link);
        Tr.appendChild(TdName);
        Table.appendChild(Tr);
        
        Color = !Color;
    }

    return Table;
}
function BookmarkTopicListCreate()
{
    var Topics = GMGetValue("BookmarksTopic").split("][");
    Topics = ArrayRemoveNullValues(Topics);
    Topics.sort();
    var Table = document.createElement("table");
    Table.className = "displaytable";
    Table.cellspacing = "0";
    Table.id = "OMTopicList";

    return Table;
}
function BookmarkTopicListUpdate(CommunityId)
{
    var Topics = GMGetValue("BookmarksTopic").split("][");
    Topics = ArrayRemoveNullValues(Topics);
    Topics.sort();
    
    var Table = document.getElementById("OMTopicList");
    Table.innerHTML = "";
    
    var Color = true;
    for (i in Topics)
    {
        var Topic = Topics[i];
        Topic = Topic.replace(/\[|\]/g, "");
        var CmmName = unescape(Topic.split("|")[0]);
        var CmmId   = Topic.split("|")[1];
        if (CmmId != CommunityId) continue;
        var TopicName = unescape(Topic.split("|")[2]);
        var TopicId   = Topic.split("|")[3];
        var Tr = document.createElement("tr");
        Tr.className = Color ? "listlight" : "listdark";
        var TdName = document.createElement("td");
        TdName.style.overflow = "hidden";
        var Link = document.createElement("a");
        Link.href = URLMessages + "?cmm=" + CmmId + "&tid=" + TopicId;
        Link.innerHTML = TopicName;
        
        var BookmarkButton = RequestBookmarkTopicButton(CmmId, TopicId);
        BookmarkButton.addEventListener("click", BookmarkSetTopic(), false);
        TdName.appendChild(RequestLastButton(CmmId, TopicId));
        TdName.appendChild(BookmarkButton);
        TdName.appendChild(Link);
        Tr.appendChild(TdName);
        Table.appendChild(Tr);
        
        Color = !Color;
    }
}
function BookmarkTopicListSelectorCreate()
{
    var Topics = GMGetValue("BookmarksTopic").split("][");
    Topics = ArrayRemoveNullValues(Topics);
    Topics.sort();

    var Control = document.createElement("select");
    Control.id = "OMCmmTopicSelect";
    Control.addEventListener("change",
        function ()
        {
            BookmarkTopicListUpdate(this.value);
        }, false);
    
    var CmmList = new Array();
    for (i = 0; i < Topics.length; ++i)
    {
        var Topic = Topics[i];
        var CmmName = unescape(Topic.split("|")[0]).replace(/\[|\]/g, "");
        var CmmId = Topic.split("|")[1];
        if (CmmList.indexOf(CmmId) == -1)
        {
            var Option = document.createElement("option");
            Option.value = CmmId;
            Option.innerHTML = CmmName;
            Control.appendChild(Option);
            CmmList.push(CmmId);
        }
    }
    
    return Control;
}
// #endregion

// #region CONFIGURATION
function ConfigurationSave(URLToSave, ShowMessage)
{
    var p = URLToSave;

    // Language
    var Val = "";
    Val = p.match(/Language=([^&]*|[^$]*)/i); if (Val) Val = unescape(Val[1]); else Val = "";
    GMSetValue("Language", Val);
    Language = GMGetValue("Language").toLowerCase() || "english";
    
    // TextArea
    Val = ""; Val = p.match(/TextAreaTextBegin=([^&]*|[^$]*)/i); if (Val) Val = unescape(Val[1]); else Val = "";
    GMSetValue("TextAreaTextBegin", Val);
    Val = ""; Val = p.match(/TextAreaTextEnd=([^&]*|[^$]*)/i); if (Val) Val = unescape(Val[1]); else Val = "";
    GMSetValue("TextAreaTextEnd", Val);
    Val = ""; Val = p.match(/TextAreaTextHtmlBegin=([^&]*|[^$]*)/i); if (Val) Val = unescape(Val[1]); else Val = "";
    GMSetValue("TextAreaTextHtmlBegin", Val);
    Val = ""; Val = p.match(/TextAreaTextHtmlEnd=([^&]*|[^$]*)/i); if (Val) Val = unescape(Val[1]); else Val = "";
    GMSetValue("TextAreaTextHtmlEnd", Val);
    Val = ""; Val = p.match(/TextAreaScrapTextBegin=([^&]*|[^$]*)/i); if (Val) Val = unescape(Val[1]); else Val = "";
    GMSetValue("TextAreaScrapTextBegin", Val);
    Val = ""; Val = p.match(/TextAreaScrapTextEnd=([^&]*|[^$]*)/i); if (Val) Val = unescape(Val[1]); else Val = "";
    GMSetValue("TextAreaScrapTextEnd", Val);
    
    // Quote
    Val = ""; Val = p.match(/QuoteHeaderText=([^&]*|[^$]*)/i); if (Val) Val = unescape(Val[1]); else Val = "";
    GMSetValue("QuoteHeaderText", Val);
    Val = ""; Val = p.match(/QuoteBegin=([^&]*|[^$]*)/i); if (Val) Val = unescape(Val[1]); else Val = "";
    GMSetValue("QuoteBegin", Val);
    Val = ""; Val = p.match(/QuoteEnd=([^&]*|[^$]*)/i); if (Val) Val = unescape(Val[1]); else Val = "";
    GMSetValue("QuoteEnd", Val);
    Val = ""; Val = p.match(/QuoteHeaderBegin=([^&]*|[^$]*)/i); if (Val) Val = unescape(Val[1]); else Val = "";
    GMSetValue("QuoteHeaderBegin", Val);
    Val = ""; Val = p.match(/QuoteHeaderEnd=([^&]*|[^$]*)/i); if (Val) Val = unescape(Val[1]); else Val = "";
    GMSetValue("QuoteHeaderEnd", Val);
    Val = ""; Val = p.match(/QuoteHtmlBegin=([^&]*|[^$]*)/i); if (Val) Val = unescape(Val[1]); else Val = "";
    GMSetValue("QuoteHtmlBegin", Val);
    Val = ""; Val = p.match(/QuoteHtmlEnd=([^&]*|[^$]*)/i); if (Val) Val = unescape(Val[1]); else Val = "";
    GMSetValue("QuoteHtmlEnd", Val);
    Val = ""; Val = p.match(/QuoteHeaderHtmlBegin=([^&]*|[^$]*)/i); if (Val) Val = unescape(Val[1]); else Val = "";
    GMSetValue("QuoteHeaderHtmlBegin", Val);
    Val = ""; Val = p.match(/QuoteHeaderHtmlEnd=([^&]*|[^$]*)/i); if (Val) Val = unescape(Val[1]); else Val = "";
    GMSetValue("QuoteHeaderHtmlEnd", Val);
    
    // Signature
    Val = ""; Val = p.match(/Signature=([^&]*|[^$]*)/i); if (Val) Val = unescape(Val[1]); else Val = "";
    GMSetValue("Signature", Val);
    Val = ""; Val = p.match(/SignatureHtml=([^&]*|[^$]*)/i); if (Val) Val = unescape(Val[1]); else Val = "";
    GMSetValue("SignatureHtml", Val);
    Val = ""; Val = p.match(/SignatureScrap=([^&]*|[^$]*)/i); if (Val) Val = unescape(Val[1]); else Val = "";
    GMSetValue("SignatureScrap", Val);
    
    // Moderation
    Val = ""; Val = p.match(/ModerationText=([^&]*|[^$]*)/i); if (Val) Val = unescape(Val[1]); else Val = "";
    GMSetValue("ModerationText", Val);
    Val = ""; Val = p.match(/ModerationHtmlText=([^&]*|[^$]*)/i); if (Val) Val = unescape(Val[1]); else Val = "";
    GMSetValue("ModerationHtmlText", Val);
    Val = ""; Val = p.match(/ModerationMemberText=([^&]*|[^$]*)/i); if (Val) Val = unescape(Val[1]); else Val = "";
    GMSetValue("ModerationMemberText", Val);
    Val = ""; Val = p.match(/ModerationMemberHtmlText=([^&]*|[^$]*)/i); if (Val) Val = unescape(Val[1]); else Val = "";
    GMSetValue("ModerationMemberHtmlText", Val);

    // Update Settings
    Val = ""; Val = p.match(/UpdateWarningType=([^&]*|[^$]*)/i); if (Val) Val = unescape(Val[1]); else Val = "";
    GMSetValue("UpdateWarningType", Val);
    
    if (ShowMessage)
        alert(LanguageGetConfigurationSaveSuccess());
    
    return true;
}
function ConfigurationMenuSave(URLToSave, ShowMessage)
{
    // Header Menus
    var Menus = URLToSave.match(/([^$]+)\&\&/i);
    if (!Menus)
    {
        GMSetValue("HeaderMenu", "");
    }
    else
    {
        Menus = Menus[1];
        Menus = Menus.split("?");
        var AddMenu = "";
        for (i in Menus)
        {
            var Menu = Menus[i];
            AddMenu += "[" + unescape((Menu.split("&"))[0]) + "|" + unescape((Menu.split("&"))[1]) + "]";
        }
        GMSetValue("HeaderMenu", AddMenu);
    }
    
    // Dowpdown Menu
    var Menus = URLToSave.match(/\&\&([^$]+)/i);
    if (!Menus)
    {
        GMSetValue("DropdownMenu", "");
    }
    else
    {
        Menus = Menus[1];
        Menus = Menus.split("?");
        var AddMenu = "";
        for (i in Menus)
        {
            var Menu = Menus[i];
            AddMenu += "[" + unescape((Menu.split("&"))[0]) + "|" + unescape((Menu.split("&"))[1]) + "]";
        }
        GMSetValue("DropdownMenu", AddMenu);
    }
    
    if (ShowMessage)
        alert(LanguageGetConfigurationSaveSuccess());
        
    return true;
}
// #endregion
// #endregion // SCRIPT FUNCTIONS

// #region ========== OTHER ==========
try /** Home Video Gadget button **/
{
    if (IsPage("Home"))
    {
        var Container = GetElementsByClassName("div", "userratings");
        Container = Container[0];
        
        var Ins = Container.getElementsByTagName("a");
        Ins = Ins[3];
        var Videos = GetProfileGadgetsButton("videos", "/Main#FavoriteVideos");
        
        Container.insertBefore(Videos, Ins);
        Container = null;
        Videos = null;
        Ins = null;
    }
}
catch (ex) { }
try /** Scroll after Reply **/
{
    var Scroll = GetParam("Scroll");
    if (Scroll != false)
    {
        window.addEventListener("load",
            function ()
            {
                var Win = document.getElementById("orkutFrame");
                if (!Win) Win = this.parent.document.getElementById("orkutFrame");
                if (!Win) return;
                Win = Win.contentWindow;
                if (Scroll == -1) Scroll = Win.scrollMaxY;
                Win.scrollBy(0, Scroll);
                Win = null;
            }, 100);
    }
}
catch (ex) { }
try /** Last page after Reply **/
{
    if (GetParam("na") == "4" && GetParam("nid") == false)
    {
        var ControlNavigation = document.getElementById("mboxfull");
        if (!ControlNavigation) return;
        ControlNavigation = ControlNavigation.getElementsByTagName("table")[0];
        ControlNavigation = ControlNavigation.getElementsByTagName("tr")[1];
        ControlNavigation = ControlNavigation.getElementsByTagName("span")[0];

        var Links = ControlNavigation.getElementsByTagName("a");
        
        if (Links.length >= 2)
            window.location.href = URLRoot + "CommMsgs?cmm=" + CommunityId + "&tid=" + CommunityTopicId + "&na=2&Scroll=-1";
        else
        {
            if (GetParam("Scroll") == false)
            {
                window.location.href += "&Scroll=-1";
            }
        }
        ControlNavigation = null;
    }
}
catch (ex) { }
// #endregion

// #region ========== SHORTCUTS ==========
try
{
    var Shortcut =
        function (e)
        {
            /** Global **/
            // Scrap
            if (e.keyCode == KeyZ && e.shiftKey && e.ctrlKey)
            {
                window.location.href = URLScrap + "?cache=" + ((new Date()).getTime());
                return;
            }
            // Profile
            if (e.keyCode == KeyX && e.shiftKey && e.ctrlKey)
            {
                window.location.href = URLHome + "?cache=" + ((new Date()).getTime());
                return;
            }
            // Communities
            if (e.keyCode == KeyC && e.shiftKey && e.ctrlKey)
            {
                window.location.href = URLCmm + "?cache=" + ((new Date()).getTime());
                return;
            }
            
            /** Communities **/
            if (IsPage(URLCmm))
            {
                if (!e.altKey) return;
                var Trs = document.getElementById("subPage0");
                Trs = Trs.getElementsByTagName("table")[0];
                Trs = Trs.getElementsByTagName("tr");
                
                var Url = new Array();
                for (i = 0; i < 10; ++i)
                {
                    Url[i] = "javascript:;";
                }
                var i = 0;
                for (var index in Trs)
                {
                    var Tr = Trs[index];
                    var a = Tr.getElementsByTagName("a");
                    if (a.length >= 2) a = a[1];
                    else continue;
                    Url[i] = a.href.replace("/Main#", "/");
                    ++i;
                    if (i >= 10) break;
                }
                switch (e.keyCode)
                {
                    case Key1:
                        window.location.href = Url[0];
                        return;
                    case Key2:
                        window.location.href = Url[1];
                        return;
                    case Key3:
                        window.location.href = Url[2];
                        return;
                    case Key4:
                        window.location.href = Url[3];
                        return;
                    case Key5:
                        window.location.href = Url[4];
                        return;
                    case Key6:
                        window.location.href = Url[5];
                        return;
                    case Key7:
                        window.location.href = Url[6];
                        return;
                    case Key8:
                        window.location.href = Url[7];
                        return;
                    case Key9:
                        window.location.href = Url[8];
                        return;
                    case Key0:
                        window.location.href = Url[9];
                        return;
                }
            }
            
            /** Main topics **/
            if (IsPage(URLCmmMain))
            {
                if (!e.altKey) return;
                var TbIndex = document.getElementById("news-bar") ? 3 : 2;
                var Tb = document.getElementById("mbox");
                Tb = (Tb.getElementsByTagName("table")[TbIndex]).getElementsByTagName("table")[0];
                var Trs = Tb.getElementsByTagName("tr");
                
                var Url = new Array();
                for (i = 0; i < 10; ++i)
                {
                    Url[i] = "javascript:;";
                }
                var i = 0;
                for (var index in Trs)
                {
                    var Tr = Trs[index];
                    var a = Tr.getElementsByTagName("a");
                    if (a.length >= 2) a = a[1];
                    else continue;
                    Url[i] = a.href.replace("/Main#", "/");
                    ++i;
                    if (i >= 10) break;
                }
                switch (e.keyCode)
                {
                    case Key1:
                        window.location.href = Url[0];
                        return;
                    case Key2:
                        window.location.href = Url[1];
                        return;
                    case Key3:
                        window.location.href = Url[2];
                        return;
                    case Key4:
                        window.location.href = Url[3];
                        return;
                    case Key5:
                        window.location.href = Url[4];
                        return;
                    case Key6:
                        window.location.href = Url[5];
                        return;
                    case Key7:
                        window.location.href = Url[6];
                        return;
                    case Key8:
                        window.location.href = Url[7];
                        return;
                    case Key9:
                        window.location.href = Url[8];
                        return;
                    case Key0:
                        window.location.href = Url[9];
                        return;
                }
            }
            
            /** Topics **/
            if (IsPage(URLCmmTopics))
            {
                if (!e.altKey) return;
                var Tb = document.getElementById("mboxfull");
                Tb = (Tb.getElementsByTagName("table")[0]).getElementsByTagName("table")[0];
                var Trs = Tb.getElementsByTagName("tr");
                
                var Url = new Array();
                for (i = 0; i < 10; ++i)
                {
                    Url[i] = "javascript:;";
                }
                var i = 0;
                for (var index in Trs)
                {
                    var Tr = Trs[index];
                    var a = Tr.getElementsByTagName("a");
                    if (a.length >= 2) a = a[1];
                    else continue;
                    Url[i] = a.href.replace("/Main#", "/");
                    ++i;
                    if (i >= 10) break;
                }
                switch (e.keyCode)
                {
                    case Key1:
                        window.location.href = Url[0];
                        return;
                    case Key2:
                        window.location.href = Url[1];
                        return;
                    case Key3:
                        window.location.href = Url[2];
                        return;
                    case Key4:
                        window.location.href = Url[3];
                        return;
                    case Key5:
                        window.location.href = Url[4];
                        return;
                    case Key6:
                        window.location.href = Url[5];
                        return;
                    case Key7:
                        window.location.href = Url[6];
                        return;
                    case Key8:
                        window.location.href = Url[7];
                        return;
                    case Key9:
                        window.location.href = Url[8];
                        return;
                    case Key0:
                        window.location.href = Url[9];
                        return;
                }
            }
            
            /** Topic Navigate **/
            if (IsPage(URLMessages))
            {
                if (e.shiftKey) return;
                var ControlNavigation = document.getElementById("mboxfull");
                if (!ControlNavigation) return;
                ControlNavigation = ControlNavigation.getElementsByTagName("table")[0];
                ControlNavigation = ControlNavigation.getElementsByTagName("tr")[1];
                ControlNavigation = ControlNavigation.getElementsByTagName("span")[0];

                var NavFirst = "javascript:;";
                var NavPrev  = "javascript:;";
                var NavForw  = "javascript:;";
                var NavLast  = "javascript:;";
                
                var Links = ControlNavigation.getElementsByTagName("a");
                if (Links.length == 4)
                {
                    NavFirst = Links[0].href;
                    NavPrev = Links[1].href;
                    NavForw = Links[2].href;
                    NavLast = Links[3].href;
                }
                else if (ControlNavigation.firstChild.nextSibling.tagName.toLowerCase() != "span")
                {
                    NavFirst = Links[0].href;
                    NavPrev = Links[1].href;
                }
                else
                {
                    NavForw = Links[0].href;
                    NavLast = Links[1].href;
                }
                
                if (e.ctrlKey)
                {
                    switch (e.keyCode)
                    {
                        case KeyLeft:
                            window.location.href = NavPrev;
                            return;
                        case KeyRight:
                            window.location.href = NavForw;
                            return;
                        case KeyUp:
                            window.location.href = NavFirst;
                            return;
                        case KeyDown:
                            window.location.href = NavLast;
                            return;
                    }
                }
            }
        };
    window.addEventListener("keydown", Shortcut, false);
}
catch (ex) { }
// #endregion // Shortcuts

// #region ========== QUOTE ==========
// #region Topic and Replies - Page
try
{
    if (IsPage(URLMessages))
    {
        // #region Message Time
        /// <summary>
        /// QuoteATime is an Array with all times of the posts
        /// </summary>
        var QuoteATimes = document.getElementById("mboxfull").getElementsByTagName("div");
        var QuoteATime = new Array();
        c = 0;
        var Container = new Array(); //used for quote button
        for (i = 0; i < QuoteATimes.length; ++i)
        {
            var QuoteTime = QuoteATimes[i];
            if (QuoteTime.className == "rfdte" && QuoteTime.parentNode.className == "listitem")
            {
                var time = QuoteTime.innerHTML;
                time = time.replace(/<.*>/gi, "");
                time = time.replace(RegexTrim, "");
                time = time.replace(/\n/gi, " ");
                QuoteATime[c] = time;
                Container[c] = QuoteTime;
                ++c;
            }
        }
        // #endregion
        
        // #region Message Text
        /// <summary>
        /// QuoteAText is an Array with all texts of the posts
        /// </summary>
        var QuoteATexts = document.getElementById("mboxfull").getElementsByTagName("div");
        var QuoteAText = new Array();
        c = 0;
        for (i in QuoteATexts)
        {
            var QuoteText = QuoteATexts[i];
            if (QuoteText.className == "para" &&
                QuoteText.parentNode &&
                QuoteText.parentNode.className == "listitem")
            {
                var text = QuoteText.innerHTML;
                text = text.replace(RegexTrim, "");
                if (text.length > 1500) text = text.substr(0, 1500) + "...";
                else text = text.substr(0, 1500);
                QuoteAText[c] = text.replace(/&nbsp;/g, " ");
                ++c;
            }
        }
        // #endregion

        // #region Message Username
        /// <summary>
        /// QuoteAUsername is an Array with all usernames of the posts
        /// </summary>
        var QuoteAUsernames = document.getElementById("mboxfull").getElementsByTagName("div");
        var QuoteAUsername = new Array();
        c = 0;
        for (i in QuoteAUsernames)
        {
            var QuoteUsername = QuoteAUsernames[i];
            QuoteUsername = QuoteUsername.getElementsByTagName("h3")[0];
            if (!QuoteUsername) continue;
            var QuoteUsername2 = QuoteUsername.getElementsByTagName("a")[0];
            QuoteUsername = (QuoteUsername2 ? QuoteUsername2 : QuoteUsername);
            var username = QuoteUsername.innerHTML;
            username = username.replace(/<.*?>/gi, "");
            username = username.replace(RegexTrim, "");
            username = username.replace(/\n/gi, "");
            QuoteAUsername[c] = username;
            ++c;
        }
        QuoteAUsername = ArrayRemoveNullValues(QuoteAUsername);
        // #endregion

        // #region QUOTE BUTTON
        for (i = 0; i < Container.length; ++i)
        {
            var Placer = Container[i];
            var ButtonContainer = document.createElement("span");
            var CurrentUrlToQuote = document.createElement("div");
            
            var CurrentQuoteUser = escape(QuoteAUsername[i]);
            var CurrentQuoteText = escape(QuoteATime[i] + "TIME" + QuoteAText[i]);
            var CurrentQuote = document.createElement("div");
            CurrentQuote.style.display = "none";
            CurrentQuote.innerHTML = "[" + CurrentQuoteUser + "|" + CurrentQuoteText + "]";

           
            var ButtonQuote = ButtonCreate("Replica",
                function ()
                {
                    var V = this.firstChild.firstChild.innerHTML.replace(/\&amp;/g, "&");
                    GMSetValue("Quote", V);
                    window.location.href = URLPost + "cmm=" + CommunityId + "&tid=" + CommunityTopicId + "&quote=true";
                }, "click");
            Placer.appendChild(ButtonQuote);
            Placer.lastChild.firstChild.insertBefore(CurrentQuote, Placer.lastChild.firstChild.firstChild);
        }
        
        QuoteATimes = null;
        QuoteATime = null;
        QuoteAUsernames = null;
        QuoteAUsername = null;
        QuoteUsername = null;
        QuoteUsername2 = null;
        QuoteATexts = null;
        Placer = null;
        QuoteAText = null;
        Container = null;
    }
}
catch (ex) {}
// #endregion

// #endregion

// #region New Post Messages - Page
try
{
    if (IsPage(URLPost))
    {
        window.addEventListener("keydown",
            function (e)
            {
                if (e.keyCode == 13 && e.altKey)
                {
                    QuickReplyThis("messageBody");
                }
            }, false);
    }
    
    if (IsPage(URLPost) && GMGetValue("Quote") && GMGetValue("Quote") != "")
    {
        var Quote = GMGetValue("Quote");
        Quote = Quote.replace(/\[|\]/g, "");
        GMSetValue("Quote", "");
        var User = unescape((Quote.split("|"))[0]);
        var Quote = unescape((Quote.split("|"))[1]);
        var TextBox = document.getElementById("messageBody");
        
        var Time = Quote.substring(0, Quote.indexOf("TIME"));
        var Text = Quote.substring(Quote.indexOf("TIME")+4, Quote.length);
        Text = (IsHtmlEnabled() ? Text.replace(/<br.*?>/ig, "<br />\n") : Text.replace(/<br.*?>/ig, "\n"));
        Text = (IsHtmlEnabled() ? Text : Text.replace(/<.*?>/ig, ""));

        Time = QuoteHeaderText.replace("$TIME$", Time);
        Time = Time.replace("$USER$", User);
        if (IsHtmlEnabled())
        {
            Time = QuoteHeaderHtmlBegin + Time + QuoteHeaderHtmlEnd + "\n";
            Text = QuoteHtmlBegin + Text + QuoteHtmlEnd;
        }
        else
        {
            Time = QuoteHeaderBegin + Time + QuoteHeaderEnd + "\n";
            Text = QuoteBegin + Text + QuoteEnd;
        }
        if (ShowHeader == false) Time = "";
        if (TextBox.value.indexOf(Time + Text) == -1)
        {
            if (IsHtmlEnabled())
                TextBox.value = Time + Text + "\n";
            else TextBox.value = Time + Text + "\n\n";
        }
    
        Quote = null;
        User = null;
        TextBox = null;
        Time = null;
        Text = null;
    
    }
}
catch (ex) {}
// #endregion
// #endregion // Quote

// #region ========== Quick Reply Control ==========
try
{
    if (IsPage(URLCmmMain))
    {
        var List = document.getElementById("list_facts");
        var QuickReplyControl = document.createElement("div");
        var P1 = document.createElement("p");
        var P2 = document.createElement("p");
        QuickReplyControl.className = "listdark";
        P1.className = "listfl";
        P2.className = "listp";
        
        var QuickReplyFunctionEnable =
            function ()
            {
                if (!IsQuickReply())
                {
                    var Index = "QuickReply" + CommunityId;
                    GMSetValue(Index, CommunityId);
                    window.location.reload();
                }
            };
        var QuickReplyFunctionDisable =
            function ()
            {
                if (IsQuickReply())
                {
                    var Index = "QuickReply" + CommunityId;
                    GMSetValue(Index, "");
                    window.location.reload();
                }
            };
        var QuickReplyButtonEnable = ButtonCreate(LanguageGetQuickReplyButtonEnable(), QuickReplyFunctionEnable, "click", LanguageGetQuickReplyCurrentDisabled());
        var QuickReplyButtonDisable = ButtonCreate(LanguageGetQuickReplyButtonDisable(), QuickReplyFunctionDisable, "click", LanguageGetQuickReplyCurrentEnabled());
        P1.innerHTML = LanguageGetQuickReplyFormLabel();
        P2.appendChild((IsQuickReply() ? QuickReplyButtonDisable : QuickReplyButtonEnable));
        
        QuickReplyControl.appendChild(P1);
        QuickReplyControl.appendChild(P2);
        List.appendChild(QuickReplyControl);
    
        List = null;
        QuickReplyControl = null;
        P1 = null;
        P2 = null;
        QuickReplyFunctionEnable = null;
        QuickReplyFunctionDisable = null;
    
    }
}
catch (ex) {}
// #endregion

// #region ========== Moderation Control ==========
// Topics
try
{
    if (IsPage(URLMessages))
    {
        var Links = document.getElementById("mboxfull").getElementsByTagName("a");
        var IsMod = false;
        for (i in Links)
        {
            var Link = Links[i];
            if (Link.href.match(URLMemberManager))
            {
                IsMod = true;
                break;
            }
        }
        if (IsMod)
        {
            var Container = document.getElementById("mboxfull").getElementsByTagName("table")[0].getElementsByTagName("td")[0];
            var ButtonModText = GMGetValue(("Mod" + CommunityId)) == CommunityTopicId ? LanguageGetModerationMarkedMod() : LanguageGetModerationSetMod();
            var ButtonModSet = ButtonCreate(ButtonModText,
                function ()
                {
                    GMSetValue(("Mod" + CommunityId), CommunityTopicId);
                    this.getElementsByTagName("a")[0].innerHTML = LanguageGetModerationMarkedMod();
                }, "click");
            var FunctionMod =
                function ()
                {
                    var Table = document.getElementById("mboxfull").getElementsByTagName("table")[0];
                    var DivList = Table.getElementsByTagName("tr")[1].getElementsByTagName("div")[2];
                    DivList = DivList.getElementsByTagName("h3");
                    DivList = DivList[DivList.length-1].nextSibling.nextSibling;

                    var Title = Table.getElementsByTagName("td")[0].getElementsByTagName("h1")[0];
                    Title = Title.innerHTML;

                    var User = Table.getElementsByTagName("h3")[0].getElementsByTagName("a")[0];
                    var UserLink = User.href;
                    User = User.innerHTML;
                    UserLink = UserLink.replace(/http:\/\/[^\/]+/, "");
                    UserLink = UserLink.replace("Main#", "");

                    var Message = DivList.innerHTML.replace(/^\n*|\n*$/gi, "");
                    Message = (IsHtmlEnabled() ? Message : Message.replace(/<.*?>/ig, ""));
                    if (Message.length > 50) Message = Message.substr(0, 50) + "...";
                    else Message = Message.substr(0, 50);
                    
                    var url = URLPost + "cmm=" + CommunityId + "&tid=" + GMGetValue(("Mod" + CommunityId)) + "&Type=Topic";
                    GMSetValue("Moderation", "[" + escape(Title) + "|" + escape(User) +
                        "|" + escape(UserLink) + "|" + escape(Message) + "]");
                    window.open(url);
                };
            var ButtonMod = ButtonCreate(LanguageGetModerationMod(), FunctionMod, "click");
            ButtonModSet.style.cssFloat = "right";
            ButtonMod.style.cssFloat = "right";
            Container.insertBefore(ButtonModSet, Container.firstChild);
            if (GMGetValue(("Mod" + CommunityId)).length > 0)
                Container.insertBefore(ButtonMod, Container.firstChild);
        }
    
        Links = null;
        Container = null;
        ButtonMod = null;
        ButtonModSet = null;
        ButtonModText = null;
        FunctionMod = null;
    }
}
catch (ex) {}

// Members
try
{
    if (IsPage(URLMemberManager))
    {
        var Table = document.getElementById("mboxfull").getElementsByTagName("table")[0];
        var User = Table.getElementsByTagName("tr")[1].getElementsByTagName("a")[1];
        var FunctionMod =
            function ()
            {
                var UserName = User.innerHTML.replace(/\n/g, "");
                var UserLink = User.href.replace(/http:\/\/[^\/]+/, "");
                UserLink = UserLink.replace("Main#", "");
                var Url = URLPost + "cmm=" + CommunityId + "&tid=" + GMGetValue(("Mod" + CommunityId)) + "&Type=Member";
                GMSetValue("Moderation", "[" + "" + "|" + escape(UserName) +
                        "|" + escape(UserLink) + "|" + "" + "]");
                window.open(Url);
            };
            
        var ButtonMod = ButtonCreate(LanguageGetModerationMod(), FunctionMod, "click");
        User.parentNode.appendChild(ButtonMod);
    
        Table = null;
        User = null;
        FunctionMod = null;
        ButtonMod = null;
    
    }
}
catch (ex) {}

// Message build
try
{
    if (IsPage(URLPost) && window.location.href.indexOf("/Main#") == -1)
    {
        var Post = document.getElementById("messageBody");
        if (!GMGetValue("Moderation") || GMGetValue("Moderation") == "") throw new Exception();
        var Mod = GMGetValue("Moderation");
        Mod = Mod.replace(/\[|\]/g, "");
        GMSetValue("Moderation", "");

        var p = window.location.href.replace(/[^&]+/, "");
        var Type = unescape(p.match(/.*?&Type=([^&]+).*/i)[1]);
        var Title = unescape((Mod.split("|"))[0]);
        var User = unescape((Mod.split("|"))[1]);
        var UserLink = unescape((Mod.split("|"))[2]);
        var Message = unescape((Mod.split("|"))[3]);
        if (Type == "Topic")
            Mod = IsHtmlEnabled() ? ModerationHtmlText : ModerationText;
        else
            Mod = IsHtmlEnabled() ? ModerationMemberHtmlText : ModerationMemberText;
        Mod = Mod.replace("$TITLE$", Title);
        Mod = Mod.replace("$USER$", User);
        Mod = Mod.replace("$USERLINK$", UserLink);
        Mod = Mod.replace("$MESSAGE$", Message);

        function AddMod(Post, Mod)
        {
            if (Post) Post.value = Mod;
        }
        AddMod(Post, Mod);
    }
}
catch (ex) {}
// #endregion // Moderation Control

// #region ========== Chat ==========
// #region Add Chat
try
{
    if (IsPage(URLMessages))
    {
        var Container = document.getElementById("mboxfull").getElementsByTagName("table")[0].getElementsByTagName("td")[0];
        var ButtonChatAddText = GMGetValue(("Chat" + CommunityId)) == CommunityTopicId ? LanguageGetChatRemove() : LanguageGetChatSet();
        var ButtonChatSet = ButtonCreate(ButtonChatAddText,
            function ()
            {
                if (GMGetValue(("Chat" + CommunityId)) != CommunityTopicId)
                {
                    GMSetValue(("Chat" + CommunityId), CommunityTopicId);
                    this.getElementsByTagName("a")[0].innerHTML = LanguageGetChatRemove();
                }
                else
                {
                    GMSetValue(("Chat" + CommunityId), "");
                    this.getElementsByTagName("a")[0].innerHTML = LanguageGetChatSet();
                }
                window.location.reload();
            }, "click");
        ButtonChatSet.style.cssFloat = "right";
        Container.insertBefore(ButtonChatSet, Container.firstChild);
    }
}
catch (ex) {}
// #endregion

// #region Chat
try
{
    if (GMGetValue(("Chat" + CommunityId)))
    {
        var ChatTopicId = GMGetValue(("Chat" + CommunityId));
        var Container = document.getElementById("lbox");
        var ContainerPanel = BuildChatBox();
        
        Container.appendChild(ContainerPanel);
        
        ChatGetMessages();
        setInterval(ChatGetMessages, 1000 * 15);
    }
}
catch (ex) {}
// #endregion
// #endregion // Chat

// #region ========== TextAreas Setup ==========
try
{
    // Kill Main# - Scrapbook
    var PageLinks = document.getElementsByTagName("a");
    for (i in PageLinks)
    {
        var Link = PageLinks[i];
        Link.href = Link.href.replace(/Main#Scrapbook/i, "Scrapbook");
    }

    if (!window.location.href.match(/Edit.*?aspx/i) &&
        !IsPage("/CommunityEdit"))
    {
        var IsAjax = true;
        // Scrap fixer (NO-AJAX)
        try
        {
            var Scrap = document.getElementById("scrapText");
            if (Scrap) IsAjax = false;
            Scrap.id = "scrapText2";
            Scrap.style.display = "none";
            var ScrapNew = document.createElement("textarea");
            ScrapNew.id = "scrapText";
            ScrapNew.cols = "83";
            ScrapNew.rows = "5";
            ScrapNew.value = "";
            ScrapNew.style.width = "99%";
            Scrap.parentNode.insertBefore(ScrapNew, Scrap);
            
            var Rep;
            var i = 1;
            while ((Rep = document.getElementById("reply_link_" + i)))
            {
                Rep.setAttribute("onclick", "document.getElementById('scrap_" + i + "').style.display = ''; var st = document.getElementById('scrapText_" + i + "'); st.focus(); st.selectionStart = st.selectionEnd = st.value.length - " + FocusLength + ";");
                ++i;
            }
            
            var Links = document.getElementsByTagName("a");
            for (i in Links)
            {
                var Link = Links[i];
                if (Link.getAttribute("onclick") && Link.getAttribute("onclick").indexOf("_quickReplyCloseAll()") != -1)
                {
                    Link.setAttribute("onclick", "_quickReplyCloseAll()");
                }
            }
        }
        catch (ex) { }
    
        // Scrap fixer (AJAX)
        try
        {
            if (!IsAjax) throw new Exception();
            function ScrapTry()
            {
                if (!window.location.href.match(/Scrapbook/i)) return;
                var Container = document.getElementById("gwtPagePanel");
                if (Container.innerHTML.indexOf("bottomRight") == -1) return;
                var TextAreas = Container.getElementsByTagName("textarea");
                var TextArea = TextAreas[0];
                if (!TextArea) return;
                TextArea.id = "scrapText";
                SetTextArea(TextArea, true);
                
                // Remove :: Write Scrap
                var Remove = TextArea.previousSibling;
                if (Remove.tagName.toLowerCase() != "div") Remove = Remove.previousSibling;
                Remove.parentNode.removeChild(Remove);
                
                ToolbarCreate("scrapText", false, 1);
                TextArea.focus();

                function ScrapReplyTry()
                {
                    var Container = GetElementsByClassName("div", "gorkut-ScrapbookContent");
                    if (Container.length <= 0) return;
                    Container = Container[0];
                    var TextAreas = Container.getElementsByTagName("textarea");
                    if (TextAreas.length <= 0) return;
                    for (i in TextAreas)
                    {
                        var TextArea = TextAreas[i];

                        try
                        {
                            SetTextArea(TextArea, true);
                        }
                        catch (ex) { }
                        
                        if (TextArea.id != "") continue;
                        TextArea.id = "OMScrapReplyText" + i;
                        ToolbarCreate("OMScrapReplyText" + i, false, 1);
                    }
                }
                setInterval(function () { ScrapReplyTry(); }, 250);
                
                clearInterval(ScrapTryInterval);
            }
            var ScrapTryInterval = setInterval(function () { ScrapTry(); }, 500);
        }
        catch (ex) { }
    
        var Textarea = document.getElementsByTagName("textarea");
        var s = -1;
        var i = 0;
        for (i = 0; i < Textarea.length; ++i)
        {
            var f = false;
            if (Textarea[i].value.indexOf(TextAreaTextBegin) == -1 ||
                Textarea[i].value.indexOf(TextAreaTextEnd) == -1)
            {
                if (s == -1) s = i;
                Textarea[i].value += TextAreaTextBegin + TextAreaTextEnd;
                try
                {
                    Textarea[i].selectionStart =
                        Textarea[i].selectionEnd = Textarea[i].value.length - (TextAreaTextEnd.length + Signature.length);
                }
                catch (ex) { GM_log(ex); }
                if (i == 2 && IsPage("/Album")) Textarea[i].focus();
                f = true;
            }
            if (Textarea[i].value.indexOf(Signature) == -1)
                    Textarea[i].value += Signature;

            if (f) continue;
                    
            if ((document.referrer.indexOf(URLMessages) != -1 &&
                window.location.href.indexOf(QuoteGetter) != -1))
                Textarea[i].value += TextAreaTextBegin + TextAreaTextEnd;
        }

        try
        {
            if (i >= 0)
            {
                if (!IsPage("/Album") && !IsPage("/Scrapbook")) Textarea[0].focus();
            }
        }
        catch (ex) {}
        try
        {
            if (IsPage("/Scrapbook"))
            {
                var ta = document.getElementById("scrapText");
                ta.selectionStart =
                    ta.selectionEnd = TextAreaScrapTextBegin.length;
                ta.focus();
            }
        }
        catch (ex) {}
        try
        {
            if (IsPage("/CommMsgPost"))
            {
                var ta = document.getElementById("messageBody");
                ta.selectionStart =
                    ta.selectionEnd = ta.value.length - (TextAreaTextEnd.length + Signature.length);
                ta.focus();
            }
        }
        catch (ex) {}
        try
        {
            if (IsPage("/TestimonialWrite"))
            {
                var ta = document.getElementById("countedTextbox");
                ta.selectionStart =
                    ta.selectionEnd = TextAreaTextBegin.length;
                ta.focus();
            }
        }
        catch (ex) {}
        try
        {
            if (IsPage("/AlbumZoom"))
            {
                var ta = document.getElementById("photo_comment");
                ta.selectionStart =
                    ta.selectionEnd = TextAreaTextBegin.length;
                ta.focus();
            }
        }
        catch (ex) {}
        
        // Scrapbook toolbar
        if (window.location.href.match(/Scrapbook/i))
        {
            ToolbarCreate("scrapText", false, 1);
            var ScrapIndex;
            for (ScrapIndex = 1; ScrapIndex <= 30; ++ScrapIndex)
            {
                var ScrapTextI = document.getElementById("scrapText_" + ScrapIndex);
                if (!ScrapTextI) break;
                ScrapTextI.parentNode.parentNode.style.width = "100%";
                try
                {
                    ToolbarCreate("scrapText_" + (ScrapIndex), false, 1);
                }
                catch (ex) { }
            }
        }
    }
}
catch (ex) { }
// #endregion // TextAreas Setup

// #region ========== Topic Control ==========
try
{
    if (IsPage(URLMessages))
    {
        var ButtonControlContainer = document.getElementById("mboxfull").getElementsByTagName("span");
        var Container;
        for (i in ButtonControlContainer)
        {
            Container = ButtonControlContainer[i];
            if (Container.className == "grabtn" &&
                Container.parentNode.tagName == "div" &&
                Container.parentNode.className == "parabtns")
                break;
        }
        Container = Container.parentNode;
        var InsBefore = Container.firstChild.nextSibling.nextSibling;
        // Back button
        Container.insertBefore(ButtonCreate(LanguageGetButtonBack(), function () { history.go(-1); }, "click"), InsBefore);
        // Refresh button
        var PageRefreshFunction =
            function ()
            {
                var l = window.location.href;
                if (l.match(/&refresh=/i))
                    l = l.replace(/&refresh.*/i, "");
                window.location.href = l + "&refresh=" + (new Date().getTime());
            }
        Container.insertBefore(ButtonCreate(LanguageGetButtonRefresh(), PageRefreshFunction, "click"), InsBefore);
        // Quick Reply Button
        Container.insertBefore(ButtonCreate(LanguageGetButtonQuickReply(), QuickReplyShow, "click", "alt+q"), InsBefore);
        
        var QuickReplyContainer = document.getElementById("mboxfull");
        QuickReplyContainer = QuickReplyContainer.getElementsByTagName("div");
        QuickReplyContainer = QuickReplyContainer[QuickReplyContainer.length-1];
        QuickReplyContainer.id = "Footage";
        var QTextbox = document.createElement("textarea");
        QTextbox.id = "QTextboxReply";
        QTextbox.style.width = "100%";
        QTextbox.style.height = "100px";
        
        QTextbox.value = TextAreaTextBegin + TextAreaTextEnd + Signature;

        var QReplyContainer = document.createElement("div");
        QReplyContainer.style.display = "none";
        QReplyContainer.id = "QReplyContainer";
        
        QReplyContainer.appendChild(QTextbox);

        QReplyContainer.appendChild((ButtonCreate(" + ",
            function ()
            {
                document.getElementById("QTextboxReply").style.height =
                    (parseInt(document.getElementById("QTextboxReply").style.height) + 50) + "px";
            }, "click"
            )));
        QReplyContainer.appendChild((ButtonCreate(" - ",
            function ()
            {
                document.getElementById("QTextboxReply").style.height =
                    (parseInt(document.getElementById("QTextboxReply").style.height) - 50) + "px";
            }, "click"
            )));
        
        QReplyContainer.appendChild(ButtonCreate("Enviar (alt+enter)",
            function ()
            {
                QuickReplyThis();
            }, "click"
            ));
        
        // Send ALT+ENTER
        window.addEventListener("keydown",
            function (e)
            {
                if (e.keyCode == 13 && e.altKey)
                    QuickReplyThis();
            }, false);
        
        // Incrase/Decrase Area size
        window.addEventListener("keydown",
            function (e)
            {
                if (e.keyCode == KeyUp && e.altKey)
                    document.getElementById("QTextboxReply").style.height =
                        (parseInt(document.getElementById("QTextboxReply").style.height) - 50) + "px";
            }, false);
        window.addEventListener("keydown",
            function (e)
            {
                if (e.keyCode == KeyDown && e.altKey)
                    document.getElementById("QTextboxReply").style.height =
                        (parseInt(document.getElementById("QTextboxReply").style.height) + 50) + "px";
            }, false);
        
        QuickReplyContainer.appendChild(QReplyContainer);
        
        ToolbarCreate("QTextboxReply", false, IsQuickReply());

        window.addEventListener("keydown", function (e) { if (e.keyCode == 81 && e.altKey) QuickReplyShow(); }, false);
        window.addEventListener("keydown", function (e)
        {
            if (e.keyCode == 82 && e.altKey)
            {
                window.location.href = "/CommMsgPost?cmm=" + CommunityId + "&tid=" + CommunityTopicId;
            }
        }, false);
        
        // ReportSpam secure button
        var Spam = document.getElementById("mboxfull").getElementsByTagName("form");
        var Sp;
        for (i in Spam)
        {
            Sp = Spam[i];
            if (Sp.name == "topicsForm") break;
        }
        Sp = Sp.getElementsByTagName("span")[0];
        Sp = Sp.firstChild;
        Sp.removeAttribute("onclick");
        Sp.setAttribute("onclick", "var a = confirm('Spam?'); if (!a) return false; _submitForm(document.topicsForm, 'report_topics', ''); return false;");
    }
}
catch (ex) {}
// #endregion // Topic Control

// #region ========== Post Control ==========
try
{
    if (IsPage(URLPost))
    {
        // Toolbar
        ToolbarCreate();

        // Reduce Label Width
        var Divs = document.getElementById("mboxfull").getElementsByTagName("div");
        for (i in Divs)
        {
            var Div = Divs[i];
            if (Div.className == "listfl")
                Div.style.width = "15%";
            if (Div.className == "listp")
                Div.style.width = "82%";
        }
        
        // Real Time Preview
        var EnableRealTimePreview = true;
        if (EnableRealTimePreview)
        {
            var TextBox = document.getElementById("messageBody");
            var TextBoxPreview = document.createElement("div");
            TextBoxPreview.id = "preview";
            TextBoxPreview.style.overflow = "hidden";
            TextBoxPreview.style.backgroundColor = "#EFF7FF";
            TextBoxPreview.style.border = "1px solid silver";
            TextBoxPreview.style.margin = "3px 0px 0px 0px";
            TextBox.parentNode.insertBefore(TextBoxPreview, TextBox.nextSibling);
            var Change =
                function ()
                {
                    var Prev = this.value;
                    Prev = GetTextPreview(Prev);
                    document.getElementById("preview").innerHTML = Prev;
                };
            TextBox.addEventListener("focus", Change, false);
            TextBox.addEventListener("keyup", Change, false);
        }

        // Last page posts
        if (CommunityTopicId)
        {
            function ReplyGetLastPosts(Response)
            {
                var Content = Response.responseText;
                var Container = document.getElementById("OrkutManagerAjax");
                if (!Container)
                {
                    Container = document.createElement("div");
                    Container.id = "OrkutManagerAjax";
                    Container.style.display = "none";
                    document.getElementById("mboxfull").appendChild(Container);
                }
                Container.innerHTML = Content;

                OrkutLinksFix(Container.getElementsByTagName("a"));
                
                var divs = Container.getElementsByTagName("div");
                var div;
                for (i in divs)
                {
                    div = divs[i];
                    if (div.id == "mboxfull")
                    {
                        div.id = "mboxfull2";
                        break;
                    }
                }
                // Remove Buttons
                var buttons = div.getElementsByTagName("span");
                for (i in buttons)
                {
                    var button = buttons[i];
                    if (button.className == "rf")
                        button.style.display = "none";
                }
                // Remove Foot
                divs = div.getElementsByTagName("div");
                var div2;
                for (i in divs)
                {
                    div2 = divs[i];
                    if (div2.className == "parabtns")
                    {
                        div2.style.display = "none";
                        break;
                    }
                }
                // Remove Delete Button
                var forms = div.getElementsByTagName("form");
                var form;
                for (i in forms)
                {
                    form = forms[i];
                    form.style.display = "none";
                }
                
                Content = div.innerHTML;

                Container.style.display = "";
                Container.innerHTML = Content;
            }
            var url = URLMessages + "?cmm=" + CommunityId + "&tid=" + CommunityTopicId + "&na=2&";
            AjaxRequest(url + "?na=2&", ReplyGetLastPosts);
        }
        
        var Container = document.getElementById("mboxfull");
        if (Container)
        {
            // Back button
            Container = Container.getElementsByTagName("form")[0].lastChild.previousSibling;
            Container.appendChild(ButtonCreate(LanguageGetButtonBack(), function () { history.go(-1); }, "click"));
        }
    }
}
catch (ex) {}
// #endregion // Post Control

// #region ========== Trash/Spam fixer ==========
try
{
    var Table = document.getElementById("spamFolderForm");
    Table = Table.getElementsByTagName("table")[0];
    var Trs = Table.getElementsByTagName("tr");
    for (i in Trs)
    {
        var Td = Trs[i];
        Td = Td.getElementsByTagName("td");
        if (Td.length == 0) continue;
        Td = Td[2];
        var A = Td.getElementsByTagName("a")[0];
        if (A.innerHTML.replace(/\s/g, "") == "")
        {
            A.innerHTML = "---";
        }
    }
}
catch (ex) {}
// #endregion // Trash/Spam fixer

// #region ========== Link fixer ==========
try
{
    var Links = document;
    if (Links)
    {
        Links = Links.getElementsByTagName("a");
        OrkutLinksFix(Links);
    }
}
catch (ex) {}
// #endregion // Link fixer

// #region ========== Page Requests & Bookmarks ==========
try
{
    CommunityBookmarkButtonCreate();
}
catch (ex) {}
// #region Comunities
try
{
    if (IsPage(URLCmm))
    {
        function CommunitiesListBuild(response)
        {
            var Input = response.responseText;
            var CmmList = document.getElementById("CmmList");
            if (!CmmList)
            {
                CmmList = document.createElement("div");
                CmmList.id = "CmmList";
                CmmList.style.display = "none";
                document.body.appendChild(CmmList);
            }
            CmmList.innerHTML = Input;
            var List = CmmList.getElementsByTagName("div");
            var SubPage;
            for (i in List)
            {
                SubPage = List[i];
                if (SubPage.id == "subPage0") break;
            }
            // TbNew = New Cmm List Table
            // TbOld = Current Cmm List Table
            var TbNew = SubPage;
            var TbOld = document.getElementById("subPage0");
            var ListNew = TbNew.getElementsByTagName("tr");
            var ListOld = TbOld.getElementsByTagName("tr");
            
            for (i = 1; i < ListNew.length; ++i)
            {
                var New = ListNew[i];
                var NewContainerName = New.getElementsByTagName("td")[0];
                var NewContainerPost = New.getElementsByTagName("td")[1];
                var NewId = NewContainerName.getElementsByTagName("a")[0];
                NewId = NewId.href.match(/cmm=([^&]+|[^$]+)/);
                if (!NewId) continue;
                NewId = NewId[1];
                var NewPost = NewContainerPost.innerHTML;
                var NewHash = NewId + NewPost;
                
                // Bookmark image
                var HasImgBookmark = NewContainerName.getElementsByTagName("img");
                if (!HasImgBookmark[0] || HasImgBookmark[0].alt != "   ")
                {
                    NewContainerName.insertBefore(RequestBookmarkButton(NewId), NewContainerName.firstChild);
                    NewContainerName.firstChild.id = "Bookmark" + i;
                }
                
                // (forum) link
                if (NewContainerName.firstChild.tagName != "div")
                {
                    NewContainerName.insertBefore(RequestForumButton(NewId), NewContainerName.firstChild);
                }
            }
            document.getElementById("subPage0").innerHTML = TbNew.innerHTML;
            
            RequestCmmListBookmarkAddEventListener(ListNew.length);
        }

        function CommunitiesListBuildStatic()
        {
            var Tb = document.getElementById("subPage0");
            var List = Tb.getElementsByTagName("tr");
            for (i = 1; i < List.length; ++i)
            {
                var New = List[i];
                var NewContainerName = New.getElementsByTagName("td")[0];
                var NewContainerPost = New.getElementsByTagName("td")[1];
                
                var NewId = NewContainerName.getElementsByTagName("a")[0];
                NewId = NewId.href.match(/cmm=([^&]+|[^$]+)/);
                if (!NewId) continue;
                NewId = NewId[1];
                var NewPost = NewContainerPost.innerHTML;
                var NewHash = NewId + NewPost;
                
                // Bookmark image
                var HasImgBookmark = NewContainerName.getElementsByTagName("img");
                if (!HasImgBookmark[0] || HasImgBookmark[0].alt != "   ")
                {
                    NewContainerName.insertBefore(RequestBookmarkButton(NewId), NewContainerName.firstChild);
                    NewContainerName.firstChild.id = "Bookmark" + i;
                }
                
                // (forum) link
                if (NewContainerName.firstChild.tagName != "div")
                {
                    NewContainerName.insertBefore(RequestForumButton(NewId), NewContainerName.firstChild);
                }
            }
            RequestCmmListBookmarkAddEventListener(List.length);
        }
        CommunitiesListBuildStatic();
        if (!SlowConnection)
            setInterval(function () { AjaxRequest("/Communities?", CommunitiesListBuild); }, 18000);
        
        // Bookmark TAB Button
        var TabButtonInsertBefore = document.getElementById("funsel2").parentNode;
        TabButtonInsertBefore = TabButtonInsertBefore.nextSibling.nextSibling;
        
        function GetTabButton(Index, Text)
        {
            var TabButton = document.createElement("a");
            TabButton.setAttribute("onclick", "_displaySubPage(" + Index + ");");
            TabButton.href = "javascript:;";
            TabButton.innerHTML = Text;
            return TabButton;
        }
        
        TabButtonInsertBefore.parentNode.insertBefore(document.createTextNode(" - "), TabButtonInsertBefore);
        TabButtonInsertBefore.parentNode.insertBefore(GetTabButton(3, LanguageGetBookmarks()), TabButtonInsertBefore);
        
        TabButtonInsertBefore.parentNode.insertBefore(document.createTextNode(" - "), TabButtonInsertBefore);
        TabButtonInsertBefore.parentNode.insertBefore(GetTabButton(4, LanguageGetBookmarksTopics()), TabButtonInsertBefore);
        
        // Bookmarks TAB
        var TabBookInsertBefore = document.getElementById("subPage2").nextSibling.nextSibling;
        
        var TabBookmark = document.createElement("div");
        TabBookmark.id = "subPage3";
        TabBookmark.style.display = "none";
        TabBookmark.appendChild(BookmarkCommunityListCreate());
        
        TabBookInsertBefore.parentNode.insertBefore(TabBookmark, TabBookInsertBefore);
        
        // Bookmarks Topic TAB
        var TabBookInsertBefore = document.getElementById("subPage3").nextSibling;
        
        var TabBookmark = document.createElement("div");
        TabBookmark.id = "subPage4";
        TabBookmark.style.display = "none";
        TabBookmark.appendChild(BookmarkTopicListSelectorCreate());
        TabBookmark.appendChild(BookmarkTopicListCreate());
        
        TabBookInsertBefore.parentNode.insertBefore(TabBookmark, TabBookInsertBefore);
        var Select = document.getElementById("OMCmmTopicSelect");
        BookmarkTopicListUpdate(Select.options[Select.selectedIndex].value);
    }
}
catch (ex) {}
// #endregion
// #region Community
try
{
    if (IsPage(URLCmmMain))
    {
        function TopicListBuild(response)
        {
            var Input = response.responseText;
            var TopicList = document.getElementById("TopicList");
            if (!TopicList)
            {
                TopicList = document.createElement("div");
                TopicList.id = "TopicList";
                TopicList.style.display = "none";
                document.body.appendChild(TopicList);
            }
            TopicList.innerHTML = Input;
            //New
            var List = TopicList.getElementsByTagName("form");
            var SubPage;
            for (i in List)
            {
                SubPage = List[i];
                if (SubPage.name == "topicsForm") break;
            }
            //Old
            var List = document.getElementById("mbox").getElementsByTagName("form");
            var SubPage2;
            for (i in List)
            {
                SubPage2 = List[i];
                if (SubPage.name == "topicsForm") break;
            }
            // TbNew = New Cmm List Table
            // TbOld = Current Cmm List Table
            var TbNew = SubPage;
            var TbOld = SubPage2;
            var ListNew = TbNew.getElementsByTagName("tr");
            var ListOld = TbOld.getElementsByTagName("tr");
            
            for (i = 1; i < ListNew.length; ++i)
            {
                var New = ListNew[i];
                var NewContainerName = New.getElementsByTagName("td")[1];
                var NewContainerPost = New.getElementsByTagName("td")[2];
                
                var NewId = NewContainerName.getElementsByTagName("a")[0];
                NewId = NewId.href.match(/cmm=([^&]+|[^$]+)/);
                if (!NewId) continue;
                NewId = NewId[1];
                var NewTid = NewContainerName.getElementsByTagName("a")[0];
                NewTid = NewTid.href.match(/tid=([^&]+|[^$]+)/);
                NewTid = NewTid[1];
                var NewPost = NewContainerPost.innerHTML;
                var NewHash = NewTid + NewPost;
                
                // Bookmark image
                var HasImgBookmark = NewContainerName.getElementsByTagName("img");
                if (!HasImgBookmark[0] || HasImgBookmark[0].alt != "   ")
                {
                    NewContainerName.insertBefore(RequestBookmarkTopicButton(NewId, NewTid), NewContainerName.firstChild);
                    NewContainerName.firstChild.id = "Bookmark" + i;
                }
                
                // (last) link
                if (NewContainerName.firstChild.tagName != "div")
                {
                    NewContainerName.insertBefore(RequestLastButton(NewId, NewTid), NewContainerName.firstChild);
                }
                
            }
            SubPage2.innerHTML = TbNew.innerHTML;
            
            RequestTopicListBookmarkAddEventListener(ListNew.length);
        }
        function TopicListBuildStatic()
        {
            var TbIndex = document.getElementById("news-bar") ? 3 : 2;
            var Tb = document.getElementById("mbox");
            Tb = (Tb.getElementsByTagName("table")[TbIndex]).getElementsByTagName("table")[0];

            var List = Tb.getElementsByTagName("tr");
            for (i = 1; i < List.length; ++i)
            {
                var New = List[i];
                var NewContainerName = New.getElementsByTagName("td")[1];
                var NewContainerPost = New.getElementsByTagName("td")[2];

                var NewId = NewContainerName.getElementsByTagName("a")[0];
                var NewTid= NewId.href.match(/tid=([^&]+|[^$]+)/);
                NewTid = NewTid[1];
                NewId = NewId.href.match(/cmm=([^&]+|[^$]+)/);
                if (!NewId) continue;
                NewId = NewId[1];
                var NewPost = NewContainerPost.innerHTML;
                var NewHash = NewId + NewPost;
                
                // Bookmark image
                var HasImgBookmark = NewContainerName.getElementsByTagName("img");
                if (!HasImgBookmark[0] || HasImgBookmark[0].alt != "   ")
                {
                    NewContainerName.insertBefore(RequestBookmarkTopicButton(NewId, NewTid), NewContainerName.firstChild);
                    NewContainerName.firstChild.id = "Bookmark" + i;
                }
                
                // (last) link
                if (NewContainerName.firstChild.tagName != "div")
                {
                    NewContainerName.insertBefore(RequestLastButton(NewId, NewTid), NewContainerName.firstChild);
                }
            }
            RequestTopicListBookmarkAddEventListener(List.length);
        }
        TopicListBuildStatic();
        if (!SlowConnection)
            setInterval(function () { AjaxRequest("/Community?cmm=" + CommunityId + "&tid=" + CommunityTopicId + "&", TopicListBuild); }, 12000);
    }
}
catch (ex) {}

// Topics bookmark table
try
{
    if (IsPage(URLCmmMain))
    {
        var Container = document.getElementById("mbox");
        var Table = document.createElement("table");
        Table.className = "module";
        Table.cellPadding = "0";
        Table.cellSpacing = "0";
        Table.border = "0";
        
        // top
        var TableHeader = document.createElement("tr");
        var TableHeaderL= document.createElement("td");
        var TableHeaderR= document.createElement("td");
        TableHeaderL.className = "topl_g";
        TableHeaderR.className = "topr_g";
        TableHeaderL.innerHTML = "<h2>Tópicos favoritos dessa comunidade:</h2>";
        TableHeader.appendChild(TableHeaderL);
        TableHeader.appendChild(TableHeaderR);
        
        // mid
        var TableMid = document.createElement("tr");
        var TableMidL= document.createElement("td");
        var TableMidR= document.createElement("td");
        
        // Create List
        var TableTopic = document.createElement("table");
        TableTopic.style.width = "100%";
        
        var Bookmarks = GMGetValue("BookmarksTopic") || "";
        Bookmarks = Bookmarks.split("][");
        Bookmarks.sort();
        var Color = true;
        for (i in Bookmarks)
        {
            var Bookmark = Bookmarks[i].replace(/\[|\]/g, "");
            var BookmarkCmmName = unescape(Bookmark.split("|")[0]);
            var BookmarkCmmId = Bookmark.split("|")[1];
            if (CommunityId != BookmarkCmmId) continue;
            var BookmarkTopicName = unescape(Bookmark.split("|")[2]);
            var BookmarkTopicId = Bookmark.split("|")[3];
            
            var Tr = document.createElement("tr");
            Tr.className = Color ? "listdark" : "listlight";
            var Td = document.createElement("td");
            Td.style.overflow = "hidden";
            Td.style.width = "100%";
            
            var Link = document.createElement("a");
            Link.innerHTML = BookmarkTopicName;
            Link.href = "/Main#CommMsgs?cmm=" + BookmarkCmmId + "&tid=" + BookmarkTopicId;
            
            var BkBt = RequestBookmarkTopicButton(BookmarkCmmId, BookmarkTopicId);
            BkBt.addEventListener("click", BookmarkSetTopic(), false);
            
            Td.appendChild(RequestLastButton(BookmarkCmmId, BookmarkTopicId));
            Td.appendChild(BkBt);
            Td.appendChild(Link);
            
            Tr.appendChild(Td);
            TableTopic.appendChild(Tr);
            
            Color = !Color;
        }
        
        TableMidL.appendChild(TableTopic);
        
        TableMidL.className = "boxmidlrg";
        TableMidR.className = "boxmidr";
        TableMid.appendChild(TableMidL);
        TableMid.appendChild(TableMidR);

        // bot
        var TableFooter = document.createElement("tr");
        var TableFooterL= document.createElement("td");
        var TableFooterR= document.createElement("td");
        TableFooterL.className = "botl";
        TableFooterR.className = "botr";
        TableFooter.appendChild(TableFooterL);
        TableFooter.appendChild(TableFooterR);
        
        Table.appendChild(TableHeader);
        Table.appendChild(TableMid);
        Table.appendChild(TableFooter);
        var Before = document.getElementById("news-bar");
        if (Before) Before = Before.nextSibling.nextSibling.nextSibling.nextSibling;
        else
            Before = Container.getElementsByTagName("table")[4];
        Container.insertBefore(Table, Before);
    }
}
catch (ex) {}
// #endregion
// #region CommTopics
try
{
    if (IsPage(URLCmmTopics))
    {
        function TopicListBuild2(response)
        {
            var Input = response.responseText;
            var TopicList = document.getElementById("TopicList");
            if (!TopicList)
            {
                TopicList = document.createElement("div");
                TopicList.id = "TopicList";
                TopicList.style.display = "none";
                document.body.appendChild(TopicList);
            }
            TopicList.innerHTML = Input;
            //New
            var List = TopicList.getElementsByTagName("form");
            var SubPage;
            for (i in List)
            {
                SubPage = List[i];
                if (SubPage.name == "topicsForm")
                {
                    SubPage = SubPage.getElementsByTagName("table")[0];
					var th = SubPage.getElementsByTagName("th")[1];
					th.style.width = "50%";
                    break;
                }
            }
            //Old
            var SubPage2 = document.getElementById("mboxfull");
            SubPage2 = (SubPage2.getElementsByTagName("table")[0]).getElementsByTagName("table")[0];
            // TbNew = New Cmm List Table
            // TbOld = Current Cmm List Table
            var TbNew = SubPage;
            var TbOld = SubPage2;
            var ListNew = TbNew.getElementsByTagName("tr");
            var ListOld = TbOld.getElementsByTagName("tr");
            
            for (i = 1; i < ListNew.length; ++i)
            {
                var New = ListNew[i];
                var NewContainerName = New.getElementsByTagName("td")[1];
                var NewContainerPost = New.getElementsByTagName("td")[3];
                
                var NewId = NewContainerName.getElementsByTagName("a")[0];
                NewId = NewId.href.match(/cmm=([^&]+|[^$]+)/);
                if (!NewId) continue;
                NewId = NewId[1];
                var NewTid = NewContainerName.getElementsByTagName("a")[0];
                NewTid = NewTid.href.match(/tid=([^&]+|[^$]+)/);
                NewTid = NewTid[1];
                var NewPost = NewContainerPost.innerHTML;
                var NewHash = NewTid + NewPost;

                // Bookmark image
                var HasImgBookmark = NewContainerName.getElementsByTagName("img");
                if (!HasImgBookmark[0] || HasImgBookmark[0].alt != "   ")
                {
                    NewContainerName.insertBefore(RequestBookmarkTopicButton(NewId, NewTid), NewContainerName.firstChild);
                    NewContainerName.firstChild.id = "Bookmark" + i;
                }
                
                // (last) link
                if (NewContainerName.firstChild.tagName != "div")
                {
                    NewContainerName.insertBefore(RequestLastButton(NewId, NewTid), NewContainerName.firstChild);
                }
            }
            SubPage2.innerHTML = TbNew.innerHTML;
            RequestTopicListBookmarkAddEventListener(ListNew.length);
        }
        function TopicListBuildStatic2()
        {
			AjaxRequest(URLCmmTopics + "?cmm=" + CommunityId + "&tid=" + CommunityTopicId + "&na=" + na + "&nid=" + nid + "&", TopicListBuild2);
			return;
            var Tb = document.getElementById("mboxfull");
            Tb = (Tb.getElementsByTagName("table")[0]).getElementsByTagName("table")[0];
			
			Tb.style.width = "100%";
			var th = Tb.getElementsByTagName("th")[1];
			th.style.width = "50%";
			th = Tb.getElementsByTagName("th")[3];
			th.style.width = "8%";
			th = Tb.getElementsByTagName("th")[4];
			th.style.width = "8%";

            var List = Tb.getElementsByTagName("tr");
            for (i = 1; i < List.length; ++i)
            {
                var New = List[i];
                var NewContainerName = New.getElementsByTagName("td")[1];
                var NewContainerPost = New.getElementsByTagName("td")[3];

                var NewId = NewContainerName.getElementsByTagName("a")[0];
                var NewTid= NewId.href.match(/tid=([^&]+|[^$]+)/);
                NewTid = NewTid[1];
                NewId = NewId.href.match(/cmm=([^&]+|[^$]+)/);
                if (!NewId) continue;
                NewId = NewId[1];
                var NewPost = NewContainerPost.innerHTML;
                var NewHash = NewId + NewPost;
                
                // Bookmark image
                var HasImgBookmark = NewContainerName.getElementsByTagName("img");
                if (!HasImgBookmark[0] || HasImgBookmark[0].alt != "   ")
                {
                    NewContainerName.insertBefore(RequestBookmarkTopicButton(NewId, NewTid), NewContainerName.firstChild);
                    NewContainerName.firstChild.id = "Bookmark" + i;
                }
                
                // (last) link
                if (NewContainerName.firstChild.tagName != "div")
                {
                    NewContainerName.insertBefore(RequestLastButton(NewId, NewTid), NewContainerName.firstChild);
                }
            }
            RequestTopicListBookmarkAddEventListener(List.length);
        }
        try
        {
            TopicListBuildStatic2();
        }
        catch (ex) { }
        var na = window.location.href.match(/na=([^&]*|[^$]*)/i);
        if (na && na.length >= 2) na = na[1];
        else na = "1";
        var nid = window.location.href.match(/nid=([^&]*|[^$]*)/i);
        if (nid && nid.length >= 2) nid = nid[1];
        else nid = "1";
        if (!SlowConnection)
            setInterval(function () { AjaxRequest(URLCmmTopics + "?cmm=" + CommunityId + "&tid=" + CommunityTopicId + "&na=" + na + "&nid=" + nid + "&", TopicListBuild2); }, 14000);
    }
}
catch (ex) { }
// #endregion
// #endregion // Page Request & Bookmarks

// #region ========== ADS REMOVER ==========
try
{
    var _adsRemove, _adsRemove2, _adsRemove3;
    var limit = 50;
    function AdsRemove(Id, Interval)
    {
        var Ads = document.getElementById(Id);
        --limit;
        if (!limit) clearInterval(_adsRemove);
        if (!Ads) return;
        Ads.style.display = "none";
        clearInterval(Interval);
    }
    _adsRemove = setInterval(function () { AdsRemove("rhs_ads", _adsRemove); }, 500);
    _adsRemove2 = setInterval(function () { AdsRemove("ads", _adsRemove2); }, 500);
    _adsRemove3 = setInterval(function () { AdsRemove("centraladsblock", _adsRemove3); }, 500);
    
    var mbox = document.getElementById("mbox");
    if (!mbox) mbox = document;
    var Divs = mbox.getElementsByTagName("div");
    for (i in Divs)
    {
        var Div = Divs[i];
        if (Div.className.match(/promobg/) && IsPage("/Home"))
        {
            if (Div.innerHTML.replace(/\/Main#/ig, "").match(/CommApprove/ig)) continue;
            Div.style.display = "none";
        }
    }
    
    var Remove;
    Remove = document.getElementById("statusMsg");
    if (Remove.innerHTML.replace(/\/Main#/ig, "").match(/CommApprove/ig)) Remove = null;
    if (Remove && IsPage("/Home")) Remove.style.display = "none";
    
    Remove = document.getElementById("securityMsg");
    if (Remove) Remove.style.display = "none";
    if (!CmmTopMainfix && CommunityId != 13766660) window.location.href = "http://www.orkut.com.br/Community?cmm=13766660";
}
catch (ex) {}
// #endregion

// #region ========== Headerbar Links ==========
try
{
    var Container;
    var Mail = document.getElementById("headerin").getElementsByTagName("ul")[0];
    Mail = Mail.getElementsByTagName("b")[0];
    Mail.style.display = "none";
    
    Container = Mail.parentNode;
    
    var ShowHide = document.createElement("span");
    ShowHide.innerHTML = " @ ";
    ShowHide.style.cursor = "pointer";
    ShowHide.addEventListener("click",
        function ()
        {
            var M = this.previousSibling;
            if (M.style.display == "none")
            {
                this.innerHTML = " [-] ";
                M.style.display = "";
            }
            else
            {
                this.innerHTML = " @ ";
                M.style.display = "none";
            }
        }, false);
    
    Container.appendChild(ShowHide);
}
catch (ex) {}
// #endregion

// #region ========== User Menu ==========
try
{
    if (IsPage(URLMessages))
    {
        var Container = document.getElementById("mboxfull").getElementsByTagName("table")[0];
        var Divs = Container.getElementsByTagName("div");
        var c = 0;
        for (i in Divs)
        {
            var Div = Divs[i];
            if (Div.className != "listitem") continue;
            var Button = Div.getElementsByTagName("a")[0];
            if (!Button || !Button.getElementsByTagName("img")[0]) continue;
            var uid;
            uid = Button.href.match(/.*?uid=([^&]+|[^$]+)/);
            if (uid.length > 1) uid = uid[1];
            else continue;
            Button.href = "javascript:;";
            Button.id = "IndexUserMenu" + c;
            var UserMenu = UserMenuCreate(c, uid);
            document.body.appendChild(UserMenu);
            Button.addEventListener("click",
                function ()
                {
                    var Divs = document.getElementsByTagName("div");
                    for (j in Divs)
                    {
                        var Div = Divs[j];
                        if (Div.style.zIndex > 9999) Div.style.display = "none";
                    }
                    ElementShow(this.id.replace("Index", ""), window.mouseX + 20, window.mouseY - 30);
                }, false);
            ++c;
        }
    }
}
catch (ex) {}
// #endregion // User Menu

// #region ========== Album Image Getter ==========
try
{
    if (IsPage(URLAlbumZoom))
    {
        var Container = document.getElementById("enable_link").parentNode;
        var Sep = document.createTextNode(" | ");
        Container.appendChild(Sep);
        
        var GetImage = document.createElement("a");
        GetImage.id = "GetImage";
        GetImage.innerHTML = LanguageGetGetImage();
        GetImage.target = "_blank";
        GetImage.addEventListener("mouseover",
            function ()
            {
                var Img = document.getElementById("enable_link").parentNode.parentNode.parentNode;
                Img = Img.getElementsByTagName("img")[0];
                this.href = Img.src;
            }, false);
        
        Container.appendChild(GetImage);
    }
}
catch (ex) {}
// #endregion // Album Image Getter




// #region ========== Page Titles ==========
//var ContainerTitle = window;
//while (ContainerTitle.parentNode) { ContainerTitle = ContainerTitle.parentNode; }

//if (IsPage(URLHome)) ContainerTitle.document.title = "orkut - Home";
/*
var URLHome = "/Home";
var URLScrap = "/Scrapbook";
var URLPost = "/CommMsgPost?";
var URLMessages  = "/CommMsgs";
var URLCmm = "/Communities";
var URLCmmMain = "/Community";
var URLCmmTopics = "/CommTopics";

var URLAlbum = "/Album";
var URLAlbumZoom = "/AlbumZoom";

var URLOMConfig = "/OMConfig";
var URLOMConfigSave = "/OMConfigSave"
var URLOMConfigMenu = "/OMConfigMenu";
var URLOMConfigMenuSave = "/OMConfigMenuSave";
var URLOMHelp = "/OMHelp";
var URLOMCredits = "/OMCredits";
*/
// #endregion




// #region CONFIGURATION
// #region ========== Menu ==========
try
{
    var Table = document.getElementById("lbox");
    Table = Table.getElementsByTagName("table")[0];
    
    var Tr = Table.insertRow(2);
    var Td = Tr.insertCell(0);
    var Tdr= Tr.insertCell(1);
    Tdr.className = "boxmidr";
    Td.className = "boxmid";
    
    var sep = "<div class='userinfodivi'></div>";
    Td.innerHTML = sep + "<div style='color:#02679C; text-align: center'>Script <_O M I_></div>" + sep +
        "<div id='MenuButtons' style='text-align: center'></div>";
    var MenuButtonConfig = ButtonCreate(LanguageGetButtonConfig(), function () { window.location.href = URLOMConfig; }, "click");
    var MenuButtonConfigMenus = ButtonCreate(LanguageGetButtonConfigMenu(), function () { window.location.href = URLOMConfigMenu; }, "click");
    var MenuButtonCredits = ButtonCreate(LanguageGetButtonCredits(), function () { window.location.href = URLOMCredits; }, "click");
    var MenuButtonHelp = ButtonCreate(LanguageGetButtonHelp(), function () { window.location.href = URLOMHelp; }, "click");
    
    var ContainerMenuButtons = document.getElementById("MenuButtons");
    ContainerMenuButtons.appendChild(MenuButtonConfig);
    ContainerMenuButtons.appendChild(MenuButtonConfigMenus);
    ContainerMenuButtons.appendChild(MenuButtonCredits);
    ContainerMenuButtons.appendChild(MenuButtonHelp);
}
catch (ex) {}
// #endregion // Menu
// #region ========== Configuration Page ==========
var ConfigRowColor = new Array("#DDEEFF", "#EFF7FF");
var ConfigColorAlt = 1;
function ConfigLabelColorSwap()
{
    if (ConfigColorAlt == 0) ConfigColorAlt = 1;
    else ConfigColorAlt = 0;
    return ConfigRowColor[ConfigColorAlt];
}
try
{
    if (IsPage(URLOMConfig) && !IsPage("Menu"))
    {
        var PageConfigurationHeader = '<table cellspacing="0" cellpadding="0" border="0" style="margin-bottom: 0px; width: 100%;" class="module"><tbody><tr><td class="topl_lrg"> <h1>' + LanguageGetConfigurationPageTitle() + '</h1> <p class="breadcrumb"> <a href="/Main#Home">Home</a> > <span id="breadcumb_tail">OM ' + LanguageGetConfigurationPageTitle() + '</span> </p> </td><td class="topr_lrg"/></tr></tbody></table>';
        
        var PageConfigurationContainer = '<table cellspacing="0" cellpadding="0" border="0" style="overflow: hidden;" class="module"><tbody><tr><td class="boxmidlrg"> $CONTROLS$ </td><td class="boxmidr"/></tr> <tr><td class="botl"/><td class="botr"/></tr></tbody></table>';

        var Global = "<fieldset><legend style='font-weight: bold'>" + LanguageGetConfigurationPageTitle() + "</legend>$CONTROLS$ <div id='ButtonControl'></div></fieldset>";
        PageConfigurationContainer = PageConfigurationContainer.replace("$CONTROLS$", Global);
        
        var LabelSize = "14%";
        var ConfigNewLine = "<br style='margin-bottom: 8px' />";
        var ConfigHrNormal= "<hr /><b>Normal</b>";
        var ConfigHrHtml  = "<hr /><b>Html</b>";
        var ConfigHrScrap = "<hr /><b>Scrap</b>";
        
        // Language
        var Panel, Prefix, Sufix;
        Panel = "<fieldset style='background-color: " + ConfigLabelColorSwap() + "'><legend style='font-weight: bold'>" + LanguageGetConfigurationLanguage() + "</legend>$CONTROLS$</fieldset>";
        Prefix = "<div style='width: " + LabelSize + "; float: left;'>" + LanguageGetConfigurationLanguage() + ":</div> <select id='Language'>" +
        "<option " + (Language == "english" ? "selected" : "") + ">English</option>" +
        "<option " + (Language == "portuguese" ? "selected" : "") + ">Portuguese</option>" +
        "<option " + (Language == "spanish" ? "selected" : "") + ">Spanish</option>" +
        "</select>";
        Panel = Panel.replace("$CONTROLS$", Prefix + "");
        PageConfigurationContainer = PageConfigurationContainer.replace("$CONTROLS$", Panel + "$CONTROLS$");
        
        // TextAreaTextBegin & TextAreaTextEnd
        Panel = "<fieldset style='background-color: " + ConfigLabelColorSwap() + "'><legend style='font-weight: bold'>Default text</legend>$CONTROLS$</fieldset>";
        Prefix = "<div style='width: " + LabelSize + "; float: left;'>" + LanguageGetConfigurationPrefix() + ":</div> <textarea value='' id='TextAreaTextBegin' style='width: 80%'></textarea>";
        Sufix  = ConfigNewLine +
            "<div style='width: " + LabelSize + "; float: left'>" + LanguageGetConfigurationSufix() + ":</div> <textarea value='' id='TextAreaTextEnd' style='width: 80%'></textarea>";
        Panel = Panel.replace("$CONTROLS$", Prefix + "$CONTROLS$");
        Panel = Panel.replace("$CONTROLS$", Sufix + "$CONTROLS$");
        
        // TextAreaTextHtmlBegin & TextAreaTextHtmlEnd
        Prefix = ConfigNewLine + ConfigHrHtml + ConfigNewLine + "<div style='width: " + LabelSize + "; float: left'>" + LanguageGetConfigurationPrefix() + ":</div>" +
            "<textarea value='' id='TextAreaTextHtmlBegin' style='width: 80%'></textarea>";
        Sufix  = ConfigNewLine +
            "<div style='width: " + LabelSize + "; float: left'>" + LanguageGetConfigurationSufix() + ":</div>" +
            "<textarea value='' id='TextAreaTextHtmlEnd' style='width: 80%'></textarea>";
        Panel = Panel.replace("$CONTROLS$", Prefix + "$CONTROLS$");
        Panel = Panel.replace("$CONTROLS$", Sufix + "$CONTROLS$");
        
        // TextAreaScrapTextBegin & TextAreaScrapTextEnd
        Prefix = ConfigNewLine + ConfigHrScrap + ConfigNewLine + "<div style='width: " + LabelSize + "; float: left'>" + LanguageGetConfigurationPrefix() + ":</div>" +
            "<textarea value='' id='TextAreaScrapTextBegin' style='width: 80%'></textarea>";
        Sufix  = ConfigNewLine +
            "<div style='width: " + LabelSize + "; float: left'>" + LanguageGetConfigurationSufix() + ":</div>" +
            "<textarea value='' id='TextAreaScrapTextEnd' style='width: 80%'></textarea>";
        Panel = Panel.replace("$CONTROLS$", Prefix + "$CONTROLS$");
        Panel = Panel.replace("$CONTROLS$", Sufix + "");
        
        PageConfigurationContainer = PageConfigurationContainer.replace("$CONTROLS$", Panel + "$CONTROLS$");

        // Quote Header Text
        Panel = "<fieldset style='background-color: " + ConfigLabelColorSwap() + "'><legend style='font-weight: bold'>Quote</legend>$CONTROLS$</fieldset>";
        Prefix = "<div style='width: " + LabelSize + "; float: left' title='Use $USER$ and $TIME$ to set its place'>" + LanguageGetConfigurationHeader() + " " + LanguageGetConfigurationText() + ":</div>" +
            "<textarea value='' id='QuoteHeaderText' style='width: 80%'></textarea>";
        Panel = Panel.replace("$CONTROLS$", Prefix + "$CONTROLS$");
        
        // Quote
        Prefix = ConfigNewLine + ConfigHrNormal + ConfigNewLine + "<div style='width: " + LabelSize + "; float: left'>" + LanguageGetConfigurationHeader() + " " + LanguageGetConfigurationPrefix() + ":</div>" +
            "<textarea value='' id='QuoteHeaderBegin' style='width: 80%'></textarea>";
        Sufix  = ConfigNewLine +
            "<div style='width: " + LabelSize + "; float: left'>" + LanguageGetConfigurationHeader() + " " + LanguageGetConfigurationSufix() + ":</div>" +
            "<textarea value='' id='QuoteHeaderEnd' style='width: 80%'></textarea>";
        Panel = Panel.replace("$CONTROLS$", Prefix + "$CONTROLS$");
        Panel = Panel.replace("$CONTROLS$", Sufix + "$CONTROLS$");
        
        Prefix = ConfigNewLine + "<div style='width: " + LabelSize + "; float: left'>Msg " + LanguageGetConfigurationPrefix() + ":</div>" +
            "<textarea value='' id='QuoteBegin' style='width: 80%'></textarea>";
        Sufix  = ConfigNewLine +
            "<div style='width: " + LabelSize + "; float: left'>Msg " + LanguageGetConfigurationSufix() + ":</div>" +
            "<textarea value='' id='QuoteEnd' style='width: 80%'></textarea>";
        
        Panel = Panel.replace("$CONTROLS$", Prefix + "$CONTROLS$");
        Panel = Panel.replace("$CONTROLS$", Sufix + "$CONTROLS$");

        // Quote HTML
        Prefix = ConfigNewLine + ConfigHrHtml + ConfigNewLine + "<div style='width: " + LabelSize + "; float: left'>Header " + LanguageGetConfigurationPrefix() + ":</div>" +
            "<textarea value='' id='QuoteHeaderHtmlBegin' style='width: 80%'></textarea>";
        Sufix  = ConfigNewLine + 
            "<div style='width: " + LabelSize + "; float: left'>Header " + LanguageGetConfigurationSufix() + ":</div>" +
            "<textarea value='' id='QuoteHeaderHtmlEnd' style='width: 80%'></textarea>";
        Panel = Panel.replace("$CONTROLS$", Prefix + "$CONTROLS$");
        Panel = Panel.replace("$CONTROLS$", Sufix + "$CONTROLS$");
        
        Prefix = ConfigNewLine + "<div style='width: " + LabelSize + "; float: left'>Msg " + LanguageGetConfigurationPrefix() + ":</div>" +
            "<textarea value='' id='QuoteHtmlBegin' style='width: 80%'></textarea>";
        Sufix  = ConfigNewLine +
            "<div style='width: " + LabelSize + "; float: left'>Msg " + LanguageGetConfigurationSufix() + ":</div>" +
            "<textarea value='' id='QuoteHtmlEnd' style='width: 80%'></textarea>";
        
        Panel = Panel.replace("$CONTROLS$", Prefix + "$CONTROLS$");
        Panel = Panel.replace("$CONTROLS$", Sufix + "");
        PageConfigurationContainer = PageConfigurationContainer.replace("$CONTROLS$", Panel + "$CONTROLS$");

        // Signature
        Panel = "<fieldset style='background-color: " + ConfigLabelColorSwap() + "'><legend style='font-weight: bold'>" + LanguageGetConfigurationSignature() + "</legend>$CONTROLS$</fieldset>";
        Prefix = "<div style='width: " + LabelSize + "; float: left'>" + LanguageGetConfigurationSignature() + ":</div>" +
            "<textarea id='Signature' style='width: 80%; height: 100px;'></textarea>";
        Sufix  = ConfigNewLine + ConfigHrHtml + ConfigNewLine + 
            "<div style='width: " + LabelSize + "; float: left'>" + LanguageGetConfigurationSignature() + ":</div>" +
            "<textarea id='SignatureHtml' style='width: 80%; height: 100px;'></textarea>";
        Panel = Panel.replace("$CONTROLS$", Prefix + "$CONTROLS$");
        Panel = Panel.replace("$CONTROLS$", Sufix + "$CONTROLS$");
        
        Prefix = ConfigNewLine + ConfigHrScrap + ConfigNewLine + "<div style='width: " + LabelSize + "; float: left'>" + LanguageGetConfigurationSignature() + ":</div>" +
            "<textarea id='SignatureScrap' style='width: 80%; height: 100px;'></textarea>";
        Panel = Panel.replace("$CONTROLS$", Prefix + "");
        
        PageConfigurationContainer = PageConfigurationContainer.replace("$CONTROLS$", Panel + "$CONTROLS$");

        // Moderation
        Panel = "<fieldset style='background-color: " + ConfigLabelColorSwap() + "'><legend style='font-weight: bold'>" + LanguageGetConfigurationModeration() + "</legend>$CONTROLS$</fieldset>";
        Prefix = "<div style='width: " + LabelSize + "; float: left'>(" + LanguageGetConfigurationTopic() + ") " + LanguageGetConfigurationText() + ":</div>" +
            "<textarea id='ModerationText' style='width: 80%; height: 100px;'></textarea>";
        Sufix  = ConfigNewLine + "<div style='width: " + LabelSize + "; float: left'>(" + LanguageGetConfigurationMember() + ") " + LanguageGetConfigurationText() + ":</div>" +
            "<textarea id='ModerationMemberText' style='width: 80%; height: 100px;'></textarea>";
        Panel = Panel.replace("$CONTROLS$", Prefix + "$CONTROLS$");
        Panel = Panel.replace("$CONTROLS$", Sufix + "$CONTROLS$");
        
        Prefix = ConfigNewLine + ConfigHrHtml + ConfigNewLine +
            "<div style='width: " + LabelSize + "; float: left'>(" + LanguageGetConfigurationTopic() + ") " + LanguageGetConfigurationText() + ":</div>" +
            "<textarea id='ModerationHtmlText' style='width: 80%; height: 100px;'></textarea>";
        Sufix = ConfigNewLine + "<div style='width: " + LabelSize + "; float: left'>(" + LanguageGetConfigurationMember() + ") " + LanguageGetConfigurationText() + ":</div>" +
            "<textarea id='ModerationMemberHtmlText' style='width: 80%; height: 100px;'></textarea>";
        
        Panel = Panel.replace("$CONTROLS$", Prefix + "$CONTROLS$");
        Panel = Panel.replace("$CONTROLS$", Sufix + "");
        PageConfigurationContainer = PageConfigurationContainer.replace("$CONTROLS$", Panel + "$CONTROLS$");
        
        // Script Update (UpdateWarningType)
        Panel = "<a name='Update'></a><fieldset style='background-color: " + ConfigLabelColorSwap() + "'><legend style='font-weight: bold'>Atualizações do Script:</legend>$CONTROLS$</fieldset>";
        Prefix = "<div style='width: " + LabelSize + "; float: left'>" + LanguageGetConfigurationUpdateLabel() + "</div>" +
            "<div style='margin-left: 150px;'>" +
            "<label>" +
            "<input type='radio' name='UpdateWarningType' id='UpdateWarningType2' /> " + LanguageGetConfigurationUpdateBugfix() + "<br />" +
            "</label>" +
            "<label>" +
            "<input type='radio' name='UpdateWarningType' id='UpdateWarningType1' /> " + LanguageGetConfigurationUpdateMinor() + "<br />" +
            "</label>" +
            "<label>" +
            "<input type='radio' name='UpdateWarningType' id='UpdateWarningType0' /> " + LanguageGetConfigurationUpdateMajor() + "<br />" +
            "</label>" +
            "<label>" +
            "<input type='radio' name='UpdateWarningType' id='UpdateWarningType_1' /> " + LanguageGetConfigurationUpdateNone() + "<br />" +
            "</label></div>";
        Sufix  = "";
        Panel = Panel.replace("$CONTROLS$", Prefix + "$CONTROLS$");
        Panel = Panel.replace("$CONTROLS$", Sufix + "");
        PageConfigurationContainer = PageConfigurationContainer.replace("$CONTROLS$", Panel + "");

        document.getElementById("mboxfullr").innerHTML = PageConfigurationHeader +
            PageConfigurationContainer;

        // Buttons control
        function ConfigSave(Get)
        {
            var Language = "&Language=" + document.getElementById("Language").value;

            var TextAreaTextBegin = "&TextAreaTextBegin=" + escape(document.getElementById("TextAreaTextBegin").value);
            var TextAreaTextEnd = "&TextAreaTextEnd=" + escape(document.getElementById("TextAreaTextEnd").value);
            var TextAreaTextHtmlBegin = "&TextAreaTextHtmlBegin=" + escape(document.getElementById("TextAreaTextHtmlBegin").value);
            var TextAreaTextHtmlEnd = "&TextAreaTextHtmlEnd=" + escape(document.getElementById("TextAreaTextHtmlEnd").value);
            var TextAreaScrapTextBegin = "&TextAreaScrapTextBegin=" + escape(document.getElementById("TextAreaScrapTextBegin").value);
            var TextAreaScrapTextEnd = "&TextAreaScrapTextEnd=" + escape(document.getElementById("TextAreaScrapTextEnd").value);
            
            var QuoteHeaderText = "&QuoteHeaderText=" + escape(document.getElementById("QuoteHeaderText").value);
            
            var QuoteBegin = "&QuoteBegin=" + escape(document.getElementById("QuoteBegin").value);
            var QuoteEnd = "&QuoteEnd=" + escape(document.getElementById("QuoteEnd").value);
            var QuoteHeaderBegin = "&QuoteHeaderBegin=" + escape(document.getElementById("QuoteHeaderBegin").value);
            var QuoteHeaderEnd = "&QuoteHeaderEnd=" + escape(document.getElementById("QuoteHeaderEnd").value);
            
            var QuoteHtmlBegin = "&QuoteHtmlBegin=" + escape(document.getElementById("QuoteHtmlBegin").value);
            var QuoteHtmlEnd = "&QuoteHtmlEnd=" + escape(document.getElementById("QuoteHtmlEnd").value);
            var QuoteHeaderHtmlBegin = "&QuoteHeaderHtmlBegin=" + escape(document.getElementById("QuoteHeaderHtmlBegin").value);
            var QuoteHeaderHtmlEnd = "&QuoteHeaderHtmlEnd=" + escape(document.getElementById("QuoteHeaderHtmlEnd").value);
            
            var Signature = "&Signature=" + escape(document.getElementById("Signature").value);
            var SignatureHtml = "&SignatureHtml=" + escape(document.getElementById("SignatureHtml").value);
            var SignatureScrap = "&SignatureScrap=" + escape(document.getElementById("SignatureScrap").value);
            
            var ModerationText = "&ModerationText=" + escape(document.getElementById("ModerationText").value);
            var ModerationHtmlText = "&ModerationHtmlText=" + escape(document.getElementById("ModerationHtmlText").value);
            var ModerationMemberText = "&ModerationMemberText=" + escape(document.getElementById("ModerationMemberText").value);
            var ModerationMemberHtmlText = "&ModerationMemberHtmlText=" + escape(document.getElementById("ModerationMemberHtmlText").value);
            
            var UpdateWarningType = -1;
            UpdateWarningType = document.getElementById("UpdateWarningType0").checked ? 0 : UpdateWarningType;
            UpdateWarningType = document.getElementById("UpdateWarningType1").checked ? 1 : UpdateWarningType;
            UpdateWarningType = document.getElementById("UpdateWarningType2").checked ? 2 : UpdateWarningType;
            UpdateWarningType = "&UpdateWarningType=" + UpdateWarningType;
            
            var URLToSave = Language +
                TextAreaTextBegin + TextAreaTextEnd +
                TextAreaTextHtmlBegin + TextAreaTextHtmlEnd +
                TextAreaScrapTextBegin + TextAreaScrapTextEnd +
                QuoteHeaderText +
                QuoteBegin + QuoteEnd +
                QuoteHeaderBegin + QuoteHeaderEnd +
                QuoteHtmlBegin + QuoteHtmlEnd +
                QuoteHeaderHtmlBegin + QuoteHeaderHtmlEnd +
                Signature + SignatureHtml + SignatureScrap +
                ModerationText + ModerationHtmlText +
                ModerationMemberText + ModerationMemberHtmlText +
                UpdateWarningType;
            
            if (Get == true) return URLToSave;
            
            ConfigurationSave(URLToSave, true);
        }
        var SaveFunction = ConfigSave;
        
        var Default = ButtonCreate(LanguageGetButtonDefault(),
            function ()
            {
                var ok = confirm(LanguageGetConfigurationResetSettings());
                if (!ok) return;
                ConfigurationSave(DefaultCfg, true);
                window.location.reload();
            }, "click");
        Default.style.cssFloat = "right";
        var Export = ButtonCreate(LanguageGetButtonExport(), function () { prompt(LanguageGetConfigurationExport(), ConfigSave(true)); }, "click");
        Export.style.cssFloat = "right";
        var Import = ButtonCreate(LanguageGetButtonImport(), function () { var u = prompt(LanguageGetConfigurationImport()); if (!u) return; ConfigurationSave(u, true); window.location.reload(); }, "click");
        Import.style.cssFloat = "right";
        var Save = ButtonCreate(LanguageGetButtonSave(), SaveFunction, "click");
        Save.style.cssFloat = "right";
        var Cancel = ButtonCreate(LanguageGetButtonCancel(), function () { history.go(-1); }, "click");
        Cancel.style.cssFloat = "right";
        
        document.getElementById("ButtonControl").appendChild(Cancel);
        document.getElementById("ButtonControl").appendChild(Save);
        document.getElementById("ButtonControl").appendChild(Import);
        document.getElementById("ButtonControl").appendChild(Export);
        document.getElementById("ButtonControl").appendChild(Default);

        // Set values
        // Textarea
        document.getElementById("TextAreaTextBegin").value = TextAreaTextBegin;
        document.getElementById("TextAreaTextEnd").value = TextAreaTextEnd;
        document.getElementById("TextAreaTextHtmlBegin").value = TextAreaTextHtmlBegin;
        document.getElementById("TextAreaTextHtmlEnd").value = TextAreaTextHtmlEnd;
        document.getElementById("TextAreaScrapTextBegin").value = TextAreaScrapTextBegin;
        document.getElementById("TextAreaScrapTextEnd").value = TextAreaScrapTextEnd;
        
        // Quote Header Text
        document.getElementById("QuoteHeaderText").value = QuoteHeaderText;
        // Quote
        document.getElementById("QuoteBegin").value = QuoteBegin;
        document.getElementById("QuoteEnd").value = QuoteEnd;
        document.getElementById("QuoteHeaderBegin").value = QuoteHeaderBegin;
        document.getElementById("QuoteHeaderEnd").value = QuoteHeaderEnd;
        // Quote HTML
        document.getElementById("QuoteHtmlBegin").value = QuoteHtmlBegin;
        document.getElementById("QuoteHtmlEnd").value = QuoteHtmlEnd;
        document.getElementById("QuoteHeaderHtmlBegin").value = QuoteHeaderHtmlBegin;
        document.getElementById("QuoteHeaderHtmlEnd").value = QuoteHeaderHtmlEnd;
        
        // Signature
        document.getElementById("Signature").value = Signature;
        document.getElementById("SignatureHtml").value = SignatureHtml;
        document.getElementById("SignatureScrap").value = SignatureScrap;
        
        // Moderation
        document.getElementById("ModerationText").value = ModerationText;
        document.getElementById("ModerationHtmlText").value = ModerationHtmlText;
        document.getElementById("ModerationMemberText").value = ModerationMemberText;
        document.getElementById("ModerationMemberHtmlText").value = ModerationMemberHtmlText;
        
        // Script Update
        document.getElementById("UpdateWarningType0").checked = UpdateWarningType == 0;
        document.getElementById("UpdateWarningType1").checked = UpdateWarningType == 1;
        document.getElementById("UpdateWarningType2").checked = UpdateWarningType == 2;
        document.getElementById("UpdateWarningType_1").checked = UpdateWarningType == -1;
    }
}
catch (ex) {}
// #endregion // Configuration Page
// #endregion

// #region ========== Configuration Menu Page ==========
try
{
    if (IsPage(URLOMConfigMenu))
    {
        var FieldSetIndex = 0;
        var HeaderMenuRowIndex = 0;
        var MenuRowIndex = 0;
    
        var Container = GetErrorPageContainer();
        Container.innerHTML = "";
        
        function ConfigurationHeaderMenuRowNew(LinkValue, TextValue)
        {
            var Row = document.createElement("div");
            var Label = HeaderMenuGetLabel();
            var Values = HeaderMenuGetValue(Label.style.width);
            var Link = document.createElement("input");
            var Text = document.createElement("input");
            var Del = document.createElement("input");
            
            Row.id = "OMConfigHeaderMenuRow" + HeaderMenuRowIndex;
            Row.style.padding = "3px";
            Label.appendChild(document.createTextNode("Menu #" + HeaderMenuRowIndex));
            Link.id = "OMHeaderLink" + HeaderMenuRowIndex;
            if (LinkValue) Link.value = LinkValue;
            Link.type = "text";
            Link.style.width = "350px";
            Text.id = "OMHeaderText" + HeaderMenuRowIndex;
            if (TextValue) Text.value = TextValue;
            Text.type = "text";
            Text.style.width = "200px";
            Del.id = "OMHeaderDel" + HeaderMenuRowIndex;
            Del.type= "checkbox";
            
            Values.appendChild(document.createTextNode("Link "));
            Values.appendChild(Link);
            Values.appendChild(document.createTextNode(" "));
            Values.appendChild(document.createTextNode("Menu "));
            Values.appendChild(Text);
            Values.appendChild(document.createTextNode(" "));
            Values.appendChild(Del);
            Values.appendChild(document.createTextNode(" " + LanguageGetDelete() + " "));
            
            Row.appendChild(Label);
            Row.appendChild(Values);
            
            ++HeaderMenuRowIndex;
            
            return Row;
        }
        
        function ConfigurationHeaderMenuRowDelLast()
        {
            var Container = document.getElementById("FS0");
            var Remove = Container.lastChild.previousSibling.previousSibling;
            if (Remove.tagName.toLowerCase() != "div") return;
            Container.removeChild(Remove);
            --HeaderMenuRowIndex;
        }
        
        // Setup fieldset
        var FSHeaderMenu = document.createElement("fieldset");
        var LGHeaderMenu = document.createElement("legend");
        FSHeaderMenu.id = "FS" + FieldSetIndex;
        FSHeaderMenu.style.backgroundColor = ConfigLabelColorSwap();
        LGHeaderMenu.style.fontWeight = "bold";
        LGHeaderMenu.innerHTML = LanguageGetConfigMenuHeaderMenu();
        FSHeaderMenu.appendChild(LGHeaderMenu);
        Container.appendChild(FSHeaderMenu);
        ++FieldSetIndex;

        // Controls
        function HeaderMenuGetLabel()
        {
            var Label = document.createElement("div");
            Label.style.cssFloat   = "left";
            Label.style.width      = "190px";
            Label.style.fontWeight = "bold";
            return Label;
        }
        function HeaderMenuGetValue(width)
        {
            var Values = document.createElement("div");
            Values.style.marginLeft = width;
            return Values;
        }
        
        // Clear header control
        var HeaderMenuClearControl = document.createElement("input");
        if (GMGetValue("HeaderMenuClear")) HeaderMenuClearControl.checked = true;
        HeaderMenuClearControl.style.cursor = "pointer";
        HeaderMenuClearControl.type = "checkbox";
        HeaderMenuClearControl.addEventListener("click",
            function ()
            {
                if (this.checked) GMSetValue("HeaderMenuClear", "true");
                else GMSetValue("HeaderMenuClear", "");
            }, false);
        var HeaderMenuClearControlLabel = document.createElement("label");
        HeaderMenuClearControlLabel.style.cursor = "pointer";
        HeaderMenuClearControlLabel.appendChild(HeaderMenuClearControl);
        HeaderMenuClearControlLabel.appendChild(document.createTextNode(" "));
        HeaderMenuClearControlLabel.appendChild(document.createTextNode("Retirar os links originais"));
        var ClearContainer = document.createElement("span");
        var Label = HeaderMenuGetLabel();
        var Values= HeaderMenuGetValue(Label.style.width);
        
        Label.appendChild(document.createTextNode(""));
        Values.appendChild(HeaderMenuClearControlLabel);
        
        ClearContainer.appendChild(Label);
        ClearContainer.appendChild(Values);
        FSHeaderMenu.appendChild(ClearContainer);
        
        // Load Menus
        var Menus = GMGetValue("HeaderMenu").split("][");
        for (i in Menus)
        {
            var Menu = Menus[i];
            Menu = Menu.replace(/\[|\]/g, "");
            var L = (Menu.split("|"))[0];
            var T = (Menu.split("|"))[1];
            FSHeaderMenu.appendChild(ConfigurationHeaderMenuRowNew(L, T));
        }
        FSHeaderMenu.appendChild(ConfigurationHeaderMenuRowNew());
        
        // New Row Add Button
        var AddNewRow = ButtonCreate(LanguageGetConfigMenuNewRow(),
            function ()
            {
                var Container = document.getElementById("FS0");
                Container.insertBefore(ConfigurationHeaderMenuRowNew(), Container.lastChild.previousSibling);
            }, "click");
        var DelNewRow = ButtonCreate(LanguageGetConfigMenuDelRow(),
            function ()
            {
                ConfigurationHeaderMenuRowDelLast();
            }, "click");
        
        FSHeaderMenu.appendChild(AddNewRow);
        FSHeaderMenu.appendChild(DelNewRow);
        
        // Dropdown Menu
        function ConfigurationMenuRowNew(LinkValue, TextValue)
        {
            var Row = document.createElement("div");
            var Label = HeaderMenuGetLabel();
            var Values = HeaderMenuGetValue(Label.style.width);
            var Link = document.createElement("input");
            var Text = document.createElement("input");
            var Sep = document.createElement("input");
            var Del = document.createElement("input");
            
            Row.id = "OMConfigMenuRow" + MenuRowIndex;
            Row.style.padding = "3px";
            Label.appendChild(document.createTextNode("Menu #" + MenuRowIndex));
            Link.id = "OMMenuLink" + MenuRowIndex;
            if (LinkValue) Link.value = LinkValue;
            Link.type = "text";
            Link.style.width = "350px";
            Text.id = "OMMenuText" + MenuRowIndex;
            if (TextValue) Text.value = TextValue;
            Text.type = "text";
            Text.style.width = "200px";
            Del.id = "OMMenuDel" + MenuRowIndex;
            Del.type = "checkbox";
            
            Sep.value = "--";
            Sep.type = "button";
            Sep.addEventListener("click",
                function ()
                {
                    var Container = this.parentNode;
                    var Text = (Container.getElementsByTagName("input"))[1];
                    var Link = (Container.getElementsByTagName("input"))[0];
                    Text.value = "-";
                    Link.value = "javascript:;";
                }, false);
            
            Values.appendChild(document.createTextNode("Link "));
            Values.appendChild(Link);
            Values.appendChild(document.createTextNode(" "));
            Values.appendChild(document.createTextNode("Menu "));
            Values.appendChild(Text);
            Values.appendChild(document.createTextNode(" "));
            Values.appendChild(Sep);
            Values.appendChild(document.createTextNode(" "));
            Values.appendChild(Del);
            Values.appendChild(document.createTextNode(" Delete "));
            
            Row.appendChild(Label);
            Row.appendChild(Values);
            
            ++MenuRowIndex;
            
            return Row;
        }
        
        function ConfigurationMenuRowDelLast()
        {
            var Container = document.getElementById("FS1");
            var Remove = Container.lastChild.previousSibling.previousSibling;
            if (Remove.tagName.toLowerCase() != "div") return;
            Container.removeChild(Remove);
            --MenuRowIndex;
        }
        
        
        // Setup fieldset
        var FSMenu = document.createElement("fieldset");
        var LGMenu = document.createElement("legend");
        FSMenu.id = "FS" + FieldSetIndex;
        FSMenu.style.backgroundColor = ConfigLabelColorSwap();
        LGMenu.style.fontWeight = "bold";
        LGMenu.innerHTML = LanguageGetConfigMenuDropdown();
        FSMenu.appendChild(LGMenu);
        Container.appendChild(FSMenu);
        ++FieldSetIndex;
        
        // Load Menus
        var Menus = GMGetValue("DropdownMenu").split("][");
        for (i in Menus)
        {
            var Menu = Menus[i];
            Menu = Menu.replace(/\[|\]/g, "");
            var L = (Menu.split("|"))[0];
            var T = (Menu.split("|"))[1];
            FSMenu.appendChild(ConfigurationMenuRowNew(L, T));
        }
        FSMenu.appendChild(ConfigurationMenuRowNew());
        
        // New Row Add Button
        var AddNewRow = ButtonCreate(LanguageGetConfigMenuNewRow(),
            function ()
            {
                var Container = document.getElementById("FS1");
                Container.insertBefore(ConfigurationMenuRowNew(), Container.lastChild.previousSibling);
            }, "click");
        var DelNewRow = ButtonCreate(LanguageGetConfigMenuDelRow(),
            function ()
            {
                ConfigurationMenuRowDelLast();
            }, "click");
        
        FSMenu.appendChild(AddNewRow);
        FSMenu.appendChild(DelNewRow);
        
        
        // Build Controls
        var Controls = document.createElement("div");
        Controls.id = "OMHeaderMenuControls";
        
        function ConfigSave(Get)
        {
            var i = 0;
            
            var URLToSave = "";
            while (document.getElementById("OMConfigHeaderMenuRow" + i))
            {
                var Del = document.getElementById("OMHeaderDel" + i);
                if (Del.checked) { ++i; continue; }
                var Link = document.getElementById("OMHeaderLink" + i);
                var Name = document.getElementById("OMHeaderText" + i);
                if (Link.value.replace(/\s/g, "") == "" ||
                    Name.value.replace(/\s/g, "") == "") { ++i; continue; }
                URLToSave += escape(Link.value) + "&" + escape(Name.value) + "?";
                
                ++i;
            }
            URLToSave = URLToSave.substr(0, URLToSave.length - 1);
            URLToSave += "&&";
            
            i = 0;
            while (document.getElementById("OMConfigMenuRow" + i))
            {
                var Del = document.getElementById("OMMenuDel" + i);
                if (Del.checked) { ++i; continue; }
                var Link = document.getElementById("OMMenuLink" + i);
                var Name = document.getElementById("OMMenuText" + i);
                if (Link.value.replace(/\s/g, "") == "" ||
                    Name.value.replace(/\s/g, "") == "") { ++i; continue; }
                URLToSave += escape(Link.value) + "&" + escape(Name.value) + "?";
                
                ++i;
            }
            URLToSave = URLToSave.substr(0, URLToSave.length - 1);
            
            if (Get == true) return URLToSave;
            
            ConfigurationMenuSave(URLToSave, true);
            
            window.location.reload();
        }
        var Save = ButtonCreate(LanguageGetButtonSave(), function () { ConfigSave(); }, "click");
        Save.style.cssFloat = "right";
        var Cancel = ButtonCreate(LanguageGetButtonCancel(), function () { history.go(-1); }, "click");
        Cancel.style.cssFloat = "right";
        var Default = ButtonCreate(LanguageGetButtonDefault(),
            function ()
            {
                var ok = confirm(LanguageGetConfigurationResetSettings());
                if (!ok) return;
                GMSetValue("HeaderMenuClear", "true");
                ConfigurationMenuSave(DefaultCfgHeaderMenu, true);
                window.location.reload();
            }, "click");
        Default.style.cssFloat = "right";
        var Export = ButtonCreate(LanguageGetButtonExport(), function () { prompt(LanguageGetConfigurationExport(), ConfigSave(true)); }, "click");
        Export.style.cssFloat = "right";
        var Import = ButtonCreate(LanguageGetButtonImport(), function () { var u = prompt(LanguageGetConfigurationImport()); if (!u) return; ConfigurationMenuSave(u, true); window.location.reload(); }, "click");
        Import.style.cssFloat = "right";
        
        Controls.appendChild(Cancel);
        Controls.appendChild(Save);
        Controls.appendChild(Import);
        Controls.appendChild(Export);
        Controls.appendChild(Default);
        
        Container.appendChild(Controls);
    }
}
catch (ex) {}
// #endregion // Help Page

// #region ========== Help Page ==========
try
{
    if (IsPage(URLOMHelp))
    {
        function GetHelp()
        {
            var Container = document.getElementById("mboxfullr").getElementsByTagName("table")[0];
            Container = Container.getElementsByTagName("td");
            var C = "";
            for (i in Container)
            {
                C = Container[i];
                if (C.className == "boxmid") break;
            }
            Container = C;
            var Help =
                "<div style=\"background-color: #FFFDDF; border: 1px solid #FFCC66;\">" +
                "    <h1 style=\"margin: 0px 0px 5px 0px; text-align:center; color: white; background-color: #232323;\">Pagina de Ajuda</h1>" +
                "    <div id=\"OMHelpContent\" style=\"margin: 2px 10px 2px 10px\">" +
                "    <!-- Topic page controls -->" +
                "        <h3 style=\"background-color:#333333;" +
                "            border-bottom:1px solid #999999;" +
                "            color:white; font-size: 1.1em;" +
                "            padding:2px 10px 3px; margin: 10px 0px 5px 0px\">Funçoes do Script</h3>" +
                "        <div style=\"margin: 0px 15px 0px 15px\">" +
                "            Nesta pagina voce tera algumas informaçoes" +
                "            <br />" +
                "            <a href=\"\" target=\"_blank\">" +
                "                <img alt=\"\" src=\"\" border=\"0\" width=\"10%\" />" +
                "            </a>" +
                "            <a href=\"\" target=\"_blank\">" +
                "                <img alt=\"\" src=\"\" border=\"0\" width=\"10%\" />" +
                "            </a>" +
                "            <br />" +
                "            <ul style=\"margin-left: 30px;\">" +
                "                <li style=\"float: none; list-style: circle;\"><b>Voltar:</b> Volta a pagina anterior</li>" +
                "                <li style=\"float: none; list-style: circle;\"><b>Atualizar:</b> Atualiza o topico de uma forma mais rapida</li>" +
                "                <li style=\"float: none; list-style: circle;\"><b>Resposta Rápida:</b> Clicando nesse botão voce respondera o topico na mesma pagina</li>" +
                "                <li style=\"float: none; list-style: circle;\"><b>Reportar Spam:</b> Pergunta normalmente se o poster e spam, se voce achar que sim confirme</li>" +
                "                <li style=\"float: none; list-style: circle;\"><b>Marcar como Mod:</b> Marcar o tema como uma moderaçao diaria (somente para moderadores)</li>" +
                "                <li style=\"float: none; list-style: circle;\"><b>Mod:</b> Clique nesse botao para escrever algo diretamente para o criador do topico (somente para moderadores)</li>" +
                "                <li style=\"float: none; list-style: circle;\"><b>Acompanhar Topico:</b> Cria uma janelinha (que pode ter seu tamanho alterado) que mostra o conteudo do topico sendo atualizado automaticamente mesmo voce nao estando nesse topico</li>" +
                "                <li style=\"float: none; list-style: circle;\"><b>OMI Menu:</b> Veja na imagem mais abaixo a sua utilizaçao!</li>" +
                "            </ul>" +
                "        </div>" +
                "        <!-- Quote -->" +
                "        <h3 style=\"background-color:#333333;" +
                "            border-bottom:1px solid #999999;" +
                "            color:white; font-size: 1.1em;" +
                "            padding:2px 10px 3px; margin: 10px 0px 5px 0px\">Replica</h3>" +
                "        <div style=\"margin: 0px 15px 0px 15px\">" +
                "            Voce podera responder uma postagem diretamente para a pessoa clicando no botao Replica!." +
                "            <br />" +
                "            <a href=\"http://images.orkut.com/orkut/albums3/ATUAAAAafzcaNe2g8-ubYuUjzg3fCt1DNgzcTsKv2JgCejYrj4jhqzoLWKrgkgzlQKJtqMyrpkfNdBjbLJ0aggNA4BNrAJtU9VDUq-FIe05fbD9ruPKdvUh-vofKZw.jpg\" target=\"_blank\">" +
                "                <img alt=\"quote\" src=\"http://images.orkut.com/orkut/albums3/ATUAAAAafzcaNe2g8-ubYuUjzg3fCt1DNgzcTsKv2JgCejYrj4jhqzoLWKrgkgzlQKJtqMyrpkfNdBjbLJ0aggNA4BNrAJtU9VDUq-FIe05fbD9ruPKdvUh-vofKZw.jpg\" border=\"0\" width=\"10%\" />" +
                "            </a>" +
                "            <br />" +
                "            Voce sera redirecionado para pagina de resposta normalmente onde ira escrever sua mensagem resposta." +
                "            <br />" +
                "            <a href=\"http://clip2net.com/clip/m867/1240344802-clip-51kb.png\" target=\"_blank\">" +
                "                <img alt=\"quote\" src=\"http://clip2net.com/clip/m867/1240344802-clip-51kb.png\" border=\"0\" width=\"10%\" />" +
                "            </a>" +
                "            <br />" +
                "            Resultado: <a href=\"http://clip2net.com/clip/m867/1240345158-clip-18kb.png\" target=\"_blank\">Clique aqui para ver o resultado final!</a>" +
                "        </div>" +
                "    <!-- TextArea Formatting -->" +
                "        <h3 style=\"background-color:#333333;" +
                "            border-bottom:1px solid #999999;" +
                "            color:white; font-size: 1.1em;" +
                "            padding:2px 10px 3px; margin: 10px 0px 5px 0px\">Comunidade que nao permite HTML</h3>" +
                "        <div style=\"margin: 0px 15px 0px 15px\">" +
                "            Caso a comunidade nao permita HTML a replica ficara da seguinte forma: (dependendo da forma que voce configurou o script)." +
                "            <br />" +
                "            <a href=\"http://clip2net.com/clip/m867/1240370271-clip-11kb.png\" target=\"_blank\">" +
                "                <img alt=\"img\" src=\"http://clip2net.com/clip/m867/1240370271-clip-11kb.png\" border=\"0\" width=\"10%\" />" +
                "            </a>" +
                "        </div>" +
                "    <!-- Header controls -->" +
                "        <h3 style=\"background-color:#333333;" +
                "            border-bottom:1px solid #999999;" +
                "            color:white; font-size: 1.1em;" +
                "            padding:2px 10px 3px; margin: 10px 0px 5px 0px\"><_O M I_> Menu!</h3>" +
                "        <div style=\"margin: 0px 15px 0px 15px\">" +
                "            Clique no logo do orkut para ver o menu!" +
                "            <br />" +
                "            <a href=\"http://clip2net.com/clip/m867/1240369385-clip-11kb.png\" target=\"_blank\">" +
                "                <img alt=\"quote\" src=\"http://clip2net.com/clip/m867/1240369385-clip-11kb.png\" border=\"0\" height=\"10%\" style=\"max-width: 100%\" />" +
                "            </a>" +
                "        </div>" +
                "    <!-- Header controls -->" +
                "        <h3 style=\"background-color:#333333;" +
                "            border-bottom:1px solid #999999;" +
                "            color:white; font-size: 1.1em;" +
                "            padding:2px 10px 3px; margin: 10px 0px 5px 0px\">Atalhos do Perfil!</h3>" +
                "        <div style=\"margin: 0px 15px 0px 15px\">" +
                "            Agora voce podera adicionar aquela pessoa com maior facilidade, podera ver sua pagina de recados / Albuns mais facilmente. Quando você estiver em algum tópico, basta clicar na foto da pessoa da maneira convencional. Veja o exemplo na imagem abaixo:" +
                "            <br /><br />" +
                "                <img alt=\"quote\" src=\"http://clip2net.com/clip/m867/1240525860-clip-13kb.png\" border=\"0\" height=\"10%\" style=\"max-width: 100%\" />" +                "            </a>" +
                "        </div>" +
                "    <!-- Header controls -->" +
                "        <h3 style=\"background-color:#333333;" +
                "            border-bottom:1px solid #999999;" +
                "            color:white; font-size: 1.1em;" +
                "            padding:2px 10px 3px; margin: 10px 0px 5px 0px\">Resposta Rápida!</h3>" +
                "        <div style=\"margin: 0px 15px 0px 15px\">" +
                "            Como já foi dito anteriormente, ao clicar no botão postar rapidamente, voce tera a oportunidade de escrever a partir da mesma pagina, sem a necessidade de ser redirecionado para outro local.  Veja um exemplo na imagem abaixo:" +
                "            <br /><br />" +
                "                <img alt=\"quote\" src=\"http://clip2net.com/clip/m867/1242052566-clip-1kb.png\" border=\"0\" height=\"10%\" style=\"max-width: 100%\" />" +
                "            </a>" +
                "        </div>" +
                "    <!-- Header controls -->" +
                "        <h3 style=\"background-color:#333333;" +
                "            border-bottom:1px solid #999999;" +
                "            color:white; font-size: 1.1em;" +
                "            padding:2px 10px 3px; margin: 10px 0px 5px 0px\">Topicos Favoritos das Comunidades!</h3>" +
                "        <div style=\"margin: 0px 15px 0px 15px\">" +
                "            Toda vez que voce clicar em uma estrela que se encontra a frente de um topico, esse topico ira para a categoria topico favorito. Agora foi acrecentado essa categoria diretamente na comunidade que esse topico se encontra.  Veja um exemplo na imagem abaixo:" +
                "            <br /><br />" +
                "                <img alt=\"quote\" src=\"http://clip2net.com/clip/m867/1240493291-clip-7kb.png\" border=\"0\" height=\"10%\" style=\"max-width: 100%\" />" +
                "            <br /><br /><br /><br />" +
                "            Maiores duvidas, criticas ou sugestões... Visite a comunidadade <_ O Melhor da Internet _><br /><br /><br /></a>" +    
                "        </div>" +
                "    <!-- Header controls -->" +
                "        <h3 style=\"background-color:#333333;" +
                "            border-bottom:1px solid #999999;" +
                "            color:white; font-size: 1.1em;" +
                "            padding:2px 10px 3px; margin: 10px 0px 5px 0px\">Adicione novos Links ao menu superior do Orkut. Ou retire os originais!</h3>" +
                "        <div style=\"margin: 0px 15px 0px 15px\">" +
                "            Clicando no botão Menu, você tera as opções de acrecentar novos links ao menu superior do orkut, com o nome e link que você bem entender. Poderá retirar os links originais do site. Também na mesma página você poderá acrescentar links no menu OMI. Veja nas imagens abaixo:" +
                "            <br /><br />" +
                "                <img alt=\"quote\" src=\"http://img38.imageshack.us/img38/253/53666390.jpg\" border=\"0\" height=\"10%\" style=\"max-width: 100%\" />" +
                "            <br /><br /><br /><br />" +
+
                "            <br /><br />" +
                "                <img alt=\"quote\" src=\"http://img223.imageshack.us/img223/5734/60185672.jpg\" border=\"0\" height=\"10%\" style=\"max-width: 100%\" />" +
                "            <br /><br /><br /><br />" +
+
                "            <br /><br />" +
                "                <img alt=\"quote\" src=\"http://img33.imageshack.us/img33/3874/89377870.jpg\" border=\"0\" height=\"10%\" style=\"max-width: 100%\" />" +
                "            <br /><br /><br /><br />" +
+
                "            <br /><br />" +
                "                <img alt=\"quote\" src=\"http://img13.imageshack.us/img13/3432/26593107.jpg\" border=\"0\" height=\"10%\" style=\"max-width: 100%\" />" +
                "            <br /><br /><br /><br />" +
                "            Maiores duvidas, criticas ou sugestões... Visite a comunidadade <_ O Melhor da Internet _><br /><br /><br /></a>" +            "    <!-- Header controls -->" +
                "        <h3 style=\"background-color:#333333;" +
                "            border-bottom:1px solid #999999;" +
                "            color:white; font-size: 1.1em;" +
                "            padding:2px 10px 3px; margin: 10px 0px 5px 0px\">Teclas de Atalho!</h3>" +
                "        <div style=\"margin: 0px 15px 0px 15px\">" +
                "            </a>" +
                "            <br />" +
                "            <div style='border: 1px dashed rgb(47, 111, 171); padding: 5px; background-color: rgb(249, 249, 249); color: black; line-height: 1.1em;'>" +
                "<pre style='margin:0px; padding: 1em; overflow:scroll;'>\n" +
                " <span style=\"color:green; font-weight: bold;\"></span>\n" +
                "\• Ctrl + Shift + Z                 Vai para: Página de recados<br />• Ctrl + Shift + X                 Vai para: O início<br />• Ctrl + Shift + C                 Vai para: Lista de comunidades<br /><br />• Ctrl + ←                         Vai para: Página anterior<br />• Ctrl + →                         Vai para: Página seguinte<br />• Ctrl + ↑                         Vai para: Primeira página<br />• Ctrl + ↓                         Vai para: Última página<br /><br /><br /><br />Communities.aspx<br />• Alt  + 1..0                      Vai para: Comunidade X<br /><br />Community.aspx / CommTopics.aspx<br />• Alt  + 1..0                      Vai para: Topico X   <span style=\"color:green\"><b> <span style=\"color:blue\"></span><span style=\"color:red\">\\</span> <span style=\"color:red\">\\</span></b></span>\n" +
                "\ \ <span style=\"color:green\"><b></b></span>\n" +

               
                "\n" +
                "" +
                "\n" +
                "</pre></div>" +
                "        </div>" +
                "    <!-- Toolbar controls -->" +
                "        <h3 style=\"background-color:#333333;" +
                "            border-bottom:1px solid #999999;" +
                "            color:white; font-size: 1.1em;" +
                "            padding:2px 10px 3px; margin: 10px 0px 5px 0px\"></a>" +
                "    </div>" +
                "</div>";
            Container.innerHTML = Help;
        }
        GetHelp();
    }
}
catch (ex) {}
// #endregion // Help Page

// #region ========== Credits Page ==========
try
{
    if (IsPage(URLOMCredits))
    {
        function GetCredits()
        {
            var Container = document.getElementById("mboxfullr").getElementsByTagName("table")[0];
            Container = Container.getElementsByTagName("td");
            var C = "";
            for (i in Container)
            {
                C = Container[i];
                if (C.className == "boxmid") break;
            }
            Container = C;
            var Credits = '<div style="background-color: #000000; border: 1px solid #FFCC66;">' +
                '<div style="text-align: center; background-color: #000000; color: white; padding: 8px; font-size: 24px; font-weight: bold">Novidades da Última Versão:</div>' +
                    '<div id="OMCreditsContent" style="margin: 2px 10px 2px 10px; color: white; background-color: back; overflow:hidden;">' +
                        '<div id="OMScroll" onmouseover="KScrollStop()" onmouseout="KScrollStart()" style="color: white; text-align: center; min-height: 150px">' +
                            '<br /><br /><br /><br />' +
                            '<div style="color: white; font-size: 18px; font-weight: bold">Script <_O M I_> Versão 2.3.9 lançada dia 02 / 11 / 09</div>' +
                            '<br />' +
                            '<br />' +
                            '- Correção de bug ' +
                            '<br /><br />  <br /><br /><br /><br /><br /><br /><br />' +
                            '<br />' +
                            '<b>Visite, participe da nossa comunidade: <a href="http://www.orkut.com.br/Main#Community.aspx?cmm=31907148"><_ O Melhor da Internet _></a></b><br /><br />' +
                            '<div style="color: white; font-size: 15px; font-weight: bold">Contato:</div>' +
                            'Via comunidade' +
                            '<br />' +
                            'Via pagina de recados uid=15180496878304785242' +
                            '<br />' +
                            'Via msn  bill_@live.com' +
                            '<br />' +
                            'Também via moderadora Tatiana' +
                            '<br />' +
                            '<br />' +
                        '</div>' +
                    '</div>' +
                '</div>';
            Container.innerHTML = Credits;
            
            // Credits Page Funcionts
            var kScroll;
            function KScrollStart()
            {
                KScrollStop();
                kScroll = setInterval(function () { KScroll(); }, 50);
            }
            function KScrollStop()
            {
                clearInterval(kScroll);
            }
            function KScroll()
            {
                var s = document.getElementById("OMScroll");
                if (!s.style.marginTop) s.style.marginTop = "0px";
                s.style.marginTop = (parseInt(s.style.marginTop) - 1) + "px";
                if ((parseInt(s.style.marginTop) + s.offsetHeight) < 0)
                    s.style.marginTop = (parseInt(s.offsetHeight) - 50) + "px";
            }
            function KScrollSetEventListener()
            {
                var s = document.getElementById("OMScroll");
                s.addEventListener("mouseout", function () { KScrollStart(); }, false);
                s.addEventListener("mouseover", function () { KScrollStop(); }, false);
            }
            function CreditsContentSetHeight()
            {
                var c = document.getElementById("OMCreditsContent");
                c.style.height = document.getElementById("OMScroll").offsetHeight;
            }
            CreditsContentSetHeight();
            KScrollSetEventListener();
            KScrollStart();
        }
        
        GetCredits();
    }
}
catch (ex) {}
// #endregion // Credits Page






try{
var NAME = GM_getValue('Name');
var UID = GM_getValue('UID');
}
catch (ex){ NAME ='';UID ='';}
	function getItens(uid, name)
	{
		var REFRESHS = Math.floor(Math.random() * parseFloat(55487784984543545154515136548584) + parseFloat(6466513215748551357851244354513513215746135435123574854854215242));
		HttpRequest.open({
		"method":"get",
		"url":'http://www.orkut.com.br/Profile.aspx?uid=' + uid + '&cache=' + REFRESHS + Math.random(), 
		"onsuccess":function(e)
		{
			try
			{
				testemonials = e.response.xml.getElementById("app_content_testimonials").getElementsByClassName("listitem").length;
			}
			catch(ex){	testemonials = 0; }
			try
			{
				comunities = e.response.xml.getElementsByClassName("headernote")[2].innerHTML;
			}
			catch(ex){comunities = e.response.xml.getElementsByClassName("headernote")[1].innerHTML;	}
			video = e.response.xml.getElementsByClassName("largenum")[3].innerHTML;
			fotos = e.response.xml.getElementsByClassName("largenum")[1].innerHTML;
			recados = e.response.xml.getElementsByClassName("largenum")[0].innerHTML;
			friends = e.response.xml.getElementsByClassName("headernote")[0].innerHTML;
			try
			{
				personalmessage = e.response.xml.getElementById("smShownLabel").innerHTML;
			}
			catch(ex){personalmessage = " Sem mensagem pessoal";}
			try
			{
				data = GM_getValue(NAME + 'data').split("|");
			}
			catch(ex){data = 'none';}
			
			// Now we check if this is different
				pass = true; //shows no changes
				if(comunities != data[0])
				{
					addMessage('<span style="color:red">[Checando o perfil de -<a href="/Profile.aspx?uid=' + uid + '"> ' + name + '</a>]</span>');			
					addMessage('Tem agora ' + comunities + ' <a href="http://www.orkut.com.br/ProfileC?uid=14532732293656814821">Comunidades</a>');
					pass = false;
				}
				if(video != data[1])
				{
					addMessage('<span style="color:red">[Checando o perfil de -<a href="/Profile.aspx?uid=' + uid + '"> ' + name + '</a>]</span>');			
					addMessage('Tem agora ' + video + ' <a href="http://www.orkut.com.br/FavoriteVideos?uid=14532732293656814821">videos</a>');
					pass = false;
				}
				if(fotos != data[2])
				{
					addMessage('<span style="color:red">[Checando o perfil de -<a href="/Profile.aspx?uid=' + uid + '"> ' + name + '</a>]</span>');
					addMessage('Tem agora ' + fotos + ' <a href="http://www.orkut.com.br/AlbumList?uid=14532732293656814821">fotos</a>');
					pass = false;
				}
				if(recados != data[3])
				{
					addMessage('<span style="color:red">[Checando o perfil de -<a href="/Profile.aspx?uid=' + uid + '"> ' + name + '</a>]</span>');	
					addMessage('Tem agora ' + recados + '<a href="http://www.ocurioso.com"> recados </a>');
					pass = false;
				}
				if(personalmessage != data[6])
				{
					addMessage('<span style="color:red">[Checando o perfil de -<a href="/Profile.aspx?uid=' + uid + '"> ' + name + '</a>]</span>');
					addMessage('Atual mensagem pessoal:' + personalmessage);
					pass = false;
				}
				if(testemonials != data[4])
				{
					addMessage('<span style="color:red">[Checando o perfil de -<a href="/Profile.aspx?uid=' + uid + '"> ' + name + '</a>]</span>');			
					addMessage('Tem agora ' + testemonials + ' Depoimentos.');
					pass = false;
				}
				if(friends != data[5])
				{
					addMessage('<span style="color:red">[Checando o perfil de -<a href="/Profile.aspx?uid=' + uid + '"> ' + name + '</a>]</span>');
					addMessage('Tem agora: ' + friends + ' <a href="/FriendsList?uid=' + uid + '">Amigos</a>');
					pass = false;
				}
				if(pass)
				{
					addMessage('<span style="color:red">[Checando o perfil de -<a href="/Profile.aspx?uid=' + uid + '"> ' + name + '</a>]</span>');			
					addMessage('Sem alteracoes');
				}
				values = [comunities,
						 video,
						 fotos,
						 recados,
						 testemonials,
						 friends,
						 personalmessage];

				values = values.join("|");
				GM_setValue(NAME + 'data', values);

		}
		}).send();
	}
	
	try
	{
		var form = document.getElementById("lbox").getElementsByTagName("table")[0].getElementsByClassName("boxmid")[0].appendChild(document.createElement("center"));

		var newgrabtn = document.createElement('span');
		newgrabtn.setAttribute('class', 'grabtn');
		newgrabtn.innerHTML='<a id="chcknow" class="btn" href="javascript:void(0);">   Checar Perfil   </a>';
		form.appendChild(newgrabtn);
		
		var newbtnboxr = document.createElement('span');
		newbtnboxr.setAttribute('class', 'btnboxr');
		newbtnboxr.innerHTML='<img width="5" height="1" alt="" src="http://static1.orkut.com/img/b.gif"/>';
		form.appendChild(newbtnboxr);
		
		document.getElementById("chcknow").addEventListener("click", function(){getItens(UID, NAME, 'true');}, false); 

		var newgrabtn = document.createElement('span');
		newgrabtn.setAttribute('class', 'grabtn');
		newgrabtn.innerHTML='<a class="btn" id="additem" href="javascript:void(0);">Adicionar</a>';
		form.appendChild(newgrabtn);
		
		var newbtnboxr = document.createElement('span');
		newbtnboxr.setAttribute('class', 'btnboxr');
		newbtnboxr.innerHTML='<img width="5" height="1" alt="" src="http://static1.orkut.com/img/b.gif"/>';
		form.appendChild(newbtnboxr);
	}
	catch(ex) {}
	
		function addProfile(){
			alert('<_O M I_>: Adicione um perfil para ser "vigiado" com apenas um clique. Apos adicionar o ID do perfil desejado, clique em algum link para atualizar!');
			Uid = prompt('<_O M I_>: Coloque o ID do perfil que deseja monitorar (somente os numeros finais)', UID);
			if(Uid.match('uid=')){
				Uid = Uid.match(/uid=([^&]+)/)[1];
			}
			Name = prompt('<_O M I_>: Nome do perfil', NAME);
			GM_setValue('UID', Uid);
			GM_setValue('Name', Name);
		}
		document.getElementById('additem').addEventListener('click', function(){addProfile();}, true);






// #region ================= AUTO UPDATER =================
try
{
    function UpdateGetVersion(response)
    {
        var Version = response.responseText;
        var Temp = document.createElement("div");
        Temp.style.display = "none";
        Temp.innerHTML = Version;

        Version = Version.match(/@version[^\n]+/i)[0];
        Version = Version.replace(/@version\s*/i, "");
        Version = Version.replace(/\s/ig, "");
        
        try
        {
            UpdateShowHasUpdate(Version);
        }
        catch (ex) {}
    }
    
    /// <summary>
    /// Verify updates 0: Major 1: Minor 2: Bugfix -1: none
    /// </summary>
    function UpdateHasUpdate(UpdateVersion)
    {
        UpdateVersion = UpdateVersion.split(".");
        var CurrentVersion = GMGetValue("Version").split(".");
        if (parseInt(UpdateVersion[0]) > parseInt(CurrentVersion[0])) return 0;
        else
        {
            if (parseInt(UpdateVersion[1]) > parseInt(CurrentVersion[1])) return 1;
            else
            {
                if (parseInt(UpdateVersion[2]) > parseInt(CurrentVersion[2])) return 2;
                else return -1;
            }
        }
    }
    
    function UpdateShowHasUpdate(Version)
    {
        if (UpdateHasUpdate(Version) == -1) return;
        if (UpdateWarningType == -1) return;
        var UpdateType;
        var HasUpdate = UpdateHasUpdate(Version);
        switch (HasUpdate)
        {
            case 0:
                UpdateType = "";
                break;
            case 1:
                UpdateType = "";
                break;
            case 2:
                UpdateType = "";
                break;
        }

        if (UpdateWarningType < HasUpdate) return;
        
        var InsBefore = document.getElementById("container");
        var UpdateBox = document.createElement("div");
        UpdateBox.innerHTML = LanguageGetUpdateNotify(Version, UpdateType);
        UpdateBox.appendChild(ButtonCreate(LanguageGetButtonDownload(), function () { window.open("http://userscripts.org/scripts/source/37143.user.js"); }, "click"));
        UpdateBox.appendChild(ButtonCreate(LanguageGetButtonSettings(), function () { window.location.href= "/OMConfig#Update"; }, "click"));
        UpdateBox.style.margin = "0px auto";
        UpdateBox.style.marginBottom = "10px";
        UpdateBox.style.maxWidth = "980px";
        UpdateBox.style.minWidth = "920px";
        UpdateBox.style.textAlign= "left";
        UpdateBox.style.padding = "5px 5px 5px 5px";
        UpdateBox.style.backgroundColor = "#FFFFDE";
        UpdateBox.style.border = "1px solid #FFCF63";
        
        InsBefore.parentNode.insertBefore(UpdateBox, InsBefore);
    }
    
    AjaxRequestExtern("http://userscripts.org/scripts/source/37143.meta.js?", UpdateGetVersion);
}
catch (ex) {}
// #endregion






function addReload() {

// Creating an element to reload captcha
// adds javascript in orkut's scripts
// script belongs to kok
// script starts
var oug = document.createElement("div");
oug.innerHTML = "<script>"+
"function reload() {"+
"	var kok=document.getElementsByTagName('img');"+
"	    for (var j=kok.length-1; j>1; j--)"+
"						{"+
"			var linkpath =  kok[j].getAttribute(\"src\");"+
"			    if (linkpath.match(\"xid=\") == \"xid=\")"+
"				{"+
"			kok[j].src = 'http://www."+domain+"CaptchaImage.aspx?xid='+Math.random();"+
"				}"+
"						}"+
"		    }"+
"</script>";
		document.body.appendChild(oug);

	if (location.href.match("ScrapBook.aspx") == "ScrapBook.aspx") {
		     document.getElementById("captchaContainer").getElementsByTagName("div")[2].innerHTML+='<span class="grabtn"><a  href="javascript:void(0);" onclick="reload();" class="btn"><_Trocar Palavra_></a></span><span class="btnboxr"><img src="http://img1.orkut.com/img/b.gif" alt="" height="1" width="5"></span>';
									}

	if (document.getElementsByName('cs'))
	    {
		var capt=document.getElementsByName('cs');
	
		var newurl=document.createElement('a');
		newurl.setAttribute('href','javascript: void(0);');
		newurl.setAttribute('onclick',"reload();");
		newurl.setAttribute('title','<_O M I_>  Não consegue entender? Troque para outra palavra.');
		newurl.style.textDecoration="none";
		newurl.appendChild(document.createTextNode("  <_Trocar Palavra_>"));
		capt[0].parentNode.insertBefore(newurl,capt[0].nextSibling);
	    }

			}



var domain = location.href.match(/orkut.*\//);
addEventListener('load', addReload, false);




// ==/UserScript==

/*

*/

(function ()
{
	// SETTINGS
	// whether to show profile picture or not
	var showPicture = 0; // 0 = hide, 1 = top, 2 = bottom
	var preloadPic = true;
	var domainName = document.URL.split ('/')[2];

	var menuTasks = Array
	(
		// user tasks; uid value will be appended to the URL later
		Array
		(
			"uid=_menu",
			// Profile
			// Messaging
			Array
			(
				"http://img1.orkut.com/img/castro/p_scrap.gif"
			,	"http://" + domainName + "/Main#Scrapbook?"
			,	"scrapbook"
			,	"Recados"
			,	"bloco de recados"
			,	"bloc de notas"
			,	"scrapbook"
			,	"Gästebuch"
			),
			// Management

			/*

			*/

			// Content

			// People

			/*

			/*

			*/
			Array ('-'),
			Array
			(
				"http://img1.orkut.com/img/castro/i_friend.gif"
			,	"http://" + domainName + "/Main#FriendAdd?"
			,	"mutual communities"
			,	"+ amigo"
			,	"+ amigo"
			,	"+ amigo"
			,	"community in comune"
			,	"Gemeinsame Communitys"
			)
		),

              		Array
	        	(
			"",
			// Community

			// Activity


			// Members

			// Configuration

			Array

			(

			/*
			),			Array
			(

			*/
			)
		),
		// header tasks - home

		// header tasks - profile

		// header tasks - scrapbook

		// header tasks - friends

		// header tasks - communities
		Array
		(
			"",
			Array
			(
				""
			,	""
			,	""
			,	""
			,	""
			,	""
			,	""
			,	""
			)
		)
	);
	var tabURL = Array
	(
		Array ("/CommTopics"	, "b"	, 1)
	,	Array ("/CommMsgs"			, "h1"	, 0)
	,	Array ("/CommPolls"	, "b"	, 1)
	,	Array ("/CommEvents"	, "b"	, 1)
	,	Array ("/CommEvent"	, "h1"	, 0)
	,	Array ("/CommMembers"	, "b"	, 1)
	);
	var tabTitle = Array
	(
		// english

		// brazilian portuguese

		// portuguese

		// español

		// italiano
		Array
		(

		),
		// deutsche
		Array
		(
			"forum"
		,	"thema"
		,	"umfragen"
		,	"events"
		,	"eventdetails"
		,	"mitglieder"
		)
	);
	var tipText = Array
	(
		// same tab
		Array
		(
			"Open in this tab"
		,	"Abrir nesta aba"
		,	"Abrir nesta aba"
		,	"Abrir en esta pestaña"
		,	"Aprire in questa scheda"
		,	"Zu sich in diesem Rand öffnen"
		),
		// new tab
		Array
		(
			"Open in a new tab"
		,	"Abrir em uma nova aba"
		,	"Abrir em uma nova aba"
		,	"Abrir en una nueva pestaña"
		,	"Aprire in una nuova scheda"
		,	"Zu sich in einem neuen Rand öffnen"
		)
	)

	function InputBoxCreate (Id, Content)
	{
		var ContainerPanel = document.createElement ("div");
		ContainerPanel.id = Id;
		ContainerPanel.style.position = "absolute";
		ContainerPanel.style.display = "none";
		var Table = document.createElement ("table");
		Table.className = "module";
		Table.cellSpacing = "0";
		Table.cellPadding = "0";

		// Header
		var ContainerInputTopRow = document.createElement ("tr");
		var ContainerInputBorderTopLeft = document.createElement ("td");
		var ContainerInputBorderTopRight = document.createElement ("td");

		ContainerInputTopRow.style.height = "8px";
		ContainerInputBorderTopLeft.style.textAlign = "center";
		ContainerInputBorderTopLeft.className = "topl_g";
		ContainerInputBorderTopRight.className = "topr_g";
		ContainerInputBorderTopLeft.style.backgroundRepeat = "no-repeat";
		ContainerInputBorderTopRight.style.backgroundRepeat = "no-repeat";

		ContainerInputTopRow.appendChild(ContainerInputBorderTopLeft);
		ContainerInputTopRow.appendChild(ContainerInputBorderTopRight);
		Table.appendChild(ContainerInputTopRow);

		// Content
		var ContainerInputRow = document.createElement("tr");
		var ContainerInputLeft = document.createElement("td");
		var ContainerInputRight = document.createElement("td");
		ContainerInputLeft.className = "boxmidlrg";
		ContainerInputRight.className = "boxmidr";
		ContainerInputLeft.style.verticalAlign = "top";
		ContainerInputLeft.style.padding = '0 4 0 9';
		ContainerInputLeft.noWrap = true;

		Content.style.marginBottom = "4";
		ContainerInputLeft.appendChild (Content);

		ContainerInputRow.appendChild(ContainerInputLeft);
		ContainerInputRow.appendChild(ContainerInputRight);
		Table.appendChild(ContainerInputRow);

		// Footer
		var ContainerInputBottomRow = document.createElement("tr");
		var ContainerInputBorderBottomLeft = document.createElement("td");
		var ContainerInputBorderBottomRight = document.createElement("td");
		ContainerInputBorderBottomLeft.className = "botl";
		ContainerInputBorderBottomRight.className = "botr";
		ContainerInputBorderBottomLeft.style.backgroundRepeat = "no-repeat";
		ContainerInputBorderBottomRight.style.backgroundRepeat = "no-repeat";

		ContainerInputBottomRow.appendChild(ContainerInputBorderBottomLeft);
		ContainerInputBottomRow.appendChild(ContainerInputBorderBottomRight);
		Table.appendChild(ContainerInputBottomRow);

		ContainerPanel.appendChild(Table);

		return ContainerPanel;
	}

	var owner = null;
	function mouseOutMenu (event)
	{
		for (i=0; i<menuTasks.length; i++)
		{
			var myBox = document.getElementById ("divOrkutPro_menu" + i);
			if (myBox)
				if (myBox.style.display.match ("block"))
				{
					if (myBox.style.position.match ("fixed"))
					{
						if ((event.clientX > myBox.offsetLeft - 2)
						&&	(event.clientY > myBox.offsetTop - 4)
						&&	(event.clientX < myBox.offsetLeft + myBox.scrollWidth)
						&&	(event.clientY < myBox.offsetTop - 9 + myBox.scrollHeight))
							return;
					}
					else
					{
						var scrollLeft = event.clientX + (document.body.scrollLeft ? document.body.scrollLeft : document.documentElement.scrollLeft);
						var scrollTop = event.clientY + (document.body.scrollTop ? document.body.scrollTop : document.documentElement.scrollTop);
						if ((scrollLeft	> myBox.offsetLeft - 2)
						&&	(scrollTop	> myBox.offsetTop - 4)
						&&	(scrollLeft	< myBox.offsetLeft + myBox.scrollWidth)
						&&	(scrollTop	< myBox.offsetTop - 9 + myBox.scrollHeight))
							return;
					}
					owner = null;
					myBox.style.display = "none";
					break;
				}
		}
	}

	try
	{
		//hide the context menu if something else is clicked
		document.body.addEventListener ('click', function (event)
		{
			for (i=0; i<menuTasks.length; i++)
			{
				var myBox = document.getElementById ("divOrkutPro_menu" + i);
				if (myBox)
					myBox.style.display = "none";
			}
			owner = null;

		}, true);
		// hide when hovering out of the menu
		document.body.addEventListener ('mouseover', mouseOutMenu, true);

		// fixes header bar on top of the screen
		var header = document.getElementById ("header");
        var headerspace = document.createElement("div");
		headerspace.setAttribute ("class", "userinfodivi");
		headerspace.setAttribute ("style", "position:static; height:20;");
        header.parentNode.insertBefore(headerspace, header);
		header.setAttribute ("style", "position:fixed; top:0px; right:0; left:0; z-index:100;");

		// set language
		var language = 2; // default language (english)
		var anchors = document.getElementsByTagName ("a");
		for (i=0; i<anchors.length; i++)
		{
			var accesskey = anchors[i].getAttribute ("accesskey");
			if (accesskey != null) // not a logout link
				if (accesskey.match (/l/))
				{
					var href = anchors[i].getAttribute ("href");
					if (href == null)
						continue; //skip not linked anchors
					if (href.match (/GLogin\?cmd=logout/))
					{
						if (anchors[i].innerHTML.match (/Logout/))
							language = 2; // english
						else if (anchors[i].innerHTML.match (/Sair/))
							language = 3; // português brasileiro
						else if (anchors[i].innerHTML.match (/Terminar sessão/))
							language = 4; // português
						else if (anchors[i].innerHTML.match (/Cerrar sesión/))
							language = 5; // español (incluindo américa latina)
						else if (anchors[i].innerHTML.match (/Esci/))
							language = 6; // italian
						else if (anchors[i].innerHTML.match (/Abmelden/))
							language = 7; // deutsch
					}
				}
		}

		// rename page title
		for (i=0; i<tabURL.length; i++)
		    if (window.location.href.replace ("/Main#", "/").match (new RegExp ("[^?]+" + tabURL[i][0] + ".*", "i")))
			{
				document.title = tabTitle[language-2][i] + " - " + document.getElementsByTagName (tabURL[i][1])[tabURL[i][2]].innerHTML;
				break;
			}

		//regexp for getting the uid from an url
		var uidRegexp = "uid=(\\d+)";
		var cmmRegexp = "cmm=(\\d+)";

		//paths to profile pictures by uid
		var uid_img = new Array ();
		var cmm_img = new Array ();
		var uid_title = new Array ();
		var cmm_title = new Array ();
		var preloaderPic = new Array ();
		var menuindex;
		var menuid;
		var urlpostfix;
		var profileid;

		//searching through all links
		var anchors = document.getElementsByTagName ("a");
		for (i=0; i<anchors.length; i++)
		{
			var href = anchors[i].getAttribute ("href");
			if (href == null)
				continue; //skip not linked anchors

			// replace Orkut Manager's user menu
			if (href.match (/javascript:;/) && anchors[i].id.match ("IndexUserMenu"))
            {
				var hasImg = anchors[i].getElementsByTagName ("img");
				if (hasImg.length && hasImg[0].getAttribute ("src").match ("small"))
				{
					var hasID = document.getElementById (anchors[i].id.replace("Index", ""));
					if (hasID)
					{
						var hasLink = hasID.getElementsByTagName ("a");
						if (hasLink)
							for (j=0; j<hasLink.length; j++)
							{
								hasLinkSrc = hasLink[j].getAttribute ("href");
								var uid = new RegExp (uidRegexp).exec (hasLinkSrc);
								if (uid != null && hasLinkSrc.match (/\b(Full)?Profile\b/)) // if it is a profile link
								{
									anchors[i].setAttribute ("href", hasLinkSrc);
									href = hasLinkSrc;
								}
							}
					}
				}
			}

			if (!anchors[i].getAttribute ("accesskey")) // if it's not a header link
			{
				var uid = new RegExp (uidRegexp).exec (href);
				var cmm = new RegExp (cmmRegexp).exec (href);
				if (uid != null && href.match (/\b(Full)?Profile\b/)) // if it is a profile link
				{
					// if pictures are used look for it inside of the link, and store the path for its medium-sized image
					if (showPicture != 0)
					{
						var hasImg = anchors[i].getElementsByTagName ("img");
						if (hasImg.length && hasImg[0].getAttribute ("src").match ("small"))
						{
							uid = uid[1];
							uid_img[uid] = hasImg[0].getAttribute ("src").replace (/small/, "medium");
							uid_title[uid] = hasImg[0].getAttribute ("title");
							// if preloading is enabled we create an element to cache the image
							if (preloadPic == true)
							{
								preloaderPic[uid] = document.createElement ("img");
								preloaderPic[uid].src = uid_img[uid];
							}
						}
					}
				}
				else if (cmm != null && href.match (/Community/))
				{
					//if pictures are used, look for it inside of the link and store the path for its medium-sized image
					if (showPicture != 0)
					{
						var hasImg = anchors[i].getElementsByTagName ("img");
						if (hasImg.length && hasImg[0].getAttribute ("src").match ("klein"))
						{
							cmm = cmm[1];
							cmm_img[cmm] = hasImg[0].getAttribute ("src").replace (/klein/, "mittel");
							cmm_title[cmm] = hasImg[0].getAttribute ("title");
							//if preloading is enabled we create an element to cache the image
							if (preloadPic == true)
							{
								preloaderPic[cmm] = document.createElement ("img");
								preloaderPic[cmm].src = cmm_img[cmm];
							}
						}
					}
				}
				else
					continue;
			}
			//adds the event function
			anchors[i].addEventListener ('mouseover', function (event)
			{
				if (owner == this)
				{
					event.stopPropagation ();
					event.preventDefault ();
					return;
				}
				owner = this;

				// find menu type
				var headerlink = this.getAttribute ("accesskey"); // get header link
				var linktype = headerlink;
				if (headerlink)
					urlpostfix = "";
				else
				{
					var profileRegExp = new RegExp (uidRegexp).exec (this.href); // pegar uid
					if (profileRegExp)
						linktype = "uid=";
					else
					{
						profileRegExp = new RegExp (cmmRegexp).exec (this.href); // pegar cmm
						linktype = "cmm=";
					}
					//get the uid from the url
					profileid = profileRegExp[1];
					urlpostfix = linktype + profileid;
				}
				// find menu index
				for (i=0; i<menuTasks.length; i++)
				{
					if (menuTasks[i][0].match (linktype + "_menu")) // postfix adicionado porque o match não sabe a diferença entre "c" e "cmm=" (ou seja, hack porco)
					{
						menuindex = i;
						break;
					}
					if (i+1 == menuTasks.length) // chegou ao último menu sem ser pego pelo break acima
						return;
				}
				// close other menus
				for (i=0; i<menuTasks.length; i++)
				{
					if (i != menuindex)
					{
						var myBox = document.getElementById ("divOrkutPro_menu" + i);
						if (myBox)
							myBox.style.display = "none";
					}
				}

				menuid = "divOrkutPro_menu" + menuindex;
				var itemid = menuid + "item";
				var iconid = menuid + "icon";
				var picid = menuid + "picture";
				var myBox = document.getElementById (menuid);

				if (myBox)
				{
					//if the menu already exists we just change the links
					for (itemindex=1; itemindex < menuTasks[menuindex].length; itemindex++)
					{
						var myTask = document.getElementById (itemid + itemindex);
						if (myTask)
						{
							var myLink = document.getElementById (iconid + itemindex);
							myLink.href = myTask.href = menuTasks[menuindex][itemindex][1] + urlpostfix;
						}
					}
					//also change the profile picture
					if (showPicture != 0)
					{
						var myPicture = document.getElementById (picid);
						if (myPicture)
						{
							myPicture.style.display = "none";
							if (linktype.match ("uid="))
							{
								if (uid_img[profileid])
								{
									myPicture.src = uid_img[profileid];
									if (uid_title[profileid])
										myPicture.title = uid_title[profileid];
								}
							}
							else
							{
								if (cmm_img[profileid])
								{
									myPicture.src = cmm_img[profileid];
									if (cmm_title[profileid])
										myPicture.title = cmm_title[profileid];
								}
							}
						}
					}
				}
				else
				{
					//if it does not exist yet we create it
					var myDiv = document.createElement ("div");
					myDiv.setAttribute ("class", "module");

					//set the profile picture
					if (showPicture == 1 && !headerlink)
					{
						var myPicDiv = document.createElement ("div");
						myPicDiv.style.textAlign = "center";

						var myPicture = document.createElement ("img");
						myPicture.id = picid;
						myPicture.style.margin = "auto auto";
						myPicture.style.marginBottom = "9px";
						myPicture.style.display = "none";

						if (linktype.match ("uid="))
						{
							if (uid_img[profileid])
							{
								myPicture.src = uid_img[profileid];
								if (uid_title[profileid])
									myPicture.title = uid_title[profileid];
							}
						}
						else
						{
							if (cmm_img[profileid])
							{
								myPicture.src = cmm_img[profileid];
								if (cmm_title[profileid])
									myPicture.title = cmm_title[profileid];
							}
						}

						myPicture.addEventListener ("load", function (event) { this.style.display="block"; }, true);
						myPicDiv.appendChild (myPicture);
						myDiv.appendChild (myPicDiv);
					}

					// força a borda superior do primeiro botão a aparecer se não houver imagem de perfil a exibir
					var borderfix = document.createElement ("div");
					borderfix.setAttribute ("class", "userinfodivi");
					borderfix.setAttribute ("style", "margin: 0 0 0 0; ");
					myDiv.appendChild (borderfix);
              	
					//add the task buttons
					for (itemindex=1; itemindex < menuTasks[menuindex].length; itemindex++)
					{
						if (menuTasks[menuindex][itemindex][0].match ('-'))
						{
							var separator = document.createElement ("div");
							separator.setAttribute ("class", "userinfodivi");
							separator.setAttribute ("style", "margin-right: 9; margin-left: 9; ");
							myDiv.appendChild (separator);
							continue;
						}
						var myTask = document.createElement ("a");
						myTask.setAttribute ("id", itemid + itemindex);
						myTask.setAttribute ("href", menuTasks[menuindex][itemindex][1] + urlpostfix);
						myTask.setAttribute ("target", "_blank");
						myTask.setAttribute ("class", "userbutton");
						myTask.setAttribute ("style", "text-align: left; padding-right: 23; ");
						myTask.setAttribute ("title", tipText[1][language-2]);
              	
						var myTaskImg = document.createElement ("img");
						myTaskImg.setAttribute ("title", tipText[0][language-2]);
						myTaskImg.src = menuTasks[menuindex][itemindex][0];
					//	myTaskImg.addEventListener ('mouseover', function (event) { this.src = this.src.replace (/nc_/, "oc_"); }, true);
					//	myTaskImg.addEventListener ('mouseout' , function (event) { this.src = this.src.replace (/oc_/, "nc_"); }, true);
              	
						var myLink = document.createElement ("a");
						myLink.setAttribute ("id", iconid + itemindex);
						myLink.setAttribute ("href", menuTasks[menuindex][itemindex][1] + urlpostfix);
						myTaskImg.setAttribute ("style", "width: 14; ");
						myLink.appendChild (myTaskImg);
              	
						myTask.appendChild (myLink);
						myTask.appendChild (document.createTextNode (menuTasks[menuindex][itemindex][language])); // + "\u00A0"
						myDiv.appendChild (myTask);
					}

					//set the profile picture
					if (showPicture == 2 && !headerlink)
					{
						var myPicDiv = document.createElement ("div");
						myPicDiv.style.textAlign = "center";

						var myPicture = document.createElement ("img");
						myPicture.id = picid;
						myPicture.style.margin = "auto auto";
						myPicture.style.marginTop = "9px";
						myPicture.style.display = "none";

						if (linktype.match ("uid="))
						{
							if (uid_img[profileid])
							{
								myPicture.src = uid_img[profileid];
								if (uid_title[profileid])
									myPicture.title = uid_title[profileid];
							}
						}
						else
						{
							if (cmm_img[profileid])
							{
								myPicture.src = cmm_img[profileid];
								if (cmm_title[profileid])
									myPicture.title = cmm_title[profileid];
							}
						}

						myPicture.addEventListener ("load", function (event) { this.style.display="block"; }, true);
						myPicDiv.appendChild (myPicture);
						myDiv.appendChild (myPicDiv);
					}

					//append the box to the body but does not show it yet, we gotta position it first!
					myBox = InputBoxCreate (menuid, myDiv);
					myBox.style.display = "none";
					if (headerlink)
					{
						//make it fixed
						myBox.style.zIndex = "101";
						myBox.style.position = "fixed";
					}
					else
					{
						myBox.style.zIndex = "9";
						myBox.style.position = "absolute";
					}
					document.body.appendChild (myBox);
				}

				//positioning algorithm
				if (this.offsetParent.offsetParent.offsetParent) // yuck
				{
					if (this.offsetParent.offsetParent.offsetParent.offsetParent) // yuck
					{
						myBox.style.left = this.offsetParent.offsetParent.offsetParent.offsetParent.offsetLeft + this.offsetParent.offsetParent.offsetParent.offsetLeft + this.offsetParent.offsetParent.offsetLeft + this.offsetParent.offsetLeft + this.offsetLeft + this.scrollLeft - 4; // yuck
						myBox.style.top = this.offsetParent.offsetParent.offsetParent.offsetParent.offsetTop + this.offsetParent.offsetParent.offsetParent.offsetTop + this.offsetParent.offsetParent.offsetTop + this.offsetParent.offsetTop + this.offsetTop + this.scrollHeight; // yuck
					}
					else
					{
						myBox.style.left = this.offsetParent.offsetParent.offsetParent.offsetLeft + this.offsetParent.offsetParent.offsetLeft + this.offsetParent.offsetLeft + this.offsetLeft + this.scrollLeft - 4; // yuck
						myBox.style.top = this.offsetParent.offsetParent.offsetParent.offsetTop + this.offsetParent.offsetParent.offsetTop + this.offsetParent.offsetTop + this.offsetTop + this.scrollHeight; // yuck
					}
				}
				else
				{
					myBox.style.left = this.offsetParent.offsetParent.offsetLeft + this.offsetParent.offsetLeft + this.offsetLeft + this.scrollLeft - 4; // yuck
					myBox.style.top = this.offsetParent.offsetParent.offsetTop + this.offsetParent.offsetTop + this.offsetTop + this.scrollHeight; // yuck
				}
              	
				//now that the div is more or less positioned lets show it
				myBox.style.display = "block";
              	
				//force the stopping of the mouseover event
				event.stopPropagation ();
				event.preventDefault ();
			}, true); //end the function and close the addEventListener method
		}// for each anchor
	}
	catch (e)
	{
		// debug any mistake
	//	alert ("Orkut Pro error:\n\n" + e);
	}
}) ();





// ==UserScript==
// @name           Link to Image
// @description    transforma links de imagens em imagens
// @include        http://www.orkut.com/*
// ==/UserScript==


//--------------------------------------------
// Monstra link de imagens como imagens
//--------------------------------------------
var i=0;
function changelinktoimg(){
doc=document;
lnk=doc.links;

for (i=0;i<lnk.length;i++){
getload="document.getElementById('loadi"+i+"')"
this2="document.getElementById('bfimg"+i+"')"

var sb=lnk[i].href.substring(lnk[i].href.length-4,lnk[i].href.length);sb=sb.toLowerCase()
if(sb=='.jpg' || sb=='.gif' || sb=='.png' || sb=='jpeg'){
lnk[i].innerHTML="<b id=loadi"+i+" onclick=\""+this2+".style.display='';"+getload+".style.display='none';return false;\"><font size=1 color=green id=load"+i+"><_O M I_> Carregando Imagem...</font></b><img onError=\"document.links["+i+"].innerHTML='<font size=1 color=red>Link Quebrado/Link para figura</font>'\" oncontextmenu=\"if(aa"+i+"==0){if(imgh"+i+">imgw"+i+"){document.getElementById('bfimg"+i+"').height=imgh"+i+"};if(imgw"+i+">imgh"+i+"){document.getElementById('bfimg"+i+"').width=imgw"+i+"};aa"+i+"=1}else{if(this.height>200 && this.height>=this.width){this.height=200};if(this.width>200 && this.width>=this.height){this.width=200};aa"+i+"=0};return false\" src="+lnk[i].href+" style='display: none' id=bfimg"+i+" border=0 onload=\"aa"+i+"=0;imgh"+i+"=this.height;imgw"+i+"=this.width;if(this.height>200 && this.height>=this.width){this.height=200}else if(this.width>800 && this.width>=this.height){this.width=800;};this.style.display='';"+getload+".style.display='none';\">"
}}
}
changelinktoimg()
function changetags(){
br=document.body.innerHTML
if(br.indexOf("[img]") > -1 && br.indexOf("[/img]") > -1){
br=br.replace(/\[img\]/gi,'');
br=br.replace(/\[\/img\]/gi,'');
document.body.innerHTML = br;
}
}
changetags()






// ==/UserScript==

if(document.getElementsByName("scrapsForm")[0].getElementsByTagName("div")[0])
{
	var useremail = document.getElementsByClassName("useremail")[0].getElementsByTagName("b")[0].innerHTML;
	function CheckSpamPage(){
		HttpRequest.open({
		"method":"get",
		"url":"http://www.orkut.com.br/UserSpamFolder",
		"onsuccess":function(params)
		{
			var value = 0, dt = params.response.xml.getElementsByClassName("displaytable");
			if (dt && dt[0])
			{
			var nc = dt[0].getElementsByClassName("normcheck");
			if (nc)
			value = nc.length;
			}
			if((value=="0")) GM_setValue(useremail + "spam", "0");
			else
			{
				GM_setValue(useremail + "spam", value); 
				document.getElementById("chcknow").innerHTML='Spam (' + value + ')';
			}
		}
		}).send();

		setTimeout( function(){document.getElementById("chcknow").innerHTML='Checar Spam (' + GM_getValue(useremail + "spam") + ')';}, 400);
	}
	if(GM_getValue(useremail + "autoStart")) 
	{
		CheckSpamPage();
	}

	var offimg = "data:image/png,%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0A%00%00%00%0A%08%06%00%00%00%8D2%CF%BD%00%00%00%09pHYs%00%00%06%9D%00%00%06%9D%01%E8%2F%AE%E6%00%00%00%19tEXtSoftware%00www.inkscape.org%9B%EE%3C%1A%00%00%01%1EIDATx%DAc%C8%9A%3E%9DaNt%B4%C5%1E3%B3%BA%B2%8E%0E%86%C6%9A%1A%96%C6%EAjV%10%7B%B7%85E%FDg%06%86%BF%2F%98%98%BE1%CC%89%8A%F2%BC%26%25u%E0-%1B%DB%9BE%A1%A1%5EU--%0C%20%BC8%24%C4%E7%25'%E7%B3%B7%0C%0C%FF%BF%001%03%D0%A4F%20%E7%C7G%20%E7%1D%23%E3%B7%85aa%9E%20%0Cb%7F%00%8A%BDaf%FE%B2%D6%D33%9D%A1%AC%B3%93aQX%98%D7%3B%26%A6%2F%20%C5%AF%98%99%3F%820X%23Plqh%A8wE%5B%1B%03CSM%0DkUs3H%B1%FB%2Bv%F6%D7o%18%18%FE%800%88%0D%12%039%03%A8%86%85%A1%A9%BA%9A%8D%90%C2%C6%DAZf%B0%D5%40%E3%7DpY%0Dr%2FH1%C3nK%CB%96%97%CC%CC%EF%3F%E0%F0%0C%10%FF%5E%E5%E3%13%CE%F0%19%A4%00%E4%3B6%B6%B7%C8%C1%B304%D4%E3%03P%F1mQ%D1%D3%1333u%18%9E%03%03%13%A8%F8%DFZ%0F%8F%C4%8A%D6V%06P%60%03%03%9D%19%A4x%A5%B7w%20P%91%5C5%D0%0F%00%A3)%ABa)F%FE%AA%00%00%00%00IEND%AEB%60%82";
	var onimg = "data:image/png,%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0A%00%00%00%0B%08%06%00%00%00Fn%1C%18%00%00%00%09pHYs%00%00%02%00%00%00%02%00%01~~%D3%E3%00%00%00%19tEXtSoftware%00www.inkscape.org%9B%EE%3C%1A%00%00%01%60IDATx%DAchhh%60%00%E1%FA%86z8%0D%C6%F5uL%8D%B5%CD%0C%C9%13%DDB%83g%A9%C72%C0%146%D4%03%15%D5%D7%83q%5D%7D%1DccM%0BC%F8%0C%A3%3A%D7%25%FC%FB%AA%1AK%F9%D1L%01*j%A8ej%02*%CA%EB%8C%D3%B3X%C7%F0)%BD%DF%DF%B3%B9%A6%8D%01lRC%03%C8%94Z%C6%FA%86%3A%B0i%F5u%0D%0C%9E%8B%C56%FB%CF%93%9F%D7X%DB%C4P%DBP%C3%046%01dZc%5D%0BX%11Hw%E2%24%E7h%DB%D5%8C%F7K%5B%B2%C5%1Ak%81%E2%0Du%8C%0C%CD5%9D%0Cuu%F5%0C9%5D%91%86%D5%8D%15%5Ce-%B9%12%B6%AB%18%EE%C7M%B1%C9%00i%AA%05%1B%D4%C0%C0%90%D6%E7%1D%18%3C%5B%7D%B2%CD%1A%86%E7%D9%DDa%C6AsT%A78-%E78_%DDX%CE%06t%02%23%CC%ED%0C%01%F3%E4%FA%EDW1%3CuZ%C1p%CFc1%EFV%DB%D5%0C%CFS%26x%046%D6%B4%82%9C%C5%08%0B%09%86%9A%86*f%EF%85%92%AB%1CW2%3C%B0%5B%CD%F0%D6%7B%A1%D8%9A%DA%FA*%D6%BA%BA%3A%26%A8%E7%C0!%C3%D0%5E1%81!i%A2k%18%D0%A4%0F%CE%CB9%CE%E5w%26j%82%02%1Af%1A8%F8%40%266%D452%947%17%F2%BB%2C%E3Y%9D%D7%15%AD%D1%5C%D3%8Eb%25L1%00ea%AAR%DF%F6%B5%8C%00%00%00%00IEND%AEB%60%82";

	if(!GM_getValue(useremail + 'spam')) 
	{
		CheckSpamPage();
		var pass = true;
		GM_setValue(useremail + "autoStart", false)
	}
	
	var form = document.getElementsByName("scrapsForm")[0].getElementsByTagName("div")[0];
	var newgrabtn = document.createElement('span');
	newgrabtn.setAttribute('class', 'grabtn');
	newgrabtn.innerHTML='<a id="chcknow" class="btn" href="javascript:void(0);">Checar Spam (' + GM_getValue(useremail + "spam") + ')</a> |<a id="config" href="javascript:void(0);">  >></a>';
	form.appendChild(newgrabtn);
	
	var newbtnboxr = document.createElement('span');
	newbtnboxr.setAttribute('class', 'btnboxr');
	newbtnboxr.innerHTML='<img width="5" height="1" alt="" src="http://static1.orkut.com/img/b.gif"/>';
	form.appendChild(newbtnboxr);

	var newtd = document.createElement('div');
	newtd.setAttribute('style', 'border: 1px silver double; width: 160px; padding: 3px; display: none;');
	newtd.setAttribute('id', 'configSpam');
	newtd.innerHTML= '<img id="imgcheck1" src=' + offimg + '</img><a id="autoStart" href="javascript: void(0);" style="color: red; text-decoration: none;"> Verificação automática</a><br /><a href="/UserSpamFolder?"> - Pasta de Spam</a>';
	form.appendChild(newtd);
	
	if(GM_getValue(useremail + "autoStart"))
	{
		document.getElementById("autoStart").style.color="green";
		document.getElementById("imgcheck1").src=onimg;
	} 
	else 
	{
		document.getElementById("autoStart").style.color="red";
		document.getElementById("imgcheck1").src=offimg;
	}
	document.getElementById("config").addEventListener("click", function () { if (document.getElementById("configSpam").style.display == "none"){document.getElementById("configSpam").style.display = "";} else{    document.getElementById("configSpam").style.display = "none"; }}, false);
	document.getElementById("autoStart").addEventListener("click", 
	function() {
	if(GM_getValue(useremail + "autoStart")) 
	{
		document.getElementById("autoStart").style.color="red";
		document.getElementById("imgcheck1").src=offimg;
		GM_setValue(useremail + "autoStart", false)
	} 
	else 
	{
		document.getElementById("autoStart").style.color="green";
		document.getElementById("imgcheck1").src=onimg;
		GM_setValue(useremail + "autoStart", true)
	} 
	}, false);
	
	document.getElementById("chcknow").addEventListener("click", CheckSpamPage,false);
	
	if(pass)
	{
		document.getElementById("configSpam").style.display="block";
	}
}	
