// ==UserScript==
// @name        Strategus-enhancer
// @namespace   StratE
// @version     0.65
// @description Script to share los on strategus
// @match       http://strategus.c-rpg.net/
// @match       http://strategus.c-rpg.net/index.php
// @downloadURL http://userscripts.org/scripts/source/150956.user.js
// @updateURL   http://userscripts.org/scripts/source/150956.meta.js
// @grant       GM_xmlhttpRequest
// @require    http://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js
// @require    http://ajax.aspnetcdn.com/ajax/knockout/knockout-3.0.0.js
// @copyright   2014+, GuiKa
// ==/UserScript==
var stratE = stratE || {}; stratE.models = stratE.models || {}; var API_URL = "http://54.228.222.198/api/"; var SCRIPT_VERSION = GM_info.script.version; stratE.html = "<div id='se-overlay' class='se-zone'>" + "<div id='se-loading'  data-bind='if: view() == 0'>" + "<span>Loading ...</span>" + "</div>" + "<div id='se-login' data-bind='if: view() == 1'>" + "<form data-bind='with: loginVm'>" + "<div><label>Username: </label><span data-bind='text: username' type='text'></span></div>" + "<div><label>Password: </label><input data-bind='value: password' type='password' /></div>" + "<p><a class='se-link' data-bind='click: goRegister'>Register</a><input  value='Login' data-bind='click: login, enable: canLogin()' type='submit' /></p>" + "</form>" + "</div>" + "<div id='se-register' data-bind='if: view() == 2'>" + "<form data-bind='with: registerVm'>" + "<div><label>Username: </label><span data-bind='text: username' type='text'></span></div>" + "<div><label>Password <span class='se-info' data-bind='tips: passwordInfo'>(?)</span>: </label><input data-bind='value: password' type='password' /></div>" + "<div><label>ConfirmPassword: </label><input data-bind='value: confirmPassword' type='password' /></div>" + "<p><a class='se-link' data-bind='click: goLogin'>Login</a><input data-bind='click: register, enable: canRegister()' value='Register' type='submit' /></p>" + "</form>" + "</div>" + "<div id='se-enhance' data-bind='if: view() == 3'>" + "<div data-bind='with: enhanceVm'>" + "<div class='se-title'>StratE</div>" + "<div>Logged as <span data-bind='text: user().Username'></span></div>" + "<div data-bind='if: secondToPost() > 0'>Synchronising los in <span data-bind='text: secondToPost'></span> seconds</div>" + "<div data-bind='if: secondToPost() <= 0'>Synchronising los ...</div>" + "<button data-bind='click: toggleDialog, enable: !dialogOpen()'>Open dialog</button>" + "</div>" + "<div class='se-zone' data-bind='with: enhanceVm, dialog: enhanceVm.dialogOpen, style: enhanceVm.dialogStyle'>" + "<div class='se-dialog-close' data-bind='click: toggleDialog'>X</div>" + "<div class='se-area'>" + "<div class='se-title se-small'>Create a group <span class='se-info' data-bind='tips: createGroupInfo'>(?)</span></div>" + "<div><label>Name:</label><input class='se-small-input' data-bind='value: groupName, valueUpdate: \"afterkeydown\"' type='text' />" + "<button class='se-small-button' data-bind='click: createGroup, enable: canCreateGroup()'>Create</button></div>" + "</div>" + "<div class='se-area'>" + "<div class='se-title  se-small'>Join a group <span class='se-info' data-bind='tips: joinGroupInfo'>(?)</span></div>" + "<div><label>Token:</label><input  class='se-small-input' data-bind='value: joinToken, valueUpdate: \"afterkeydown\"' type='text' />" + "<button class='se-small-button' data-bind='click: joinGroup, enable: canJoinGroup()'>Join</button></div>" + "</div>" + "<div data-bind='foreach: groups'>" + "<div class='se-area'>" + "<span class='se-title se-group-title' data-bind='text: Name'></span>" + "<div data-bind='collapse: $parent.collapseOptions'>" + "<div class='se-title se-small'>Members (<span data-bind='text: Users().length'></span>):</div> " + "<table class='se-table'>" + "<thead><tr><th>Name</th><th>Can see <span class='se-info' data-bind='tips: \"Is this user able to see your group los ?\"'>(?)</span></th><th></th></tr></thead>" + "<tbody data-bind='foreach: Users'>" + "<tr class='se-member'>" + "<td class='se-member-name'><label data-bind='text: Charname'></label><span data-bind='if: Owner'>*</span><span data-bind='if: !Owner'></td>" + "<td class='se-member-action'><input type='checkbox' data-bind='oneWayChecked: CanSee, click: function() { $parents[1].changeCanSee($data, $parent); }, enable: !Owner && $parent.Owner' /></span></td>" + "<td data-bind='if: !Owner && $parent.Owner' class='se-member-action'><span class='se-link' data-bind='click: function(data, event) { $parents[1].kickMember($parent, $data); }'>kick</span></td>" + "</tr>" + "</tbody>" + "</table>" + "<div class='se-title se-small'>Group relations (<span data-bind='text: Groups().length'></span>):</div> " + "<table  class='se-table'>" + "<thead><tr><th>Name</th><th>You can see <span class='se-info' data-bind='tips: \"Can you see this group los ?\"'>(?)</span></th><th>Can see <span class='se-info' data-bind='tips: \"Is this group able to see your groups los ?\"'>(?)</span></th><th></th></tr></thead>" + "<tbody data-bind='foreach: Groups'>" + "<tr class='se-member'>" + '<td><label data-bind=\'text: Name + "(" + Users().length + ")"\'></label></td>' + "<td><input type='checkbox' data-bind='oneWayChecked: HeCanSee' disabled/></td>" + "<td data-bind='if: $parent.Owner'><input type='checkbox' data-bind='oneWayChecked: CanSee, click: function() { $parents[1].changeCanSee($data, $parent); }' /></td>" + "<td><span class='se-link' data-bind='if: $parent.Owner, click: function() { $parents[1].removeRelation($parent, $data); }'>remove</span>" + "<div data-bind='collapse: $parents[1].collapseOptions, foreach: Users'>" + "<div data-bind='text: Charname'></div>" + "</div></td>" + "</tr>" + "</tbody>" + "</table>" + "<div class='se-title se-small'>Options:</div>" + "<div class='se-options'>" + "<div class='se-inline'><button class='se-small-button' data-bind='click: $parent.leaveGroup'>Leave this group</button></div>" + "<div data-bind='if: Owner'>" + "<div class='se-inline'><button class='se-small-button' data-bind='click: $parent.invite'>Invite</button></div>" + "<div class='se-inline'><button class='se-small-button se-inline' data-bind='click: $parent.deleteGroup'>Delete this group</button></div>" + "</div>" + "</div>" + "<div data-bind='if: Owner'>" + "<div class='se-title se-small'>Use relation token</div>" + "<div>" + "<div class='se-inline'><label>Token: </label><input class='se-small-input' type='text' data-bind='value: $parent.relationToken, valueUpdate: \"afterkeydown\"' />" + "<button class='se-small-button se-inline' data-bind='click: $parent.addRelation, enable: $parent.canAddRelation()'>Add group relation</button></div>" + "</div>" + "</div>" + "</div>" + "</div>" + "</div>" + "</div>" + "<div  class='se-zone' data-bind='with: enhanceVm.tokenVm, dialog: enhanceVm.tokenVm.dialogOpen, style: enhanceVm.tokenVm.dialogStyle'>" + "<div class='se-dialog-close' data-bind='click: toggleDialog'>X</div>" + "<div class='se-area'>" + "<div class='se-title'>Token for invitation <span data-bind='text: group().Name'></span></div>" + "<div>Use tokens to invite new members or add new relations to your group." + "Invited member or group will have to use it. A token will disappear once used and will last 12 hours.</div>" + '<div><label>The token is to: </label><select data-bind=\'options: tokenTypes, optionsText: "text", value: selectedType\', optionsCaption: "Choose a type ..."></select></div>' + "<div><label>New member/group can: </label><select data-bind='options: tokenRights, optionsText: \"text\", value: selectedRight'></select></div>" + "<p><button data-bind='click: createToken, enable: canCreateToken()'>Generate the token</button></p>" + "</div>" + "<div class='se-area'>" + "<div data-bind='foreach: tokensValue'>" + "<div><span class='se-title se-small' data-bind='text: token'></span><span>     </span><span data-bind='text: info'></span></div>" + "</div>" + "</div>" + "</div>" + "</div>" + "<div id='se-error' data-bind='if: view() == 4'>" + "<h4>An error has occured</h4>" + "<p data-bind='text: errorMessage'></p>" + "</div>" + "</div>"; stratE.css = "#se-container { position: absolute; top: 0; left: 10; }" + "#se-overlay { color: LightGray; }" + ".se-zone button { color: black; }" + ".se-zone button:disabled { color: gray }" + "#se-register label { width: 110px; display: inline-block; }" + ".se-link { cursor: pointer; margin-left: 5px; margin-right: 5px; display: inline-block; color: blue; }" + ".se-dialog-close { font-size: 15px; padding: 2px; color: FireBrick; cursor: pointer; float: right; display: inline-block; border: 1px solid FireBrick; }" + ".se-title { font-size: 17px; font-weight:bold; margin: 10px; }" + ".se-title.se-small { font-size: 14px; margin: 5px; }" + ".se-area { border: 1px solid; padding: 5px; clear: both; }" + ".se-info { cursor: help; font-size: small; }" + ".se-small-button { font-size: 12px; padding: 2px; min-width: 50px; }" + ".se-member { min-height: 20px; }" + ".se-member-name{ width: 225px; }" + ".se-member-action { width: 50px; }" + ".se-small-input { font-size: 12px; padding: 2px; height: 20px; }" + ".se-options button, .se-options input { width: 125px; margin-bottom: 3px; margin-right: 3px; }" + ".se-inline { display: inline-block; }" + ".se-member button { font-size: 12px; padding: 2px; min-width: 40px; height: 20px; }" + ".se-table td, th { border: 1px solid black; padding: 2px; margin: 0; }" + ".se-group-title { width: 235px; display: inline-block; }"; ko.bindingHandlers.dialog = { init: function (e, t, n, r, i) { var s = ko.utils.unwrapObservable(t()); var o = n().style || {}; var u = $("<div></div>"); u.css({ position: "absolute", left: "0px", top: "0px", width: "320px", height: "100%", "z-index": "1000" }); $(e).wrap(u); $(e).parent().appendTo("body"); $(e).css({ width: "400px", height: "500px", margin: "100px auto", "background-color": "BurlyWood", border: "1px solid #000", padding: "5px", color: "black" }); $(e).css(o); if (s) $(e).parent().show(); else $(e).parent().hide() }, update: function (e, t, n, r, i) { var s = ko.utils.unwrapObservable(t()); if (s) $(e).parent().show(); else $(e).parent().hide() } }; ko.bindingHandlers.tips = { update: function (e, t, n, r, i) { var s = ko.utils.unwrapObservable(t()); $(e).attr("title", s); $(e).bind("click.tips", function () { alert(s) }) } }; ko.bindingHandlers.collapse = { init: function (e, t, n, r, i) { var s = ko.utils.unwrapObservable(t()); var o = $("<button class='se-collapse'>" + s.title + "</button>"); var u = s.width || 200; var a = s.maxHeight || 250; var f = s.enabled === undefined ? true : s.enabled; $(o).insertBefore($(e)); $(e).css({ "max-Height": a + "px", "min-Height": "40px", "overflow-y": "auto", "z-index": 500, width: u + "px" }); $(o).css(s.style || {}); $(e).hide(); $(o).click(function () { if ($(e).is(":visible")) $(e).hide(); else { $(e).show() } }) } }; ko.bindingHandlers.oneWayChecked = { update: function (e, t, n, r, i) { var s = ko.utils.unwrapObservable(t()); if (s) $(e).prop("checked", true); else $(e).prop("checked", false) } }; stratE.getCookie = function (e) { var t = document.cookie.split(";"); for (var n = 0; n < t.length; n++) { if (t[n].split("=")[0].trim() == e) { return t[n].split("=")[1].trim() } } return null }; stratE.ajax = function (e, t, n) { var r = $.Deferred(); GM_xmlhttpRequest({ method: e.toUpperCase(), url: t, data: e.toLowerCase() === "get" ? n : JSON.stringify(n), headers: { Accept: "application/json", "Content-Type": "application/json" }, onload: function (e) { if (100 <= e.status && e.status < 300) r.resolve(e.responseText ? JSON.parse(e.responseText) : null); else r.reject(e) }, onerror: function (e) { r.reject(e) } }); return r }; stratE.utils = { getTimeSpentString: function (e) { if (e <= 0) return "0h 0m"; var t = 60 * 60; var n = 60; var r = 0; var i = 0; while (e >= t) { r++; e = e - t } while (e >= n) { i++; e = e - n } var s = ""; s += r + "h "; s += i + "m"; return s }, isFF: function () { return "MozBoxSizing" in document.documentElement.style }, setStorage: function (e, t) { unsafeWindow.localStorage.setItem(e, JSON.stringify(t)) }, getStorage: function (e, t) { var n = unsafeWindow.localStorage.getItem(e); if (n) return JSON.parse(n); return t }, toLocaleDate: function (e) { var t = e.getTimezoneOffset(); return new Date(e.setMinutes(e.getMinutes() - (stratE.utils.isFF() ? t : 0))) }, getSecondSpent: function (e, t) { return Math.floor((Date.parse(e) - Date.parse(t)) / 1e3) } }; stratE.heroes = { dataLoaded: function () { var e = $.Deferred(); if (unsafeWindow.heroes.length != 0 && unsafeWindow.faction.length != 0 && $("#game .heroes").length != 0) { e.resolve() } else { var t = setInterval(function () { if (unsafeWindow.heroes.length != 0 && unsafeWindow.faction.length != 0 && $("#game .heroes").length != 0) { e.resolve(); clearInterval(t); delete t } }, 100) } return e }, getHeroes: function () { var e = $.Deferred(); stratE.heroes.dataLoaded().done(function () { var t = []; var n = unsafeWindow.heroes; for (var r = 0; r < n.length; r++) { var i = n[r]; var s = parseInt(i[8], 10); var o = i[1]; var u = i[7]; var a = i[2]; var f = i[3]; var l = i[6]; var c = i[0]; t.push(new stratE.models.Hero({ StratId: c, Name: l, Y: f, X: a, OnBattle: u, StratFactionId: o, Troops: s })) } e.resolve(t) }); return e }, getFactions: function () { var e = $.Deferred(); stratE.heroes.dataLoaded().done(function () { e.resolve(unsafeWindow.faction) }); return e }, drawHeroes: function (e, t) { var n = $.Deferred(); $("#game").remove(".se-heroes"); stratE.heroes.dataLoaded().done(function () { var r = function (t) { for (var n = 0; n < e.length; n++) if (e[n][0] == t) return e[n] }; var i = stratE.map.getData(); $.each(t, function (e, t) { if ($("#hero" + t.StratId).length == 0) { var n = "heroes se-heroes"; n += t.StratFactionId == "0" ? " neutral" : " faction"; if (t.Troops < 25) n += " tiny"; else if (t.Troops < 100) n += " small"; else if (t.Troops < 500) n += " regular"; else if (t.Troops < 2e3) n += " large"; else n += " huge"; var s = ""; var o = ""; if (t.OnBattle == 1) { s += "<br />BATTLE"; o = "2px solid purple" } else { o = "1.5px solid blue" } var u = stratE.utils.getSecondSpent(new Date, t.CreationDate); updateString = "<span style='font-size: smaller;'>Last update : <br />" + stratE.utils.getTimeSpentString(u) + "</span>"; var a = r(t.StratFactionId); var f = a ? a[1] : "fff"; var l = "<div class='" + n + "' id='hero" + t.StratId + "'>" + '<p style="color:#' + f + ';">' + t.Name + s + '<span class="troops"> [' + t.Troops + "] </span><br />" + updateString + "</p></div>"; var c = 360 / (360 + u / 60 * 2); var h = stratE.map.draw(i, t.X, t.Y, l, { opacity: c, border: o }); h.mouseover(function () { h.css("opacity", 1) }); h.mouseout(function () { h.css("opacity", c) }) } }); n.resolve() }); return n }, customizeHeroes: function () { $(".heroes").css("backgroundColor", "rgba(0,0,0,0.25)") } }; stratE.map = { getData: function () { var e = unsafeWindow.shiftview; var t = parseInt($("img#map").css("width")) / unsafeWindow.map_x; return { shiftview: e, zoom: t } }, draw: function (e, t, n, r, i) { var s = $(r).appendTo("div#game"); s.css("left", (t - e.shiftview) * e.zoom + "px"); s.css("top", n * e.zoom + "px"); s.css(i || {}); return s }, drawFromOffset: function (e, t, n, r) { var i = $(n).appendTo("div#game"); i.css("left", e + "px"); i.css("top", t + "px"); i.css(r || {}); return i }, getCoordinateFromOffset: function (e, t, n) { return { x: t / e.zoom + e.shiftview, y: n / e.zoom } }, getOffsetFromCoordinate: function (e, t, n) { return { ox: (t - e.shiftview) * e.zoom, oy: n * e.zoom } }, centerLocation: function (e, t, n) { var r = $("div#main"); r.scrollTop(n * e.zoom - r.height() / 2); r.scrollLeft((t - e.shiftview) * e.zoom - r.width() / 2) } }; stratE.views = { loading: 0, login: 1, register: 2, enhance: 3, error: 4 }; stratE.mainViewModel = function () { var e = this; e.view = ko.observable(stratE.views.loading); e.errorMessage = ko.observable(); e.loginVm = new stratE.loginViewModel(e); e.registerVm = new stratE.registerViewModel(e); e.enhanceVm = new stratE.enhanceViewModel(e); e.goEnhance = function (t) { e.enhanceVm.user(new stratE.models.CurrentUser(t)); $.each(t.Groups, function (t, n) { e.enhanceVm.groups.push(new stratE.models.Group(n)) }); e.view(stratE.views.enhance) }; e.init = function () { var t = stratE.getCookie("username"); if (!t) { e.errorMessage("Could not find crpg username."); e.view(stratE.views.error); return } e.loginVm.username(t); e.registerVm.username(t); stratE.ajax("get", API_URL + "Main/GetUser?clientVersion=" + SCRIPT_VERSION).done(function (t) { if (t) { e.goEnhance(t) } else { e.view(stratE.views.login) } }).fail(function (t) { if (t.status == 426) { e.errorMessage("Client version too old. You need to upgrade the script to the last version") } e.view(stratE.views.error); console.log(t) }) }; e.init() }; stratE.loginViewModel = function (e) { var t = this; t.working = ko.observable(false); t.username = ko.observable(); t.password = ko.observable(); t.login = function () { t.working(true); stratE.ajax("post", API_URL + "Main/Login", { Username: t.username(), Password: t.password(), Charname: $("#player_menu > h2").text() }).done(function (t) { e.goEnhance(t) }).fail(function (e) { alert("Login failed"); console.log(e) }).always(function () { t.password(""); t.working(false) }) }; t.goRegister = function () { e.view(stratE.views.register) }; t.canLogin = ko.computed(function () { return t.username() && t.password() && !t.working() }) }; stratE.registerViewModel = function (e) { var t = this; t.mainVm = e; t.working = ko.observable(false); t.username = ko.observable(); t.password = ko.observable(); t.confirmPassword = ko.observable(); t.passwordInfo = "Please try not to use your crpg password, and do not forget it."; t.canRegister = ko.computed(function () { return t.username() && t.username().length >= 3 && t.password() && t.password().length >= 4 && t.confirmPassword() == t.password() && !t.working() }); t.register = function () { t.working(true); stratE.ajax("post", API_URL + "Main/Register", { Username: t.username(), Password: t.password(), Charname: $("#player_menu > h2").text() }).done(function (t) { e.goEnhance(t) }).fail(function (e) { alert("Registration failed"); console.log(e) }).always(function () { t.password(""); t.confirmPassword(""); t.working(false) }) }; t.goLogin = function () { e.view(stratE.views.login) } }; stratE.tokenViewModel = function (e) { var t = this; t.enhanceVm = e; t.group = ko.observable({}); t.group.subscribe(function () { t.tokensValue.removeAll() }); t.working = ko.observable(false); t.tokensValue = ko.observableArray([]); t.tokenTypes = [{ text: "Invite a new member", value: true }, { text: "Add a group relation", value: false }]; t.selectedType = ko.observable(); t.tokenRights = [{ text: "Group or Member can see your los (two way)", value: true }, { text: "Group or Member cannot see your los (one way)", value: false }]; t.selectedRight = ko.observable(); t.dialogOpen = ko.observable(false); t.dialogStyle = { "min-height": "200px", height: "", position: "relative", left: "511px", width: "500px" }; t.toggleDialog = function () { if (t.dialogOpen()) t.dialogOpen(false); else t.dialogOpen(true) }; t.createToken = function (e) { t.working(true); var n = t.selectedType().value; stratE.ajax("post", API_URL + "Main/CreateToken", { GroupId: t.group().GroupId, CanSee: t.selectedRight().value, ForUser: n }).done(function (e) { t.tokensValue.push({ token: e, info: n ? "invite member" : "group relation" }) }).fail(function (e) { alert("Error trying to create a token."); console.log(e) }).always(function () { setTimeout(function () { t.working(false) }, 3e3) }) }; t.canCreateToken = function () { return !t.working() && t.group() && t.selectedType() && t.selectedRight() } }; stratE.enhanceViewModel = function (e) { var t = this; t.secondToPost = ko.observable(); t.tokenVm = new stratE.tokenViewModel(t); t.mainVm = e; t.working = ko.observable(false); t.createGroupInfo = "Groups are necessary to share line of sight. All the member within a group can share their los. You can have multiple groups."; t.joinGroupInfo = "Use a token given by the group owner to join the group."; t.collapseOptions = { title: "+/-", width: "100%", maxHeight: 400, padding: "5px" }; t.user = ko.observable({}); t.groups = ko.observableArray([]); t.heroes = ko.observableArray([]); t.drawHeroes = function () { stratE.draw(t.heroes()) }; t.user.subscribe(function (e) { t.secondToPost(e.SecondSincePost > e.TickCD ? 0 : e.TickCD - e.SecondSincePost) }); t.dialogOpen = ko.observable(false); t.dialogStyle = { position: "absolute", left: 0, width: "500px", "min-height": "500px", height: "" }; t.toggleDialog = function () { if (t.dialogOpen()) t.dialogOpen(false); else t.dialogOpen(true) }; t.groupName = ko.observable(); t.canCreateGroup = ko.computed(function () { return t.groupName() && !t.working() }); t.createGroup = function () { t.working(true); stratE.ajax("post", API_URL + "Main/CreateGroup", t.groupName()).done(function (e) { t.groups.push(new stratE.models.Group(e)) }).fail(function (e) { alert("Group creation failed: another group with this name may exist"); console.log(e) }).always(function () { t.groupName(""); t.working(false) }) }; t.joinToken = ko.observable(); t.canJoinGroup = ko.computed(function () { return t.joinToken() && t.joinToken().lastIndexOf("==") == t.joinToken().length - 2 && !t.working() }); t.joinGroup = function () { t.working(true); stratE.ajax("post", API_URL + "Main/UseToken", { Token: t.joinToken().trim(), GroupId: null, ForUser: true }).done(function (e) { t.groups.push(new stratE.models.Group(e)) }).fail(function (e) { alert("Failed to join group. The token may be incorrect."); console.log(e) }).always(function () { t.joinToken(""); t.working(false) }) }; t.relationToken = ko.observable(); t.canAddRelation = ko.computed(function () { return t.relationToken() && t.relationToken().lastIndexOf("==") == t.relationToken().length - 2 && !t.working() }); t.addRelation = function (e) { t.working(true); stratE.ajax("post", API_URL + "Main/UseToken", { Token: t.relationToken().trim(), GroupId: e.GroupId, ForUser: false }).done(function (t) { e.Groups.push(new stratE.models.Group(t)) }).fail(function (e) { alert("Failed to add relation. The token may be incorrect."); console.log(e) }).always(function () { t.relationToken(""); t.working(false) }) }; t.invite = function (e) { t.tokenVm.group(e); t.tokenVm.toggleDialog() }; t.kickMember = function (e, n) { if (confirm("Are you sure you want to kick " + n.Charname + " ?")) { t.working(true); stratE.ajax("post", API_URL + "Main/KickUser", { GroupId: e.GroupId, UserId: n.UserId }).done(function () { e.Users.remove(n) }).fail(function (e) { alert("Error trying to kick user."); console.log(e) }).always(function () { t.working(false) }) } }; t.leaveGroup = function (e) { if (confirm("Are you sure you want to leave " + e.Name + " ?")) { t.working(true); stratE.ajax("post", API_URL + "Main/LeaveGroup", e.GroupId).done(function () { t.groups.remove(e) }).fail(function (e) { alert("Error trying to leave group. You have to delete the group if you are the last admin."); console.log(e) }).always(function () { t.working(false) }) } }; t.removeRelation = function (e, n) { if (confirm("Are you sure to remove the relation with " + n.Name) && t.canRemoveRelation()) { t.working(true); stratE.ajax("post", API_URL + "Main/RemoveGroupRelation", { GroupId: e.GroupId, TargetId: n.GroupId }).done(function () { e.Groups.remove(n) }).fail(function () { alert("Failed to remove relation") }).always(function () { }) } }; t.canRemoveRelation = ko.computed(function () { return !t.working() }); t.changeCanSee = function (e, n) { if (t.working()) return; t.working(true); var r = { GroupId: n.GroupId, CanSee: !e.CanSee() }; if (e instanceof stratE.models.User) { r.TargetUserId = e.UserId } else if (e instanceof stratE.models.Group) { r.TargetGroupId = e.GroupId } stratE.ajax("post", API_URL + "Main/ChangeCanSee", r).done(function (t) { e.CanSee(t) }).fail(function (e) { alert("Failed to change the target rights."); console.log(e) }).always(function () { t.working(false) }) }; t.post = function () { var e = $.Deferred(); var n = (new Date).getTime(); stratE.heroes.getHeroes().done(function (r) { stratE.ajax("post", API_URL + "Main/PostHeroes", r).done(function (e) { console.log(e.length + " heroes received in " + (((new Date).getTime() - n) / 1e3).toFixed(2) + " sec"); t.heroes.removeAll(); var r = []; $.each(e, function (e, t) { r.push(new stratE.models.Hero(t)) }); t.heroes(r) }).fail(function (n) { console.log(n); t.mainVm.errorMessage("Synchronization failed"); t.mainVm.view(stratE.views.error); e.reject() }).always(function () { e.resolve() }) }); return e }; t.deleteGroup = function (e) { if (confirm("Are you sure ?")) { t.working(true); stratE.ajax("post", API_URL + "Main/DeleteGroup", e.GroupId).done(function () { t.groups.remove(e) }).fail(function (e) { alert("Error deleting group"); console.log(e) }).always(function () { t.working(false) }) } }; t.tick = function () { if (t.secondToPost() || t.secondToPost() === 0) { if (t.secondToPost() === 0) { stratE.beforeSync(t.heroes()); t.post().always(function () { t.secondToPost(t.user().TickCD); stratE.sync(t.heroes()) }) } t.secondToPost(t.secondToPost() - 1) } }; t.timer = setInterval(t.tick, 1e3); t.init = function () { var e = stratE.utils.getStorage("strate-heroes", []); var n = []; for (var r = 0; r < e.length; r++) { if (stratE.utils.getSecondSpent(new Date, stratE.utils.toLocaleDate(new Date(e[r].CreationDate))) < 14400) { n.push(new stratE.models.Hero(e[r])) } } t.heroes(n); var i = unsafeWindow.loadTroops; unsafeWindow.loadTroops = function () { var e = i.apply(this, arguments); t.drawHeroes(); return e } }; t.init() }; stratE.models.CurrentUser = function (e, t) { var n = this; n.parent = t; n.UserId = e.UserId; n.Username = e.Username; n.Charname = e.Charname; n.CreationDate = e.CreationDate; n.SecondSincePost = e.SecondSincePost; n.Owner = e.Owner; n.TickCD = e.TickCD }; stratE.models.User = function (e, t) { var n = this; n.UserId = e.UserId; n.Charname = e.Charname; n.CreationDate = e.CreationDate; n.Owner = e.Owner; n.CanSee = ko.observable(e.CanSee) }; stratE.models.Group = function (e, t) { var n = this; n.parent = t; n.GroupId = e.GroupId; n.Name = e.Name; n.Owner = e.Owner; n.Users = ko.observableArray([]); n.Groups = ko.observableArray([]); n.CanSee = ko.observable(e.CanSee); n.HeCanSee = e.HeCanSee; $.each(e.Users, function (e, t) { n.Users.push(new stratE.models.User(t, n)) }); $.each(e.Groups || [], function (e, t) { n.Groups.push(new stratE.models.Group(t, n)) }) }; stratE.models.Hero = function (e, t) { var n = this; n.HeroId = e.HeroId; n.Name = e.Name; n.StratId = e.StratId; n.StratFactionId = e.StratFactionId; n.OnBattle = e.OnBattle; n.Troops = e.Troops; n.X = e.X; n.Y = e.Y; n.CreationDate = stratE.utils.toLocaleDate(new Date(e.CreationDate)) }; stratE.beforeDraw = function (e) { }; stratE.draw = function (e) { var t = $.Deferred(); stratE.beforeDraw(e); stratE.heroes.getFactions().done(function (n) { stratE.heroes.drawHeroes(n, e).always(function () { stratE.afterDraw(e); t.resolve() }) }); return t }; stratE.afterDraw = function (e) { }; stratE.beforeSync = function (e) { }; stratE.sync = function (e) { stratE.draw(e).always(function () { stratE.afterSync(e) }); stratE.utils.setStorage("strate-heroes", e) }; stratE.afterSync = function (e) { }; stratE.initialize = function () { $("#chatlink").css({ position: "absolute", top: "0", left: "500px" }); $("#header").append("<div id='se-container'></div>"); $("#se-container").append(stratE.html); var e = document.createElement("style"); e.innerHTML = stratE.css; $("body").append(e); stratE.mainVm = new stratE.mainViewModel; ko.applyBindings(stratE.mainVm, $("#se-overlay")[0]) }; $(function () { stratE.initialize() })