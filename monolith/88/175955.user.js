// ==UserScript==
// @name           smoothJS - javascript library
// @author         ww_start_t @NA1F
// @description    javascript library
// @version        1.0.2
// @include        *
// ==/UserScript==

/*!
 * smoothJS JavaScript Library v1.0.2
 *
 * Copyright 2012, 2013 smoothJS Foundation, Inc. and other contributors
 * Released under the LGBL license
 * https://github.com/NA1F/smoothJS
 *
 * Date: 2013-08-20
 */
(function () { window.$ = window.smoothJS = function (a, b) { return new smoothJS(a, b) }; var d = document; function smoothJS(a, b) { if (!a) return; if (typeof a === 'string') { if (/\<\w+\b[^>]*\>/.test(a)) { this[0] = docF(a) } else if (b && typeof b === 'string') { b = toDom(b); this[0] = b.querySelectorAll(pureIt(a)) } else if (b instanceof HTMLElement) this[0] = b.querySelectorAll(pureIt(a)); else this[0] = d.querySelectorAll(pureIt(a)) } else if (typeof a === 'object') this[0] = a; if (typeof this[0].length === undefined) this.length = 0; else this.length = this[0].length; return this }; function toDom(a) { var el; if (/\<(html|body)\b[^>]*\>/.test(a)) el = d.createElement('html'); else el = d.createElement('div'); el.innerHTML = a; return el }; function docF(a) { var e = d.createDocumentFragment(), h = toDom(a); while (h.firstChild) e.appendChild(h.firstChild); return e }; function insert(a, b, ci) { if (typeof b === 'string') b = window.smoothJS(b); a.each(function (e) { var i = 0, c = b[0], cl = c.length ? c.length : [c].length; while (i < cl) { c[i].parentNode.insertBefore(e.cloneNode(true), ci ? c[i].nextSibling : c[i]); i = i + 1 } }); removeIt(a[0]) }; function removeIt(a) { var i = 0, cl = a.length; while (i < cl) { if (a[i].parentNode) a[i].parentNode.removeChild(a[i]); i = i + 1 } }; function pureIt(a) { var r = a; if (/\:\(\d+\)/.test(r)) r = r.replace(/\:\(/g, ':nth-of-type(').replace(/\d+/g, function (e) { return parseInt(e) + 1 }); return r }; function moveIt(a, b, c) { var i; if (a) { i = c[0]; if (typeof a === "number") { if (a < 1) a = 1; var r = 0; while (i[b] && r != a) { i = i[b]; r = r + 1 } } else if (typeof a === "string") while (i[b] && i.tagName.toUpperCase() != a.toUpperCase()) i = i[b] } else i = c[0][b]; return c[0] = i }; smoothJS.prototype = { new: function (a, b) { this[0] = window.smoothJS(a, b)[0]; return this }, each: function (a) { if (!a) return this; if (this[0].length != undefined) { var i = 0, c = this[0], cl = c.length; while (i < cl) { a(this[0][i]); i = i + 1 } } else a(this[0]); return this }, hide: function (a) { var s; this.each(function (b) { s = b.style; s.display = a === 'toggle' ? (s.display === 'none' ? 'block' : 'none') : 'none' }); return this }, show: function (a) { var s; this.each(function (b) { s = b.style; s.display = a === 'toggle' ? (s.display != 'none' ? 'none' : 'block') : '' }); return this }, style: function (a) { if (typeof a === 'string') { var s = a; if (s.indexOf('-') != -1) s = a.split('-')[0] + a.split('-')[1].charAt(0).toUpperCase() + a.split('-')[1].substr(1); return this[0][0].style[s] } else if (typeof a === 'object') this.each(function (e) { for (var i in a) if (a.hasOwnProperty(i)) e.style[i] = a[i] }); return this }, html: function (a) { if (a) { this.each(function (e) { e.innerHTML = a }); return this } else return this[0][0].innerHTML }, text: function (a) { if (a) { this.each(function (e) { e.textContent = a }); return this } else return this[0][0].textContent }, nodeValue: function (a) { if (a) { this.each(function (e) { e.firstChild.nodeValue = a }); return this } else return this[0][0].firstChild.nodeValue }, attribute: function (a) { if (typeof a === 'string') return this[0][0].getAttribute(a); else if (typeof a === 'object') this.each(function (e) { for (var i in a) if (a.hasOwnProperty(i)) e.setAttribute(i, a[i]) }); return this }, removeAttribute: function (a) { if (!a) return this; this.each(function (e) { e.removeAttribute(a) }); return this }, addClass: function (a) { if (!a) return this; this.each(function (e) { e.className += ' ' + a }); return this }, removeClass: function (a) { if (!a) return this; this.each(function (e) { e.setAttribute('class', (e.getAttribute('class') || '').replace(a, '')) }); return this }, property: function (a) { if (!a) return this; if (this[0][a]) return this[0][a]; else if (this[0][0][a]) return this[0][0][a] }, deleteProperty: function (a) { if (!a) return this; this.each(function (e) { if (e[a]) delete e[a] }); return this }, click: function () { this.each(function (e) { e.click() }); return this }, hover: function (a, b, c) { if (!a && !b) return this; var c = c === true ? true : false; this.each(function (e) { if (a) e.addEventListener('mouseover', a, c); if (b) e.addEventListener('mouseout', b, c) }); return this }, on: function (a, b) { if (!a || !b) return this; this.each(function (e) { e['on' + a] = b }); return this }, addEvents: function (a, b) { if (!a || !b) return this; this.each(function (e) { var i = 0, c = (a.indexOf(' ') != -1) ? a.split(' ') : [a], cl = c.length; while (i < cl) { e.addEventListener(c[i], b); i = i + 1 } }); return this }, removeEvents: function (a, b) { if (!a || !b) return this; this.each(function (e) { var i = 0, c = (a.indexOf(' ') != -1) ? a.split(' ') : [a], cl = c.length; while (i < cl) { e.removeEventListener(c[i], b); i = i + 1 } }); return this }, get: function (a) { if (!a) return this; return window.smoothJS(a, this[0]) }, parent: function (a) { this[0] = moveIt(a, 'parentNode', this); return this }, next: function (a) { this[0] = moveIt(a, 'nextElementSibling', this); return this }, previous: function (a) { this[0] = moveIt(a, 'previousElementSibling', this); return this }, append: function (a) { if (!a) return this; if (typeof a === 'object') { a = (a.attribute ? a[0] : a); if (a instanceof Array || a instanceof HTMLCollection || a instanceof NodeList) { this.each(function (e) { var i = 0, c, cl = a.length; while (i < cl) { c = a[i]; if (c.attribute && c[0] instanceof HTMLElement) c = c[0]; else if (c.attribute && !(c[0] instanceof HTMLElement)) { i = i + 1; continue }; if (typeof c === 'object') e.appendChild(c.cloneNode(true)); else if (typeof c === 'string') { if (/\<\w+\b[^>]*\>/.test(c)) { var ci = toDom(c); while (ci.firstChild) e.appendChild(ci.firstChild) } else e.appendChild(d.createTextNode(c)) }; i = i + 1 } }); removeIt(a) } else { this.each(function (e) { e.appendChild(a.cloneNode(true)) }); removeIt(a) } } else if (typeof a === 'string') { if (/\<\w+\b[^>]*\>/.test(a)) this.each(function (e) { var c = toDom(a); while (c.firstChild) e.appendChild(c.firstChild) }); else this.each(function (e) { e.appendChild(d.createTextNode(a)) }) }; return this }, appendTo: function (a) { if (!a) return this; if (!a.attribute) return window.smoothJS(a).append(this[0]); else a.append(this[0]) }, remove: function (a) { if (a) { if (a instanceof Array || a instanceof HTMLCollection || a instanceof NodeList) this.each(function (e) { var i = 0, cl = a.length; while (i < cl) { window.smoothJS(a[i], e).each(function (c) { c.parentNode.removeChild(c) }); i = i + 1 } }); else this.each(function (e) { window.smoothJS(a, e).each(function (c) { c.parentNode.removeChild(c) }) }) } else this.each(function (e) { e.parentNode.removeChild(e) }); return this }, insertAfter: function (a) { if (!a) return; insert(this, a, true); return this }, insertBefore: function (a) { if (!a) return; insert(this, a, null); return this } }; window.smoothJS.request = function (a) { if (!a) return; var x = new XMLHttpRequest(); x.open(a.method, a.url, false); if (a.method === "POST") x.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=utf-8"); x.send(a.data ? encodeURI(a.data) : ''); if (a.onload) x.onload = a.onload } })(window);