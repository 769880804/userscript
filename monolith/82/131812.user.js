// ==UserScript==
// @id             bPfGP
// @name           Block Plus for Google+
// @version        1.0b8
// @namespace      simon
// @author         Simon Chan
// @description    Block posts and comments you don't like.
// @match          https://plus.google.com/*
// @match          http://userstyles.org/styles/operacss/*
// @run-at         document-end
// ==/UserScript==
var classNames = { body: "wIa" }, d = document, cL = "classList", cNs = classNames, settingsEntry, settings, lowerCasedKeywords, sessionID, parentNodeUntil, menuContainer; if (!window.frameElement && d.body[cL].contains(cNs.body)) { classNames = { menuButton: "Pp uU a-u-q-b a-f-e", menuContainer: "a-q a-q-pd kw", menuItem: "a-w", menuItemContent: "a-w-x", menuItemHover: "a-w-ib", streamContainer: "ow", post: "Tg", postContent: "wm VC", reshareContent: "sE nv", comment: "Ho", commentContent: "Mi", button: "a-n", blockTip: "bP-bT", popup: { outerBox: "U-L mNa", innerBox: "U-L-x jGb", content: "tK", headerContainer: "gk Qba", header: "mj", subHeader: "lj", mainBox: "gk SY o6", settings: { displayTips: "bP-s-dT", matchCase: "bP-s-mC", mutePost: "bP-s-mP", volumeMute: "bP-s-vM", keywords: "bP-s-k" }, bottomBox: "gk U9 xq", finishButtonContainer: "Qda", finishButton: "a-f-e c-b c-b-M YY Tma", cancelButtonContainer: "Mma", cancelButton: "a-n ZY Xma", bottomLine: "Lma" }, background: "U-L-De", volumeMute: { infoBox: "vMB", icon: "vMB-i", ctrlButton: "vMB-c", ctrlButtonFull: "fll", checkbox: "vM-cB", selectedPost: "vM-sP" } }; var cNs = classNames, cNsP = cNs.popup, cNsPS = cNsP.settings, cNsM = cNs.volumeMute, aC = "appendChild", aE = "addEventListener", cE = "createElement", cK = "checked", cN = "className", ds = "display", dv = "div", eC = "getElementsByClassName", f = !1, MO = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver, s = "style", t = !0, tC = "textContent"; function DOMInsertedEventHandler(n) { return function (t) { t.forEach(function (t) { t.addedNodes.length == 1 && n(t.addedNodes[0]) }) } } function Settings() { this.keywords = [], this.displayTips = t, this.matchCase = f, this.mute = f, this.multiMuteEnabled = f } function saveSettings() { localStorage[settingsEntry] = JSON.stringify(settings) } settingsEntry = "blockerSettings", settings = localStorage[settingsEntry] ? JSON.parse(localStorage[settingsEntry]) : new Settings, settings.matchCase = settings.matchCase || f, settings.mute = settings.mute || f, settings.multiMuteEnabled = settings.multiMuteEnabled || f, saveSettings(), lowerCasedKeywords = []; function fillLowerCasedList() { if (!settings.matchCase) { lowerCasedKeywords = []; for (var n in settings.keywords) lowerCasedKeywords.push(settings.keywords[n].toLowerCase()) } } fillLowerCasedList(), sessionID = d.body.innerHTML.match(/AObGSA.*:\d+/)[0]; function mutePost(n) { GM_xmlhttpRequest({ method: "POST", url: d.URL.match(/https:\/\/plus\.google\.com(\/u\/\d)?/)[0] + "/_/stream/muteactivity/?_reqid=" + +new Date % 1e6 + "&rt=j", headers: { "Content-Type": "application/x-www-form-urlencoded;charset=utf-8" }, data: "itemId=" + n + "&mute=t&at=" + encodeURIComponent(sessionID) }) } var selectedPosts, volumeMuteObsver, infoBox, ctrl, streamContainer = d[eC](cNs.streamContainer)[0], pendingRemove = [], showInfobox = f; function checkboxHandler() { var n = parentNodeUntil(this, cNs.post); this[cK] ? (n[cL].add(cNsM.selectedPost), selectedPosts.length > 0 && ctrl[cL].add(cNsM.ctrlButtonFull)) : (n[cL].remove(cNsM.selectedPost), selectedPosts.length == 0 && ctrl[cL].remove(cNsM.ctrlButtonFull)) } function buildCheckbox() { var n = d[cE]("input"); return n[cN] = "vM-cB", n.type = "checkbox", n[aE]("change", checkboxHandler), n } function initVolumeMute() { if (settings.multiMuteEnabled) { if (!infoBox) { GM_xmlhttpRequest({ method: "GET", url: "http://userstyles.org/styles/operacss/67262/Style%20for%20Volume%20posts%20mute.css", onload: function (n) { GM_addStyle(n.responseText) } }), selectedPosts = d[eC](cNsM.selectedPost), infoBox = d[cE](dv), infoBox[cN] = cNsM.infoBox; var n = d[cE](dv); n[cN] = cNsM.icon, infoBox[aC](n), ctrl = d[cE](dv), ctrl[cN] = cNsM.ctrlButton, ctrl[tC] = "Mute", ctrl[aE]("click", function () { if (selectedPosts.length > 0) { ctrl[cL].remove(cNsM.ctrlButtonFull); for (var t, i = 0; i < selectedPosts.length; i++) t = selectedPosts[i], mutePost(t.id.substr(7)), pendingRemove.push(t), t[s][ds] = "none"; cleanPendingList() } }), infoBox[aC](ctrl), volumeMuteObsver = new MO(DOMInsertedEventHandler(function (n) { n[cL].contains(cNs.post) && n.getElementsByTagName("header")[0][aC](buildCheckbox()) })) } d.body[aC](infoBox), showInfobox = t, volumeMuteObsver.observe(streamContainer, { childList: t }) } else showInfobox && (volumeMuteObsver.disconnect(), d.body.removeChild(infoBox), showInfobox = f) } initVolumeMute(), parentNodeUntil = function (n, i) { for (var r = n, o = i.split(" "), u, e; r = r.parentNode;) if (r != d) { u = t; for (e in o) r[cL].contains(o[e]) || (u = f); if (u) return r } return null }; function block(n, i) { var r, u; i ? settings.displayTips ? (n[s][ds] = "none", buildTip(n, t)) : (r = parentNodeUntil(n, cNs.post), r && (settings.mute && mutePost(r.id.substr(7)), streamContainer.firstChild != r && pendingRemove.push(r), r[s][ds] = "none")) : settings.displayTips ? (n[s][ds] = "none", buildTip(n, f)) : (u = parentNodeUntil(n, cNs.comment), u && (u[s][ds] = "none")) } function cleanPendingList() { for (var n = 0; n < pendingRemove.length; n++) streamContainer.removeChild(pendingRemove[n]); pendingRemove = [] } function buildTip(n, t) { var r = d[cE]("div"), i; return r[cN] = cNs.blockTip, i = d[cE]("span"), i[cN] = cNs.button, i.innerHTML = "Show", i[aE]("click", function (n) { n.target.textContent == "Show" ? (n.target.parentNode.previousElementSibling[s][ds] = "block", n.target.textContent = "Hide") : (n.target.parentNode.previousElementSibling[s][ds] = "none", n.target.textContent = "Show") }), r.textContent = "This " + (t ? "post" : "comment") + " had been blocked! You can ", r[aC](i), n.parentNode[aC](r), r } function matchKeywords(n) { var r = n.textContent, i; if (settings.matchCase) { for (i in settings.keywords) if (r.indexOf(settings.keywords[i]) != -1) return t; return f } r = r.toLowerCase(); for (i in lowerCasedKeywords) if (r.indexOf(lowerCasedKeywords[i]) != -1) return t; return f } function processAll() { for (var a = d[eC](cNs.postContent), y = d[eC](cNs.commentContent), v = d[eC](cNs.reshareContent), e, h, u, r, i, o, l, c, n = 0; n < a.length; n++) { if (e = a[n], e[s][ds] = "block", r = parentNodeUntil(e, cNs.post), r) { if (i = r[eC](cNs.blockTip), i.length > 0) for (n = 0; n < i.length; n++) i[n].parentNode.removeChild(i[n]); h = r[eC](cNsM.checkbox), h.length > 0 && h[0].parentNode.removeChild(h[0]), settings.multiMuteEnabled && r.getElementsByTagName("header")[0][aC](buildCheckbox()) } matchKeywords(e) && block(e, t) } for (cleanPendingList(), n = 0; n < v.length; n++) { if (u = v[n], u[s][ds] = "block", r = parentNodeUntil(u, cNs.post), r && (i = r[eC](cNs.blockTip), i.length > 0)) for (n = 0; n < i.length; n++) i[n].parentNode.removeChild(i[n]); matchKeywords(u) && block(u, t) } for (n = 0; n < y.length; n++) o = y[n], o[s][ds] = "block", l = parentNodeUntil(o, cNs.comment), l && (c = l[eC](cNs.blockTip), c.length > 0 && c[0].parentNode.removeChild(c[0])), matchKeywords(o) && block(o, f) } processAll(), new MO(DOMInsertedEventHandler(function (n) { var u, i, r; n[cL].contains(cNs.post) ? (u = n[eC](cNs.postContent)[0], matchKeywords(u) && block(u, t), i = n[eC](cNs.reshareContent), i.length > 0 && (i = i[0], matchKeywords(i) && block(i, t))) : n[cN] == cNs.comment && (r = n[eC](cNs.commentContent)[0], matchKeywords(r) && block(r, f)) })).observe(streamContainer, { childList: t, subtree: t }), new MO(DOMInsertedEventHandler(function (n) { var i; if (n[cN] == cNs.menuContainer) { menuContainer = n; var t, r, o = 0, e = 0, h = 0, u = 0; function c() { t[s].left = (h = (innerWidth - t.clientWidth) / 2) + "px", t[s].top = (u = (innerHeight - t.clientHeight) / 2) + "px" } i = d[cE]("div"), i[cN] = cNs.menuItem, i.setAttribute("role", "menuitem"), i.innerHTML = '<div class="' + cNs.menuItemContent + '">Blocker Settings</div>', i[aE]("click", function () { if (!t) { function i(n) { t[s].left = (h = Math.max(0, Math.min(h + n.clientX - o, innerWidth - t.clientWidth))) + "px", t[s].top = (u = Math.max(0, Math.min(u + n.clientY - e, innerHeight - t.clientHeight))) + "px", o = n.clientX, e = n.clientY } function n() { d.removeEventListener("mousemove", i, f), d.removeEventListener("mouseup", n, f) } t = d[cE]("div"), t[cN] = cNsP.outerBox, t.innerHTML = '<div class="' + cNsP.innerBox + '" style="min-height:300px"><div class="' + cNsP.content + '"><div style="margin-bottom: 15px;" class="' + cNsP.headerContainer + '"><div class="' + cNsP.header + '">Block Plus Settings</div><div class="' + cNsP.subHeader + '">toggle settings of block plus.</div></div><div class="' + cNsP.mainBox + '" data-shadowenabled="1" data-topshadow=":2w" data-bottomshadow=":2x"><div class="LQ-P"><div><input class="' + cNsPS.displayTips + '" style="margin:10px;" type="checkbox">Show blocked tips</div><div><input class="' + cNsPS.matchCase + '" style="margin:10px;" type="checkbox">Match case</div><div><input class="' + cNsPS.mutePost + '" style="margin:10px;" type="checkbox">Mute blocked posts</div><div><input class="' + cNsPS.volumeMute + '" style="margin:10px;" type="checkbox">Enable volume mute</div><div>Keywords: (one line for one keyword)</div><div style="padding:10px"><textarea class="' + cNsPS.keywords + '" style="height: 200px; width:100%;" placeholder="Nothing here"></textarea></div></div><div class="LQ-wXa" style="opacity: 0;"></div><div class="LQ-pLa" style="opacity: 0;"></div><div class="LQ-wXa" id=":2w" style="opacity: 0;"></div><div class="LQ-pLa" id=":2x" style="opacity: 0;"></div></div></div><div style="width: 100%;" class="' + cNsP.bottomBox + '"><div class="' + cNsP.cancelButtonContainer + '"><span tabindex="0" class="' + cNsP.cancelButton + '" role="button">? Back</span></div><div class="' + cNsP.finishButtonContainer + '"><div tabindex="0" class="' + cNsP.finishButton + '" role="button" style="-moz-user-select: none;">Finish</div></div><div class="' + cNsP.bottomLine + '"></div></div></div>', t[aE]("mousedown", function (t) { t.button == 0 && parentNodeUntil(t.target, cNsP.innerBox) === null && (d[aE]("mousemove", i), d[aE]("mouseup", n), o = t.clientX, e = t.clientY) }, f), t[eC](cNsP.finishButton)[0][aE]("click", function () { settings.displayTips = t[eC](cNsPS.displayTips)[0][cK], settings.matchCase = t[eC](cNsPS.matchCase)[0][cK], settings.mute = t[eC](cNsPS.mutePost)[0][cK], settings.multiMuteEnabled = t[eC](cNsPS.volumeMute)[0][cK], initVolumeMute(); var n = t[eC](cNsPS.keywords)[0].value; settings.keywords = n != "" ? n.split("\n") : [], fillLowerCasedList(), processAll(), saveSettings(), r[s][ds] = t[s][ds] = "none" }), t[eC](cNsP.cancelButton)[0][aE]("click", function () { r[s][ds] = t[s][ds] = "none" }), d.body[aC](t), r = d[cE]("div"), r.setAttribute("class", cNs.background); with (r[s]) display = "none", opacity = ".75", width = height = "100%"; d.body[aC](r) } d[eC](cNs.menuButton)[0].cN = cNs.menuButton, menuContainer[s][ds] = "none", r[s][ds] = t[s][ds] = "block", c(), t[eC](cNsPS.displayTips)[0][cK] = settings.displayTips, t[eC](cNsPS.matchCase)[0][cK] = settings.matchCase, t[eC](cNsPS.mutePost)[0][cK] = settings.mute, t[eC](cNsPS.volumeMute)[0][cK] = settings.multiMuteEnabled, t[eC](cNsPS.keywords)[0].value = settings.keywords.join("\n") }), i[aE]("mouseover", function () { i[cL].add(cNs.menuItemHover) }, f), i[aE]("mouseout", function () { i[cL].remove(cNs.menuItemHover) }, f), n[aC](i) } })).observe(d.body, { childList: t }) }