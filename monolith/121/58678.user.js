// ==UserScript==
// @name           Ikariam - Remaining time for Cargo ship buying
// @namespace      http://hcs.ewyxk4.hu/
// @description    On the ikariam - finances view the script calculates when will you have opportunity to buy the next and the last Cargo ship
// @include        http://s*.ikariam.*/index.php?view=finances
// ==/UserScript==
///////////////////////////////////////////////////////////////////////////////////////
// DB source: http://ikariam.wikia.com/wiki/Cargo_ship
///////////////////////////////////////////////////////////////////////////////////////
var db = Array(
Array(0, 0, 0, 0, 0, 0, 0, 0, 0),
Array(1, 480, 432, 480, 432, 4, 4, 500, 1),
Array(2, 897, 807, 1377, 1239, 9, 13, 1000, 2),
Array(3, 1326, 1193, 2703, 2432, 14, 27, 1500, 3),
Array(4, 1770, 1593, 4473, 4025, 17, 44, 2000, 4),
Array(5, 2226, 2003, 6699, 6028, 22, 66, 2500, 5),
Array(6, 2694, 2424, 9393, 8452, 27, 93, 3000, 6),
Array(7, 3177, 2859, 12570, 11311, 32, 125, 3500, 7),
Array(8, 3675, 3307, 16245, 14618, 37, 162, 4000, 8),
Array(9, 4188, 3769, 20433, 18387, 42, 204, 4500, 9),
Array(10, 4719, 4247, 25152, 22634, 47, 251, 5000, 10),
Array(11, 5262, 4735, 30414, 27369, 53, 304, 5500, 11),
Array(12, 5823, 5240, 36237, 32609, 58, 362, 6000, 12),
Array(13, 6399, 5759, 42636, 38368, 64, 426, 6500, 13),
Array(14, 6996, 6296, 49632, 44664, 70, 496, 7000, 14),
Array(15, 7608, 6847, 57240, 51511, 76, 572, 7500, 15),
Array(16, 8238, 7414, 65478, 58925, 82, 654, 8000, 16),
Array(17, 8889, 8000, 74367, 66925, 89, 743, 8500, 17),
Array(18, 9558, 8602, 83925, 75527, 96, 839, 9000, 18),
Array(19, 10248, 9223, 94173, 84750, 102, 941, 9500, 19),
Array(20, 10959, 9863, 105132, 94613, 110, 1051, 10000, 20),
Array(21, 11688, 10519, 116820, 105132, 117, 1168, 10500, 21),
Array(22, 12441, 11196, 129261, 116328, 124, 1292, 11000, 22),
Array(23, 13218, 11896, 142479, 128224, 132, 1424, 11500, 23),
Array(24, 14019, 12617, 156498, 140841, 140, 1564, 12000, 24),
Array(25, 14841, 13356, 171339, 154197, 149, 1713, 12500, 25),
Array(26, 15690, 14121, 187029, 168318, 157, 1870, 13000, 26),
Array(27, 16563, 14906, 203592, 183224, 165, 2035, 13500, 27),
Array(28, 17463, 15716, 221055, 198940, 175, 2210, 14000, 28),
Array(29, 18390, 16551, 239445, 215491, 184, 2394, 14500, 29),
Array(30, 19344, 17409, 258789, 232900, 193, 2587, 15000, 30),
Array(31, 20325, 18292, 279114, 251192, 204, 2791, 15500, 31),
Array(32, 21339, 19205, 300453, 270397, 213, 3004, 16000, 32),
Array(33, 22383, 20144, 322836, 290541, 224, 3228, 16500, 33),
Array(34, 23457, 21111, 346293, 311652, 234, 3462, 17000, 34),
Array(35, 24561, 22104, 370854, 333756, 246, 3708, 17500, 35),
Array(36, 25701, 23130, 396555, 356886, 257, 3965, 18000, 36),
Array(37, 26877, 24189, 423432, 381075, 269, 4234, 18500, 37),
Array(38, 28086, 25277, 451518, 406352, 281, 4515, 19000, 38),
Array(39, 29331, 26397, 480849, 432749, 293, 4808, 19500, 39),
Array(40, 30612, 27550, 511461, 460299, 306, 5114, 20000, 40),
Array(41, 31935, 28741, 543396, 489040, 319, 5433, 20500, 41),
Array(42, 33294, 29964, 576690, 519004, 333, 5766, 21000, 42),
Array(43, 34695, 31225, 611385, 550229, 347, 6113, 21500, 43),
Array(44, 36141, 32526, 647526, 582755, 362, 6475, 22000, 44),
Array(45, 37626, 33863, 685152, 616618, 376, 6851, 22500, 45),
Array(46, 39159, 35243, 724311, 651861, 392, 7243, 23000, 46),
Array(47, 40737, 36663, 765048, 688524, 407, 7650, 23500, 47),
Array(48, 42360, 38124, 807408, 726648, 424, 8074, 24000, 48),
Array(49, 44034, 39631, 851442, 766278, 440, 8514, 24500, 49),
Array(50, 45759, 41183, 897201, 807461, 458, 8972, 25000, 50),
Array(51, 47532, 42778, 944733, 850239, 475, 9447, 25500, 51),
Array(52, 49362, 44425, 994095, 894664, 493, 9940, 26000, 52),
Array(53, 51246, 46121, 1045341, 940785, 513, 10453, 26500, 53),
Array(54, 53187, 47868, 1098528, 988653, 532, 10985, 27000, 54),
Array(55, 55185, 49666, 1153713, 1038319, 552, 11537, 27500, 55),
Array(56, 57243, 51518, 1210956, 1089837, 572, 12109, 28000, 56),
Array(57, 59361, 53424, 1270317, 1143261, 594, 12703, 28500, 57),
Array(58, 61545, 55390, 1331862, 1198651, 615, 13318, 29000, 58),
Array(59, 63795, 57415, 1395657, 1256066, 638, 13956, 29500, 59),
Array(60, 66111, 59500, 1461768, 1315565, 661, 14617, 30000, 60),
Array(61, 68499, 61649, 1530267, 1377214, 685, 15302, 30500, 61),
Array(62, 70956, 63860, 1601223, 1441074, 710, 16012, 31000, 62),
Array(63, 73488, 66139, 1674711, 1507213, 735, 16747, 31500, 63),
Array(64, 76095, 68485, 1750806, 1575698, 761, 17508, 32000, 64),
Array(65, 78780, 70902, 1829586, 1646600, 787, 18295, 32500, 65),
Array(66, 81546, 73391, 1911132, 1719991, 816, 19111, 33000, 66),
Array(67, 84396, 75956, 1995528, 1795947, 844, 19955, 33500, 67),
Array(68, 87330, 78597, 2082858, 1874544, 873, 20828, 34000, 68),
Array(69, 90351, 81315, 2173209, 1955859, 904, 21732, 34500, 69),
Array(70, 93465, 84118, 2266674, 2039977, 934, 22666, 35000, 70),
Array(71, 96672, 87004, 2363346, 2126981, 967, 23633, 35500, 71),
Array(72, 99975, 89977, 2463321, 2216958, 1000, 24633, 36000, 72),
Array(73, 103377, 93039, 2566698, 2309997, 1033, 25666, 36500, 73),
Array(74, 106881, 96192, 2673579, 2406189, 1069, 26735, 37000, 74),
Array(75, 110490, 99441, 2784069, 2505630, 1105, 27840, 37500, 75),
Array(76, 114207, 102786, 2898276, 2608416, 1142, 28982, 38000, 76),
Array(77, 118038, 106234, 3016314, 2714650, 1181, 30163, 38500, 77),
Array(78, 121980, 109782, 3138294, 2824432, 1219, 31382, 39000, 78),
Array(79, 126042, 113437, 3264336, 2937869, 1261, 32643, 39500, 79),
Array(80, 130227, 117204, 3394563, 3055073, 1302, 33945, 40000, 80),
Array(81, 134538, 121084, 3529101, 3176157, 1346, 35291, 40500, 81),
Array(82, 138975, 125077, 3668076, 3301234, 1389, 36680, 41000, 82),
Array(83, 143547, 129192, 3811623, 3430426, 1436, 38116, 41500, 83),
Array(84, 148257, 133431, 3959880, 3563857, 1482, 39598, 42000, 84),
Array(85, 153108, 137797, 4112988, 3701654, 1531, 41129, 42500, 85),
Array(86, 158103, 142292, 4271091, 3843946, 1581, 42710, 43000, 86),
Array(87, 163248, 146923, 4434339, 3990869, 1633, 44343, 43500, 87),
Array(88, 168549, 151694, 4602888, 4142563, 1685, 46028, 44000, 88),
Array(89, 174009, 156608, 4776897, 4299171, 1740, 47768, 44500, 89),
Array(90, 179631, 161667, 4956528, 4460838, 1797, 49565, 45000, 90),
Array(91, 185424, 166881, 5141952, 4627719, 1854, 51419, 45500, 91),
Array(92, 191388, 172249, 5333340, 4799968, 1914, 53333, 46000, 92),
Array(93, 197532, 177778, 5530872, 4977746, 1975, 55308, 46500, 93),
Array(94, 203862, 183475, 5734734, 5161221, 2039, 57347, 47000, 94),
Array(95, 210381, 189342, 5945115, 5350563, 2104, 59451, 47500, 95),
Array(96, 217095, 195385, 6162210, 5545948, 2171, 61622, 48000, 96),
Array(97, 224010, 201609, 6386220, 5747557, 2240, 63862, 48500, 97),
Array(98, 231132, 208018, 6617352, 5955575, 2311, 66173, 49000, 98),
Array(99, 238470, 214623, 6855822, 6170198, 2385, 68558, 49500, 99),
Array(100, 246027, 221424, 7101849, 6391622, 2460, 71018, 50000, 100),
Array(101, 253809, 228428, 7355658, 6620050, 2538, 73556, 50500, 101),
Array(102, 261828, 235645, 7617486, 6855695, 2618, 76174, 51000, 102),
Array(103, 270084, 243075, 7887570, 7098770, 2701, 78875, 51500, 103),
Array(104, 278589, 250730, 8166159, 7349500, 2786, 81661, 52000, 104),
Array(105, 287349, 258614, 8453508, 7608114, 2874, 84535, 52500, 105),
Array(106, 296373, 266735, 8749881, 7874849, 2963, 87498, 53000, 106),
Array(107, 305667, 275100, 9055548, 8149949, 3057, 90555, 53500, 107),
Array(108, 315240, 283716, 9370788, 8433665, 3152, 93707, 54000, 108),
Array(109, 325101, 292590, 9695889, 8726255, 3251, 96958, 54500, 109),
Array(110, 335256, 301730, 10031145, 9027985, 3353, 100311, 55000, 110),
Array(111, 345717, 311145, 10376862, 9339130, 3457, 103768, 55500, 111),
Array(112, 356490, 320841, 10733352, 9659971, 3565, 107333, 56000, 112),
Array(113, 367587, 330828, 11100939, 9990799, 3676, 111009, 56500, 113),
Array(114, 379020, 341118, 11479959, 10331917, 3790, 114799, 57000, 114),
Array(115, 390792, 351712, 11870751, 10683629, 3908, 118707, 57500, 115),
Array(116, 402918, 362626, 12273669, 11046255, 4029, 122736, 58000, 116),
Array(117, 415410, 373869, 12689079, 11420124, 4154, 126890, 58500, 117),
Array(118, 428274, 385446, 13117353, 11805570, 4283, 131173, 59000, 118),
Array(119, 441525, 397372, 13558878, 12202942, 4415, 135588, 59500, 119),
Array(120, 455172, 409654, 14014050, 12612596, 4552, 140140, 60000, 120),
Array(121, 469203, 422307, 14483253, 13034903, 4692, 144832, 60500, 121),
Array(122, 483711, 435339, 14966964, 13470242, 4837, 149669, 61000, 122),
Array(123, 498624, 448761, 15465588, 13919003, 4987, 154655, 61500, 123),
Array(124, 513987, 462588, 15979575, 14381591, 5140, 159795, 62000, 124),
Array(125, 529809, 476828, 16509384, 14858419, 5298, 165093, 62500, 125),
Array(126, 546105, 491494, 17055489, 15349913, 5461, 170554, 63000, 126),
Array(127, 562893, 506603, 17618382, 15856516, 5629, 176183, 63500, 127),
Array(128, 580182, 522163, 18198564, 16378679, 5802, 181985, 64000, 128),
Array(129, 597990, 538191, 18796554, 16916870, 5980, 187965, 64500, 129),
Array(130, 616332, 554698, 19412886, 17471568, 6163, 194128, 65000, 130),
Array(131, 635226, 571703, 20048112, 18043271, 6353, 200481, 65500, 131),
Array(132, 654684, 589215, 20702796, 18632486, 6546, 207027, 66000, 132),
Array(133, 674727, 607254, 21377523, 19239740, 6748, 213775, 66500, 133),
Array(134, 695373, 625835, 22072896, 19865575, 6953, 220728, 67000, 134),
Array(135, 716637, 644973, 22789533, 20510548, 7167, 227895, 67500, 135),
Array(136, 738537, 664683, 23528070, 21175231, 7385, 235280, 68000, 136),
Array(137, 761097, 684987, 24289167, 21860218, 7611, 242891, 68500, 137),
Array(138, 784332, 705898, 25073499, 22566116, 7843, 250734, 69000, 138),
Array(139, 808266, 727439, 25881765, 23293555, 8083, 258817, 69500, 139),
Array(140, 832917, 749625, 26714682, 24043180, 8329, 267146, 70000, 140),
Array(141, 858306, 772475, 27572988, 24815655, 8583, 275729, 70500, 141),
Array(142, 884457, 796011, 28457445, 25611666, 8845, 284574, 71000, 142),
Array(143, 911394, 820254, 29368839, 26431920, 9114, 293688, 71500, 143),
Array(144, 939138, 845224, 30307977, 27277144, 9391, 303079, 72000, 144),
Array(145, 967716, 870944, 31275693, 28148088, 9677, 312756, 72500, 145),
Array(146, 997149, 897434, 32272842, 29045522, 9972, 322728, 73000, 146),
Array(147, 1027467, 924720, 33300309, 29970242, 10275, 333003, 73500, 147),
Array(148, 1058694, 952824, 34359003, 30923066, 10587, 343590, 74000, 148),
Array(149, 1090857, 981771, 35449860, 31904837, 10908, 354498, 74500, 149),
Array(150, 1123986, 1011587, 36573846, 32916424, 11240, 365738, 75000, 150),
Array(151, 1158108, 1042297, 37731954, 33958721, 11581, 377319, 75500, 151),
Array(152, 1193253, 1073927, 38925207, 35032648, 11933, 389252, 76000, 152),
Array(153, 1229454, 1106508, 40154661, 36139156, 12274, 401547, 76500, 153),
Array(154, 1266740, 1140066, 41421401, 37279222, 12668, 414214, 77000, 154),
Array(155, 1305147, 1174632, 42726548, 38453854, 13051, 427265, 77500, 155),
Array(156, 1344702, 1210231, 44071250, 39664085, 13447, 440713, 78000, 156),
Array(157, 1385448, 1246903, 45456698, 40910988, 13854, 454567, 78500, 157),
Array(158, 1427411, 1284670, 46884109, 42195658, 14275, 468841, 79000, 158),
Array(159, 1470639, 1323575, 48354748, 43519233, 14706, 483547, 79500, 159),
Array(160, 1515159, 1363643, 49869907, 44882876, 15152, 498699, 80000, 160));

///////////////////////////////////////////////////////////////////////////////////////
// Main variables & data
///////////////////////////////////////////////////////////////////////////////////////
var ships = parseInt(document.getElementById('globalResources').getElementsByTagName('span')[1].innerHTML.split('(')[1].split(')'));
var balance = document.getElementById('balance');
var balance_body = balance.getElementsByTagName('tbody')[0];
var lines = balance.getElementsByTagName('tr');
var gold = parseInt(lines[lines.length-1].getElementsByTagName('td')[3].innerHTML.replace(',','').replace(',',''))
var profit = parseInt(lines[lines.length-2].getElementsByTagName('td')[3].innerHTML.replace(',','').replace(',',''));
var displayNextShip = false;

function trim(str,chars){return ltrim(rtrim(str, chars), chars);}
function ltrim(str,chars){chars = chars || "\\s";return str.replace(new RegExp("^[" + chars + "]+", "g"), "");}
function rtrim(str,chars){chars = chars || "\\s";return str.replace(new RegExp("[" + chars + "]+$", "g"), "");}
function _formatNumber(n){_n=n%1000;return n<1000?n:((n-_n)/1000)+','+(_n<10?'00'+_n:(_n<100?'0'+_n:_n));}

function calcTime(ship_id){
	var price = db[ship_id][3]-db[ships][3];
	var cheap = db[ship_id][4]-db[ships][4];
	var point = db[ship_id][6]-db[ships][6];
	displayNextShip = (price-gold<=0);
	return _calcTime(price)+'<br/><small>'+_calcTime(cheap)+'</small><br/>'+_formatNumber(point);
}
function _calcTime(p){
	if(p-gold<=0)
		return 'Megveheted';
	else {
		var days = Math.floor(Math.floor((p-gold)/profit)/24);
		var hours = Math.floor((p-gold)/profit);
		var minutes = Math.floor(((Math.floor(((p-gold)/profit)*100)/100)-hours)*60);
		//var seconds = Math.floor(((Math.floor(((Math.floor(((p-gold)/profit)*100)/100)-hours)*60*100)/100)-minutes)*60); // seconds not really count, while the gold is not changing every moment
		hours %= 24;
		var time = '';
		//if(seconds>0)
		//	time += seconds+'s';
		if(minutes>0)
			time = trim(minutes+'m '+time);
		if(hours>0)
			time = trim(hours+'h '+time);
		if(days>0)
			time = trim(days+'d '+time);
		return '~ '+time;
	}
}

if(ships == 160) {
	balance_body.innerHTML += '<tr class="result"><td class="sigma" colspan="4" style="text-align:center;font-weight:bold;">Gratulálok! Már megvetted az összes hajót!<br/>Congratulation! You have already bought all ships!</td></tr>'
} else {
	var newShips = '';
	if(ships < 159) {
		newShips += '<tr class="result"><td class="sigma" colspan="3">Következő hajóvásárlásig hátralévő idő / Remaining time until next ship<br/><small>Kedvezményes árral számolva / With wonder</small><br/><i>Pontérték / Points</i></td><td class="value res">'+calcTime(ships+1)+'</td></tr>';
		if(ships < 158) {
			for(i=ships+2;i<160;i++)
				if(displayNextShip)
					newShips += '<tr class="result"><td class="sigma" colspan="3">'+i+'. hajóvásárlásig hátralévő idő / Remaining time until ship #'+i+'<br/><small>Kedvezményes árral számolva / With wonder</small><br/><i>Pontérték / Points</i></td><td class="value res">'+calcTime(i)+'</td></tr>';
		}
	}
	newShips += '<tr class="result"><td class="sigma" colspan="3">Az utolsó hajóvásárlásig hátralévő idő / Remaining time until last ship<br/><small>Kedvezményes árral számolva / With wonder</small><br/><i>Pontérték / Points</i></td><td class="value res">'+calcTime(160)+'</td></tr>';
	balance_body.innerHTML += newShips;
}
