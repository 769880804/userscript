// ==UserScript==
// @author         Andreas Jung (sd-daken.deviantart.com)
// @name           anime-ds: sortable tables
// @namespace      http://www.w3.org/1999/xhtml 
// @description    makes the tables on anime-ds.com sortable (just click ona a column to sort the table)
// @include        http://www.anime-ds.com/*
// ==/UserScript==

// This file is licensed under Creative Commons Attribution License
//
// http://creativecommons.org/licenses/by/3.0/
//
// Initial Developer:
// Andreas Jung (sd-daken.deviantart.com)
//
// Contributor(s):
//

var content_table = document.getElementById("content_container").getElementsByTagName("table")[1];

if (content_table.getAttribute("class").indexOf("sortable") == -1) {
   content_table.setAttribute("class", content_table.getAttribute("class") + " sortable");

   var content_table_rows = content_table.getElementsByTagName("tr");

   var content_table_header = content_table.insertBefore(document.createElement("thead"), content_table_rows[0].parentNode);
   //we move the first row to thead
   content_table_header.appendChild(content_table_rows[0]);

   var content_table_footer = content_table.appendChild(document.createElement("tfoot"));
   //we move the second last row to tfoot, so the last and second last rows switch positions in the array,
   //afterwards we move the row to tfoot which was the last row, but this row is the second last now, therefore (- 2) again.
   content_table_footer.appendChild(content_table_rows[content_table_rows.length - 2]);
   content_table_footer.appendChild(content_table_rows[content_table_rows.length - 2]);

   //download and stream don't need to be sortable
   var content_table_header_cells = content_table_header.getElementsByTagName("td");
   content_table_header_cells[5].setAttribute("class", content_table_header_cells[5].getAttribute("class") + " sorttable_nosort");
   content_table_header_cells[6].setAttribute("class", content_table_header_cells[6].getAttribute("class") + " sorttable_nosort");

   //adding custom date format
   for (i = 1; i < (content_table_rows.length - 2); i++) {
      try {
         var date = content_table_rows[i].getElementsByTagName("td")[7].textContent.match(/(.*)\/(.*)/);
         content_table_rows[i].getElementsByTagName("td")[7].setAttribute("sorttable_customkey", "0000" + date[2] + date[1] + "000000");
      }
      catch (e) {}
   }

   //adding custom data format
   for (i = 1; i < (content_table_rows.length - 2); i++) {
      try {
         var format = content_table_rows[i].getElementsByTagName("td")[0].getElementsByTagName("img")[0].getAttribute("alt");
         content_table_rows[i].getElementsByTagName("td")[0].setAttribute("sorttable_customkey", format);
      }
      catch (e) {}
   }

   //XXX: adding thead + tfoot seems to change the rendering mode of tables in firefox, therefore we restyle the table
   for (i = 0; i < content_table.getElementsByTagName("td").length; i++) {
      content_table.getElementsByTagName("td")[i].setAttribute("style", "border-width: 2px; background-color: transparent;");
   }

   //new styles
   var new_style = document.getElementsByTagName("head")[0].appendChild(document.createElement("style"));
   new_style.appendChild(document.createTextNode(".sortable tbody tr:nth-child(2n+1) { background-color: rgb(41, 44, 47); }"));
   new_style.appendChild(document.createTextNode(".sortable tbody tr:nth-child(2n+0), .sortable thead, .sortable tfoot { background-color: rgb(28, 31, 34); }"));

/*
  SortTable
  version 2
  7th April 2007
  Stuart Langridge, http://www.kryogenix.org/code/browser/sorttable/
  
  Instructions:
  Download this file
  Add <script src="sorttable.js"></script> to your HTML
  Add class="sortable" to any table you'd like to make sortable
  Click on the headers to sort
  
  Thanks to many, many people for contributions and suggestions.
  Licenced as X11: http://www.kryogenix.org/code/browser/licence.html
  This basically means: do what you want with it.
*/
//XXX: appending as base64 is easy, but the script isn't readable anymore.
   var sorttable_script = document.getElementsByTagName("head")[0].appendChild(document.createElement("script"));
   sorttable_script.setAttribute("src" , "data:text/javascript;base64,");
}