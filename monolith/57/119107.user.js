// ==UserScript==
// @name          Zeleaf Quick Reply
// @icon          http://code.google.com/p/dev-kaskus-quick-reply/logo?cct=110309324
// @namespace     http://userscripts.org/scripts/show/119107
// @include       http://www.zeleaf.com/showthread.php?*
// @version       1.0.1
// @dtversion     111030326
// @timestamp     1319917890445
// @description   provide a quick reply feature.
// @author        prhiyo(420899; http://userscripts.org/users/prhiyo);
// @license       (CC) by-nc-sa 3.0
// @contributor   prhiyo aka mikoo
// @include       http://imageshack.us/*
// @include       http://*.imageshack.us/*
// @include       http://imgur.com/*
// @include       http://photoserver.ws/*
// @include       http://lulzimg.com/*
// @include       http://*.imagedum.com/*
// @include       http://imagedum.com/*
//
// -!--latestupdate
//
// v1.0.1 - 2011-11-25 . 1319917890445
//   Improve (beta) donatur may ignore rate thread w/o any xhr performed.
//   Fix undefined ss callback
//   Fix undefined hVal[0] (FF 3.6.X) Thanks=[helmiajah]
//   Add [lulz,imgdum] image uploader. Thanks=[ketang.klimax]
//   Improve CSS (google-button-new-look)
//   Improve (partial) adjusting k-capcay, seems still unreliable to serve
//   Fix missed key for reset settings
//   Fix minor CSS hide overflow body
//   Fix defect smoothScroll callback Lv.2.1
//   Fix defect smoothScroll callback (using GC with ABP+Easylist)
//   Fix stripped url tag, using with KSA. Thanks=[p1nky,sicupuw]
//   Fix strip non-youtube flash object; might be generated by 3rd-party script. Thanks=[PoiZone]
//   Improve hide dirty TM_tmp_xpath (xpath'ing nodes on tampermonkey --GC)
//   Fix minor avoid local-time-system abuse;
//
// -/!latestupdate---
// ==/UserScript==
/*
//
// -more: http://userscripts.org/topics/56051
//
// version 0.1 - 2011-11-25
// Init
// ----
// Creative Commons Attribution-NonCommercial-ShareAlike 3.0 License
// http://creativecommons.org/licenses/by-nc-sa/3.0/deed.ms
// --------------------------------------------------------
*/
(function () {

// Initialize Global Variables
var gvar=function() {};

const isQR_PLUS      = 0; // purpose for QR+ pack, disable stated as = 0
if( oExist(isQR_PLUS) )
	return;

gvar.sversion = 'v' + '3.2.6';
gvar.scriptMeta = {
  timestamp: 1319917890445 // version.timestamp

 ,dtversion: 111030326 // version.date
 ,scriptID: 80409 // script-Id
};
/*
window.alert(new Date().getTime());
*/
//=-=-=-=--=
//========-=-=-=-=--=========
gvar.__DEBUG__ = false; // development debug
//========-=-=-=-=--=========
//=-=-=-=--=

const OPTIONS_BOX = {
  KEY_SAVE_SAVED_AVATAR:  ['']
 ,KEY_SAVE_LAST_FONT:     [''] // last used font
 ,KEY_SAVE_LAST_COLOR:    ['Black'] // last used color
 ,KEY_SAVE_LAST_SIZE:     [''] // last used size
 ,KEY_SAVE_LAST_SPTITLE:  ['title'] // last used spoiler-title
 ,KEY_SAVE_LAST_UPLOADER: [''] // last used host-uploader
 
 ,KEY_SAVE_UPDATES:          ['1'] // check update
 ,KEY_SAVE_UPDATES_INTERVAL: ['1'] // update interval, default: 1 day
 ,KEY_SAVE_HIDE_AVATAR:      ['0'] // hide avatar
 ,KEY_SAVE_QUICK_QUOTE:      ['1'] // quick quote
 ,KEY_SAVE_DYNAMIC_QR:       ['1'] // dynamic QR
 ,KEY_SAVE_AJAXPOST:         ['1'] // ajaxPost
 ,KEY_SAVE_QR_DRAFT:         ['1'] // activate qr-draft
 ,KEY_SAVE_HIDE_CONTROLLER:  ['0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0'] // serial hide [controller]
 ,KEY_SAVE_CUSTOM_SMILEY:    [''] // custom smiley, value might be very large; limit is still unknown 
 ,KEY_SAVE_QR_HOTKEY_KEY:    ['1,0,0'] // QR hotkey, Ctrl,Shift,Alt
 ,KEY_SAVE_QR_HOTKEY_CHAR:   ['Q'] // QR hotkey, [A-Z]
 
 ,KEY_SAVE_TXTCOUNTER:       ['1'] // text counter flag
 ,KEY_SAVE_COUNTDOWN:        ['1'] // counter down flag
 ,KEY_SAVE_COUNTDOWN_POS:    ['1,0'] // counter down actpos [qrform, tab]

 ,KEY_SAVE_TEXTA_EXPANDER:   ['1'] // [flag,minHeight,maxHeight] of textarea_expander
 ,KEY_SAVE_SHOW_SMILE:       ['0,kecil']   // [flag,type] of autoshow_smiley
 ,KEY_SAVE_LAYOUT_CONFIG:    ['']       // flag of [signature_on, template_on], 
 ,KEY_SAVE_LAYOUT_SIGI:      [''] // signature layout, eg. [RIGHT]&#8212;[SIZE=1][b]QR[/b][/SIZE]&#8482;[/RIGHT]
 ,KEY_SAVE_LAYOUT_TPL:       [''] // template layout, must contain: "{message}". eg. [B]{message}[/B]
 
 ,KEY_SAVE_SCUSTOM_ALT:      ['0'] // use alt instead of thumbnail
 ,KEY_SAVE_SCUSTOM_NOPARSE:  ['0'] // dont parse custom smiley tag. eg. tag=babegenit. BBCODE=[[babegenit]
 
 ,KEY_SAVE_QR_USE_RECAPCAY:  ['1'] // state of capcay mode
 ,KEY_SAVE_QR_RECAPCAY_PROP: ['clean,0'] // recapcay theme, is_simple_mode
 
 ,KEY_SAVE_PRELOAD_RATE: ['0'] // whether donatur need to preload rate or not
 ,KEY_SAVE_QR_COLLAPSE:  ['1'] // initial state of qr
 ,KEY_SAVE_WIDE_THREAD:  ['1'] // initial state of thread, wider by zeleaf Fixups - chaox
 ,KEY_SAVE_TMP_TEXT:     [''] // temporary text before destroy maincontainer 
 ,KEY_SAVE_QR_LastUpdate:['0'] // lastupdate timestamp
 ,KEY_SAVE_QR_LASTPOST:  ['0'] // lastpost timestamp  
};
const GMSTORAGE_PATH = 'GM_';
const KS             = 'KEY_SAVE_';

// initialize assign global var
function init(){
  
  if(gvar.__DEBUG__) DOMTimer.start();
  
  if(page_is_notloaded('Page is temporary not available')) clog('Page is not available', 0);
  
  //------------
   ApiBrowserCheck();
  //------------  
  
  // initialize gvar..
  gvar.domain= 'http://'+'www.zeleaf.com /';  
  gvar.isNotForum = (!location.href.match(/^http:\/\/w{3}\.kaskus\.us\/.*/));
  if(gvar.isNotForum) return outSideForumTreat();
  
  gvar.domainstatic= 'http://'+'static.zeleaf.com/';
  gvar.avatarLink= gvar.domainstatic + 'customavatars/';
  gvar.titlename= 'Quick Reply'+(isQR_PLUS!==0?'+':'');
  gvar.fullname= 'zeleaf '+gvar.titlename;
  gvar.scriptId= '80409';

  // min-height postbit assumed with OR w/o quote per singleline, [{adaQuote}, {ga_adaQuote}]
  gvar.offSet_SiGi= [5, 8];
    
  gvar.ck= {bbuserid_currentpage:null, bbuserid:null, hotbb:null};
  gvar.motion_target= document.body;
  gvar.id_textarea= 'vB_Editor_001_textarea';
  gvar.vbul_multiquote= 'vbulletin_multiquote';
  
  gvar.offsetTop= -35; // buat scroll offset
  gvar.additionalLength = gvar.idx_mq=0; // counter buat deselect multiquote & tambahan length text
  gvar.INTERVAL=null; // buat txt counter
  
  gvar.silahken= 'Silahkan post reply';
  gvar.tooshort= 'The message is too short. Your message should be at least 5 characters.';
  gvar.qr_diakses= 'Quick Reply bisa diakses langsung atau dengan mengklik setiap button ';
  
  gvar.B= rSRC.getSetOf('button');
  gvar.coloroptions= rSRC.getSetOf('color');
  gvar.fontoptions= rSRC.getSetOf('font');
  gvar.sizeoptions= rSRC.getSetOf('size');    
  
  // place global style
  GM_addGlobalStyle( rSRC.getCSS() );
  GM_addGlobalStyle('','css_fixups', true); // blank style tag for zeleaf fixups, should be on body instead of head
  GM_addGlobalStyle('','css_qqr', true); // blank style tag for qqr toggle
  
  GM_addGlobalScript('','kaskus_capcay_trigger', true); // blank for trigger kaskus capcay
    
  // this is needed for chk avatar
  gvar.user= getUserId(); //will be [gvar.user.id, gvar.user.name, gvar.user.avatar, gvar.user.isDonatur ]
  gvar.ck.bbuserid_currentpage = gvar.ck.bbuserid = gvar.user.id;
  
  gvar.maintitle=gvar.isPosting= gvar.restart= false;
  
  // get saved settings to gvar
  getSettings();
  
  GM_addGlobalScript( rSRC.getSCRIPT() );
  
  if( gvar.settings.recaptcha && !gvar.user.isDonatur ){
    GM_addGlobalScript('http:\/\/www.google.com\/recaptcha\/api\/js\/recaptcha_ajax\.js');
  }else{
    GM_addGlobalScript(gvar.domain + 'clientscript\/vbulletin_ajax_imagereg\.js?v=380');
  }
  
  
  if(gvar.settings.widethread)
    Dom.add( createTextEl( rSRC.getCSS_fixup() ), $D('#css_fixups') );
    
  //------------
  if( isDefined(gvar.user.id) )
     start_Main();
  //------------  
  
}

// outside forum like u.kaskus.us || imageshack.us
function outSideForumTreat(){
  var whereAmId=function(){
    var _src, ret=false;
    getUploaderSetting();
    for(var host in gvar.uploader){
		_src = gvar.uploader[host]['src'] || null;
		if( _src && self.location.href.indexOf( _src )!=-1 ){
			ret= String(host); break;
		}
    }
    return ret;
  };
  
  var el,par,lb,m=20,loc=whereAmId(),CSS="",i="!important";
  /*
    # do pre-check hostname on location
  */
  try{if(top===self)return;}catch(e){};
  switch(loc){
    case "kodok":
      CSS=''
         +'h1,#top,.reducetop,#panel,#fbcomments,#langForm,.menu-bottom,#done-popup-lightbox,.ad-col{display:none'+i+'}'
         +'.main-title{border-bottom:1px dotted rgb(204, 204, 204);padding:5px 0 2px 0;margin:5px 0 2px 0}'
         +'.right-col input{padding:0;width:99%;font-family:"Courier New";font-size:8pt}'
	  ;break;
    case "imgur":
      CSS=''
      +'div#logo,.right .panel{display:none'+i+'}'
      +'#content{margin-top:15px}'
	  ;break;
    case "ps":
      CSS=''
      +'body,.content{margin:0'+i+';margin-top:35px'+i+'}'
      +'body>img,#topbar{top:0'+i+'}'
      +'body{background-color:#fff}'
      +'#loginbar{top:38px'+i+';display:block}'
      +'#footer{padding:0}'
      +'#overlay .content{top:3px'+i+'}'
      +'#overlay{position:absolute'+i+'}'
	  ;break;
    case "lul":
	  CSS=''
      +'#logo,#histats_counter{display:none}'
	  ;break;
    case "imgdum":
	  CSS=''
      +'#FFN_imBox_Container, div#full > div:last-child,#wrapper p:first-child,.addthis_toolbox'
      + '{display:none!important}'
      +'.nav{position:absolute;top:0;z-index:99}'
      +'#content{position:absolute;top:0}'
	  ;break;
  }; // end switch loc
  if(CSS!="") 
    GM_addGlobalStyle(CSS,'inject_host_css', true);

  el=$D('//input[@wrap="off"]',null,true);
  if(loc=='kodok' && el){
    gvar.sITryKill = window.setInterval(function() {
      if ($D('#done-popup-close')) {
        clearInterval(gvar.sITryKill);
        
        SimulateMouse( $D('#done-popup-close'), 'click', true );
        
        // just make sure, kill absolute div layer
        lb=$D('//div[contains(@style,"absolute") and contains(@style,"opacity")]',null, true);
        if(lb) Dom.remove(lb);
        if($D('#ad')) Dom.remove($D('#ad'));
        
        window.setTimeout(function(){
            el.removeAttribute('disabled');            
            var par=el.parentNode.parentNode;
            lb=$D('.tooltip',par);
            if(lb){
             lb[0].innerHTML=lb[1].innerHTML='';
             Dom.add(el,par);
            }
            // right-col manipulator
            var ei,et,rTitle=function(t){
               var e = createEl('div',{'class':'main-title'},t);
               return e;
            }, BBCodeImg=function(A){
               return '[IMG]'+A+'[/IMG]';
            }, BBCodeTh=function(A){
               var b=A.lastIndexOf('.'),c=A.substring(0,b)+'.th'+A.substring(b);
               return '[URL='+A+']'+BBCodeImg(c)+'[/URL]';
            };
            lb=$D('.right-col',null);
            if(lb){
               lb[0].innerHTML='';
               et=rTitle('Direct Link'); Dom.add(et, lb[0]);
               ei = createEl('input',{type:'text',value:el.value,readonly:'readonly'});
               _o('focus',ei, function(de){selectAll(de)}); Dom.add(ei, lb[0]);
               try{ei.focus();selectAll(ei)}catch(e){}
               
               et=rTitle('BBCode IMG'); Dom.add(et, lb[0]);
               ei = createEl('input',{type:'text',value:BBCodeImg(el.value),readonly:'readonly'});
               _o('focus',ei, function(de){selectAll(de)}); Dom.add(ei, lb[0]);
               et=rTitle('BBCode Thumbnail'); Dom.add(et, lb[0]);
               ei = createEl('input',{type:'text',value:BBCodeTh(el.value),readonly:'readonly'});
               _o('focus',ei, function(de){selectAll(de)}); Dom.add(ei, lb[0]);
            }
        }, 500);
      }else{
        if(max>0)
          m=m-1;
        else
          clearInterval(gvar.sITryKill);
      }
    },  50);
  } // end is el
  
  return false;
}

// preprepre-Initialized
function oExist(P){
  // dari sejak awal aj klo ada node #quickreply, assume collision X
  var q=document.getElementById('quickreply');
  if(q) clog('QR'+(!P?' userscript':'+')+' load aborted.\n#quickreply already created.\nYou have to disable one of these QR script or QR+');
  return q;
}

// populate settings value
function getSettings(){
  // state should define initial value | might fail on addons
  if( getValue(KS+'QR_COLLAPSE').length===0 ){
	for(var key in OPTIONS_BOX){
		if(typeof(key)!='string') continue;
		setValue(key, OPTIONS_BOX[key][0]);
	}
  }
  
  /** 
  eg. gvar.settings.preload_rate | PRELOAD_RATE
  */
  var hVal,hdc;
  gvar.settings = {
    lastused : {
       font: getValue(KS+'LAST_FONT'),
       color:getValue(KS+'LAST_COLOR'),
       size: getValue(KS+'LAST_SIZE'),
       sptitle: getValue(KS+'LAST_SPTITLE'),
       uploader: getValue(KS+'LAST_UPLOADER'),
    },
    userLayout: {
       config: [],
       signature:getValue(KS+'LAYOUT_SIGI'),
       template: getValue(KS+'LAYOUT_TPL'),
    },
    textareaExpander : [],
    qrtoggle: (getValue(KS+'QR_COLLAPSE')=='1'),
    widethread: (getValue(KS+'WIDE_THREAD')=='1'),
    hideavatar: (getValue(KS+'HIDE_AVATAR')=='1'),
    updates: (getValue(KS+'UPDATES')=='1'),
    updates_interval: Math.abs(getValue(KS+'UPDATES_INTERVAL')),
    quick_quote: (getValue(KS+'QUICK_QUOTE')!='0'),
    dynamic: (getValue(KS+'DYNAMIC_QR')!='0'),
    ajaxpost: (getValue(KS+'AJAXPOST')!='0'),
    scustom_alt: (getValue(KS+'SCUSTOM_ALT')=='1'),
    scustom_noparse: (getValue(KS+'SCUSTOM_NOPARSE')=='1'), // dont parse?
    qrdraft: (getValue(KS+'QR_DRAFT')!='0'),
    
	txtcounter: (getValue(KS+'TXTCOUNTER')!='0'),
	countdown: (getValue(KS+'COUNTDOWN')!='0'),
	
    hotkeykey: getValue(KS+'QR_HOTKEY_KEY'),    
    hotkeychar: getValue(KS+'QR_HOTKEY_CHAR'),
    hidecontroll: [],
    preload_rate: (getValue(KS+'PRELOAD_RATE')=='1'),
    recaptcha: (getValue(KS+'QR_USE_RECAPCAY')=='1'),
    recaptcha_prop: {}
  };
  
  // pick between capcay google or original kaskus
  //gvar.settings.recaptcha = true; 
  
  // recapcay properties
  hVal=getValue(KS+'QR_RECAPCAY_PROP');
  if(!hVal) hVal = 'clean,0';
  hVal = hVal.split(',');
  gvar.settings.recaptcha_prop = {
     theme:  trimStr( hVal[0] )
    ,simple: trimStr( hVal[1] )
  };
  
  //get layout config
  hVal=getValueForId(gvar.user.id, 'LAYOUT_CONFIG');
  if(!hVal) hVal = ['', '0,0'];
  gvar.settings.userLayout.config = hVal[1].split(',');
  
  hVal=getValueForId(gvar.user.id, 'LAYOUT_SIGI', ['<!>','::']);
  if(!hVal) hVal = ['', '[RIGHT]&#8212;[SIZE=1][b]QR[/b][/SIZE]&#8482;[/RIGHT]'];
  gvar.settings.userLayout.signature = decodeURIComponent(hVal[1]).replace(/\\([\!\:])/g, "$1");
  
  hVal=getValueForId(gvar.user.id, 'LAYOUT_TPL', ['<!>','::']);
  if(!hVal) hVal = ['', '[B]{message}[/B]'];  
  gvar.settings.userLayout.template = decodeURIComponent(hVal[1]).replace(/\\([\!\:])/g, "$1");

  // recheck updates interval
  hVal=gvar.settings.updates_interval;
  hVal=(isNaN(hVal)||hVal <= 0 ? 1 : (hVal > 99 ? 99 : hVal) );
  gvar.settings.updates_interval=hVal;
  
  // setting textarea expander
  hVal=getValue(KS+'TEXTA_EXPANDER');
  gvar.settings.textareaExpander=(!hVal.match(/^([01]{1})/)?['1']:hVal.split(',') );
  gvar.settings.textareaExpander[0] = (gvar.settings.textareaExpander[0]=='1');
  
  // hotkey settings, predefine [ctrl,shift,alt]; [01]
  hVal = gvar.settings.hotkeykey; 
  gvar.settings.hotkeykey = (!hVal.match(/^([01]{1}),([01]{1}),([01]{1})/)?['1','0','0'] : hVal.split(',') );
  hVal = gvar.settings.hotkeychar; 
  if(hVal!='') gvar.settings.hotkeychar = (!hVal.match(/^[A-Z0-9]{1}/)?'Q':hVal.toUpperCase() );
  // auto show smile
  //SHOW_SMILE,autoload_smiley
  hVal=getValue(KS+'SHOW_SMILE');
  gvar.settings.autoload_smiley=(!hVal.match(/^([01]{1}),(kecil|besar|custom)+/) ? ['0,kecil'] : hVal.split(',') );  
  
  // countdown position
  hVal=getValue(KS+'COUNTDOWN_POS');
  gvar.settings.countdownpos=(!hVal.match(/^([01]{1}),([01]{1})/) ? ['1,0'] : hVal.split(',') );
  if(gvar.settings.countdownpos[0]!='1' && gvar.settings.countdownpos[1]!='1')
	gvar.settings.countdown=false;
  
  // controler setting
  hdc = getValue(KS+'HIDE_CONTROLLER');
  gvar.labelControl = ['textformat', 'align', 'list', 'font', 'size', 'color', 'link', 'image', 'youtube', 'smile', 'uploader', 'quote', 'code', 'htmlphp', 'spoiler', 'transparent', 'noparse', 'strikethrough',       'plugins']; // let plugins at the latest index
  if(hdc){
    gvar.settings.hidecontroll = hdc.toString().split(',');
  }else{
    /** banyak controler (14)
    # Ini utk label di Settings
    # [format,align,list,font,size,color,link, image,youtube,smile,quote,code,spoiler,transparent,noparse,strikethrough]
    **/
    var nController = gvar.labelControl.length; 
    for(var i=0; i<nController; i++)
       gvar.settings.hidecontroll.push('0');
  }  
  // is there any saved text
  gvar.tmp_text=getValue(KS+'TMP_TEXT');
  if(gvar.tmp_text!='' && !gvar.settings.qrdraft) 
     setValue(KS+'TMP_TEXT', ''); //set blank to nulled it

  getUploaderSetting();
  
  // get current page title
  hVal = getTag('title');
  gvar.maintitle = (hVal ? hVal[0].textContent : "");
}

function getUploaderSetting(){
  // uploader properties
  gvar.upload_sel={
     kaskus:'u.kaskus.us'
    ,imgdum:'imagedum.com'
    ,kodok:'imageshack.us'
    ,imgur:'imgur.com'
    ,ps:'photoserver.ws'
    ,lul:'lulzimg.com/homelulz'
  };
  gvar.uploader={
     kaskus:{
        src:'u.kaskus.us'
       ,post:'u.kaskus.us/upload/do_upload'
       ,ifile:'userfile'
       ,hids:{
         referer:'http://'+'u.kaskus.us'
       }
     }
    ,imgdum:{
        src:'imagedum.com',noCross:'1' 
	}
    ,kodok:{
        src:'imageshack.us'
       ,post:'post.imageshack.us/'
       ,ifile:'fileupload'
       ,hids:{
          refer:'http://'+'imageshack.us/?no_multi=1'
         ,uploadtype:'on'
       }
     }
    ,imgur:{
        src:'imgur.com',noCross:'1' 
	 }
    ,ps:{
        src:'photoserver.ws',noCross:'1' 
	 }
    ,lul:{
        src:'lulzimg.com/homelulz',noCross:'1' 
	 }
  };
  // set last-used host
  try{
    if( gvar.settings.lastused.uploader )
    gvar.upload_tipe= gvar.settings.lastused.uploader;
	if(isUndefined( gvar.upload_sel[gvar.upload_tipe] )) 
    gvar.upload_tipe='kaskus';
  }catch(e){gvar.upload_tipe='kaskus';}
}
// end getSettings

// =====
// START
function start_Main(){
    
    if(gvar.__DEBUG__ && !DOMTimer.dtStart) DOMTimer.start();
    
    if( !fetch_property() ){
        // keadaan ga nongolin qr_ :: thread closed or server timeout ..
        if( !gvar.newreply ) {
            clog('Thread is closed or page not loaded.', 0);
            if(gvar.user.isDonatur) 
                Dom.remove('qrform'); // destroy original QR
        }
        return;
    } // dead end-
    
    var Attr,child,el,nodes,nodel,leng,par,hr,bufftxt = '';
    
    if( !$D('#quickreply') ){
       el = createEl('div',{id:'quickreply',style:'visibility:hidden;'},rSRC.getTPL() );
       nodes = $D('//script[contains(.,"mqlimit")]', null, 1);
       nodes.parentNode.insertBefore(el, nodes.nextSibling);
       // build tpl capcay 
       if(!gvar.user.isDonatur) create_tplcapcay();
    }
    $D('#qr_maincontainer').innerHTML = rSRC.getTPL_main();
    
    // cuma untuk fresh load
    if(!gvar.restart) {
     nodes = $D('//a[contains(.,"QUOTE") and not(contains(@class,"bigusername")) ]', null);
     leng= nodes.snapshotLength; 
     if(leng) for(var i=0; i<leng; i++){
       nodel = nodes.snapshotItem(i);
       if(nodel.parentNode.nodeName != 'TD' || nodel.parentNode.id.indexOf('td_post_')!=-1 || nodel.parentNode.className!='alt1') continue;
       hr = nodel.href.split("&p=");
       nodel.innerHTML = '<img src="'+gvar.domainstatic+'images/buttons/quote.gif" alt="Quote" title="Reply With Quote" border=0 />';      
       // prep bulu pena
       child = '<img src="'+gvar.domainstatic+'images/buttons/quickreply.gif" alt="Quick Reply" title="Quick Reply to this message" border=0 />';
       Attr = {href:'newreply.php?do=newreply&p='+hr[1],rel:'nofollow',id:'qr_'+hr[1],onclick:'return false'};
       el = createEl('a',Attr,child);
       _o('click',el,function(e){do_click_qr(e)});
       // we remove existing node first
       if(gvar.user.isDonatur) Dom.remove('qr_'+hr[1]);
       Dom.add(el, nodel.parentNode);
       
       Dom.add(createTextEl(' '), nodel.parentNode);
       
       // qqr
       child='<img src="'+gvar.B.qquote_gif+'" alt="QQ-Reply" title="Quick Quote this message" border=0 />';
       Attr = {href:'javascript:;',id:'qqr_'+hr[1],onclick:'return false','class':'btn_qqr','style':''}; //display:none;
       el = createEl('a',Attr,child);
       _o('click',el,function(e){proc_mquickquote(e)});
       nodel.parentNode.insertBefore(el, nodel);
       nodel.parentNode.insertBefore(createTextEl(' '+"\n"), nodel);
	   
     } // end-for
     nodes = $D('//a[contains(.,"EDIT") and not(contains(@class,"bigusername")) ]', null);
     leng= nodes.snapshotLength; 
     if(leng) for(var i=0; i<leng; i++){
        nodel = nodes.snapshotItem(i);
        if(nodel.parentNode.nodeName != 'TD' || nodel.parentNode.id.indexOf('td_post_')!=-1 || nodel.parentNode.className!='alt1') continue;
        hr = nodel.href.split("&p=");
        nodel.innerHTML = '<img src="'+gvar.domainstatic+'images/buttons/edit.gif" border="0" alt="Edit" title="Edit this Post" />';
	 }
    }
	Dom.add( createTextEl( '.btn_qqr{display:'+(gvar.settings.quick_quote?'inline':'none')+'!important;}' ), $D('#css_qqr') );
    
    // insert customed controler
    insert_custom_control();    
            
    // chk & append avatar
    check_avatar();
    if(isDefined(gvar.user.id)){
       appendAvatar();
    }else{
       clog('Failed attaching Avatar..');
    }
    
    // Do Event Element later, might reduce lag
    window.setTimeout(function() {
       // initialize all nodes with event
       initEventTpl();       
       // property of vbEditors controler
       re_event_vbEditor();

       if(gvar.settings.autoload_smiley[0]=='1')
         create_smile_tab( $D('#vB_Editor_001_cmd_insertsmile') );
       
       // check for draft from tmp_text
       if( trimStr(gvar.tmp_text) ){
         if( trimStr(gvar.tmp_text)!=gvar.silahken && !gvar.settings.qrdraft ){
           vB_textarea.enabled();
           // retrigger elastic
           vB_textarea.adjustElastic();           
           force_focus(100);
         }else{
           vB_textarea.readonly();
		   DRAFT.switchClass('gbtn');
           DRAFT.title('continue');
           $D('#draft_desc').innerHTML = 'Available';
         }
         //gvar.tmp_text=null; dont delete it yet, will be used onclick Draft button         
         
       }else{ // disable|readonly textarea.
         vB_textarea.readonly();
         Dom.g(gvar.id_textarea).style.height=100+'px';
       }
       gvar.restart = false;
       if(gvar.user.isDonatur) 
         Dom.remove('qrform'); // destroy original QR
    }, 50);
    window.setTimeout(function() {
       if($D('#quickreply')) $D('#quickreply').style.visibility = 'visible';
       controler_resizer();
	   if($D('#qr_delaycontainer')) QRdp.check($D('#qr_delaycontainer'));
    }, 350);

    if( gvar.__DEBUG__ && $D('#dom_created') ){
     $D('#dom_created').innerHTML = ' | DOM Created: '+DOMTimer.get()+' ms; ver='+(function(){var d=new Date(); return(d.getFullYear().toString().substring(2,4)+((d.getMonth()+1).toString().length==1?'0':'')+(d.getMonth()+1)+(d.getDate().toString().length==1 ? '0':'')+d.getDate()+'');})()+gvar.sversion.replace(/v|\.|\]/g,'')+'; timestamp='+(function(){return(new Date().getTime())})();
     DOMTimer.dtStart=null;
    }

    if(!gvar.noCrossDomain && gvar.settings.updates && isQR_PLUS==0)
        window.setTimeout(function(){ Updater.check(); }, 5000);
}
// end start_Main()

// (quick-quote) qqr clicked
function do_click_qqr(e, multi){
  
  multi = (isDefined(multi) && multi);
  // we keep find the parent
  if(!multi){
    e = e.target || e;
    var qr = $D('#quickreply'), parent_postbit = find_parent(e);
    if(!qr) return;
    if(e && parent_postbit && gvar.settings.dynamic) // is dynamic QR enabled
     Dom.add(qr,parent_postbit);
  }
  var apr,elpm,el,did,msg,omsg,nl='\r\n';
  if(e.nodeName != 'A') apr = e.parentNode;
  
  var clearTag=function(h, tag){
	if(isUndefined(tag)){
      return trimStr( h.replace(/<\/?[^>]+>/gm,'') )||'';
	}else{
	  var re = new RegExp('[\\r\\n\\t]?<\\\/?(?:'+tag+')(?:[^>]+)?.[\\r\\n\\t]?', "gim"); 
	  return h.replace(re,'');
	}	
  };
  var parseMSG=function(x){
	var pCon,els,el,el2,eIner,cucok,openTag,sBox,nLength
       ,LT={'font':[],'sp':[],'a':[],'align':[]}, pairedEmote=false;
	
    var entity_decode=function(S){
        return S.replace(/\&gt;/gm,'>').replace(/\&lt;/gm,'<').replace(/\&amp;/gm,'&');
    }, entity_encode=function(S){
        return S.replace(/>/gm,'&gt;').replace(/</gm,'&lt;');
    };
    var parseSerials=function(S,$1,$2){
      var mct,parts,pRet,lastIdx,tag;

      // parse BIU
      if ( inArray(['B','I','U'], $2.toUpperCase()) !== false ){
        return '[' +($1?'/':'')+$2.toUpperCase()+ ']';
      
      }else if( /^span\s/i.test($2) || $2.toUpperCase()=='SPAN' ){
		// parse code | spoiler        
        mct=$2.match(/\/?span(?:\srel=['"]([^'"]+))?/i);
        
        if( isDefined(mct[1]) ){
            if(mct[1].indexOf('spoiler')!=-1) {
			  LT.sp.push('SPOILER');
			  parts = mct[1].split('-');
			  if( isDefined(parts[1]) && parts[1].length ){
				sBox=createEl('div',{style:'display:none'},mct[1].replace(parts[0]+"-","") );
				parts[1] = trimStr( sBox.childNodes[0].nodeValue );
				try{Dom.remove(sBox)}catch(e){};
			  }
			  mct[1]='SPOILER="'+(!parts[1] ? "" : parts[1])+'"';
			}else{			  
              LT.sp.push(mct[1]);
			}			
		}else{
		    mct[1]=false;
		}
		
		openTag= (mct && mct[1]);
		if(openTag && mct[1].indexOf('=')==-1) 
		  mct[1]=mct[1].toUpperCase();
		lastIdx=LT.sp.length-1;

		pRet= (openTag ? '['+mct[1]+']' : (isDefined(LT.sp[lastIdx]) ? '['+'/'+LT.sp[lastIdx].toUpperCase()+']' : '') );
		
		if(!openTag) LT.sp.splice(lastIdx,1);
        return pRet;
      
      }else if( /^font\s{1,}/i.test($2) || $2.toUpperCase()=='FONT' ){
	    // parse font;size;color
        mct=$2.match(/\bfont(?:\s{1,}([^=]+).['"]([^'"]+))?/i); // $$1:type; $$2:value
        if(isDefined(mct[1])){
		   mct[1]=(mct[1]=='face' ? 'font' : mct[1] );
		   LT.font.push(mct[1]);
		}
		openTag= (isDefined(mct[2]) && mct[2]);
		lastIdx=LT.font.length-1;
		
		pRet='[' +( openTag ? mct[1].toUpperCase()+'="'+mct[2]+'"' : '/'+(isDefined(LT.font[lastIdx]) ? LT.font[lastIdx].toUpperCase():'???') ) +']';
		if(!openTag) LT.font.splice(lastIdx,1);
        return pRet;      
      
      }else if( /^div\s/i.test($2) || $2.toUpperCase()=='DIV'){
		if($2.indexOf('rel=')==-1 && $2.indexOf('style=')==-1){
          // parse align
		  mct=$2.match(/\/?div(?:\salign=['"]([^'"]+))?/i);
          if(isDefined(mct[1])) 
		    LT.align.push(mct[1]);
            
		  openTag= (mct && mct[1]);
		  if(openTag && mct[1].indexOf('=')==-1) 
		    mct[1]=mct[1].toUpperCase();
		  lastIdx=LT.align.length-1;
          
		  pRet= (openTag ? '['+mct[1]+']' : (isDefined(LT.align[lastIdx]) ? '['+'/'+LT.align[lastIdx].toUpperCase()+']' : '') );
		  
		  if(!openTag) LT.align.splice(lastIdx,1);
          return pRet;
        }else{
            return '';
        }

      }else if( /\shref=/i.test($2) || $2.toUpperCase()=='A' ){
        // parse linkify
        mct=$2.match(/\/?a\s*(?:(?:target|style|title|linkid)=[\'\"][^\'\"]+.\s*)*(?:\s?href=['"]([^'"]+))?/i);
		if(isDefined(mct[1])) {
		   tag = (/^mailto:/.test(mct[1]) ? 'EMAIL' : 'URL' );
		   if(tag=='EMAIL') mct[1]=mct[1].replace(/^mailto:/i,'');
		   LT.a.push(tag);
		}else{
		   mct[1]=false;
		}
		openTag=(mct && mct[1]);
		lastIdx=LT.a.length-1;
        pRet= (mct && mct[1] ? (isDefined(LT.a[lastIdx]) ? '['+LT.a[lastIdx].toUpperCase()+'='+mct[1]+']':'') : (isDefined(LT.a[lastIdx]) ? '['+'/'+LT.a[lastIdx].toUpperCase()+']' : '') );
		
		if(!openTag) LT.a.splice(lastIdx,1);
        return pRet;
      
      }else if( /^blockquote/i.test($2) ){
	    // parse INDENT
	    return '[' + ($1 ? '/':'') + 'INDENT]';

      }else if( /\ssrc=/i.test($2) ){
	    // parse img
        mct=$2.match(/\ssrc=['"]([^'"]+)/i);
		
        if( mct && isDefined(mct[1]) ){
		  // dirty-youtube || Opera is not supported yet or never --"		  
		  if( /^embed\s*/i.test($2) ){
            cucok=mct[1].replace(/^https?\:\/\/(?:w{3}\.)?youtube\.com\/(?:watch\?v=)?(?:v\/)?/i, '');
			if( cucok.match(/\byoutube\.com\/(?:watch\?v=)?(?:v\/)?([^&]+)/i) ) {
                cucok = entity_decode( entity_decode( unescape(cucok) ) ); // dua X decode coy
                cucok = entity_encode(cucok);				
				return ( '[YOUTUBE]' + (cucok) + '[/YOUTUBE]' );
			}else{
				return ""; // strip non-youtube flash object.
			}
		  }else if( cucok=mct[1].match(/\byoutube\.com\/(?:watch\?v=)?(?:v\/)?([^&]+)/i) ){
			if(cucok) return ( '[YOUTUBE]' + cucok[1] + '[/YOUTUBE]' );
		  }else if( cucok=$2.match(/img\s*(?:(?:alt|src|class|border)=['"](?:[^'"]+)?.\s*)*title=['"]([^'"]+)/i)){
            // is zeleaf emotes?
			if(cucok){
		      tag= mct[1].replace(/[^\w]/g,'').toString();
		      if(!pairedEmote) pairedEmote = prep_paired_emotes();
			  return ( isDefined(pairedEmote[tag]) ? pairedEmote[tag] : '[IMG]' + mct[1] + '[/IMG]' );
			}
		  }else {
		    return '[IMG]' + mct[1] + '[/IMG]';
		  }
		}else{
			return '';
		}
      }else{
        return S;
      }
    };
	// end parseSerials
	
	
	var ret='',contentsep='<!-- message -->', pos=x.indexOf(contentsep);
    x=x.substring(pos+contentsep.length);
    // clean message separator
    ret=trimStr( String(x).replace(/<\!-{2}\s?\/?\s?[^\s]+\s?-{2}>/gm,'') )||'';        
	
	// clean all previous quote
	pCon=createEl('div',{style:'display:none'},x);
	
	// cleanup head in for FJB-SF (stop until found <hr>)
	els = $D(".//div[contains(@id,'post_message_')]", pCon);
	if(els.snapshotLength){		
		var done = false, jk=0, tgt=els.snapshotItem(0), fjbel=tgt.firstChild;
		while(!done){
			fjbel = tgt.childNodes[jk]; 
			if(fjbel){
				if(fjbel.nodeName!='HR') {
					Dom.remove(fjbel);
				}else{
					jk++;
					done=true;
				}
			}
		}
	}
	
	// reveal quote
	var revealQuoteCode=function(html){
	  var els,el,el2,tag, XPathStr='.//div[@class="smallfont"]',rvCon=pCon;
	  if(isDefined(html)){        
        // fix align inside spoiler
        html = String(html).replace(/<(\/?)([^>]+)>/gm, parseSerials );
        rvCon=createEl('div',{style:'display:none'},html);
      }
	  els=$D(XPathStr, rvCon);
	  if(els.snapshotLength) for(var i=0;i<els.snapshotLength; i++){
	     el=els.snapshotItem(i);
	     if(el.innerHTML.match(/Quote:/)){
	       el=el.parentNode; 
		   el2= createTextEl('\n'); el.parentNode.replaceChild(el2,el);
	     } else 
	     if(cucok=el.innerHTML.match(/(?:(HTML|PHP)\s{1})*Code:/)){
		   el2=el.parentNode; Dom.remove(el);
		   tag=(cucok && cucok[1] ? cucok[1] : 'CODE');
		   el2.innerHTML=el2.innerHTML.replace(/\&nbsp;/gi,' ');		   
		   el=createTextEl('['+tag+']'+unescapeHtml(clearTag(el2.innerHTML))+'[/'+tag+']\n');
		   el2.parentNode.replaceChild(el,el2);
	     }
	  }
	  return rvCon.innerHTML;
	};    
    
	// reveal simple quote
	pCon.innerHTML = revealQuoteCode();	
	clog('previous Quote&Code=\n'+pCon.innerHTML);
    
    // clean messy from ksa, based on id=KSA-
    els = $D('.//span[starts-with(@id,"KSA-")]', pCon);
    nLength=(els.snapshotLength-1);
    for(var i=nLength; i>=0; i--){
        el=els.snapshotItem(i);
        if( el ) Dom.remove(el);
    }
	
	// reveal spoiler inside
	els=$D('.//div[@class="smallfont"]', pCon);
	var bSp, iSp, inerEscape, newContSP, adaSpoiler=false;
    nLength=(els.snapshotLength-1)
	if(els) {
        for(var i=nLength; i>=0; i--){
            el=els.snapshotItem(i);
            bSp = getTag('b',el); 
            if( bSp.length ){
				adaSpoiler = (bSp.length>0) || adaSpoiler;
                iSp= getTag('i',el); // title spoiler
                if(iSp.length){
                    iSp=iSp[0].innerHTML.replace(/\"/g,"&quot;").replace(/\'/g, "&apos;");
                    iSp = iSp.replace(/\&/g, "&amp;");
                }

                el2=el.parentNode;                
                Dom.remove(el);                
                el2.innerHTML = clearTag ( revealQuoteCode(el2.innerHTML), 'div' );                
                
                clog('now el2.innerHTML='+el2.innerHTML);
                // kill newline after spoiler
                el = el2.childNodes[0];
                el.nodeValue = el.nodeValue.replace(/[\r\n]+/,'');                
                
                // kill first <br> after spoiler
                inerEscape = entity_decode( (el2.innerHTML).replace(/<br\/?>/g,'').toString() );
                
                newContSP = createTextEl('{spoiler-'+iSp+'}'+trimStr(inerEscape)+'{/spoiler}');
                el2.innerHTML = '';
                Dom.add(newContSP, el2);
                clog('now-II el2.innerHTML='+el2.innerHTML);
            }
        }
		
		if(adaSpoiler){
			var reSpoiler= function (S,$1){return '<span rel="spoiler-'+($1 ? $1 : " ")+'">'};
			pCon.innerHTML = entity_decode( String(pCon.innerHTML).replace(/\{spoiler\-([^\}]+)?\}/g, reSpoiler).replace(/\{\/spoiler\}/g, '</span>') );
		}
    }
	clog('after spoiler done=\n'+pCon.innerHTML);
	
    // need to clear this <div style="margin:20px; margin-top:5px">; or closed div will be parsed as closed [/center]
    // fixing wrapped spoiler yg dijepit align [left|center|right]
    els=$D(".//span[contains(@rel,'spoiler-')]", pCon);
    nLength = els.snapshotLength;
    if(nLength) {
        for(var i=0; i<nLength; i++){
            el=els.snapshotItem(i);
            var epar = el.parentNode;
            if(epar.nodeName=='DIV')
                epar.parentNode.replaceChild(el, epar);
        }
    }
    
	// reveal ol
	els=$D('.//ol', pCon);
	var sty,typ,ltag='[LIST=';
	if(els) for(var i=0;i<els.snapshotLength; i++){
	  el=els.snapshotItem(i);
	  sty=el.getAttribute('style');
	  if( cucok = sty.match(/:\s*(\w+)/i) ){
	    typ=(cucok ? cucok[1] : '');
		// parse list (ol) |number|upper-alpha|lower-alpha
		switch(typ){
		  case "decimal": ltag+= '1'; break;
		  case "upper-alpha": ltag+= 'A'; break;
		  case "lower-alpha": ltag+= 'a'; break;
		} // switch		
		el.innerHTML = el.innerHTML.replace(/<\/li>/ig,'').replace(/<li>/ig,'[*]').replace(/<br\/?>/ig,"");
	    el2 = createTextEl('\n'+ltag+']' + trimStr( String(el.innerHTML).replace(/<(\/?)([^>]+)>/gm, parseSerials )) + '[/LIST]\n');
        el2.nodeValue = entity_decode( el2.nodeValue );
		el.parentNode.replaceChild(el2,el);
	  }
	}
	// reveal ul
	els=$D('.//ul', pCon);
	if(els) for(var i=0;i<els.snapshotLength; i++){
	  el=els.snapshotItem(i);
	  el.innerHTML = el.innerHTML.replace(/<\/li>/ig,'').replace(/<li>/ig,'[*]').replace(/<br\/?>/ig,"");
	  el2 = createTextEl('\n[LIST]' + trimStr( String(el.innerHTML).replace(/<(\/?)([^>]+)>/gm, parseSerials )) + '[/LIST]\n');
	  el.parentNode.replaceChild(el2,el);
	}
	
	clog('after ol-ul done=\n'+pCon.innerHTML);
    	
	// cleanup lastedit
	els=$D('.//div[@class="smallfont"]',pCon);
	for(var i=0;i<els.snapshotLength; i++){
	  el=els.snapshotItem(i);
	  Dom.remove(el);
	}
	x=pCon.innerHTML; delete pCon;
    
	// serials parse
	ret=trimStr( String(x).replace(/<(\/?)([^>]+)>/gm, parseSerials ));    
    
    // clean rest (unparsed tags)
    return unescapeHtml(clearTag( ret ) );
  };
  // end parseMSG
  
  var parseQQ=function(){
    if( !$D('#qr_submit') ) return; // the state of user is changed? submit_container has been destroyed.              
	
	SimulateMouse($D('#dv_accessible'),'click',true);
	if(gvar.settings.textareaExpander[0])
		vB_textarea.setElastic(gvar.id_textarea, gvar.maxH_editor); // retrigger autogrow now
	var parseQQ_cb = function(){ 
		var qr = $D('#quickreply');
		Dom.add(qr, document.body);
		Dom.add(qr,parent_postbit);
		if(!vB_textarea.Obj) vB_textarea.init();
		vB_textarea.enabled();
		vB_textarea.lastfocus();
	};

    // get quote nfo
    if(apr && apr.id) did=apr.id.replace(/qqr_/i,'');
    elpm=$D('#postmenu_'+did);
    if(elpm) el=$D(".//a[(@class='bigusername') and contains(@href,'member.php?')]", elpm, true);
    // get inner post
    elpm=$D('#td_post_'+did, null, true);
    if(elpm) {
      omsg= Dom.g(gvar.id_textarea).value.trim();
      msg= '[QUOTE='+(el ? clearTag(el.innerHTML):'')+';'+did+']'+ parseMSG(elpm.innerHTML) +'[/QUOTE]';
	  if( omsg != msg){
         vB_textarea.set(omsg + (omsg.length>0 ? nl+nl : '') + msg +nl+nl);
      }
      vB_textarea.lastfocus();
      if(gvar.settings.textareaExpander[0])
        vB_textarea.setElastic(gvar.id_textarea, gvar.maxH_editor); // retrigger autogrow now
	  
	  // disable mq if on
	  if(/quoteselected/i.test(elpm.className) && $D('#mq_'+did))
	     SimulateMouse($D('#mq_'+did), 'click', true);
	  
	  if( !multi ){
		var cSml = gvar.settings.autoload_smiley;
		gvar.offsetTop = -Math.round((parseInt(GetHeight()) * 3.95)/ 61) + (cSml[0]=='1'? (cSml[1]=='kecil'?7:10) : 0);
		ss.STEPS = 5; // scroll speed; smaller is faster          
		ss.smoothScroll( Dom.g(gvar.id_textarea), function(){ parseQQ_cb(parent_postbit) } );
	  }
    }
  };  
  parseQQ();
  
  return false;
}


// qr clicked
function do_click_qr(e){

  var tgt = e.target || e;
  var qr = $D('#quickreply'), parent_postbit = find_parent(tgt);
  if(!qr) return;
  if(tgt && parent_postbit && gvar.settings.dynamic) // is dynamic QR enabled
	Dom.add(qr,parent_postbit);

  $D('#collapseobj_quickreply').setAttribute('style','display:;');
  
  var snapTo=function(){
    if( !$D('#qr_submit') ) return; // the state of user is changed? submit_container has been destroyed.
	
    if( $D('#quoted_notice').style.display!='none' && $D('#current_fetch_post') ){ // theres a fetching progres
         //clog('theres a fetch progres, txta still readonly')
       vB_textarea.readonly();
       return;
    }
	SimulateMouse($D('#dv_accessible'),'click',true);
	
	var snapTo_cb = function(parent_postbit){ 
		if(parent_postbit && parent_postbit.nodeName=='DIV'){
			var qr = $D('#quickreply');
			Dom.add(qr, document.body);
			Dom.add(qr,parent_postbit);
		}
		if(!vB_textarea.Obj) vB_textarea.init();
		vB_textarea.enabled();
		vB_textarea.lastfocus();
	};
	var cSml = gvar.settings.autoload_smiley;
	gvar.offsetTop = -Math.round((parseInt(GetHeight()) * 3.95)/ 61) + (cSml[0]=='1'? (cSml[1]=='kecil'?7:10) : 0);
	ss.STEPS = 10; // scroll speed; smaller is faster          
	ss.smoothScroll( Dom.g(gvar.id_textarea), function(){ snapTo_cb(parent_postbit) });
  };
  snapTo();
  
  if (window.event) {
	window.event.cancelBubble = true;
	window.event.returnValue = false;
    return;
  }
  if (e.preventDefault && e.stopPropagation) {
	e.preventDefault();
	e.stopPropagation();
  }
  return false;
}

function find_parent(obj){
  var par = null, dumyobj=obj||false;
  var found=false;
  if(dumyobj) while(dumyobj.parentNode && !found){
    par = dumyobj.parentNode;
    if( par.nodeName=='TABLE' && par.className=='tborder' ){ // this is enough :p
      par = par.parentNode;
      found=true;
    }else{
      dumyobj = dumyobj.parentNode;
    }
  }
  return par;
}

function buildRate(){
  var el,par,sel;
  var rates = { '5':'5: Excellent', '4':'4: Good', '3':'3: Average', '2':'2: Bad', '1':'1: Terrible' };
  par = createEl('div', {style:'float:left'}, ' ');
  sel = createEl('select', {id:'sel_rating',name:'rating','class':'gbtn',tabindex:'6',title:'Rate this Thread..'});
   Dom.add(sel, par);
  el=createEl('option', {value:0}, 'Choose Rating');
   Dom.add(el, sel);
  el=createEl('optgroup', {label:' '});
   Dom.add(el, sel);
  sel=el;
  for(var i in rates){
    if(!isString(rates[i])) continue;
    el=createEl('option', {value:i},rates[i]);
    Dom.add(el, sel);
  }
  return par;
}

function additional_opt_parser(text){   
   var pos = [text.indexOf('collapseobj_newpost_options'), text.lastIndexOf('</select')];
   var rets = text.substring(pos[0], pos[1]);
   var par_adt_opt = $D('#additional_options');
   pos[0] = rets.indexOf('<select');
   rets = rets.substring(pos[0], pos[1]);
   var selects = rets.split('</select'), sL=selects.length;
   for(var i=0;i<sL;i++){
     if(!isString(selects[i]) || !selects[i].match(/<select\sname\=/)  ) continue;
     var fdname, el, cucok = /<select\sname\=\"([^\"]+)/.exec(selects[i]);
     if(cucok && cucok[1]!='rating'){ // rating will be showed-up on qr-optional dropdown
       fdname = cucok[1];
       cucok = /<option\svalue\=\"([^\"]+)\"\sselected\=/.exec(selects[i]);
       var opt_val = (cucok ? cucok[1] : '0');
       el = createEl('input', {name:fdname, value:opt_val, type:'hidden'});
       Dom.add(el, par_adt_opt);
     }
   }
     //clog(par_adt_opt.innerHTML)
};
// this func check wheter the additional func has been loaded or not.
function additional_options_notloaded(){
   var adt_opt = $D('#additional_options');
   if(!adt_opt){
     if( !$D('#submit_container') ) return;
     adt_opt = createEl('div',{id:'additional_options'});
     Dom.add(adt_opt, $D('#submit_container'));
   }
   return (adt_opt && adt_opt.innerHTML=='');
}

// fetch only the hash of humaninput
function capcay_parser(page){  
  // firstly conform user is the same and is not donat; else update hash & sec.token
  if( !/\bmember\.php\?u=(\d+)/.test(page) || page.indexOf('security token was invalid.<br')!=-1 || gvar.user.isDonatur ){
     return false;
  }
    
  var rets = [false,false], match;
  if( match = /id=\"hash\".*value=\"(\w+)/im.exec(page) ){
    if(gvar.settings.recaptcha && $D('#imgcapcay'))
        $D('#imgcapcay').innerHTML = '<input id="hash" name="humanverify[hash]" value="'+match[1]+'" type="hidden">\n';
    rets[0] = match[1];
  }
  if( match = /SECURITYTOKEN(?:[\s\=]+)\"([\w\-]+)/.exec(page) ) {
    // keep update hash & securitytoken
    gvar.securitytoken = rets[1] = match[1];
    $D('#qr_securitytoken').value = gvar.securitytoken;
  }  
  return rets;
}

function capcay_notloaded(){  
  return ( $D('#imgcapcay') && !Dom.g('hash', $D('#imgcapcay') ) );
}
function create_tplcapcay(){
    
	if( gvar.settings.recaptcha ){
		if($D('#capcay_container')) $D('#capcay_container').innerHTML = ''    
		+'<fieldset class="fieldset" id="fieldset_capcay" style="display:none;">'
		+'<div id="imgcapcay"><div class="g_notice normal_notice" style="display:block;font-size:9px;text-align:center;">[capcay-space]</div></div>\n'    
		+'<input id="hidrecap_btn" value="reCAPTCHA" type="button" style="display:" onclick="showRecaptcha(\'recaptcha_container\');" />' // fake button create
		+'<input id="hidrecap_reload_btn" value="reload_reCAPTCHA" type="button" style="display:" onclick="Recaptcha.reload();" />' // fake button reload
		+'<input id="docapcayfocus" value="" type="hidden"  />' // flag for callback caller click capcay
		+'</fieldset>'
		;
	}else{
		$D('#capcay_container').innerHTML = ''
		+'<fieldset class="fieldset" id="fieldset_capcay" style="display:none;">'
        +'<span id="refresh_imagereg" class="qrsmallfont" style="display:none;color:#000;">'
         +'<a id="refresh_capcay" href="javascript:;"></a>'
        +'</span>'        
		+'</fieldset>'
		;
	}
}

// this will only fetch additional opt only
function ajax_buildcapcay(reply_html){
  // initialize
  if( $D('#rate_thread')) $D('#rate_thread').style.display='';
  if( $D('#qr_prepost_submit') ) $D('#qr_prepost_submit').setAttribute('disabled','disabled');
  if(isUndefined(reply_html)){ // is there ret from XHR :: reply_html
    // prep xhr request  
    GM_XHR.uri = gvar.newreply;
    GM_XHR.cached = true;    
    GM_XHR.request(null,'GET',ajax_buildcapcay);
  }else{
    if(!reply_html) return;
    reply_html = (typeof(reply_html)=='string' ? reply_html : reply_html.responseText);
    
    if(additional_options_notloaded()) 
        build_additional_opt(reply_html);    
    
    if($D('#qr_prepost_submit'))
       $D('#qr_prepost_submit').removeAttribute('disabled');

    // need to parse & store hash humaninput
    // ada hash capcay ? || capcay enabled
    var rets = capcay_parser(reply_html)
    //return reply_html;
    if( rets ) {
        // only for kaskus capcay
        if(!gvar.settings.recaptcha) create_kaskus_capcay(rets);
        
        if($D('#rating_onpop') && $D('#rating_onpop').innerHTML=='' && $D('#rate_thread')){
            Dom.add($D('#rate_thread'), $D('#rating_onpop'));
            $D('#rate_thread').style.display = '';
        }        
    }
  }
}

function create_kaskus_capcay( rets ){
    if(gvar.settings.recaptcha) return;
    
    // pre tpl
    if($D('#recaptcha_container')) $D('#recaptcha_container').innerHTML = ''        
        +'<div id="imgcapcay" style="margin:1px 0;"><div class="g_notice normal_notice" style="display:block; margin-right:3px; width:200px; font-size:9px; text-align:center;">[capcay-space]</div></div>'
        +'<div id="progress_imagereg" style="display:none;position:absolute;margin:-20px auto;"><img src="'+gvar.B.throbber_gif+'" /></div>'
        +'<div><a id="remote_refresh_capcay" href="javascript:;" class="qrsmallfont" tabindex="6">Refresh-Capcay</a></div>'
        +'<div style="position:absolute;margin:7px 0 0 100px;width:16px;display:inline;"><img id="captcha_submit_load" src="'+gvar.B.throbber_gif+'" border="0" style="display:none;"/></div>'
        +'<input type="text" tabindex="2" title="insert capcay here" class="bginput" name="humanverify[input]" id="humaninput" size="4" maxlength="3" disabled="disabled" autocomplete="off"/>';
    
    var Attr = {id:'imagereg',alt:'capcay',title:'capcay',width:'200',height:'61',border:'0',style:'cursor:pointer',
                src:(gvar.settings.qrtoggle==1 ? 'image.php?type=hv&hash='+rets[0]:'')};
    var el=createEl('img',Attr);    
    
    $D('#imgcapcay').innerHTML='';
    Dom.add(el, $D('#imgcapcay'));
    if( !$D('#hash') ){
        el=createEl('input',{id:'hash',type:'hidden',name:'humanverify[hash]',value:rets[0]});
        Dom.add(el, $D('#fieldset_capcay'));
    }else{
        $D('#hash').value = rets[0];
    }
    
    el = $D('#kaskus_capcay_trigger');
    if(el && el.innerHTML=='') $D('#kaskus_capcay_trigger').innerHTML = 'if(document.getElementById("refresh_imagereg").style.display==\'none\' && typeof(vB_AJAX_ImageReg_Init)==\'function\'){window.setTimeout(vB_AJAX_ImageReg_Init,200);}else{var cp=document.getElementById("refresh_imagereg");cp.innerHTML="<span title=\'vB_AJAX_ImageReg_Init failed to load. Unable to refresh capcay.\'>LoadCapcay-Failed</span>";cp.style.display="";};';
    
    var hi = $D('#humaninput');
    if(hi) {    
        hi.removeAttribute('disabled');
        addClass('idleinput', hi);
        _o('focus', hi, function(){removeClass('idleinput', hi);addClass('activeField', hi);});
        _o('blur', hi, function(){removeClass('activeField', hi);addClass('idleinput', hi);});
        
        _o('click', $D('#refresh_capcay'), function(){ hi.value='';});
        _o('click', $D('#remote_refresh_capcay'), function(){ 
            SimulateMouse($D('#refresh_capcay'),'click',true); hi.focus(); hi.select();
        });
        _o('click', $D('#imagereg'), function(){hi.value='';hi.focus();});
        
        event_inputCapcay('humaninput','captcha_submit','remote_refresh_capcay');

        // order tabindex
        var reCp_field=['humaninput','captcha_submit','captcha_cancel'];
        for(var i=0; i<reCp_field.length; i++)
          if( $D('#'+reCp_field[i]) ) $D('#'+reCp_field[i]).setAttribute('tabindex', '20'+(i+1) + '');
          
    }
    window.setTimeout(function() {        
        if( $D('#imagereg').getAttribute('src')=='' || isDefined(gvar.cache_rets_capcay) ){
            clickIt();
            if( isDefined(gvar.cache_rets_capcay) && $D('#imagereg') ) 
                _o("click", $D('#imagereg'), function(){ clickIt() });    
        }else{
            hi.focus()
        }
        gvar.cache_rets_capcay = rets;
    }, 201);

    if($D('#rating_onpop') && $D('#rating_onpop').innerHTML=='' && $D('#rate_thread')){
        Dom.add($D('#rate_thread'), $D('#rating_onpop'));
        $D('#rate_thread').style.display = '';
    }
    $D('#button_preview').style.display = '';
}

// create rating, and hidden element of additional options
function build_additional_opt(html){
    additional_opt_parser(html);
    var rate = (html.indexOf('a rating')!=-1 ? buildRate() : false);
    if($D('#rate_thread')){
      $D('#rate_thread').innerHTML='';
      Dom.add(rate ? rate : createTextEl(' '), $D('#rate_thread')); // "Thread Rated" no longer showd up
      if(!gvar.user.isDonatur) {
        Dom.add($D('#rate_thread'), $D('#rating_onpop'));
        if(!$D('#rating_onpop')) $D('#rate_thread').style.display = 'none';
      }
    }
}

// make sure this func is called only by donatur, which never do prefetch for capcay
// this will collecting additional opt like rating and/or subscriptions folderid
function ajax_additional_opt(reply_html){
  // temporary obeyed :: test for folderid to preserve
  if(!gvar.settings.preload_rate) return true;
  
  // not donatur | already do this ? get out ---> old version
  // not donatur ? will do on popup capcay via additional_opt_parser() (since 3.1.8)
  if(!gvar.user.isDonatur || !additional_options_notloaded() ) return;
  // initialize
  if($D('#rate_thread')) $D('#rate_thread').style.display='';
  var postbtn = $D('#qr_prepost_submit');
  if(isUndefined(reply_html)){ // is there ret from XHR :: reply_html
    if(postbtn) postbtn.setAttribute('disabled','disabled');
    GM_XHR.uri = gvar.newreply;
    GM_XHR.cached = true;    
    GM_XHR.request(null,'GET',ajax_additional_opt);
  }else{
    postbtn.removeAttribute('disabled');
    if(!reply_html) return;
    reply_html = reply_html.responseText;
    build_additional_opt(reply_html);
  }
}

function parse_preview(text){
  if(text.indexOf('vbform')==-1 || text.indexOf('<!--POSTERROR ')!=-1) return null;
  var ret = text.split('vbform');
  ret = ret[0];
  var wraper = ['<td class="alt1">', '{[end-of-QR-'+gvar.sversion+'-'+gvar.scriptId+']}' ];
  var poss = [ret.indexOf(wraper[0]), ret.lastIndexOf(wraper[1])];
  return ret.substring(poss[0]+wraper[0].length, poss[1]);
}

// routine to preview post
function qr_preview(reply_html){
  // initialize
  if(isUndefined(reply_html)){ // is there ret from XHR :: reply_html
    var prep = prep_preview(); // [nxDo, uriact]
    $D('#qr_do').setAttribute('value', prep[0]);
     // prep xhr request
    if(gvar.__DEBUG__) DOMTimer.start();
    var spost = gvar.lastPostQuery = buildQuery();
    
    clog(gvar.lastPostQuery);
    
    if(spost===false) {
      SimulateMouse($D('#imghideshow'), 'click', true);
      return false;
    }
    
    if(gvar.__DEBUG__) {
        clog('buildQuery elapsed='+DOMTimer.get());
        DOMTimer.start();
    }
    $D('#preview_presubmit').value = 'working...';
    $D('#preview_presubmit').focus();
    GM_XHR.uri = prep[1];
    GM_XHR.cached = true;
    GM_XHR.request(spost.toString(),'post', qr_preview);
  } else {
    if( !reply_html || !$D('#preview_content') ) return;
    reply_html = reply_html.responseText;
    
    // reparse & update hash & sec.token
    capcay_parser(reply_html);
    var rets = parse_preview(reply_html);
    if(rets===null){
	  var msg, cucok, reload='<a href="javascript:location.reload(false);">reload this page</a>', erMsg='';
	  if(reply_html.indexOf('<!--POSTERROR ')!=-1){
	    cucok=reply_html.match(/<ol><li>([^\n]+)<\/ol/);
		erMsg=(cucok ? cucok[1] : 'Unknown Error Occurs');
	  }else if(reply_html.indexOf('security token was invalid.<br')!=-1 ){
        erMsg='Sorry <b>'+gvar.user.name+'</b>, your submission could not be processed, invalid security token. '+reload;
      }else if( /You are not logged in or you do not have permission to access this page/i.test(reply_html) ){
        erMsg='Please login to post. '+reload;
      }
      
      if(erMsg && $D('#preview_presubmit')) showhide($D('#preview_presubmit'),false);
      
	  msg='<div class="g_notice g_notice-error" style="display:block;">' + (erMsg ? erMsg : 'Upss, server might be busy. Please <a href="javascript:;" id="upss_preview">Try again</a> or <a href="javascript:;" id="upss_abort_preview">abort preview</a>.' ) + '</div>';
      $D('#preview_content').innerHTML = msg;
       _o('click',$D('#upss_preview'),function(e){
        if($D('#preview_content'))
          $D('#preview_content').innerHTML='<div id="preview_loading"><img src="'+gvar.B.throbber_gif+'" border="0"/>&nbsp;<small>loading...</small></div>';
         qr_preview();
       });
       _o('click',$D('#upss_abort_preview'),function(e){SimulateMouse($D('#imghideshow'),'click',true)});
       return;
    }else{
      $D('#preview_content').innerHTML = rets;
    }
    if(gvar.__DEBUG__) {
        clog('previewResponse elapsed='+DOMTimer.get());
    }
    if($D('#preview_presubmit')){
       $D('#preview_presubmit').removeAttribute('disabled');
       $D('#preview_presubmit').value = (gvar.user.isDonatur ? '' : 'pre-') + 'Post';
    }
  }
}


function lockFields_forSubmit(flag){
  var toDisb = [
       "captcha_submit","preview_presubmit", gvar.id_textarea
      ,"qr_preview_ajx","qr_prepost_submit"
  ], sml_par=$D('#smile_cont'), el=$D('#controller_wraper'), rsl=$D('#captcha_submit_load');
  var toRo = ['recaptcha_response_field', 'humaninput'];
  
  if(flag) { // locking ..    
      for(var i=0;i<toDisb.length;i++)      
        if($D(toDisb[i])) $D(toDisb[i]).setAttribute('disabled','disabled');
      
      for(var i=0;i<toRo.length;i++)
        if( $D('#'+toRo[i]) ) $D('#'+toRo[i]).setAttribute('readonly',true);
      
      if(sml_par.style.display!='none')
        window.setTimeout(function() {SimulateMouse($D('#tab_close'), 'click', true)}, 1);
      if(gvar.user.isDonatur){
        var adv=$D('qr_advanced'),par,ec;
        if(adv){
            par=adv.parentNode;
            if($D('#cancel_post')) Dom.remove($D('#cancel_post'));
            ec = createEl('input', {id:'cancel_post',type:'button',value:'Cancel',style:'margin:0 10px',title:'Cancel Posting'});
            _o('click',ec,function(){ lockFields_forSubmit(false)});
            par.insertBefore(ec, adv);
        }
      }    
  }else{
    // remove locking
    for(var i=0;i<toDisb.length;i++)
          if($D('#'+toDisb[i])) $D('#'+toDisb[i]).removeAttribute('disabled');
    for(var i=0;i<toRo.length;i++)
        if( $D('#'+toRo[i]) ) $D('#'+toRo[i]).removeAttribute('readonly',true);
    if($D('#captcha_submit')) $D('#captcha_submit').value='Post';
    if($D('#qr_prepost_submit')) $D('#qr_prepost_submit').value= (gvar.user.isDonatur ? '' : 'pre-') + 'Post Quick Reply';
    if( !gvar.settings.recaptcha ) clickIt(true);
  }
  if(rsl) rsl.style.setProperty('display',(flag?'':'none'),'');
  if(el) el.style.setProperty('display',(flag?'':'none'),'');
}

function do_posting(e){
  e=e.target||e; e.value='posting...';
  e.setAttribute('disabled','disabled');
  
  if($D('#posting_notify')) $D('#posting_notify').innerHTML = '';  
  if( !gvar.settings.ajaxpost ){
    window.setTimeout(function() {SimulateMouse($D('#qr_submit'), 'click', true)}, 200);
  }else{
    qr_ajax_post();    
  }
  return false;
}

function qr_ajax_post(reply_html){
  if(isUndefined(reply_html)){ // is there ret from XHR :: reply_html

    var prep = prep_preview(), spost=buildQuery( true ); // isToPost
    if(!gvar.user.isDonatur){
      var ce,fld;
      if( gvar.settings.recaptcha ){
        // grab 2 captcha field
        ce,fld = ["recaptcha_challenge_field","recaptcha_response_field"];
        for(var i=0; i<fld.length; i++){
            ce=$D(fld[i]);
            if(ce) spost ='&'+ce.getAttribute('name')+'='+encodeURIComponent(ce.value) + spost;
        }
      }else{
        ce,fld = ["hash","humaninput"];
        for(var i=0; i<fld.length; i++){
            ce=$D(fld[i]);
            if(ce) spost ='&'+ce.getAttribute('name')+'='+encodeURIComponent(ce.value) + spost;
        }
      }
    }
    lockFields_forSubmit(true);

    GM_XHR.uri = prep[1];
    GM_XHR.cached = true;
    GM_XHR.request(spost.toString(),'post', qr_ajax_post);

  }else{    
    clog('here');
    //clog(reply_html.responseText);    
    
    if( !reply_html ) return;
    
    reply_html = reply_html.responseText;
    var parse_ajax_post = function(html){
        var r={err:1,msg:' Unknown-Error ',redirect:false},cucok,ErMsg;
        if(html.indexOf('POSTERROR')!=-1){ // there's some error          
            cucok = html.match(/<ol><li>([^\n]+)<\/li/);
            if(cucok) ErMsg = cucok[1];
            if(cucok = ErMsg.match(/Please\s*try\s*again\s*in\s*([^.(]+)/i)){
                r.msg = 'Posting delayed, please try again in '+cucok[1];
            }else{
                r.msg = (/did\snot\smatch/i.test(ErMsg) ? 'Capcay not match, please try again..': ErMsg );
            }
            // grab and update hash
            var rets;
            if( rets = capcay_parser(html) ) 
                create_kaskus_capcay(rets);
        }else if( cucok = html.match(/<meta\s*http\-equiv=[\"\']Refresh[\"\']\s*content=[\"\']\d+;\s*URL=([^\"\']+)/i) ){
          
            // NO-Error, grab redirect location
            r = {err:0, msg:'', redirect:cucok[1]};
          
        }else if( cucok = html.match(/TITLE>Kaskus\sKepenuhan\b[^<]+/i) ){

            r.msg = '"Kaskus Kepenuhan", post may has been posted. Try to <a href="javascript:location.reload(false);">reload this page</a> and check if it has been posted.';
        
        }else{
        
            r.msg = 'Unknown Error or Post Malfunction';
        }
        if(r.err!=0) clog(html);
        
       return r;
    },
    ret = parse_ajax_post(reply_html);
        
    if(ret) {
       var tgt = (ret.err==0 ? $D('#recaptcha_container') : $D('#'+(gvar.user.isDonatur?'posting_notify_donat':'posting_notify') ));       
       if(ret.err==0){
         clog('it is ret.err==0');
         
         // set lastPost timestamp here
         QRdp.updLast(new Date().getTime()+'');
         // delete tmp_text; set blank to nulled it
         try{setValue(KS+'TMP_TEXT', ''); }catch(er){}

         // tgt is just needed for non-donatur
         if(tgt && ret.redirect) {
           tgt.innerHTML = '<br/><div class="g_notice" style="display:block!important;">Thank you for posting! redirecting to <a href="'+ret.redirect+'" target="_self">post</a>..</div>';           
         }
         clog('location.href performed');
         location.href = ret.redirect;
       }else{         
         if(tgt) {
           tgt.setAttribute('style','height:auto!important');
           tgt.innerHTML = '<div class="g_notice g_notice-error" style="display:block!important;">'+ret.msg+'</div>';
         }         
         
         if( /Kepenuhan/.test(ret.msg) || /too\s(?:short|long)\b/.test(ret.msg) ){
            window.setTimeout(function() { 
              var notice = $D('#quoted_notice'); addClass('g_notice-error', notice);
              notice.innerHTML = ret.msg;
              notice.setAttribute('style','display:block;');
              
              // close popup (non-donatur) or release lock(donatur)
              if(!gvar.user.isDonatur)
                SimulateMouse($D("#imghideshow_precap"), 'click', true);
              else
                lockFields_forSubmit( false );
            }, 1500);
            return false; // break here; close popup imidiately
         }
         
         lockFields_forSubmit( false );
         if( !gvar.user.isDonatur && $D('#botgreet_text') ){
            $D('#botgreet_text').innerHTML = rSRC.getBOT_greet(0, 10);
            // reload capcay
            SimulateMouse($D('#hidrecap_reload_btn'), 'click', true);
         }
       }
    }else{
        clog("failed ret in parse_ajax_post");
    }
    return;
  }
}

// prepare preview post, *used by advanced also
// return [nxDo, uriact];
function prep_preview(){
  // prep-previewing  
  var uriact,nxDo;
  var msg = scustom_parser();  
  // check whether message is changed
  if(msg!=gvar.silahken && msg.length>=5) {
     uriact = gvar.uripreview;
     nxDo='postreply';
     deselect_it();
  }else{
     uriact = gvar.newreply;
     nxDo='newreply';
  }
  return [nxDo, uriact];
};

function template_wrapper(txt){
   var retTx=(isUndefined(txt) ? trimStr ( Dom.g(gvar.id_textarea).value ) : txt);
   var tmsg=retTx;
   var tpl = decodeURIComponent(gvar.settings.userLayout.template);
   if(gvar.settings.userLayout.config[1] == 1 && tpl.match(/\{message\}/i) ) {
      tmsg = tpl.replace(/\{message\}/i, " "+retTx); // spaced preffix to success parseUrl (^https?\:\/\/)
   }
   
   if(gvar.settings.userLayout.config[0] == 1){
      var newLines = count_Char('\\n', tmsg);
        //clog('pre sigi, ENTER=' + newLines+'; ' );
      var margin_sigi = (tmsg.indexOf('[QUOTE=')!=-1 ? (gvar.offSet_SiGi[0]-newLines) : (gvar.offSet_SiGi[1]-newLines) );      
      tmsg += gen_Char('\n', margin_sigi, ' ') + gvar.settings.userLayout.signature;
   }
   if(Dom.g(gvar.id_textarea) && tmsg!=retTx)
     if(!$D('#hideshow') || ($D('#hideshow') && $D('#hideshow').style.display=='none') ) vB_textarea.readonly();
   return tmsg;
};

function buildQuery(isToPost){
  isToPost = isDefined(isToPost) && isToPost ? true : false; // instead of toPreview
  var hidden = getTag( 'input', $D('#submit_container') );
  var el, q='', hL=hidden.length, name;
  for(var h=0; h<hL; h++){
    name = hidden[h].getAttribute('name');
    if( name && typeof(hidden[h].getAttribute)!='undefined' && hidden[h].getAttribute('type')=='hidden' )
      q+='&' + encodeURIComponent(name) + '=' + encodeURIComponent(hidden[h].value);
  }
  
  q+= (isToPost ? '&sbutton=sbutton' : '&preview=Preview+Post');
  q+= (isToPost && $D('sel_rating') ? '&rating='+$D('sel_rating').selectedIndex : '');
  
  var adtnl = [gvar.id_textarea, 'input_title']; // ids of textarea message and title
  el = Dom.g(adtnl[0]);
  if( el && el.value!='' && el.value!=gvar.silahken ){
    var msg = trimStr(el.value);
    msg = template_wrapper();
    q = '&' + el.getAttribute('name') + '=' + encodeURIComponent(toCharRef(msg) +"\n"+ (isToPost?'':'{[end-of-QR-'+gvar.sversion+'-'+gvar.scriptId+']}')  )  + q;
  }
  el = Dom.g(adtnl[1]);
  if( el && el.value!='' )
    q = '&' + el.getAttribute('name') + '=' + encodeURIComponent(el.value) + q;
  return q;
}

function closeLayerBox(tgt){
    var doLastFocus = false, partmp;
    var isPreviewMode = ($D('#preview_presubmit'));
    if(tgt=='hideshow' && $D('#hideshow')) {
     var curv = Dom.g(gvar.id_textarea).value;
     var last2 = curv.substring(curv.length-2, curv.length);
     if( isPreviewMode && last2!="\n\n" && (last2.charCodeAt(0)!=13 && last2.charCodeAt(1)!=13) ){
		vB_textarea.init();
        vB_textarea.add('\n\n');
        doLastFocus = true;
     }
     // store temporary rating state
     partmp = $D('.sayapkiri'); partmp = (partmp ? partmp[0] : false);
     if( partmp && !isPreviewMode ) {
        Dom.add($D('#rate_thread'), partmp);
        $D('#rate_thread').style.display = 'none';
     }
    }
    lockFields_forSubmit(false); // open locked; just incase
    Dom.remove( Dom.g(tgt) );
	removeClass('hideflow', document.body);
	
	if($D('#dv_accessible') && $D('#dv_accessible').style.display!='none')
	   $D('#controller_wraper').style.display='';
	
    try {
      delete gvar.lastPostQuery;
      window.setTimeout(function() { Dom.g(gvar.id_textarea).focus()}, 1); // sto is necessary for Opera
      if(isPreviewMode && doLastFocus) vB_textarea.lastfocus(); 
    }catch(e){}
}

function toogleLayerDiv(tgt) {
  var currentVisible = Dom.g(tgt); //
  Dom.g(tgt).style.display= (currentVisible.style.display == 'none' ? '' : 'none');
}

function event_inputCapcay(txfield, btnsubmit, btn_reload){
    if( $D(txfield) )
    _o('keydown',$D(txfield),function(e){
        var C = (!e ? window.event : e ), ab=false;
        var A = C.keyCode ? C.keyCode : C.charCode;
        if( A===13 ){ // mijit enter
            SimulateMouse($D(btnsubmit), 'click', true);
            ab=true;
        }else if( (C.altKey && A===82) || (A===33||A===34) ) { //** Alt+R(82) | Pg-Up(33) | Pg-Down(34)
            SimulateMouse($D(btn_reload), 'click', true);
            ab=true;
        }
        if(ab){
         C = do_an_e(C); return false;
		}
    });
}

function loadLayer_initTplCapcay(TPL){
    var Attr,el;
    // require this transparent layer to be attached on body, to make it appear
    Attr = {id:'hideshow',style:'display:none;'};
    //el = createEl('div', Attr, rSRC.getTPL_layer_Only() );
    el = createEl('div', Attr);
    getTag('body')[0].insertBefore(el, getTag('body')[0].firstChild);
	addClass('hideflow', document.body);
    
    // this container must inside form
    Attr = {id:'hideshow_recaptcha',style:'display:none;'};
    el = createEl('div', Attr, TPL );
    Dom.add(el, $D('#vbform') );
    
    // tpl events
    _o('click',$D("#imghideshow_precap"),function(){closeLayerBox('hideshow');closeLayerBox('hideshow_recaptcha');});
    // cancel
    _o('click',$D("#captcha_cancel"),function(){ SimulateMouse($D("#imghideshow_precap"), 'click', true); });
}

function loadLayer_kaskusCaptcha(){
    
    var is_capcay_filled = function(tgt){
        if($D('#humaninput') && !$D('#humaninput').value){
          alert('Belum Isi Image Verification');
          try{if(typeof(tgt)=='object') tgt.focus()}catch(e){}
          return false;
        }else{
          return ($D('#humaninput').value);
        }
    };
    
    if($D('#hideshow'))
      closeLayerBox('hideshow');
    
    loadLayer_initTplCapcay(rSRC.getTPL_prompt_kaskusCAPTCHA());
    
    // init event capcay
    if( !gvar.cache_rets_capcay )
        ajax_buildcapcay();
    else
        create_kaskus_capcay(gvar.cache_rets_capcay);
    
        // submit recaptcha
    _o('click',$D('#captcha_submit'),function(e){
        if( !is_capcay_filled($D('#humaninput')) ){
		  e.preventDefault;
          return false;
        }
        do_an_e(e);
        return do_posting(e);
    } );
    
    // calibrate width/position container
	repos_popup_container();
}

function loadLayer_reCaptcha(){
    
    if(capcay_notloaded()) ajax_buildcapcay();
    gvar.sITryFocusOnLoad = window.setInterval(function() {
      if ($D('#recaptcha_response_field')) {
        clearInterval(gvar.sITryFocusOnLoad);
        event_inputCapcay('recaptcha_response_field','captcha_submit','hidrecap_reload_btn');

        // order tabindex
        var reCp_field=['recaptcha_response_field','recaptcha_reload_btn','recaptcha_switch_audio_btn','recaptcha_switch_img_btn','recaptcha_whatsthis_btn'];
        for(var i=0; i<reCp_field.length; i++)
          if( $D('#'+reCp_field[i]) ) $D('#'+reCp_field[i]).setAttribute('tabindex', '20'+(i+1) + '');
        
        $D('#button_preview').style.display = '';
        $D('#recaptcha_response_field').focus();
      }
      if($D('#rating_onpop') && $D('#rating_onpop').innerHTML=='' && $D('#rate_thread')){
          Dom.add($D('#rate_thread'), $D('#rating_onpop'));
          $D('#rate_thread').style.display = '';
      }
    }, 200);
    
    var is_capcay_filled = function(tgt){
        if($D('#recaptcha_response_field') && !$D('#recaptcha_response_field').value){
          alert('Belum Isi Image Verification');
          try{if(typeof(tgt)=='object') tgt.focus()}catch(e){}
          return false;
        }else{
          return ($D('#recaptcha_response_field').value);
        }
    };
      
    if($D('#hideshow'))
      closeLayerBox('hideshow');
    
    loadLayer_initTplCapcay(rSRC.getTPL_prompt_reCAPTCHA());    

    // submit recaptcha
    _o('click',$D('#captcha_submit'),function(e){
        if( !is_capcay_filled($D('#recaptcha_response_field')) ){
          e.preventDefault;
          return false;
        }
        if($D('#qr_delaycontainer') && $D('#qr_delaycontainer').style.display!='none' ){
            var delay = $D('.qr-delaypost', $D('#qr_delaycontainer'));
            if(delay.length) delay = delay[0].textContent;
            alert('Silahkan tunggu '+delay+' detik.');
            e.preventDefault;
            return false;
        }
        do_an_e(e);
        return do_posting(e);
    } );
    
    // calibrate width/position container
	repos_popup_container();

    window.setTimeout(function() {
        SimulateMouse($D('#hidrecap_btn'), 'click', true);
    }, 100);


} // end loadLayer_reCaptcha

function loadLayer_preview(){
    loadLayer( rSRC.getTPL_Preview, 'preview' );
    
    //submit from preview
    if($D('#preview_presubmit'))
      _o('click',$D('#preview_presubmit'),function(e){
         if( !gvar.user.isDonatur ){
            if($D('#preview_loading')) return;
            if( gvar.settings.recaptcha ){
                loadLayer_reCaptcha();            
            }else{
                loadLayer_kaskusCaptcha();            
            }
            toogleLayerDiv('hideshow');
            toogleLayerDiv('hideshow_recaptcha');
         }else{
            do_an_e(e);
            return do_posting(e);
         }
      });
}

function loadLayer( theTPL, flag ){

    var Attr,el;
    Attr = {id:'hideshow',style:'display:none;'};
    el = createEl('div', Attr, (typeof(theTPL)=='function' ? theTPL( isDefined(flag) ? flag : null ) : '') );
    getTag('body')[0].insertBefore(el, getTag('body')[0].firstChild);
	addClass('hideflow', document.body);
    
    // event close button
    if($D("#imghideshow")) _o('click',$D("#imghideshow"),function(){closeLayerBox('hideshow');});
    
    // calibrate width container
    popupLayer_positioning()
          
    // cancel preview
    if($D('#preview_cancel')) _o('click',$D('#preview_cancel'),function(){ closeLayerBox('hideshow'); });
    
}

function popupLayer_positioning(){
    // calibrate width & left container
	var el = $D('#popup_container');
    if( el ) el.style.setProperty('margin-top', '20px','important');
}

function repos_popup_container(){
    var el;
	if( el = $D('#popup_container_precap') ) 
		el.style.setProperty('margin-top',((document.documentElement.clientHeight/2)-200)+'px','important');
}


function scustom_parser(msg){
  var pmsg;
  // trim content and/or parse it
  msg = trimStr(Dom.g(gvar.id_textarea).value);
  if(!gvar.settings.scustom_noparse){
   
    pmsg = do_parse_scustom(msg);
    Dom.g(gvar.id_textarea).value=pmsg;
    if(vB_textarea.Obj && pmsg!=msg)
      if(!$D('#hideshow') || ($D('#hideshow') && $D('#hideshow').style.display=='none') ) vB_textarea.readonly();
    msg=pmsg;
  }
  return msg;
};


// initialize all event in TPL; 
// eg. submit, preview, some of vb_Textarea element
function initEventTpl(){
    
	var nodes, node, notice;
    
    vB_textarea.init(); // need this coz if disable can not set
    // if qrdraft inactive recieve from tmp_text of reload of location.false
    if( !gvar.settings.qrdraft ){
        if( trimStr(gvar.tmp_text) && trimStr(gvar.tmp_text)!=gvar.silahken ){
            // load capcay
            if(capcay_notloaded()) ajax_buildcapcay();
            if(gvar.user.isDonatur && additional_options_notloaded()) 
                ajax_additional_opt();
        }        
        vB_textarea.set( trimStr(gvar.tmp_text)!="" ? gvar.tmp_text : gvar.silahken); // initilaize value with "silahken"    or tmp_text    
    } else {
        vB_textarea.set( gvar.silahken ); // initilaize value with "silahken"
    }
    
    var dvacs = $D('#dv_accessible');
    if(dvacs){
      controler_resizer();
      dvacs.style.display='';
      _o('click',dvacs,function(){
        var etxta = Dom.g(gvar.id_textarea);
        if(etxta.getAttribute('readonly') || etxta.getAttribute('disabled')=='disabled'){
          if(!vB_textarea.Obj) vB_textarea.init();
          if(vB_textarea.content==gvar.silahken)
            vB_textarea.clear();
          vB_textarea.enabled();
          if(capcay_notloaded()) ajax_buildcapcay();
          if(gvar.user.isDonatur && additional_options_notloaded()) 
             ajax_additional_opt();
          force_focus(10);
        }          
      });
    }

	var uL = gvar.settings.userLayout;
	gvar.additionalLength = ( (gvar.settings.userLayout.config[0]=='1' ? uL.signature.length : 0) + (gvar.settings.userLayout.config[1]=='1' ? uL.template.length : 0) );
	
	_o( 'focus', Dom.g(gvar.id_textarea),function(){ 
        updateCounter(gvar.additionalLength);
		QRdp.check($D('#qr_delaycontainer'));
        if( gvar.settings.hidecontroll[gvar.settings.hidecontroll.length-1] == '1' ) // is there plugins ?
            vB_textarea.setElastic(gvar.id_textarea, gvar.maxH_editor);		
    });
	_o( 'keydown', Dom.g(gvar.id_textarea),function(e){return is_keydown_pressed(e)});
	if(gvar.settings.qrdraft)
        _o( 'keypress' , Dom.g(gvar.id_textarea),function(e){
            var A = e.keyCode ? e.keyCode : e.charCode;
            if( A>=37 && A<=40 ) return; // not an arrow
            if($D('#save_draft')) vB_textarea.saveDraft(e);
            clearTimeout( gvar.sITryLiveDrafting );
            gvar.isKeyPressed=1; DRAFT.quick_check();
			updateCounter(gvar.additionalLength);
        });

    _o('click',$D('#atitle'),function() {
      $D('#input_title').style.width=(Dom.g(gvar.id_textarea).clientWidth-80)+'px';
      var disp=$D('#titlecont');
      disp.style.display=(disp.style.display=='none' ? 'block':'none');
      $D('#atitle').innerHTML = '['+(disp.style.display=='none'?'+':'-')+']';
      var mt=$D('#controller_wraper').style.marginTop.replace('px','');
      if(disp.style.display!='none')
        window.setTimeout(function() {
          $D('#controller_wraper').style.marginTop=(parseInt(mt)-20)+'px';
          try{$D('#input_title').focus();}catch(e){};
        }, 100);
      else
        window.setTimeout(function() {
          $D('#controller_wraper').style.marginTop=(parseInt(mt)+20)+'px';
          try{Dom.g(gvar.id_textarea).focus();}catch(e){};
          $D('#input_title').value='';
        }, 100);
    });
    
    // do not re-event this when restarted after save setting
    // node destroyed from qr_maincontainer and all nodes inside
    // ====---==No-Repost-Event-Gan==---===
    if(!gvar.restart){

	  // new version multi-quote (cookie based)
      var ck_mquote = $D('#tmp_chkVal').value;
	  
	  // this btn will remotely clicked after chk multiquote cookie from surface
      _o('click',$D('#qr_chkval'),function(){
	   chk_newval($D('#tmp_chkVal').value)
	  });
      _o('click',$D('#qr_setting_btn'),function(){
        ST.init_setting();
      });
      _o('click',$D('#atoggle'),function(e){toogle_quickreply(); e.preventDefault();});

      _o('keydown',$D('#input_title'),function(e){
        var C = window.event||e, A = C.keyCode ? C.keyCode : C.charCode;
        if(A===13){
          if(C.ctrlKey) SimulateMouse($D('#qr_prepost_submit'), 'click', true);
          e.preventDefault(); // return false;
          return false;
		}

      });
      
      _o('click',$D('#chk_fixups'),function(e) {
        e=e.target||e;
        var chk=e.getAttribute('checked');
        if(chk){
            $D('#css_fixups').innerHTML='';
            e.removeAttribute('checked');
          } else{
            Dom.add( createTextEl( rSRC.getCSS_fixup() ), $D('#css_fixups') );
            e.setAttribute('checked','checked');
          }
          setValue(KS+'WIDE_THREAD', (chk ? 0:1));
        controler_resizer(); // resize elements width
      });
      
      _o('submit',$D('#vbform'),function(e){

        if(gvar.settings.ajaxpost && $D('#clicker').value != 'Go Advanced' ) {
          clog('here and aborted');
          e.preventDefault(); // return false;
          return false;
		}else{		

          if( !gvar.user.isDonatur && $D('#clicker').value != 'Go Advanced' ){
            var hi=($D('#recaptcha_response_field') ? $D('#recaptcha_response_field') : null);
            if(hi && hi.value==''){
              if(hi.getAttribute('disabled')=='disabled') 
                e.preventDefault(); // return false;
              alert('Belum Isi Image Verification'); hi.focus();
              e.preventDefault(); // return false;
              return false;
            }
		  }

          var prp = prep_preview(), msg=template_wrapper();
          if(msg != Dom.g(gvar.id_textarea).value) Dom.g(gvar.id_textarea).value=msg;
          $D('#qr_do').setAttribute('value', prp[0]); // nxDo; change default of qr_do (postreply)
          $D('#vbform').setAttribute('action', prp[1]); //uriact		  

          if($D('#clicker').value != 'Go Advanced' && prp[0]=='postreply' ){
            // set lastPost timestamp here
            QRdp.updLast(new Date().getTime()+'');
            // delete tmp_text; set blank to nulled it
            try{setValue(KS+'TMP_TEXT', ''); }catch(er){}
		  }
		}
      });
      _o('click',$D('#qr_advanced'),function(){$D('#clicker').setAttribute('value','Go Advanced');});
      _o('click',$D('#qr_prepost_submit'),function(e){
         if( !gvar.user.isDonatur ){
            if(Dom.g(gvar.id_textarea).value==gvar.silahken || Dom.g(gvar.id_textarea).value=='') return;
            e=e.target||e;
            var msg = trimStr(Dom.g(gvar.id_textarea).value);
            if(!(msg.length>=5)){
                // show warning message is too short
                alert(gvar.tooshort);
                e.preventDefault(); return false;
            }
            if( gvar.settings.recaptcha ){
                loadLayer_reCaptcha();
            }else{
                loadLayer_kaskusCaptcha();
            }
            toogleLayerDiv('hideshow');
            toogleLayerDiv('hideshow_recaptcha');
         }else{
           do_an_e(e);
           return do_posting(e);
         }
      });
      // end of vb_Textarea submit Event ------
      
      _o('click',$D('#qr_preview_ajx'),function(e){
        if(Dom.g(gvar.id_textarea).value==gvar.silahken || Dom.g(gvar.id_textarea).value=='') return;
        e=e.target||e;
        var msg = trimStr(Dom.g(gvar.id_textarea).value);
        if(!(msg.length>=5)){
          // show warning message is too short
          alert(gvar.tooshort);
          e.preventDefault(); return false;
        }
        if(!$D('#hideshow')){
          loadLayer_preview(); 
          toogleLayerDiv('hideshow');
        }else{
          closeLayerBox('hideshow');
        }
        qr_preview();
      });

      // detect window resize to resize textbox and controler wraper
      _o('resize',window,function(){controler_resizer()});
      // activate hotkey?
      if( gvar.settings.hotkeychar && gvar.settings.hotkeykey.toString()!='0,0,0' )
        _o('keydown',window.document,function(e){return is_keydown_pressed_ondocument(e)});
      
	  chk_newval(ck_mquote ? ck_mquote:'');
      nodes = $D('//img[contains(@id,"mq_")]');
      if(nodes.snapshotLength > 0){
	    
		var colorize_td = function(t,td){
          if( /multiquote_on\..+/.test(basename(t)) )
            addClass('quoteselected', Dom.g(td));
          else
            removeClass('quoteselected', Dom.g(td));
        };        
        for(var i=0;i<nodes.snapshotLength; i++){
            node = nodes.snapshotItem(i);
            var nid=node.id.replace(/mq_(\d+)/, 'td_post_$1');
            colorize_td(node.src, nid);			
            _o('click',node,function(e){
               e=e.target||e;
			   var ck_mquote = $D('#tmp_chkVal').value;
               chk_newval( ck_mquote ? ck_mquote :'' );
               //chk_newval();
               var nid=e.id.replace(/mq_(\d+)/, 'td_post_$1');
               colorize_td(e.src, nid);
            });
        }
      }
      
      if(gvar.settings.qrdraft){
          // initialize draft check
          DRAFT.check();
          
          // event click for save_draft
          if($D("#save_draft"))
            _o("click", $D("#save_draft"), function(e){
                e=e.target||e; 
                var text=Dom.g(gvar.id_textarea).value;
                if( e.className.indexOf('gdisabled')!=-1 ) return;
                if(e.value=='Draft'){
                    vB_textarea.enabled();
                    vB_textarea.focus();
                    if( text==gvar.silahken || text=="" )
                        vB_textarea.set( gvar.tmp_text );
                    else
                        vB_textarea.add( gvar.tmp_text );                                
                    // retrigger elastic
                    vB_textarea.adjustElastic();                
                    $D('#draft_desc').innerHTML='';
                    $D('#save_draft').value='Saved';
					DRAFT.switchClass('gdisabled');
                }else{                
                    if( text!=gvar.silahken && text!="") DRAFT.save();
                }
            });
      }
    } // end not restart mode
    
    // event monitor cookie change (useable for cookie-swap)
    if( !gvar.isOpera && !gvar.isBuggedChrome )
	  event_ckck();
}
// - end initEventTpl()

function updateCounter(additionalLength){
  // Stop any pending updating Counter value
  clearInterval(gvar.INTERVAL);
  gvar.INTERVAL = window.setInterval( function(){
    var txt=String(Dom.g(gvar.id_textarea).value), realLen = txt.replace(/[\r\n]/g,'  ').length;
	if( trimStr(txt)==gvar.silahken ) realLen = 0;
	if($D('txta_counter')){
	   $D('txta_counter').value = realLen+ (additionalLength ? ' +('+additionalLength+')' : '');
	   $D('txta_counter').setAttribute('class', ( (realLen+additionalLength) >= 10000 ? 'txta_counter_red' : 'txta_counter') );	   
	}	
  }, 50);
}

function controler_resizer(){   
   gvar.maxH_editor = parseInt(GetHeight())-170;
   var wtxa=Dom.g(gvar.id_textarea).clientWidth;
   window.setTimeout(function() {
     var el=$D('#input_title'),iwtxa=Dom.g(gvar.id_textarea).clientWidth;;
     if(el){
       el.style.display='none';
       el.style.width=(iwtxa-80)+'px';
       el.style.display='block';
     }
     el = $D('#dv_accessible');
     if(el && $D('#dv_accessible').style.display!='none')
       el.style.width=(iwtxa-80)+'px';
     else
       if(gvar.settings.textareaExpander[0]) vB_textarea.setElastic(gvar.id_textarea, gvar.maxH_editor, 1);       
     popupLayer_positioning(); // if there is a popup, repositioning it
   }, 100);
   var el = $D('#controller_wraper');
   if(el) el.style.width=(wtxa+50)+'px';
   el = $D('#scustom_container');
   if(el) el.style.setProperty('max-width',(wtxa-135)+'px','');
}

function scrollto_QR(C){
  C = do_an_e(C);
  // temporary disable dynamic
  var D = gvar.settings.dynamic;
  gvar.settings.dynamic = false;      
  
   do_click_qr(C);
  
  // turn dynamic back ?
  if(gvar.settings.dynamic!=D)
    gvar.settings.dynamic = D;
}
// global QR-Hotkey
function is_keydown_pressed_ondocument(e){
  var C = (!e ? window.event : e), valid=false;
  var pressedCSA = (C.ctrlKey ? '1':'0')+','+(C.shiftKey ? '1':'0')+','+(C.altKey ? '1':'0');
  var A = C.keyCode ? C.keyCode : C.charCode;
  
  // without pressedCSA or just Shift | there's no hideshow layer ? forget it
  if( (pressedCSA=='0,0,0' || pressedCSA=='0,1,0') && !$D('#hideshow') )
    return;

  if($D('#hideshow')){
    if(A==27){
      closeLayerBox('hideshow');
      if($D('#hideshow_recaptcha')) closeLayerBox('hideshow_recaptcha');
    }
    return;
  }  
  var CSA_tasks = {
     quickreply: gvar.settings.hotkeykey.toString() // default: Ctrl+Q
    ,fetchpost: (!gvar.isOpera ? '0,0,1' : '1,0,1' ) // Alt+Q [FF|Chrome] --OR-- Ctrl+Alt+Q [Opera]
    ,ctrlshift: '1,1,0' // Ctrl+Shift+..., due to Ctrl+Alt will be used above
  };
  
  switch(pressedCSA){ // key match in [Ctrl-Shift-Alt Combination]
    case CSA_tasks.quickreply:
      var cCode = gvar.settings.hotkeychar.charCodeAt();
      if(A==cCode) {
        scrollto_QR(C);
        valid=1;
      }
    break;
    case CSA_tasks.fetchpost:
      if(A==81) { // keyCode for Q
        SimulateMouse($D('#quote_now'), 'click', true);
        scrollto_QR(C);
        valid=1;
      }
    break;
    case CSA_tasks.ctrlshift:
      if(A==81) { // keyCode for Q
        window.setTimeout(function() { 
         if($D('#quoted_notice').style.display!='none')
           SimulateMouse($D('#deselect_them'), 'click', true); 
        }, 100);
        valid=1;
      }else 
      if(A==68){ // keyCode for D
        window.setTimeout(function() {
          if($D("#save_draft")) SimulateMouse($D('#save_draft'), 'click', true);
        }, 100);
        valid=1;
      }
    break;
  }
  if(valid){
    C = do_an_e(C);
    return false;
  }
}

// Ketika keydown tab dari textarea
function is_keydown_pressed(C){
  var C = (!C ? window.event : C), asocKey={};
  if(C) {
   if(C.ctrlKey){ // mijit + Ctrl
    var B, A = C.keyCode ? C.keyCode : C.charCode;    
	asocKey={
	  '66':'Bold' // B
	 ,'73':'Italic' // I
	 ,'85':'Underline' // U
	 
	 ,'69':'Center' // E
	 ,'76':'Left' // L
	 ,'82':'Right' // R
	 
	 ,'13':'qr_prepost_submit' // Enter
	};
	B = (isDefined(asocKey[A])? asocKey[A] : false);
	
	if(B===false) return false;    
    if(A==13){
      if(C.shiftKey) B = 'qr_preview_ajx'; // preview
	  if(Dom.g(B)) SimulateMouse(Dom.g(B), 'click', true); 
    }else{
	  do_align_BIU(B);
	}
	C = do_an_e(C);

   }else
   if(C.altKey){ // mijit + Alt
    var B='', A = C.keyCode ? C.keyCode : C.charCode;
	asocKey={
	   '83':'qr_prepost_submit' // [S] Submit post
	  ,'80':'qr_preview_ajx' // [P] Preview
	  ,'88':'qr_advanced' // [X] Advanced
	};
	B = (isDefined(asocKey[A])? asocKey[A] : false);
	if(B===false) return false;
    if(Dom.g(B)) SimulateMouse(Dom.g(B), 'click', true); 
	C = do_an_e(C);
	
   }else
   if(C.keyCode==9){ // mijit tab
     C = do_an_e(C);
     if($D('#recaptcha_response_field')){
       window.setTimeout(function() { try{$D('#recaptcha_response_field').focus()}catch(e){}; }, 150);
     }else if($D('#humaninput')){
       window.setTimeout(function() { try{$D('#humaninput').focus()}catch(e){}; }, 150);
     }else{
	   $D('#qr_prepost_submit').focus();
     }
   } // end keyCode==9
   return false;
  } // end event C
}

function insert_custom_control(){  
    if(!$D('#customed_control')) return;
    
    var Attr,div1,el, idx, genProp={
       // general properties
       eventClick: do_btncustom
      ,style:'vertical-align:bottom'      
    }
    ,btncustom={
        // defined tautan btn custom     
        youtube: {
            title:'Insert youtube URL'
           ,alt:'[youtube]', src:gvar.B.youtube_gif, parent:'#vB_Editor_001_cmd_insertyoutube'
        }
        ,spoiler: {
            title:'Wrap [SPOILER] tags around selected text'
           ,alt:'[spoiler]', src:gvar.B.spoiler_png, parent:'parent'
        }
        ,transparent: {
            title:'Wrap [COLOR=transparent] tags around selected text'
           ,alt:'[transparent]', src:gvar.B.transp_gif, parent:'parent'
        }
        ,noparse: {
            title:'Wrap noparse tags around selected text'
           ,alt:'[noparse]', src:gvar.B.noparse_gif, parent:'parent'
        }
        ,strikethrough: {
            title:'Strikethrough text around selected text'
           ,alt:'[strike]', src:gvar.B.tstrike_gif, parent:'parent'
           ,eventClick:do_TextStrike
        }
    };    
    div1 = createEl('div',{'class':'customed_addcontroller'});
    Dom.add(div1,$D('#customed_control'));
    
    for(var tag in btncustom){
        idx= gvar.labelControl.indexOf( String(tag) );
        if( idx && gvar.settings.hidecontroll[idx] != '1' ){
            var property = btncustom[tag]
               ,parent=( property["parent"]=="parent" ? div1 : $D(property["parent"]) );
            Attr={title:property["title"], alt:property["alt"],style:genProp["style"],src:property["src"]};
            el = createEl('img',Attr);
            if( property["alt"]=="[strike]" ) 
                _o('click',el, function(e){return property["eventClick"](e)} );
            else
                _o('click',el, function(e){return genProp["eventClick"](e)} );
            Dom.add(el, parent);
        }
    } // end for
}
// end insert_custom_control

// create event controler on vbEditor & settings
function re_event_vbEditor(){
  // event reset / clear textarrea
  _o('click',$D('#textarea_clear'),function(){vB_textarea.clear()});
  // event reset draft
  if($D('#draft_clear')) _o('click',$D('#draft_clear'),function(){DRAFT.clear()});
  
  // event textarea autogrowth  
  if(gvar.settings.textareaExpander[0])
    vB_textarea.setElastic(gvar.id_textarea, gvar.maxH_editor);
  
  var vB01='vB_Editor_001';
  // general event buat more smile
  //el=createEl('script',{type:'text/javascript'},"vB_Editor['"+vB01+"'] = new vB_Text_Editor('"+vB01+"', 0, '13', '1', undefined, '');");
  //Dom.add(el,document.body);
       
  // event common button controller
  if($D(vB01)) {
   var imgs = $D(vB01).getElementsByTagName('img'), iL=imgs.length;
   for(var i=0;i<iL;i++){
    var el=imgs[i], alt=el.alt;
    switch(alt){
      case 'Align Left': case 'Align Center': case 'Align Right': case 'Bold': case 'Italic': case 'Underline':
        _o('click',el,function(e){do_align_BIU(e)});
      break;
      case 'oList': case 'uoList':
        _o('click',el,function(e){do_btncustom_list(e)});
      break;
      case 'Insert Image': case 'Insert Link':
        _o('click',el,function(e){ return do_btncustom(e) });
      break;
      case 'Decrease Size': case 'Increase Size':
        _o('click',el,function(e){do_resize_editor(e)});
      break;
      default:
       if(alt && (alt.indexOf('[quote]')!=-1 || alt.indexOf('[code]')!=-1 || alt.indexOf('[html]')!=-1|| alt.indexOf('[php]')!=-1) )
        _o('click',el,function(e){return do_btncustom(e)});
      break;
    }
   }
  }
  
  // fungsi click pick
  var clickpick = function(el,id){
    var ve=$D(id);
    ve.style.display=(ve.style.display==''?'none':'');
    if(ve.style.display!='none') try{Dom.g(id+'_dumy').focus();}catch(el){}
  };
  
  // event buat kolor
  var el = create_popup_color();
  var par = $D(vB01+'_popup_forecolor');
  if(par) Dom.add(el,par);
  
  el = $D('#pick_kolor');
  if(el) _o('click',el,function(e){clickpick(e, vB01+'_popup_forecolor_menu');});

  el = $D(vB01+'_color_out');
  if(el)
    _o('click',el,function(){
     var etitle = gvar.settings.lastused.color;
     if(etitle) {
       do_insertTag('color',etitle);
       return false;
     }
     SimulateMouse($D('#pick_kolor'), 'click', true);
    });  

  // event buat font  
  el = create_popup_font();
  par = $D(vB01+'_popup_fontname');
  if(par) Dom.add(el,par);
  
  el = $D('#pick_font');
  if(el) _o('click',el,function(e){clickpick(e,vB01+'_popup_fontname_menu')});
   
  el = $D(vB01+'_font_parentout');
  if(el)
    _o('click',el,function(e){
     var etitle = gvar.settings.lastused.font;
     if(etitle) {
       do_insertTag('font',etitle);
       return false;
     }
     SimulateMouse($D('#pick_font'), 'click', true);     
    });  
  
  // event buat size  
  el = create_popup_size();
  par = $D(vB01+'_popup_fontsize');
  if(par && el) Dom.add(el,par);
  
  el = $D('#pick_size');
  if(el) _o('click',el,function(e){clickpick(e,vB01+'_popup_size_menu')});
   
  el = $D(vB01+'_size_parentout');
  if(el)
    _o('click',el,function(e){
     var etitle = gvar.settings.lastused.size;
     if( etitle && !isNaN(parseFloat(etitle)) ) {
       do_insertTag('size',etitle);
       return false;
     }
     SimulateMouse($D('#pick_size'), 'click', true);     
    });  
  
  var mouseEv = function(par,cmd,evt){
    window.setTimeout(function() {
      if(isUndefined(vB01)) vB01 = 'vB_Editor_001';
	  var obj = $D(vB01+cmd);
      if($D('#'+par) && $D('#'+par).style.display!='') {
        obj.style.backgroundColor=(evt=='mouseout' ? 'transparent' : '#B0DAF2');
        obj.style.border='1px solid '+(evt=='mouseout' ? 'transparent' : '#2085C1');
      }
    }, 10);
  };
  // event buat smile  
   par = $D(vB01+'_cmd_insertsmile');   
   if(par) {
     _o('click',par,function(e){switch_upl_smiley(e)});
     _o('mouseout',par,function(){mouseEv('smile_cont','_cmd_insertsmile_img','mouseout')});
     _o('mouseover',par,function(){mouseEv('smile_cont','_cmd_insertsmile_img','mouseover')});
   }
  // event buat button uploader
   par = $D(vB01+'_cmd_uploader');
   if(par) {
     _o('click',par,function(e){switch_upl_smiley(e)});
	 _o('mouseout',par,function(){mouseEv('upl_cont','_cmd_uploader_img','mouseout')});
     _o('mouseover',par,function(){mouseEv('upl_cont','_cmd_uploader_img','mouseover')});   
   }
}
// end re_event_vbEditor

function switch_upl_smiley(e){
   var tohide;
   e=e.target||e;
   var clearActive = function(tohide){
     var cmd=(tohide=='smile_cont' ? '_cmd_insertsmile_img':'_cmd_uploader_img'),obj = $D('vB_Editor_001'+cmd);   
	 if(obj){
	  obj.style.backgroundColor='transparent';
      obj.style.border='1px solid transparent';
	 }
   };
   if(e.id && e.id.indexOf('_cmd_uploader') !=-1 ){