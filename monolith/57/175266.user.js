// ==UserScript==
// @name           Nessus River Guardian Tools
// @namespace      Nessus
// @description    Adds various functionalities to Lord of Ultima
// @include        http://prodgame*.lordofultima.com/*/index.aspx*
// ==/UserScript==
(function () {

    var NRG_mainFunction = function () {
            window.debugLog = function (data) {

            }

            function initNessusRiverGuardian() {
                var NRG = {};
                qx.Class.define("nessusRiverGuardian.main", {
                    type: "singleton",
                    extend: qx.core.Object,
                    construct: function () {
                        this.app = qx.core.Init.getApplication();
                        this.player = webfrontend.data.Player.getInstance();
                        this.playerName = this.player.getName();
                        this.chat = this.app.chat;
                        this.contextMenu = new nessusRiverGuardian.contextMenu(this);
                        this.createWorldViewEnhancments();

                        _NRG = NRG;

                        window.console.debug("this.options", this.options);
                        this.loadOptions();
                        window.console.debug("this.options", this.options);
                        NRG.options = this.options;
                        NRG.a = this.app;
                        NRG.main = this;
						NRG.dungeonProgressData = this.dungeonProgressData;

                        // ***** Options button ***** //
                        btn = new qx.ui.form.Button("NRG");
                        btn.set({
                            width: 40,
                            appearance: "button-text-small",
                            toolTipText: "Nessus River Guardian Options"
                        });
                        btn.addListener("click", this.showOptionsPage, this);
                        this.app.serverBar.add(btn, {
                            top: 2,
                            left: 650
                        });

                        this.optionsPage = new window.NRG.optionsPage();
                    },
                    members: {
                        //Coord Types
                        CITY: 1,
                        LAWLESS: 2,
                        BOSS: 4,
                        DUNGEON: 8,
                        SHRINE: 16,
                        MOONGATE: 32,
                        SETTLE: 64,
                        EMPTY: 128,
                        ATTACKABLE: 256,
                        ANY: 512,
                        app: null,
                        player: null,
                        playerName: null,
                        chat: null,
                        contextMenu: null,
                        sortMenu: null,
                        worldViewCoord: null,
                        worldViewMinBtn: null,
                        optionsPage: null,
          dungeonProgressData: // [type][level][progress][max/avg]
            [ // LEAVE THIS LINE
              [
                //Forest L1
                [
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1]
                ],
                //Forest L2
                [
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [1243,1243],[1243,1243],[1243,1243],[1243,1243],[1243,1243],
                  [1243,1243],[1243,1243],[1243,1243],[1243,1243],[1243,1243],
                  [1243,1243],[1243,1243],[1243,1243],[-1,-1],[-1,-1]
                ],
                //Forest L3
                [
                  [2400,2400],[2448,2443],[2492,2485],[2538,2528],[2584,2572],
                  [2637,2614],[2686,2658],[2736,2702],[2785,2746],[2833,2789],
                  [2882,2833],[2930,2876],[2978,2920],[3027,2964],[3076,3008],
                  [3124,3051],[3073,3004],[2999,2938],[2910,2857],[3213,3130],
                  [3303,3212],[3389,3289],[3335,3242],[3249,3166],[3140,3070],
                  [3486,3378],[3583,3465],[3675,3547],[3740,3606],[3797,3656],
                  [3847,3702],[3899,3748],[3948,3792],[3997,3836],[4045,3880],
                  [4094,3924],[4142,3967],[4191,4011],[4239,4054],[4288,4098],
                  [4336,4142],[4313,4137],[4274,4122],[4224,4099],[4455,4266],
                  [4533,4329],[4608,4391],[4666,4441],[4720,4488],[4670,4459],
                  [4595,4413],[4504,4355],[4811,4588],[4902,4662],[4988,4733],
                  [5050,4787],[5106,4836],[5157,4881],[5208,4926],[5257,4970],
                  [5306,5014],[5355,5058],[5403,5102],[5452,5146],[5500,5189],
                  [5548,5233],[5597,5277],[5645,5320],[5693,5363],[5742,5407],
                  [5791,5451],[5839,5494],[5888,5538],[5936,5582],[5985,5626],
                  [6033,5669],[6082,5713],[6130,5756],[6179,5800],[6227,5844],
                  [6276,5888],[6324,5931],[6372,5974],[6421,6018],[6470,6062],
                  [6518,6105],[6567,6149],[6615,6193],[6664,6237],[6712,6280],
                  [6761,6324],[6809,6367],[6858,6411],[6906,6455],[6955,6499],
                  [7003,6542],[7056,6590],[7111,6640],[7199,6719],[7199,6719]
                ],
                //Forest L4
                [
                  [8450,7651],[8550,8075],[8568,8073],[8869,8344],[8742,8395],
                  [8581,8135],[8333,8012],[8704,8264],[8924,8444],[8857,8530],
                  [9423,8953],[9561,9165],[9819,9252],[9845,9335],[9721,9375],
                  [10088,9616],[9852,9535],[9834,9425],[9178,8989],[9341,9118],
                  [9290,9090],[9961,9615],[10695,10349],[11270,10662],[11570,10905],
                  [11791,11086],[11697,11059],[11406,10942],[11035,10781],[11699,11351],
                  [12250,11663],[12536,11888],[12564,11957],[12328,11883],[12004,11759],
                  [12384,12044],[12974,12419],[13159,12563],[13275,12667],[13362,12773],
                  [13193,12685],[12962,12553],[13741,13210],[13861,13391],[13944,13552],
                  [14326,13806],[14408,13946],[14457,14071],[14567,14054],[14378,13922],
                  [14130,13749],[15072,14491],[15185,14643],[15245,14765],[15042,14728],
                  [15418,15002],[15410,15066],[15862,15296],[15787,15245],[15644,15149],
                  [15936,15622],[15984,15645],[15696,15515],[15471,15252],[16083,15732],
                  [15978,15665],[17038,16510],[17128,16603],[16752,16320],[16162,15867],
                  [16373,16054],[17466,17020],[17821,17481],[18111,17918],[18725,18509],
                  [18537,18137],[18573,18137],[18960,18200],[19259,18576],[19552,18819],
                  [19460,18825],[19563,18946],[19668,19067],[19895,19265],[20141,19535],
                  [20403,19829],[20261,19873],[20382,19848],[20250,19769],[20092,19672],
                  [19898,19563],[20630,20132],[20863,20339],[21026,20542],[21023,20670],
                  [20974,20780],[21154,20888],[21585,21138],[21970,21422],[21970,21422]
                ],
                //Forest L5
                [
                  [26425,23718],[24475,24074],[26081,24752],[27174,25026],[27689,25290],
                  [28020,25494],[28245,25683],[28496,26159],[28171,26180],[27026,25731],
                  [28204,26555],[27736,26427],[29604,27505],[29600,27543],[28501,26969],
                  [27627,27057],[28953,28535],[29508,28818],[31141,29995],[32095,30627],
                  [31648,30335],[32880,30678],[33908,31392],[34848,32595],[34145,32495],
                  [32879,32261],[33475,33154],[34460,34062],[34033,33395],[35182,33937],
                  [35483,34562],[36239,35037],[35249,34595],[36758,35624],[38750,37001],
                  [38586,37217],[37996,37214],[39942,39049],[40913,39495],[40756,39641],
                  [41860,40054],[41905,40127],[43310,41309],[42836,41351],[41776,40941],
                  [41899,40728],[43620,41629],[44363,42467],[44652,42896],[44322,42889],
                  [46417,44515],[46017,44603],[44167,43642],[43214,42940],[43180,43061],
                  [45818,45761],[46624,46324],[47792,47171],[47605,46293],[45317,44319],
                  [45482,44158],[45552,45148],[47361,47124],[48671,48302],[49295,48645],
                  [50885,49887],[50605,50041],[53388,52465],[54605,53120],[55249,53878],
                  [55194,53666],[56697,55034],[57585,55931],[57308,55362],[58346,55507],
                  [57030,55385],[55809,55128],[56799,56158],[57862,56765],[59721,57957],
                  [59761,58192],[60228,58555],[60907,58367],[60898,58079],[59842,58149],
                  [61610,59614],[61710,60035],[61961,60846],[63901,62428],[64853,63625],
                  [64940,62951],[65350,63221],[66020,64035],[66783,65075],[66647,65533],
                  [65295,63669],[64473,62896],[67432,64880],[68705,66410],[68705,66410]
                ],
                //Forest L6
                [
                  [60325,53311],[57625,52897],[59896,53827],[60113,54285],[59386,54478],
                  [56899,53738],[58966,55425],[61035,57252],[61641,57482],[61805,57709],
                  [61600,58122],[60395,57145],[58150,56433],[58953,57957],[61248,60204],
                  [62326,60973],[63237,62087],[63714,62598],[65162,63029],[67214,65231],
                  [68937,66182],[70317,68691],[74460,71410],[79956,74332],[81224,75100],
                  [81700,75409],[80526,74643],[81748,76102],[78960,75074],[77921,75508],
                  [78064,76453],[78068,76477],[78911,78378],[79487,78673],[78121,76844],
                  [81534,78933],[79768,77704],[81343,78580],[81523,79875],[88205,85117],
                  [94305,88608],[96055,89614],[96772,89873],[98012,91730],[94423,89840],
                  [87763,86047],[88674,87783],[89979,88780],[93633,91647],[99793,96788],
                  [100009,98308],[101700,99364],[101311,97604],[95496,93287],[97960,94751],
                  [99497,96485],[105470,100733],[108520,103506],[107499,102581],[108628,102502],
                  [105969,100637],[103928,101243],[109553,106598],[118404,114735],[121895,120367],
                  [123503,122089],[122767,120569],[125002,120772],[127561,123220],[128752,122983],
                  [131508,125865],[135333,128021],[134730,128674],[135445,129409],[133276,129589],
                  [133041,129228],[127452,123963],[129063,124296],[125655,121714],[131219,125077],
                  [131455,126535],[135428,130203],[135500,131522],[135811,131850],[140492,135007],
                  [140755,136598],[140522,138154],[139643,136151],[144381,138636],[145835,140081],
                  [145014,140461],[143759,139706],[141819,138737],[148234,143747],[149920,146062],
                  [152180,145788],[153629,146738],[154959,147672],[156845,149270],[156845,149270]
                ],
                //Forest L7
                [
                  [119725,106135],[120400,107908],[118692,108203],[117708,108522],[120897,110849],
                  [123364,111833],[126952,115481],[124362,115237],[120809,115010],[117723,113784],
                  [119276,115977],[116497,115000],[120876,119523],[125664,124218],[128836,126845],
                  [131641,127535],[139649,133028],[135692,132370],[134035,132160],[136333,134744],
                  [146006,142716],[148683,144477],[149760,143386],[145840,141674],[150070,144953],
                  [157435,150394],[155051,151567],[157195,155538],[158476,156268],[164305,161026],
                  [166920,160512],[166470,161624],[164737,158362],[156089,154134],[161367,159668],
                  [169428,166477],[173573,167250],[183049,174271],[184183,176225],[186785,180501],
                  [191202,184320],[196806,185373],[197399,186421],[195841,186052],[191657,184553],
                  [194389,184093],[193871,183717],[192208,180363],[188311,179196],[182718,176525],
                  [184195,178925],[194236,186284],[200102,192011],[207703,196269],[200720,190301],
                  [198782,190500],[198898,193863],[219143,210685],[237390,222537],[239788,223743],
                  [237941,224797],[235994,225107],[235203,226683],[242247,228928],[245085,231573],
                  [247363,235026],[241417,236014],[247551,242375],[252199,246483],[259882,252857],
                  [256820,249972],[253406,251104],[240149,238622],[245492,244388],[255081,253904],
                  [260865,258926],[270290,266619],[269315,263619],[271029,266967],[266497,259837],
                  [271776,260251],[268983,260906],[268061,258517],[267422,260565],[272058,261134],
                  [287217,271292],[297591,278011],[300762,282777],[304505,286510],[309152,289465],
                  [305890,286262],[305822,286998],[305942,290944],[304503,292470],[296983,292643],
                  [292206,289126],[298783,294490],[308447,300110],[311285,297177],[311285,297177]
                ],
                //Forest L8
                [
                  [214600,188677],[210350,187532],[213989,193938],[213678,197545],[208667,196387],
                  [208774,200690],[210035,200085],[222282,205427],[225307,207035],[219390,205087],
                  [219114,208357],[230733,218774],[235094,221640],[234872,222614],[240009,227025],
                  [243968,234245],[248972,238593],[252105,237630],[250975,241057],[249392,242858],
                  [261766,251597],[263697,248206],[261168,247105],[262526,251248],[279536,263502],
                  [279064,267268],[286516,273050],[289616,279172],[291980,282013],[292235,277335],
                  [301909,286236],[306524,290818],[318699,297947],[323709,300829],[324025,302468],
                  [318792,303167],[328013,309482],[328128,312539],[327428,306690],[321942,302962],
                  [326563,306768],[327482,311218],[335657,317790],[321350,311363],[310249,303670],
                  [317315,309778],[339426,329464],[346855,341763],[356011,345844],[371122,351070],
                  [397642,369708],[401348,379462],[390145,373207],[395353,378739],[400054,386160],
                  [415417,397031],[410333,394683],[409960,392268],[432765,403468],[443905,414245],
                  [443907,414696],[445569,417628],[440139,413290],[444953,423487],[441043,428832],
                  [446479,441380],[442953,438109],[454278,445409],[461067,443285],[458076,434010],
                  [468776,438302],[476285,442196],[466020,437097],[470461,441010],[488601,459229],
                  [503580,478719],[500125,490263],[484976,477876],[502477,496584],[512534,510436],
                  [514702,510356],[504183,496535],[506140,488789],[512735,497040],[531464,509119],
                  [532259,519954],[543662,527701],[536457,517434],[518192,508932],[509838,497151],
                  [528825,506445],[541619,519720],[558726,532109],[563297,544992],[567209,542141],
                  [554545,539156],[543496,521533],[541984,520795],[557960,528295],[557960,528295]
                ],
                //Forest L9
                [
                  [351275,310377],[353850,312821],[355088,317854],[356676,320891],[360136,323300],
                  [368405,328848],[370835,331360],[372010,332020],[371437,333860],[373974,336908],
                  [381069,344963],[387967,352314],[391665,354810],[397105,358944],[406921,366454],
                  [413098,373575],[417360,380402],[424532,387390],[434959,396558],[440951,403991],
                  [450837,410235],[449602,412004],[452875,419292],[462177,428585],[471659,435342],
                  [486755,444364],[492018,449555],[494584,450120],[494268,454576],[495171,460950],
                  [511896,471241],[516800,474072],[521359,478717],[526164,484187],[519501,481391],
                  [520231,483644],[518179,483987],[530459,496708],[546729,511765],[554205,524826],
                  [562118,529576],[563357,522583],[571363,528361],[590014,540300],[624051,568512],
                  [632124,588953],[646459,597011],[663948,611415],[664308,614261],[663110,610832],
                  [677746,619594],[677783,619257],[690587,632090],[694112,642214],[709386,658254],
                  [717058,660285],[724952,666644],[734108,667010],[732081,670985],[723460,668484],
                  [716065,667785],[722308,672433],[729443,674154],[753039,688017],[756728,696539],
                  [752781,699307],[745449,698046],[762199,713551],[782422,730105],[782952,743706],
                  [774170,755296],[787387,762704],[823343,793007],[822009,770486],[815586,772000],
                  [835279,788218],[834038,792621],[832800,795280],[846530,797824],[845206,800196],
                  [846243,811858],[872765,836361],[890370,833943],[888712,836606],[874064,827794],
                  [872199,837342],[894056,871463],[909069,883898],[903262,865000],[904306,853327],
                  [884190,837446],[880659,836541],[872744,833578],[878847,847103],[909584,872769],
                  [910073,888862],[903893,873202],[911034,870815],[913314,869055],[913314,869055]
                ],
                //Forest L10
                [
                  [533250,477043],[514100,486999],[539791,489432],[536191,492700],[525671,493011],
                  [528443,501279],[546175,514271],[559729,527934],[550622,534312],[565133,545332],
                  [579856,556449],[610050,568271],[622076,577182],[640042,588456],[645989,598753],
                  [641769,607081],[633953,614861],[635174,612180],[651623,620732],[637434,620131],
                  [656285,642897],[662812,643813],[698678,667919],[707025,686521],[715402,698554],
                  [723926,717386],[727783,717350],[738136,721392],[739619,710459],[734107,707591],
                  [777006,731533],[784927,735743],[790454,738545],[791563,738843],[818404,764728],
                  [830237,776296],[835137,787078],[836829,796096],[837037,804635],[862390,814655],
                  [875555,831362],[898429,865325],[922106,903864],[936950,917269],[916715,886427],
                  [916572,889773],[931402,892281],[942671,907187],[954812,924754],[951939,911609],
                  [952557,916516],[952285,922023],[975551,929292],[986434,937301],[1009440,963827],
                  [1033765,994553],[1059728,1028267],[1037178,990485],[1040796,991617],[1044839,993452],
                  [1051885,999768],[1059646,1007158],[1072335,1021525],[1086197,1037561],[1100868,1054743],
                  [1098108,1047405],[1105824,1060246],[1113929,1074846],[1132315,1106923],[1149217,1115960],
                  [1169790,1142158],[1154899,1110236],[1159621,1111835],[1164762,1114426],[1172175,1120962],
                  [1199140,1153257],[1230703,1191716],[1265459,1234406],[1223272,1183102],[1221347,1185701],
                  [1219819,1189833],[1231486,1186403],[1239654,1191881],[1248511,1198500],[1257133,1206363],
                  [1265778,1214627],[1274402,1223119],[1285120,1232290],[1296300,1241637],[1307815,1251098],
                  [1311077,1258273],[1318828,1266702],[1326657,1275153],[1335005,1283751],[1343475,1292383],
                  [1352030,1301039],[1361575,1310667],[1371351,1320515],[1386450,1335720],[1386450,1335720]
                ]
              ],
              [
                //Mountain L1
                [
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1],
                  [-1,-1],[-1,-1],[-1,-1],[-1,-1],[-1,-1]
                ],
                //Mountain L2
                [
                  [690,690],[703,702],[715,712],[729,725],[742,737],
                  [755,749],[769,761],[783,774],[797,787],[811,799],
                  [825,812],[839,824],[853,837],[867,849],[881,862],
                  [895,875],[908,887],[922,899],[936,912],[950,924],
                  [964,937],[978,950],[992,962],[1006,975],[1020,987],
                  [1034,1000],[1048,1012],[1062,1025],[1076,1038],[1090,1050],
                  [1104,1063],[1118,1075],[1132,1088],[1145,1100],[1159,1113],
                  [1173,1125],[1187,1137],[1201,1150],[1215,1163],[1229,1175],
                  [1243,1188],[1257,1200],[1271,1213],[1285,1226],[1299,1238],
                  [1313,1251],[1327,1263],[1341,1276],[1355,1289],[1368,1301],
                  [1358,1297],[1341,1288],[1322,1278],[1400,1334],[1396,1334],
                  [1386,1330],[1363,1317],[1450,1380],[1476,1401],[1501,1421],
                  [1519,1436],[1536,1451],[1550,1464],[1564,1476],[1578,1489],
                  [1592,1502],[1605,1514],[1619,1527],[1633,1539],[1647,1552],
                  [1661,1564],[1675,1577],[1689,1589],[1703,1602],[1717,1615],
                  [1731,1627],[1745,1640],[1759,1652],[1773,1665],[1787,1677],
                  [1801,1690],[1815,1703],[1828,1715],[1842,1727],[1798,1695],
                  [1741,1652],[1674,1602],[1770,1677],[1728,1644],[1671,1600],
                  [1863,1754],[1909,1791],[1950,1825],[1974,1846],[1976,1860],
                  [1972,1873],[1966,1885],[2025,1904],[2070,1931],[2070,1931]
                ],
                //Mountain L3
                [
                  [2970,2835],[3060,3060],[2988,2917],[2971,2915],[3051,2964],
                  [3031,2953],[2922,2870],[3058,2989],[2945,2900],[3109,3046],
                  [3078,3027],[3381,3300],[3476,3393],[3563,3477],[3626,3541],
                  [3681,3599],[3732,3654],[3782,3707],[3831,3759],[3802,3741],
                  [3757,3707],[3699,3662],[3942,3892],[4022,3973],[4099,4051],
                  [4157,4112],[4210,4167],[4261,4221],[4310,4274],[4359,4326],
                  [4407,4378],[4348,4324],[4266,4248],[4165,4154],[4487,4474],
                  [4578,4569],[4666,4659],[4729,4725],[4787,4783],[4844,4839],
                  [4900,4892],[4955,4944],[5010,4996],[5065,5048],[5096,5078],
                  [5072,5058],[5033,5024],[5083,5068],[5274,5244],[5359,5323],
                  [5435,5394],[5422,5382],[5341,5311],[5235,5217],[5428,5400],
                  [5630,5580],[5734,5675],[5816,5750],[5881,5811],[5942,5868],
                  [5999,5922],[6056,5975],[6112,6027],[6167,6078],[6222,6130],
                  [6277,6182],[6333,6233],[6388,6285],[6443,6336],[6498,6388],
                  [6553,6439],[6608,6491],[6663,6542],[6588,6453],[6484,6331],
                  [6188,6033],[6370,6257],[6244,6153],[6782,6653],[6925,6787],
                  [7053,6907],[7134,6983],[7131,6993],[7104,6984],[7062,6964],
                  [7302,7155],[7313,7174],[7305,7180],[7267,7163],[7518,7359],
                  [7607,7434],[7690,7507],[7755,7566],[7815,7621],[7873,7675],
                  [7930,7727],[7990,7784],[8054,7843],[8154,7937],[8154,7937]
                ],
                //Mountain L4
                [
                  [9990,9378],[9840,9840],[9864,9600],[10078,9697],[9976,9608],
                  [9660,9370],[10299,9865],[10347,9915],[11035,10534],[11300,10791],
                  [11543,11030],[11734,11226],[11911,11410],[12079,11586],[12244,11759],
                  [12406,11930],[12569,12102],[12731,12273],[12893,12444],[13053,12614],
                  [13215,12785],[13106,12729],[12936,12622],[12722,12479],[13442,13124],
                  [13551,13259],[13627,13369],[14169,13838],[14406,14068],[14627,14286],
                  [14542,14241],[14310,14095],[14012,13897],[14435,14318],[14168,14028],
                  [13595,13520],[14149,14025],[15367,15150],[15807,15570],[16064,15845],
                  [16193,16009],[16273,16132],[16450,16272],[16236,16107],[15947,15877],
                  [16456,16361],[17032,16896],[16965,16862],[16761,16705],[16767,16690],
                  [17700,17574],[18015,17882],[18297,18163],[18502,18373],[18687,18565],
                  [18857,18744],[19023,18919],[19187,19091],[19349,19262],[19512,19434],
                  [19674,19605],[19835,19775],[19997,19946],[20158,20117],[20320,20288],
                  [20287,20265],[20212,20198],[19643,19637],[19743,19736],[19356,19346],
                  [20796,20774],[20950,20924],[21020,20991],[20928,20898],[21766,21713],
                  [22062,21998],[22161,22096],[22156,22095],[21892,21849],[22276,22211],
                  [22237,22176],[23035,22929],[23328,23206],[23601,23465],[23888,23760],
                  [24227,24131],[24574,24374],[24244,23860],[23788,23164],[23401,23150],
                  [24195,23956],[23921,23769],[23611,23550],[24545,24487],[25464,25360],
                  [25419,25250],[25390,25224],[25259,25108],[26542,26258],[26542,26258]
                ],
                //Mountain L5
                [
                  [31410,28396],[32790,29411],[31479,29157],[30828,29045],[32639,30205],
                  [32826,30438],[32424,30434],[31712,30274],[33379,31452],[34298,32125],
                  [34022,32113],[34466,32427],[33808,32622],[33767,32753],[33132,31828],
                  [34956,32975],[34952,33408],[33097,32271],[34084,33205],[35102,34028],
                  [34618,34281],[35075,34850],[37385,36924],[38544,37702],[40497,39323],
                  [40073,39719],[39941,39732],[40784,40698],[40168,39966],[42031,41656],
                  [41844,40781],[43110,41879],[43852,42031],[43318,42475],[45235,44106],
                  [46359,44538],[45835,44296],[47395,45816],[46485,45522],[46840,45707],
                  [46582,45724],[46088,45771],[46791,46332],[48698,47657],[50963,49166],
                  [50469,48873],[50842,50036],[49292,48556],[50109,49855],[50205,50067],
                  [51380,51321],[52582,52263],[53680,52738],[54120,52437],[55695,53946],
                  [54966,53548],[55847,53547],[56011,54237],[56189,53579],[56632,55055],
                  [57935,56276],[56673,55849],[56050,55646],[57917,57390],[56646,55829],
                  [58919,57861],[57540,56945],[60484,59427],[64009,62095],[65459,63309],
                  [66512,64219],[66837,64758],[67177,65364],[67442,65945],[69045,67085],
                  [68834,67182],[69029,67662],[70209,68161],[70832,68669],[70289,68288],
                  [69422,67707],[68634,66832],[71353,68620],[71258,68390],[69383,68280],
                  [71958,70818],[71524,70158],[71541,70357],[70023,69360],[72996,72220],
                  [76730,75143],[79122,77246],[80453,77582],[78052,76469],[76033,75200],
                  [73655,72399],[76354,74114],[79211,76141],[81666,79508],[81666,79508]
                ],
                //Mountain L6
                [
                  [72150,62745],[71580,65594],[70122,64150],[72488,65902],[72167,66872],
                  [70873,66606],[70106,67454],[69416,67732],[71800,69316],[73346,69597],
                  [76113,72200],[76934,73490],[77509,72721],[73898,71076],[76393,72836],
                  [77642,73777],[77912,74597],[83166,78625],[82859,79247],[85301,81830],
                  [86659,80960],[90887,84468],[90823,85467],[91590,87462],[93798,87831],
                  [92049,88028],[95764,90854],[94373,91709],[96679,93288],[101653,96358],
                  [100838,97552],[100406,95351],[101545,96640],[106456,98636],[105942,98736],
                  [102908,97908],[103275,99703],[103416,100912],[107339,104077],[110891,106425],
                  [107986,106630],[105802,103839],[108601,105683],[112300,107937],[110532,108064],
                  [114671,110225],[118901,111920],[118299,111505],[119796,113283],[123921,115090],
                  [123867,117468],[122182,118270],[123869,119430],[124628,119337],[121497,118048],
                  [122644,118018],[127180,120955],[124289,119359],[130969,122961],[128399,121491],
                  [132604,124865],[132888,127860],[138820,132968],[139812,136682],[144251,139759],
                  [147168,139315],[149721,141320],[152735,146297],[155812,152206],[155320,151321],
                  [156127,149867],[157662,152083],[157518,148024],[158980,148610],[161105,149546],
                  [159759,148800],[158245,148925],[155110,151035],[159515,155125],[163217,159250],
                  [160026,154362],[157858,155185],[161650,158509],[166125,162931],[166437,161438],
                  [170273,164241],[171249,167922],[171083,167527],[167712,165255],[168288,163865],
                  [172980,164756],[174049,165158],[178031,167312],[179813,168597],[181430,169882],
                  [182763,171071],[184147,172365],[185509,173672],[187590,175685],[187590,175685]
                ],
                //Mountain L7
                [
                  [145710,127730],[140070,126769],[144371,130483],[144207,130695],[146255,132804],
                  [146665,134693],[146795,137116],[143822,136576],[148042,138368],[148800,141032],
                  [150498,141711],[149642,141583],[150211,144438],[156875,149117],[157527,152442],
                  [156813,152040],[159172,156134],[165871,161840],[170659,163448],[169844,164317],
                  [167378,160132],[164127,161902],[170705,168108],[178973,173999],[180128,169853],
                  [187498,174142],[193295,179362],[196368,183399],[195268,184526],[207634,193285],
                  [210539,197725],[209742,200356],[210523,199238],[201932,196230],[200750,198229],
                  [195568,194057],[207282,203569],[218282,209060],[228606,212521],[230939,214089],
                  [227960,213556],[230049,216383],[225688,216744],[236271,226305],[233449,230240],
                  [231414,229433],[230423,227134],[235372,227421],[246151,233154],[245367,232888],
                  [241152,230529],[256080,239515],[258987,241433],[267397,248504],[271160,251838],
                  [271990,252690],[271654,252576],[271994,255361],[283687,268426],[287394,276595],
                  [288272,273521],[285192,275009],[297038,282194],[291670,279609],[296385,280902],
                  [296706,283534],[299131,291097],[303994,292761],[315149,305951],[309924,297918],
                  [299318,293641],[294709,286389],[310548,296340],[315072,301206],[318195,306689],
                  [320608,314137],[324046,314351],[326545,309898],[328210,311049],[329587,312929],
                  [332009,319492],[336885,323083],[337278,328224],[334005,322438],[331121,322983],
                  [340180,329089],[346011,335715],[346311,342791],[343086,340190],[335322,330022],
                  [344729,333338],[354913,337817],[359791,340729],[364843,344581],[369343,348469],
                  [372247,353324],[369932,354017],[370078,357371],[378846,357643],[378846,357643]
                ],
                //Mountain L8
                [
                  [258540,227156],[249240,230153],[261488,236793],[260876,238118],[260779,238515],
                  [264906,243864],[268628,246620],[273111,250992],[275097,252534],[273836,253411],
                  [269533,255038],[275436,260915],[279053,261725],[279384,264317],[274154,265831],
                  [283966,270899],[301940,281602],[316956,295582],[316548,300568],[311680,294320],
                  [306369,291714],[315489,295940],[323445,302232],[331389,309774],[340846,320402],
                  [341632,324343],[347007,336355],[349151,340812],[347876,341738],[354072,344913],
                  [364209,349982],[366434,345181],[375584,351389],[377136,351528],[369629,351840],
                  [385742,365158],[386872,370706],[389352,375787],[391922,375606],[403010,386323],
                  [417986,390789],[419262,392446],[416741,393905],[417678,393727],[429614,404720],
                  [428090,405554],[423179,405864],[436625,410361],[439079,412515],[440200,413374],
                  [451790,430293],[471884,449564],[487167,470323],[484845,465768],[516205,483151],
                  [522808,488230],[533592,496995],[531086,504807],[529870,503512],[536445,510052],
                  [544713,508752],[539450,507386],[531600,501479],[534760,506015],[543376,512706],
                  [543131,519624],[532167,519846],[532948,520257],[522783,511311],[545611,525305],
                  [548746,524354],[549672,525353],[539701,520255],[553100,530676],[551982,541695],
                  [556419,539853],[574787,550703],[582987,554501],[575104,554528],[589189,562223],
                  [593549,570852],[586992,568597],[586402,562258],[579435,557618],[575985,560483],
                  [597593,577412],[612490,588463],[625331,597910],[636646,595656],[625469,592591],
                  [619053,592009],[603071,587103],[617444,602726],[609112,597369],[627426,611200],
                  [621712,600676],[646196,608305],[666435,624376],[672204,636036],[672204,636036]
                ],
                //Mountain L9
                [
                  [428430,370853],[419670,373273],[426662,381635],[431352,384942],[431378,385825],
                  [432531,389181],[433143,393249],[439538,398137],[448237,402754],[457258,407415],
                  [459156,410786],[460132,416257],[471887,428306],[487026,437487],[497560,446644],
                  [506570,454565],[509542,462047],[511843,467453],[515373,470645],[517025,474310],
                  [531752,485823],[551939,498533],[564951,511734],[564948,520289],[567245,520761],
                  [570058,522621],[581542,531409],[598736,542385],[600545,548790],[605240,556574],
                  [607854,557672],[618284,566943],[628603,570867],[628852,575625],[624468,580764],
                  [617939,578101],[617410,578831],[623700,585206],[654577,602115],[665006,611523],
                  [673682,615225],[672685,621843],[685634,634440],[718296,664528],[759770,689841],
                  [775566,711870],[782975,718029],[793308,725070],[796268,738206],[807724,754367],
                  [833366,776146],[851929,775989],[860615,778039],[857288,774788],[846961,776490],
                  [838022,775328],[852692,787752],[868791,800842],[861979,803808],[862188,800473],
                  [843629,801044],[854989,810280],[846878,807305],[865805,817357],[887740,827375],
                  [914472,835929],[923173,842036],[926047,853638],[914561,859298],[920235,857584],
                  [903520,850133],[923978,860354],[931475,867511],[925158,867772],[932749,883989],
                  [950076,908216],[943870,907505],[931448,894375],[964690,905548],[977741,922290],
                  [994629,949955],[1003301,968944],[993584,947871],[985230,933555],[988968,940311],
                  [977098,944041],[1005972,960242],[1017161,965089],[1019684,975408],[1009552,969064],
                  [1011257,977525],[1015073,983210],[1047988,996586],[1052590,1005194],[1041338,990914],
                  [1052111,1005714],[1096654,1022537],[1102263,1025920],[1113918,1038388],[1113918,1038388]
                ],
                //Mountain L10
                [
                  [656160,582434],[579390,535504],[615839,576340],[631357,588023],[657902,609625],
                  [651402,613625],[657924,619713],[653784,607233],[662378,616073],[708418,649532],
                  [711964,653876],[729296,670121],[702157,659912],[691110,666931],[719991,693491],
                  [781600,740155],[796464,765542],[802766,761966],[796893,769165],[813642,786468],
                  [828058,794264],[815045,804123],[809163,793965],[864091,833627],[893752,835898],
                  [913516,847869],[917386,854920],[916624,861956],[902521,866137],[928490,881368],
                  [922390,888120],[943581,899461],[935636,903967],[951560,914874],[997940,936774],
                  [1017085,949911],[1033562,962324],[1046421,973602],[1059191,984732],[1071537,995702],
                  [1085381,1016484],[1092072,1043556],[1110070,1091633],[1135305,1115720],[1181790,1146925],
                  [1197503,1140750],[1190137,1140576],[1209994,1167859],[1194087,1126266],[1211389,1143635],
                  [1221512,1164146],[1181985,1161709],[1164626,1145465],[1189317,1157961],[1217612,1158822],
                  [1233713,1167461],[1247505,1176536],[1242971,1178405],[1236148,1187848],[1226778,1198172],
                  [1282417,1242204],[1294695,1232817],[1310675,1242683],[1307169,1243701],[1299744,1244891],
                  [1289284,1245137],[1345154,1279194],[1368953,1299083],[1392995,1319581],[1391623,1317703],
                  [1401059,1326622],[1410073,1335455],[1420194,1345470],[1410758,1344295],[1397098,1340765],
                  [1380327,1335469],[1441424,1375284],[1467426,1391542],[1494282,1407577],[1517429,1420947],
                  [1510967,1429941],[1500381,1430022],[1466536,1416915],[1427064,1399887],[1452494,1424276],
                  [1511552,1468928],[1525621,1487703],[1557653,1502204],[1555453,1512999],[1557712,1533775],
                  [1555642,1520577],[1604274,1543761],[1621920,1554506],[1638316,1566530],[1650989,1577455],
                  [1662698,1588280],[1674955,1600135],[1687228,1612209],[1706015,1630814],[1706015,1630814]
                ]
              ]
            ], // LEAVE THIS LINE

                        convertIdToCoordinatesObject: function(id) {
                            var o = {
                                xPos: (id & 0xFFFF),
                                yPos: (id >> 16),                                                        
                            }
                            o.cont = webfrontend.data.Server.getInstance().getContinentFromCoords(o.xPos, o.yPos);
                            return o;
                        },
                        showOptionsPage: function () {
                            this.app.switchOverlay(this.optionsPage);
                        },
                        loadOptions: function () {
                            _str = localStorage.getItem("NRG_options");
                            var options;
                            if (_str) {
                                options = qx.lang.Json.parse(_str);
                            }
                            this.options = {
                                "AttackPower": [0, 0, 0, 0, 0, 0, 50, 70, 0, 0, 0, 90, 120, 0, 0, 0, 1200, 12000],
                                "RaidUnitCarry": [0, 0, 0, 10, 0, 5, 10, 5, 0, 10, 20, 15, 5, 0, 0, 0, 1500, 3000],
                                "DungeonLoot": [0, 200, 1000, 5000, 20000, 50000, 100000, 200000, 300000, 400000, 800000],
                                "DungeonLootMax": [0, 400, 2000, 10000, 40000, 80000, 160000, 300000, 500000, 800000, 1400000],
                                "TargetsX": [0, 0, 0, 0, 0, 0, 0],
                                "TargetsY": [0, 0, 0, 0, 0, 0, 0],
                                "ArriveHour": 0,
                                "ArriveMin": 0,
                                "ArriveSec": 0,
                                "ArriveDay": 0,
								"UseFrigs": false,
                                "AutoRaidLevel": 8,
                                "AutoRaidDist": 3,
								"FakesAsSiege": false,
								"BaronWithFakes": false,
								"BaronWithReal": false
                            };

                            try
                            {
                                this.options.AttackPower = options.AttackPower;
                            }
                            catch (e)
                            {
                            }
                            try
                            {
                                this.options.RaidUnitCarry = options.RaidUnitCarry;
                            }
                            catch (e)
                            {
                            }
                            try
                            {
                                this.options.DungeonLoot = options.DungeonLoot;
                            }
                            catch (e)
                            {
                            }
                            try
                            {
                                this.options.DungeonLootMax = options.DungeonLootMax;
                            }
                            catch (e)
                            {
                            }
                            try
                            {
                                this.options.AutoRaidLevel = options.AutoRaidLevel;
                            }
                            catch (e)
                            {
                            }
                            try
                            {
                                this.options.AutoRaidDist = options.AutoRaidDist;
                            }
                            catch (e)
                            {
                            }

                            this.app.setUserData("NRG_options", this.options);

                            str = qx.lang.Json.stringify(this.options);
                            localStorage.setItem("NRG_options", str);
                        },
                        parseWorldViewCoord: function (xCoord, yCoord) {
                            worldViewCoord = new Object();
                            var worldViewToolTip = this.app.worldViewToolTip;
                            var id = 0;
                            var playerName = null;
                            var allianceName = "";
                            var type = null;
                            var xPos = worldViewToolTip.getVisMain().ScreenPosFromWorldPosX(xCoord * 128);
                            var yPos = worldViewToolTip.getVisMain().ScreenPosFromWorldPosY(yCoord * 80);

                            var tooltipText = worldViewToolTip.getVisMain().GetTooltipText(xPos, yPos);
                            var level = 0;
                            var progress = 0;
							var dungType = "";

                            if (tooltipText.match(/<td>Player:<\/td><td>(.+?) <span dir="ltr">(.+?)<\/td>/)) {
                                playerName = tooltipText.match(/<td>Player:<\/td><td>(.+?) <span dir="ltr">(.+?)<\/td>/)[1];
                                if (tooltipText.match(/<td>Alliance:<\/td><td>(.+?) <span dir="ltr">(.+?)<\/td>/)) {
                                    allianceName = tooltipText.match(/<td>Alliance:<\/td><td>(.+?) <span dir="ltr">(.+?)<\/td>/)[1];
                                }
                                type = "City";
                            } else if (tooltipText.match(/<td>Score:<\/td><td>.+?<\/td>/)) {
                                type = "LawlessCity";
                            } else if (tooltipText.match(/<td width="75">Type:<\/td><td>.+?<\/td>/)) {
                                type = "Dungeon";
								dungType = tooltipText.match(/<td width="75">Type:<\/td><td>(.+?)<\/td>/)[1];
								if (dungType == "Mountain Dungeon" || dungType == "Hill Dungeon")
								{
									worldViewCoord.lootType = 1;
								}
								else
								{
									worldViewCoord.lootType = 0;
								}
                                if (tooltipText.match(/<td>Level:<\/td><td>(.+?)<\/td>/)) {
                                    level = tooltipText.match(/<td>Level:<\/td><td>(.+?)<\/td>/)[1];
                                }
                                if (tooltipText.match(/<td>Progress:<\/td><td>(.+?)%<\/td>/)) {
                                    progress = tooltipText.match(/<td>Progress:<\/td><td>(.+?)%<\/td>/)[1];
                                }
                            } else if (tooltipText.match(/<td width="75">Name:<\/td><td>.+?<\/td>/)) {
                                type = "Boss";
                                if (tooltipText.match(/<td>Level:<\/td><td>(.+?)<\/td>/)) {
                                    level = tooltipText.match(/<td>Level:<\/td><td>(.+?)<\/td>/)[1];
                                }
                                if (tooltipText.match(/<td width="75">Name:<\/td><td>(.+?)<\/td>/)) {
                                    playerName = tooltipText.match(/<td width="75">Name:<\/td><td>(.+?)<\/td>/)[1];
                                }
                                window.console.debug("Boss found:", type, level, playerName);
                            } else {
                                type = "FreeSlot";
                            }

                            worldViewCoord.id = (yCoord << 0x10) | xCoord;
                            worldViewCoord.xPos = xCoord;
                            worldViewCoord.yPos = yCoord;
                            worldViewCoord.playerName = playerName;
                            worldViewCoord.allianceName = allianceName;
                            worldViewCoord.type = type;
                            worldViewCoord.type = dungType;
                            worldViewCoord.level = level;
                            worldViewCoord.progress = progress;
                            return worldViewCoord;
                        },
                        updateWorldViewCoord: function () {
                            if (this.worldViewCoord == null) {
                                this.worldViewCoord = new Object();
                            }
                            var worldViewToolTip = this.app.worldViewToolTip;
                            var id = 0;
                            var playerName = null;
                            var allianceName = "";
                            var type = null;
							var dungType = "";
                            var xPos = worldViewToolTip.x - worldViewToolTip.getWorldView().getContentLocation().left;
                            var yPos = worldViewToolTip.y - worldViewToolTip.getWorldView().getContentLocation().top;
                            var xCoord = worldViewToolTip.getVisMain().GetXCoordFromViewPosition(xPos);
                            var yCoord = worldViewToolTip.getVisMain().GetYCoordFromViewPosition(yPos);
                            window.console.debug(xPos + ":" + yPos, xCoord + ":" + yCoord);

                            var tooltipText = worldViewToolTip.getVisMain().GetTooltipText(xPos, yPos);
                            var level = 0;
                            var progress = 0;
                            if (tooltipText.match(/<td>Player:<\/td><td>(.+?) <span dir="ltr">(.+?)<\/td>/)) {
                                playerName = tooltipText.match(/<td>Player:<\/td><td>(.+?) <span dir="ltr">(.+?)<\/td>/)[1];
                                if (tooltipText.match(/<td>Alliance:<\/td><td>(.+?) <span dir="ltr">(.+?)<\/td>/)) {
                                    allianceName = tooltipText.match(/<td>Alliance:<\/td><td>(.+?) <span dir="ltr">(.+?)<\/td>/)[1];
                                }
                                type = "City";
                            } else if (tooltipText.match(/<td>Score:<\/td><td>.+?<\/td>/)) {
                                type = "LawlessCity";
                            } else if (tooltipText.match(/<td width="75">Type:<\/td><td>.+?<\/td>/)) {
                                type = "Dungeon";
								dungType = tooltipText.match(/<td width="75">Type:<\/td><td>(.+?)<\/td>/)[1];
								if (dungType == "Mountain Dungeon" || dungType == "Sea Encounter")
								{
									this.worldViewCoord.lootType = 1;
								}
								else
								{
									this.worldViewCoord.lootType = 0;
								}
                                if (tooltipText.match(/<td>Level:<\/td><td>(.+?)<\/td>/)) {
                                    level = tooltipText.match(/<td>Level:<\/td><td>(.+?)<\/td>/)[1];
                                }
                                if (tooltipText.match(/<td>Progress:<\/td><td>(.+?)%<\/td>/)) {
                                    progress = tooltipText.match(/<td>Progress:<\/td><td>(.+?)%<\/td>/)[1];
                                }
                            } else if (tooltipText.match(/<td width="75">Name:<\/td><td>.+?<\/td>/)) {
                                type = "Boss";
                                if (tooltipText.match(/<td>Level:<\/td><td>(.+?)<\/td>/)) {
                                    level = tooltipText.match(/<td>Level:<\/td><td>(.+?)<\/td>/)[1];
                                }
                                if (tooltipText.match(/<td width="75">Name:<\/td><td>(.+?)<\/td>/)) {
                                    playerName = tooltipText.match(/<td width="75">Name:<\/td><td>(.+?)<\/td>/)[1];
                                }
                                window.console.debug("Boss found:", type, level, playerName);
                            } else {
                                type = "FreeSlot";
                            }

                            this.worldViewCoord.id = (yCoord << 0x10) | xCoord;
                            this.worldViewCoord.xPos = xCoord;
                            this.worldViewCoord.yPos = yCoord;
                            this.worldViewCoord.playerName = playerName;
                            this.worldViewCoord.allianceName = allianceName;
                            this.worldViewCoord.type = type;
                            this.worldViewCoord.dungType = dungType;
                            this.worldViewCoord.level = level;
                            this.worldViewCoord.progress = progress;
                            return this.worldViewCoord;
                        },
                        getBossLevel: function () {
                            var coord = this.worldViewCoord;
                            if (coord.type == "Boss") {
                                return coord.level;
                            }
                            return 0;
                        },
                        getBossName: function () {
                            var coord = this.worldViewCoord;
                            if (coord.type == "Boss") {
                                return coord.playerName;
                            }
                            return 0;
                        },
                        getDungeonLevel: function () {
                            var coord = this.worldViewCoord;
                            if (coord.type == "Dungeon") {
                                return coord.level;
                            }
                            return 0;
                        },
                        checkCoordType: function (types) {
                            var coord = this.worldViewCoord;
                            if (types & this.CITY && coord.type == "City") {
                                return true;
                            } else if (types & this.LAWLESS && coord.type == "LawlessCity") {
                                return true;
                            } else if (types & this.BOSS && coord.type == "Boss") {
                                return true;
                            } else if (types & this.DUNGEON && coord.type == "Dungeon") {
                                return true;
                            } else if (types & this.SHRINE && coord.type == "Shrine") {
                                return true;
                            } else if (types & this.MOONGATE && coord.type == "Moongate") {
                                return true;
                            } else if (types & this.SETTLE && coord.type == "Settle") {
                                return true;
                            } else if (types & this.EMPTY && coord.type == "FreeSlot") {
                                return true;
                            } else if (types & this.ATTACKABLE && (coord.type == "City" || coord.type == "Boss" || coord.type == "Dungeon" || coord.type == "LawlessCity")) {
                                return true;
                            } else if (types & this.ANY) {
                                return true;
                            }
                            return false;
                        },
                        selectCity: function (options) {
                            var cityID = 0;
                            if (!isNaN(parseFloat(options)) && isFinite(options)) {
                                cityID = options;
                            } else if (options.cityId) {
                                cityID = options.cityId;
                            } else if (options.cityX && options.cityY) {
                                for (var i in this.player.cities) {
                                    if (options.cityX == this.player.cities[i].xPos && options.cityY == this.player.cities[i].yPos) {
                                        cityID = i;
                                        break;
                                    }
                                }
                            } else if (options.cityName) {
                                for (var i in this.player.cities) {
                                    if (options.cityName == this.player.cities[i].name) {
                                        cityID = i;
                                        break;
                                    }
                                }
                            }

                            if (cityID) {
                                for (var i in this.player.cities) {
                                    if (cityID == i) {
                                        if (!options.cityIsMine) {
                                            webfrontend.data.City.getInstance().setRequestId(i);
                                        }
                                        return true;
                                    }
                                }
                            }
                            return false;
                        },
                        sendToChat: function (msg, overWrite) {
                            var str = "";
                            if (!overWrite && this.chat && this.chat.chatLine.getValue()) {
                                str = this.chat.chatLine.getValue();
                                str = str.substr(0, this.chat.chatLine.getTextSelectionStart()) + msg + str.substr(this.chat.chatLine.getTextSelectionEnd());
                                msg = "";
                            }
                            this.chat.chatLine.setValue(str + msg);
                        },
                        sendToMail: function (msg, overWrite) {
                            var str = "";
                            if (!overWrite && this.app.sendMail && this.app.sendMail.message.getValue()) {
                                str = this.app.sendMail.message.getValue();
                                str = str.substr(0, this.app.sendMail.message.getTextSelectionStart()) + msg + str.substr(this.app.sendMail.message.getTextSelectionEnd());
                                msg = "";
                            }
                            this.app.sendMail.message.setValue(str + msg);
                        },
                        onTroopsSent: function (ok, errorCode) {
                            try {

                                if (errorCode != 0) {
                                    window.console.debug("Troops won't go");
                                }

                            } catch (e) {
                                debug(e);
                            }
                        },
                        createWorldViewEnhancments: function () {
                            this.worldViewMinBtn = new webfrontend.ui.SoundButton("").set({
                                icon: "webfrontend/ui/icons/icon_chat_resize_smaller.png",
                                padding: 4,
                                minWidth: 10,
                                width: 29
                            });
                            this.worldViewMinBtn.setLayoutProperties({
                                top: 3,
                                right: 9
                            });
                            this.worldViewMinBtn.addListener("execute", function (e) {
                                if (this.app.worldMapConfig.getLayoutProperties().top > 0) {
                                    this.app.worldMapConfig.setLayoutProperties({
                                        top: null,
                                        height: 4
                                    });
                                    this.worldViewMinBtn.setIcon("webfrontend/ui/icons/icon_chat_resize.png");
                                } else {
                                    this.app.worldMapConfig.setLayoutProperties({
                                        top: 187,
                                        height: null
                                    });
                                    this.worldViewMinBtn.setIcon("webfrontend/ui/icons/icon_chat_resize_smaller.png");
                                }
                            }, this);
                            this.worldViewMinBtn.addListener("appear", function (e) {
                                if (this.app.worldMapConfig.getLayoutProperties().top > 0) {
                                    this.worldViewMinBtn.setIcon("webfrontend/ui/icons/icon_chat_resize_smaller.png");
                                } else {
                                    this.worldViewMinBtn.setIcon("webfrontend/ui/icons/icon_chat_resize.png");
                                }
                            }, this);
                            if (this.app.worldMapConfig == null) {
                                this.app.worldMapConfig = new webfrontend.gui.WorldMapConfig().set({
                                    width: 400
                                });
                                this.app.worldMapConfig.setLayoutProperties({
                                    top: 187,
                                    left: 0,
                                    bottom: 0
                                });
                            }
                            this.app.worldMapConfig.setMinHeight(0);
                            this.app.worldMapConfig.add(this.worldViewMinBtn);
                            debugLog("HTK World View Enhancments Initialized.");
                        }
                    }
                });

                qx.Class.define("NRG.optionsPage", {
                    extend: webfrontend.gui.OverlayWidget,
                    construct: function () {
                        window.console.log("NRG.optionsPage construct");
                        webfrontend.gui.OverlayWidget.call(this);

                        this.clientArea.setLayout(new qx.ui.layout.Canvas());
                        this.setTitle("Nessus River Guardian Options");
                        this.tabView = new qx.ui.tabview.TabView().set({
                            contentPaddingLeft: 15,
                            contentPaddingRight: 10,
                            contentPaddingTop: 10,
                            contentPaddingBottom: 10
                        });
                        this.tabPages = [{
                            name: "General",
                            page: null,
                            vbox: null
                        }, {
                            name: "Attack",
                            page: null,
                            vbox: null
                        }, ];
                        for (i = 0; i < this.tabPages.length; i++) {
                            page = new qx.ui.tabview.Page(this.tabPages[i].name);
                            page.setLayout(new qx.ui.layout.Canvas());
                            vbox = new qx.ui.container.Composite(new qx.ui.layout.VBox(10));
                            scroll = new qx.ui.container.Scroll(vbox);
                            page.add(scroll, {
                                top: 0,
                                left: 0,
                                right: 0,
                                bottom: 0
                            });
                            this.tabPages[i].vbox = vbox;
                            this.tabPages[i].page = page;
                        }

                        // ----- Page 1
                        {
                            // ----- Boss attack power
                            lab = new qx.ui.basic.Label("Unit Stats");
                            this.tabPages[0].vbox.add(lab);

                            gr = new qx.ui.layout.Grid(11, 3);
                            gr.setColumnMinWidth(0, 60);
                            gr.setColumnAlign(0, "right", "middle");
                            cont = new qx.ui.container.Composite(gr);
                            bTypesLabels = ["Beserker", "Mage", "Knight", "Warlock", "Ranger", "Templar", "Xbow", "Paladin", "Guardian", "Sloop", "War Galleon"];
                            bTypesIndex = [6, 7, 11, 12, 3, 5, 9, 10, 4, 16, 17];

                            lab = new qx.ui.basic.Label("Unit");
                            cont.add(lab, {
                                row: 0,
                                column: 0
                            });
                            lab = new qx.ui.basic.Label("Attack Power");
                            cont.add(lab, {
                                row: 0,
                                column: 1
                            });
                            lab = new qx.ui.basic.Label("Loot Carry");
                            cont.add(lab, {
                                row: 0,
                                column: 2
                            });

                            for (i = 1; i <= 11; i++) {
                                lab = new qx.ui.basic.Label(bTypesLabels[i - 1]);
                                cont.add(lab, {
                                    row: i,
                                    column: 0
                                });
                                sp = new webfrontend.ui.SpinnerInt(0, NRG.options.AttackPower[bTypesIndex[i - 1]], 24000);
                                sp.getChildControl("textfield").setLiveUpdate(true);
                                sp.getChildControl("textfield").addListener("changeValue", function () {
                                    NRG.options.AttackPower[this.i] = parseInt(this.c.getValue(),10);
                                }, {
                                    c: sp,
                                    i: bTypesIndex[i - 1]
                                });
                                NRG.a.setElementModalInput(sp);
                                cont.add(sp, {
                                    row: i,
                                    column: 1
                                });
                                sp = new webfrontend.ui.SpinnerInt(0, NRG.options.RaidUnitCarry[bTypesIndex[i - 1]], 3000);
                                sp.getChildControl("textfield").setLiveUpdate(true);
                                sp.getChildControl("textfield").addListener("changeValue", function () {
                                    NRG.options.RaidUnitCarry[this.i] = parseInt(this.c.getValue(),10);
                                }, {
                                    c: sp,
                                    i: bTypesIndex[i - 1]
                                });
                                NRG.a.setElementModalInput(sp);
                                cont.add(sp, {
                                    row: i,
                                    column: 2
                                });
                            }
                            this.tabPages[0].vbox.add(cont);
                            this.tabPages[0].vbox.add(new qx.ui.core.Spacer(0, 10));

                            // ----- Dungeon Raid Limit
                            lab = new qx.ui.basic.Label("Dungeon Raids");
                            this.tabPages[0].vbox.add(lab);

                            gr = new qx.ui.layout.Grid(10, 3);
                            gr.setColumnMinWidth(0, 60);
                            gr.setColumnMinWidth(1, 90);
                            gr.setColumnMinWidth(2, 90);
                            gr.setColumnAlign(0, "right", "middle");
                            cont = new qx.ui.container.Composite(gr);

                            lab = new qx.ui.basic.Label("Dungeon Level");
                            cont.add(lab, {
                                row: 0,
                                column: 0
                            });
                            lab = new qx.ui.basic.Label("Min Loot");
                            cont.add(lab, {
                                row: 0,
                                column: 1
                            });
                            lab = new qx.ui.basic.Label("Max Loot");
                            cont.add(lab, {
                                row: 0,
                                column: 2
                            });

                            for (i = 1; i <= 10; i++) {
                                lab = new qx.ui.basic.Label("Level " + i);
                                cont.add(lab, {
                                    row: i,
                                    column: 0
                                });

                                sp = new webfrontend.ui.SpinnerInt(0, NRG.options.DungeonLoot[i], 3000000);
                                sp.getChildControl("textfield").setLiveUpdate(true);
                                sp.getChildControl("textfield").addListener("changeValue", function () {
                                    NRG.options.DungeonLoot[this.i] = parseInt(this.c.getValue(),10);
                                }, {
                                    c: sp,
                                    i: i
                                });
                                NRG.a.setElementModalInput(sp);
                                cont.add(sp, {
                                    row: i,
                                    column: 1
                                });

                                sp = new webfrontend.ui.SpinnerInt(0, NRG.options.DungeonLootMax[i], 3000000);
                                sp.getChildControl("textfield").setLiveUpdate(true);
                                sp.getChildControl("textfield").addListener("changeValue", function () {
                                    NRG.options.DungeonLootMax[this.i] = parseInt(this.c.getValue(),10);
                                }, {
                                    c: sp,
                                    i: i
                                });
                                NRG.a.setElementModalInput(sp);
                                cont.add(sp, {
                                    row: i,
                                    column: 2
                                });
                            }
                            this.tabPages[0].vbox.add(cont);
                            this.tabPages[0].vbox.add(new qx.ui.core.Spacer(0, 10));

                        }
                        // ----- Page 2
                        {
                            lab = new qx.ui.basic.Label("*** BETA ***");
                            this.tabPages[1].vbox.add(lab);
                            lab = new qx.ui.basic.Label("Don't blame me if Llamas kill your armies!");
                            this.tabPages[1].vbox.add(lab);

                            lab = new qx.ui.basic.Label("Targets");
                            this.tabPages[1].vbox.add(lab);

                            gr = new qx.ui.layout.Grid(7, 3);
                            gr.setColumnMinWidth(0, 60);
                            gr.setColumnAlign(0, "right", "middle");
                            cont = new qx.ui.container.Composite(gr);
                            targetLabels = ["Real", "Fake 1", "Fake 2", "Fake 3", "Fake 4", "Fake 5", "Fake 6"];

                            for (i = 0; i < 7; i++) {
                                lab = new qx.ui.basic.Label(targetLabels[i]);
                                cont.add(lab, {
                                    row: i,
                                    column: 0
                                });
                                this.TargetsX[i] = new qx.ui.form.TextField(NRG.options.TargetsX[i].toString());
                                this.TargetsX[i].setLiveUpdate(true);
                                cont.add(this.TargetsX[i], {
                                    row: i,
                                    column: 1
                                });
                                this.TargetsY[i] = new qx.ui.form.TextField(NRG.options.TargetsY[i].toString());
                                this.TargetsY[i].setLiveUpdate(true);
                                cont.add(this.TargetsY[i], {
                                    row: i,
                                    column: 2
                                });
                            }

                            this.tabPages[1].vbox.add(cont);

                            // add time stuff
                            lab = new qx.ui.basic.Label("Time");
                            this.tabPages[1].vbox.add(lab);
                            var defVis = "visible";
                            subContainer = new qx.ui.container.Composite();
                            subContainer.setLayout( new qx.ui.layout.HBox().set( {spacing:2} ) );
                            sel = new qx.ui.form.SelectBox().set( {width:80,alignY:"middle",tabIndex:1} );
                            sel.add( new qx.ui.form.ListItem( "Arrive", null, webfrontend.gui.SendArmyWindow.timings.arrive ) );
                            sel.add( new qx.ui.form.ListItem( "Depart", null, webfrontend.gui.SendArmyWindow.timings.depart ) );
                            sel.add( new qx.ui.form.ListItem( "Now", null, webfrontend.gui.SendArmyWindow.timings.now ) );
                            sel.setSelection( [sel.getChildren()[0]] );
                            subContainer.add( sel );
                            subContainer.add( this.createHMSTextField( defVis, 7 ) );
                            subContainer.add( new qx.ui.basic.Label(":").set({visibility:defVis,alignY:"middle"}) );
                            subContainer.add( this.createHMSTextField( defVis, 8 ) );
                            subContainer.add( new qx.ui.basic.Label(":").set({visibility:defVis,alignY:"middle"}) );
                            subContainer.add( this.createHMSTextField( defVis, 9 ) );
                            sel = new qx.ui.form.SelectBox().set( {width:100,visibility:defVis,alignY:"middle",tabIndex:10} );
                            sel.add( new qx.ui.form.ListItem( "7 days" ,null,7) );
                            sel.add( new qx.ui.form.ListItem( "6 days" ,null,6) );
                            sel.add( new qx.ui.form.ListItem( "5 days" ,null,5) );
                            sel.add( new qx.ui.form.ListItem( "4 days" ,null,4) );
                            sel.add( new qx.ui.form.ListItem( "3 days" ,null,3) );
                            sel.add( new qx.ui.form.ListItem( "2 days" ,null,2) );
                            sel.add( new qx.ui.form.ListItem( "Tomorrow" ,null,1) );
                            sel.add( new qx.ui.form.ListItem( "Today" ,null,0) );
                            sel.setSelection( [sel.getChildren()[7]] );
                            subContainer.add( sel );
                            this.TimeContainer = subContainer;

				            this.tabPages[1].vbox.add(subContainer);

                            gr = new qx.ui.layout.Grid(1, 4);
                            gr.setColumnMinWidth(0, 100);
                            gr.setColumnAlign(0, "left", "middle");
                            cont = new qx.ui.container.Composite(gr);

                            lab = new qx.ui.basic.Label("Options");
                            this.tabPages[1].vbox.add(lab);
                            cb = new qx.ui.form.CheckBox("Use Frigs");
							if (NRG.options.UseFrigs)
								cb.setValue(true);
							cb.addListener("click", function() { NRG.options.UseFrigs = this.getValue() ? true : false; }, cb);
                            cont.add(cb, {
                                row: 0,
                                column: 0
                            });
							cb = new qx.ui.form.CheckBox("Fakes as siege");
							if (NRG.options.FakesAsSiege)
								cb.setValue(true);
							cb.addListener("click", function() { NRG.options.FakesAsSiege = this.getValue() ? true : false; }, cb);
                            cont.add(cb, {
                                row: 0,
                                column: 1
                            });
							cb = new qx.ui.form.CheckBox("Baron with real");
							if (NRG.options.BaronWithReal)
								cb.setValue(true);
							cb.addListener("click", function() { NRG.options.BaronWithReal = this.getValue() ? true : false; }, cb);
                            cont.add(cb, {
                                row: 0,
                                column: 2
                            });
							cb = new qx.ui.form.CheckBox("Baron with fakes");
							if (NRG.options.BaronWithFakes)
								cb.setValue(true);
							cb.addListener("click", function() { NRG.options.BaronWithFakes = this.getValue() ? true : false; }, cb);
                            cont.add(cb, {
                                row: 0,
                                column: 3
                            });
				            this.tabPages[1].vbox.add(cont);

                            subContainer = new qx.ui.container.Composite();
                            subContainer.setLayout( new qx.ui.layout.HBox().set( {spacing:2} ) );
                            btn = new qx.ui.form.Button("Assault").set({
                                width: 90,
                                marginLeft: 0
                            });
                            btn.addListener("click", this.sendAssault, this);
                            subContainer.add(btn);

                            btn = new qx.ui.form.Button("Siege").set({
                                width: 90,
                                marginLeft: 0
                            });
                            btn.addListener("click", this.sendSiege, this);
                            subContainer.add(btn);

                            this.tabPages[1].vbox.add(subContainer);
                            this.tabPages[1].vbox.add(new qx.ui.core.Spacer(0, 10));

                            lab = new qx.ui.basic.Label("Raids");
                            this.tabPages[1].vbox.add(lab);
                            subContainer = new qx.ui.container.Composite();
                            subContainer.setLayout( new qx.ui.layout.HBox().set( {spacing:2} ) );
                            sel = new qx.ui.form.SelectBox().set( {width:80,alignY:"middle",tabIndex:6} );
                            sel.add( new qx.ui.form.ListItem( "Once",null,webfrontend.gui.SendArmyWindow.timings.once-webfrontend.gui.SendArmyWindow.timings.once ) );
                            sel.add( new qx.ui.form.ListItem( "Return",null,webfrontend.gui.SendArmyWindow.timings.latest-webfrontend.gui.SendArmyWindow.timings.once ) );
                            sel.add( new qx.ui.form.ListItem( "Complete",null,webfrontend.gui.SendArmyWindow.timings.completed-webfrontend.gui.SendArmyWindow.timings.once ) );
                            sel.setSelection( [sel.getChildren()[0]] );
                            subContainer.add( sel );
                            subContainer.add( this.createHMSTextField( defVis, 7 ) );
                            subContainer.add( new qx.ui.basic.Label(":").set({visibility:defVis,alignY:"middle"}) );
                            subContainer.add( this.createHMSTextField( defVis, 8 ) );
                            subContainer.add( new qx.ui.basic.Label(":").set({visibility:defVis,alignY:"middle"}) );
                            subContainer.add( this.createHMSTextField( defVis, 9 ) );
                            sel = new qx.ui.form.SelectBox().set( {width:100,visibility:defVis,alignY:"middle",tabIndex:10} );
                            sel.add( new qx.ui.form.ListItem( "7 days" ,null,7) );
                            sel.add( new qx.ui.form.ListItem( "6 days" ,null,6) );
                            sel.add( new qx.ui.form.ListItem( "5 days" ,null,5) );
                            sel.add( new qx.ui.form.ListItem( "4 days" ,null,4) );
                            sel.add( new qx.ui.form.ListItem( "3 days" ,null,3) );
                            sel.add( new qx.ui.form.ListItem( "2 days" ,null,2) );
                            sel.add( new qx.ui.form.ListItem( "Tomorrow" ,null,1) );
                            sel.add( new qx.ui.form.ListItem( "Today" ,null,0) );
                            sel.setSelection( [sel.getChildren()[7]] );
                            subContainer.add( sel );
                            btn = new qx.ui.form.Button("Apply to all").set({
                                width: 90,
                                marginLeft: 0
                            });
                            btn.addListener("click", this.raidApplyAll, this);
                            subContainer.add( btn );
                            this.RaidTimeContainer = subContainer;

				            this.tabPages[1].vbox.add(subContainer);


                            lab = new qx.ui.basic.Label("Import / Export");
                            this.tabPages[1].vbox.add(lab);
                            subContainer = new qx.ui.container.Composite();
                            subContainer.setLayout( new qx.ui.layout.HBox().set( {spacing:2} ) );
							this.importTextArea = new qx.ui.form.TextArea("").set({height: 110, width: 300});
							subContainer.add(this.importTextArea);
                            btn = new qx.ui.form.Button("Import").set({
                                width: 80,
								height: 50,
                                marginLeft: 0
                            });
                            btn.addListener("click", this.importTargets, this);
                            subContainer.add(btn);
                            btn = new qx.ui.form.Button("Export").set({
                                width: 80,
								height: 50,
                                marginLeft: 0
                            });
                            btn.addListener("click", this.exportTargets, this);
                            subContainer.add(btn);

				            this.tabPages[1].vbox.add(subContainer);
                        }
						
                        {

                            // ----- Save Button
                            cont = new qx.ui.container.Composite(new qx.ui.layout.HBox());
                            btn = new qx.ui.form.Button("Save").set({
                                width: 90,
                                marginLeft: 30
                            });
                            btn.addListener("click", this.saveOptions, this);
                            cont.add(btn);

                            // ----- Add pages to tabview
                            for (i = 0; i < this.tabPages.length; i++) {
                                this.tabView.add(this.tabPages[i].page);
                            }

                            this.clientArea.add(this.tabView, {
                                top: 0,
                                right: 3,
                                bottom: 30,
                                left: 3
                            });
                            this.clientArea.add(cont, {
                                right: 3,
                                bottom: 3,
                                left: 3
                            });
                        }
                    },
                    members: {
                        tabView: null,
                        tabPages: null,
                        clrSel: null,
                        expImpWin: null,
                        TargetsX: [null, null, null, null, null, null, null],
                        TargetsY: [null, null, null, null, null, null, null],
                        ArriveHour: null,
                        ArriveMin: null,
                        ArriveSec: null,
                        ArriveDay: null,
                        TimeContainer: null,
                        UseFrigs: null,
						importTextArea: null,
                        saveOptions: function () {
                            str = qx.lang.Json.stringify(NRG.options);
                            localStorage.setItem("NRG_options", str);
                        },
                        createHMSTextField: function( visibility, tabIndex )
                        {
                            var tf = new qx.ui.form.TextField("0").set( {width:25,visibility:visibility,alignY:"middle",tabIndex:tabIndex} ) 
                            tf.addListener( "click", function() { this.selectAllText(); } );
                            return tf;
                        },
                        getOffsetTime : function( dayOffset, hours, mins, secs )
                        {
                            //debug( "GetOffsetTime " + dayOffset + ", " + hours + ", " + mins + ", " + secs );
                            var curTime=webfrontend.Util.getCurrentTime();
                            var hourOffset=0;

                            if(webfrontend.config.Config.getInstance().getTimeZone()>0)
                            {
                                curTime.setHours(curTime.getHours()+curTime.getTimezoneOffset()/60);
                                hourOffset+=curTime.getTimezoneOffset()/60;

                                if(webfrontend.config.Config.getInstance().getTimeZone()==1)
                                    hourOffset+=webfrontend.data.ServerTime.getInstance().getServerOffset()/1000/60/60;
                                else if(webfrontend.config.Config.getInstance().getTimeZone()==2)
                                    hourOffset+=webfrontend.config.Config.getInstance().getTimeZoneOffset()/1000/60/60;
                            }

                            var hI=new Date(curTime.getTime());
                            hI.setDate(hI.getDate()+dayOffset);
                            hI.setHours(hours-hourOffset);
                            hI.setMinutes(mins);
                            hI.setSeconds(secs);
                            hI.setMilliseconds(500);
                            //debug( hI.toString() );

                            if(webfrontend.config.Config.getInstance().getTimeZone()==0)
                                hI=new Date(hI.getTime()-webfrontend.data.ServerTime.getInstance().getDiff());
                            return hI.getTime();
                        },
                        onTroopsSent: function (ok, errorCode) {
                            try {

                                if (errorCode != 0) {
                                    window.console.debug("Troops won't go");
                                }

                            } catch (e) {
                                debug(e);
                            }
                        },
                        getTimeStep : function( dayOffset, hours, mins, secs )
                        {
                            var N=webfrontend.data.ServerTime.getInstance();
                            var Q=webfrontend.config.Config.getInstance();
                            var P=webfrontend.Util.getCurrentTime();
                            var M=N.getServerStep();
                            var O=Q.getTimeZone();
                            var R=0;
                            if(O>0)
                            {
                                P.setHours(P.getHours()+P.getTimezoneOffset()/60);
                                R+=P.getTimezoneOffset()/60;
                            }
                            if(O==1)
                            {
                                R+=N.getServerOffset()/1000/60/60;
                            }
                            else if(O==2)
                            {
                                R+=Q.getTimeZoneOffset()/1000/60/60;
                            }

                            P.setDate(P.getDate() + dayOffset);
                            P.setHours(hours - R, mins, secs);
                            return M+Math.round((P.getTime()-N.getStepTime(M).getTime())/1000)*N.getStepsPerSecond();
                        },
						raidApplyAll: function() {
                            var orders = webfrontend.data.City.getInstance().unitOrders;

                            var returnTime = 0;
                            var timeStep = 0;
							var returnMode = this.RaidTimeContainer.getChildren()[0].getSelection()[0].getModel();
							var pauseType = this.RaidTimeContainer.getChildren()[0].getSelection()[0].getModel() + webfrontend.gui.SendArmyWindow.timings.once;
							if( pauseType == webfrontend.gui.SendArmyWindow.timings.latest )
							{
								//for( var si = 0; si < returnContainer.getChildren().length; si++ )
								//{
								//	if( returnContainer.getChildren()[si] instanceof qx.ui.form.SelectBox )
								//		debug( "Return Child " + si + " is a select box" );
								//}
								timeStep = this.getTimeStep( this.RaidTimeContainer.getChildren()[6].getSelection()[0].getModel(), 
										Number(this.RaidTimeContainer.getChildren()[1].getValue()), Number(this.RaidTimeContainer.getChildren()[3].getValue()), Number(this.RaidTimeContainer.getChildren()[5].getValue()) );
								returnTime = this.getOffsetTime( this.RaidTimeContainer.getChildren()[6].getSelection()[0].getModel(), 
										Number(this.RaidTimeContainer.getChildren()[1].getValue()), Number(this.RaidTimeContainer.getChildren()[3].getValue()), Number(this.RaidTimeContainer.getChildren()[5].getValue()) );
							}

                            for (var i in orders) {
                                if (orders[i].type == 8) {
                                    webfrontend.net.CommandManager.getInstance().sendCommand("UnitOrderSetRecurringOptions", {
                                        cityid: webfrontend.data.City.getInstance().getId(),
                                        id: orders[i].id,
                                        isDelayed: orders[i].isDelayed,
                                        recurringType: returnMode,
                                        recurringEndStep: timeStep,
                                        RaidPauseType: pauseType,
                                        RaidPauseEndDate: returnTime,
                                        RaidPauseStartDate: returnTime
                                    }, this, this.onTroopsSent);
                                }
                            }
						},
						
                        sendAssault: function () {
							if (NRG.options.FakesAsSiege)
							{
	                            this.sendAttack(webfrontend.base.GameObjects.eUnitOrderType.Attack, webfrontend.base.GameObjects.eUnitOrderType.Siege);
							}
							else
							{
		                        this.sendAttack(webfrontend.base.GameObjects.eUnitOrderType.Attack, webfrontend.base.GameObjects.eUnitOrderType.Plunder);
							}
                        },
                        exportTargets: function () {
							var txt = "";
							if (parseInt(this.TargetsX[0].getValue(),10) != 0 && parseInt(this.TargetsY[0].getValue(),10) != 0)
							{
								txt += "Real " + this.TargetsX[0].getValue() + ":" + this.TargetsY[0].getValue() + "\n";
							}
							for (var i = 1; i < 7; i++)
							{
								if (parseInt(this.TargetsX[i].getValue(),10) != 0 && parseInt(this.TargetsY[i].getValue(),10) != 0)
								{
									txt += "Real " + this.TargetsX[i].getValue() + ":" + this.TargetsY[i].getValue() + "\n";
								}
							}
							txt += "\n" + this.TimeContainer.getChildren()[1].getValue() + ":" + this.TimeContainer.getChildren()[3].getValue() + ":" + this.TimeContainer.getChildren()[5].getValue() + "\n"
							this.importTextArea.setValue(txt);
						},
                        importTargets: function () {
                            txt = this.importTextArea.getValue().replace(/\s/g," ");
							if (txt.indexOf("Real") != -1) 
							{
								var found = txt.match(/Real (\d+):(\d+)/);
								if (found != null)
								{
									this.TargetsX[0].setValue(found[1]);
									this.TargetsY[0].setValue(found[2]);
								}
								var found = txt.match(/Fake 1 (\d+):(\d+)/);
								if (found != null)
								{
									this.TargetsX[1].setValue(found[1]);
									this.TargetsY[1].setValue(found[2]);
								}
								var found = txt.match(/Fake 2 (\d+):(\d+)/);
								if (found != null)
								{
									this.TargetsX[2].setValue(found[1]);
									this.TargetsY[2].setValue(found[2]);
								}
								var found = txt.match(/Fake 3 (\d+):(\d+)/);
								if (found != null)
								{
									this.TargetsX[3].setValue(found[1]);
									this.TargetsY[3].setValue(found[2]);
								}
								var found = txt.match(/Fake 4 (\d+):(\d+)/);
								if (found != null)
								{
									this.TargetsX[4].setValue(found[1]);
									this.TargetsY[4].setValue(found[2]);
								}
								var found = txt.match(/Fake 5 (\d+):(\d+)/);
								if (found != null)
								{
									this.TargetsX[5].setValue(found[1]);
									this.TargetsY[5].setValue(found[2]);
								}
								var found = txt.match(/Fake 6 (\d+):(\d+)/);
								if (found != null)
								{
									this.TargetsX[6].setValue(found[1]);
									this.TargetsY[6].setValue(found[2]);
								}
								var found = txt.match(/(\d+):(\d+):(\d+)/);
								if (found != null)
								{
									this.TimeContainer.getChildren()[1].setValue(found[1]);
									this.TimeContainer.getChildren()[3].setValue(found[2]);
									this.TimeContainer.getChildren()[5].setValue(found[3]);
								}
							}
                        },
                        sendSiege: function () {
                            this.sendAttack(webfrontend.base.GameObjects.eUnitOrderType.Siege, webfrontend.base.GameObjects.eUnitOrderType.Siege);
                        },
                        sendAttack: function (realAttack, fakeAttack) {
                            // unit types
                            // 0 - ?
                            // 1 - cg
                            // 2 - ballista
                            // 3 - ranger
                            // 4 - guardian
                            // 5 - templar
                            // 6 - zerk
                            // 7 - mage
                            // 8 - scout
                            // 9 - xbow
                            // 10 - paladin
                            // 11 - knight
                            // 12 - warlock
                            // 13 - ram
                            // 14 - cat
                            // 15 - frigate
                            // 16 - sloop
                            // 17 - WG
							// 18 - ?
							// 19 - baron
                            var TS = [1, 1, 300, 3000, 3000, 3000, 3000, 3000, 1500, 1500, 1500, 1500, 1500, 300, 300, 6, 6, 8];
                            var TSboat = [1, 1, 250, 2500, 2500, 2500, 2500, 2500, 1250, 1250, 1250, 1250, 1250, 250, 250, 6, 6, 8];
                            var unitsToSendReal = new Array();
                            var unitsToSendFake = new Array();
                            var fakeIndex = 0;
                            var fakeCount = 0;
                            var transport = 1;
                            var numFrigates = 0;
							var numBarons = 0;
							window.console.debug("NRG: Attempting to send attack, UseFrigs=", NRG.options.UseFrigs);

                            for (var i = 0; i < 20; i++) {
                                if (webfrontend.data.City.getInstance().units[i] != null) {
                                    var total = webfrontend.data.City.getInstance().units[i].total;
                                    if (total > 0) {
                                        if (total > fakeCount) {
                                            fakeCount = total;
                                            fakeIndex = i;
                                        }
                                        if (i == 15 || i == 16 || i == 17) {
											if (NRG.options.UseFrigs)
											{
												transport = 2;
											}
                                        }
                                        if (i == 15) {
                                            numFrigates = total;
                                        }
                                        if (i == 19) {
                                            numBarons = total;
                                        }
                                    }
                                }
                            }

                            var numFakes = 0;
                            for (var i = 1; i < 7; i++) {
                                if (parseInt(this.TargetsX[i].getValue(),10) != 0 && parseInt(this.TargetsY[i].getValue(),10) != 0) {
									numFakes = numFakes + 1;
                                }
                            }
                            if (numFrigates > 0 && NRG.options.UseFrigs) {
								if (NRG.options.BaronWithFakes && numBarons >= numFakes) {
									unitsToSendFake.push({
										t: 19,
										c: 1
									});
									unitsToSendFake.push({
										t: fakeIndex,
										c: TSboat[fakeIndex]-1
									});
									numBarons -= numFakes;
								}
								else
								{
									unitsToSendFake.push({
										t: fakeIndex,
										c: TSboat[fakeIndex]
									});
								}
								unitsToSendFake.push({
									t: 15,
									c: 5
								});
                            } else {
								if (NRG.options.BaronWithFakes && numBarons >= numFakes) {
									unitsToSendFake.push({
										t: 19,
										c: 1
									});
									unitsToSendFake.push({
										t: fakeIndex,
										c: TS[fakeIndex]
									});
									if (fakeIndex >= 15) {
										unitsToSendFake.push({
											t: 15,
											c: 1
										});
									}
									numBarons -= numFakes;
								}
								else
								{
									unitsToSendFake.push({
										t: fakeIndex,
										c: TS[fakeIndex]
									});
								}
                            }
                            for (var i = 0; i < 20; i++) {
                                if (webfrontend.data.City.getInstance().units[i] != null) {
                                    var total = webfrontend.data.City.getInstance().units[i].total;
                                    if (total > 0) {
                                        if (i == fakeIndex) {
                                            if (numFrigates > 0 && NRG.options.UseFrigs) {
                                                total = total - TSboat[i] * numFakes;
                                                if (total > 500 * (numFrigates - numFakes * 5)) {
                                                    total = 500 * (numFrigates - numFakes * 5);
                                                }
                                                unitsToSendReal.push({
                                                    t: 15,
                                                    c: numFrigates - numFakes * 5
                                                });

                                            } else {
                                                total = total - TS[i] * numFakes;
                                            }
                                        }
                                        if (i != 15 && i != 19) {
                                            unitsToSendReal.push({
                                                t: i,
                                                c: total
                                            });
                                        }
										if (i == 19 && NRG.options.BaronWithReal) {
                                            unitsToSendReal.push({
                                                t: 19,
                                                c: numBarons
                                            });
											if (fakeIndex >= 15) {
												unitsToSendReal.push({
													t: 15,
													c: 1
												});
											}
										}
                                    }
                                }
                            }
							var sendTime = 0;
							var sendMode = this.TimeContainer.getChildren()[0].getSelection()[0].getModel();
							if( sendMode != webfrontend.gui.SendArmyWindow.timings.now )
							{
								//for( var si = 0; si < sendContainer.getChildren().length; si++ )
								//{
								//	if( sendContainer.getChildren()[si] instanceof qx.ui.form.SelectBox )
								//		debug( "Send Child " + si + " is a select box" );
								//}
								sendTime = this.getOffsetTime( this.TimeContainer.getChildren()[6].getSelection()[0].getModel(), 
										Number(this.TimeContainer.getChildren()[1].getValue()), Number(this.TimeContainer.getChildren()[3].getValue()), Number(this.TimeContainer.getChildren()[5].getValue()) );
							}
                            for (var i = 0; i < 7; i++) {
                                if (parseInt(this.TargetsX[i].getValue(),10) != 0 && parseInt(this.TargetsY[i].getValue(),10) != 0) {
                                    var troops = unitsToSendFake;
                                    var order = fakeAttack;
                                    if (i == 0) {
                                        troops = unitsToSendReal;
                                        order = realAttack;
										window.console.debug("    ", "real target:", parseInt(this.TargetsX[i].getValue(),10), parseInt(this.TargetsY[i].getValue(),10));
                                    }
									else
									{
										window.console.debug("    ", "fake target:", parseInt(this.TargetsX[i].getValue(),10), parseInt(this.TargetsY[i].getValue(),10));
									}
									window.console.debug("    ", "troops:", troops);
                                    coord = NRG.main.parseWorldViewCoord(parseInt(this.TargetsX[i].getValue(),10), parseInt(this.TargetsY[i].getValue(),10));
                                    webfrontend.net.CommandManager.getInstance().sendCommand("OrderUnits", {
                                        cityid: webfrontend.data.City.getInstance().getId(),
                                        units: troops,
                                        targetPlayer: coord.playerName,
                                        targetCity: coord.xPos + ":" + coord.yPos,
                                        order: order,
                                        transport: transport,
                                        iUnitOrderOptions: 0,
                                        timeReferenceType: sendMode,
                                        referenceTimeUTCMillis: sendTime,
                                        raidTimeReferenceType: 0,
                                        raidReferenceTimeUTCMillis: 0,
                                        createCity: ""
                                    }, this, this.onTroopsSent);
                                }
                            }
                        }
                    }
                });

                qx.Class.define("nessusRiverGuardian.contextMenu", {
                    type: "singleton",
                    extend: qx.core.Object,
                    construct: function (main) {
                        this.main = main;
                        this.worldContext = new qx.ui.menu.Menu();
                        this.worldContext.setIconColumnWidth(0);
                        this.copyMenu = new qx.ui.menu.Menu();
                        this.copyMenu.setIconColumnWidth(0);
                        this.infoMenu = new qx.ui.menu.Menu();
                        this.infoMenu.setIconColumnWidth(0);
                        this.selectCityBtn = new qx.ui.menu.Button("Switch to City");
                        this.viewReportsBtn = new qx.ui.menu.Button("View Reports");
                        this.killBossBtn = new qx.ui.menu.Button("Kill Boss");
                        this.raidDungeonBtn = new qx.ui.menu.Button("Raid Max");
                        this.raidDungeon1Btn = new qx.ui.menu.Button("Raid 1");
                        this.raidDungeonAllBtn = new qx.ui.menu.Button("Raid all");
                        this.sendArmyBtn = new qx.ui.menu.Button("Send Army");
                        this.plunderBtn = new qx.ui.menu.Button("Plunder");
                        this.scoutBtn = new qx.ui.menu.Button("Scout");
                        this.copyBtn = new qx.ui.menu.Button("Copy to Chat");
                        this.copyBtnSub = new qx.ui.menu.Button("Copy to Chat", null, null, this.copyMenu);
                        this.copyCoordBtn = new qx.ui.menu.Button("Coordinates");
                        this.copyPlayerBtn = new qx.ui.menu.Button("Player");
                        this.copyAllianceBtn = new qx.ui.menu.Button("Alliance");
                        this.copyToMail = new qx.ui.menu.Button("Copy to Mail", null, null, this.copyMenu);
                        this.sendResBtn = new qx.ui.menu.Button("Send Resources");
                        this.infoBtn = new qx.ui.menu.Button("Info", null, null, this.infoMenu);
                        this.infoPlayerBtn = new qx.ui.menu.Button("Player");
                        this.infoAllianceBtn = new qx.ui.menu.Button("Alliance");
                        this.whisperBtn = new qx.ui.menu.Button("Whisper");
                        this.worldContext.add(this.selectCityBtn);
                        this.worldContext.add(this.killBossBtn);
                        this.worldContext.add(this.raidDungeonBtn);
                        this.worldContext.add(this.raidDungeon1Btn);
                        this.worldContext.add(this.raidDungeonAllBtn);
                        this.worldContext.add(this.sendArmyBtn);
                        this.worldContext.add(this.plunderBtn);
                        this.worldContext.add(this.scoutBtn);
                        this.worldContext.add(this.sendResBtn);
                        this.worldContext.add(this.viewReportsBtn);
                        this.worldContext.add(this.infoBtn);
                        this.worldContext.add(this.whisperBtn);
                        this.worldContext.add(this.copyBtn);
                        this.worldContext.add(this.copyBtnSub);
                        this.worldContext.add(this.copyToMail);
                        this.copyMenu.add(this.copyCoordBtn);
                        this.copyMenu.add(this.copyPlayerBtn);
                        this.copyMenu.add(this.copyAllianceBtn);
                        this.infoMenu.add(this.infoPlayerBtn);
                        this.infoMenu.add(this.infoAllianceBtn);
                        this.main.app.worldView.setContextMenu(this.worldContext);
                        this.main.app.worldView.addListener("beforeContextmenuOpen", function () {
                            this.updateWorldViewContext();
                        }, this);
                        this.selectCityBtn.addListener("execute", function (e) {
                            var coord = this.main.worldViewCoord;
                            if (coord && this.main.checkCoordType(this.main.CITY) && coord.playerName == this.main.playerName) {
                                this.main.selectCity({
                                    "cityX": coord.xPos,
                                    "cityY": coord.yPos
                                });
                            }
                        }, this);
                        this.viewReportsBtn.addListener("execute", function (e) {
                            var coord = this.main.worldViewCoord;
                            if (coord && this.main.checkCoordType(this.main.ATTACKABLE)) {
                                this.main.app.showInfoPage(this.main.app.getCityInfoPage(), {
                                    "id": coord.id
                                });
                            }
                        }, this);
                        this.killBossBtn.addListener("execute", function (e) {
                            var coord = this.main.worldViewCoord;
                            if (coord && this.main.checkCoordType(this.main.ATTACKABLE)) {
                                // unit types
                                // 0 - cg
                                // 1 - baron?
                                // 2 - ballista
                                // 3 - ranger
                                // 4 - guardian
                                // 5 - templar
                                // 6 - zerk
                                // 7 - mage
                                // 8 - scout
                                // 9 - xbow
                                // 10 - paladin
                                // 11 - knight
                                // 12 - warlock
                                // 13 - ram
                                // 14 - cat
                                // 15 - frigate
                                // 16 - sloop
                                // 17 - WG
                                var bossStrLike = [420, 2500, 17000, 33000, 83000, 125000, 187500, 250000, 375000];
                                var bossStrUnlike = [625, 3750, 25000, 50000, 125000, 187500, 250000, 375000, 562500];
                                var unitBossMatch = ["", "", "", "Hydra", "", "Hydra", "Hydra", "Moloch", "", "Dragon", "Dragon", "Dragon", "Moloch", "", "", "", "Octopus", "Octopus"];
                                var bossLevel = this.main.getBossLevel();
                                var trans = 1;
                                if (bossLevel > 0) {
                                    var countNeeded = 0;
                                    var unitType = 0;
                                    for (var i = 0; i < 18; i++) {
                                        if (NRG.options.AttackPower[i] > 0 && webfrontend.data.City.getInstance().units[i] != null) {
                                            if (this.main.getBossName() == unitBossMatch[i]) {
                                                countNeeded = bossStrLike[bossLevel - 1] * 4 / NRG.options.AttackPower[i];
                                            } else {
                                                countNeeded = bossStrUnlike[bossLevel - 1] * 4 / NRG.options.AttackPower[i];
                                            }
                                            window.console.debug("Attackable: ", i, countNeeded, webfrontend.data.City.getInstance().units[i].count);
                                            if (countNeeded > 0 && countNeeded <= webfrontend.data.City.getInstance().units[i].count) {
                                                unitType = i;
                                                if (i > 14) {
                                                    trans = 2;
                                                } else {
                                                    trans = 1;
                                                }
                                                break;
                                            } else {
                                                countNeeded = 0;
                                            }
                                        }
                                    }
                                    if (countNeeded > 0) {
                                        var unitsToSend = new Array();

                                        unitsToSend.push({
                                            t: unitType,
                                            c: Math.floor(countNeeded)
                                        });
                                        webfrontend.net.CommandManager.getInstance().sendCommand("OrderUnits", {
                                            cityid: webfrontend.data.City.getInstance().getId(),
                                            units: unitsToSend,
                                            targetPlayer: "",
                                            targetCity: coord.xPos + ":" + coord.yPos,
                                            order: 8,
                                            transport: trans,
                                            timeReferenceType: 1,
                                            referenceTimeUTCMillis: 0,
                                            raidTimeReferenceType: 0,
                                            raidReferenceTimeUTCMillis: 0
                                        }, this, this.onTroopsSent);
                                    }
                                }
                            }
                        }, this);
                        this.raidDungeonBtn.addListener("execute", function (e) {
                            var coord = this.main.worldViewCoord;
                            if (coord && this.main.checkCoordType(this.main.ATTACKABLE) && this.main.getDungeonLevel() > 0) {
                                var level = this.main.getDungeonLevel();
                                var lootMin = NRG.options.DungeonLoot[level];
                                var lootMax = NRG.options.DungeonLootMax[level];
                                var loot = ((lootMax - lootMin) * coord.progress) / 100 + lootMin;
								loot = NRG.dungeonProgressData[coord.lootType][level][coord.progress][0];
                                window.console.debug(coord.dungType, coord.progress, lootMin, lootMax, loot);
                                var unitType = -1;
                                var orderCount = 0;
                                if (webfrontend.data.City.getInstance().getUnitOrders() != null) {
                                    orderCount = webfrontend.data.City.getInstance().getUnitOrders().length;
                                }
                                var orderLimit = webfrontend.data.City.getInstance().getOrderLimit() - orderCount;
								if (coord.dungType == "Sea Encounter")
								{
									var repsToSend = 0;
        							var unitsToSend = new Array();
									if (webfrontend.data.City.getInstance().units[6] != null && webfrontend.data.City.getInstance().units[15] != null)
									{
										var boatsPerRep = Math.floor(loot/6000) + 1;
										repsToSend = Math.floor(webfrontend.data.City.getInstance().units[15].count / boatsPerRep);
										repsToSend = Math.min(repsToSend, orderLimit);
										minToKeepHome = Math.min(repsToSend, Math.floor(boatsPerRep/100));
										var units = Math.min((boatsPerRep - 1) * 500 + 5 * boatsPerRep, 500 * boatsPerRep);
										while (webfrontend.data.City.getInstance().units[15].count - repsToSend*boatsPerRep - minToKeepHome < 0 ||
											   webfrontend.data.City.getInstance().units[6].count < units * repsToSend)
										{
											repsToSend = repsToSend - 1;
											minToKeepHome = Math.min(repsToSend, Math.floor(repsToSend*boatsPerRep/100));
											units = Math.min((boatsPerRep - 1) * 500 + 5 * boatsPerRep, 500 * boatsPerRep);
										}
										extras = webfrontend.data.City.getInstance().units[15].count - repsToSend*boatsPerRep - minToKeepHome;
										window.console.debug("reps", repsToSend, "boats", boatsPerRep, "min", minToKeepHome, "extras", extras, Math.floor(extras / repsToSend));
										boatsPerRep = boatsPerRep + Math.floor(extras / repsToSend);
										units = Math.min((boatsPerRep - 1) * 500 + 5 * boatsPerRep, 500 * boatsPerRep);
										if (units * repsToSend > webfrontend.data.City.getInstance().units[6].count)
										{
											units = Math.floor(webfrontend.data.City.getInstance().units[6].count / repsToSend);
										}

										unitsToSend.push({
											t: "6",
											c: units
										});
										unitsToSend.push({
											t: "15",
											c: boatsPerRep
										});
									}
									else if (webfrontend.data.City.getInstance().units[7] != null && webfrontend.data.City.getInstance().units[15] != null)
									{
										var boatsPerRep = Math.floor(loot/3500) + 1;
										repsToSend = Math.floor(webfrontend.data.City.getInstance().units[15].count / boatsPerRep);
										repsToSend = Math.min(repsToSend, orderLimit);
										minToKeepHome = Math.min(repsToSend, Math.floor(boatsPerRep/100));
										var units = Math.min((boatsPerRep - 1) * 500 + 5 * boatsPerRep, 500 * boatsPerRep);
										while (webfrontend.data.City.getInstance().units[15].count - repsToSend*boatsPerRep - minToKeepHome < 0 ||
											   webfrontend.data.City.getInstance().units[7].count < units * repsToSend)
										{
											repsToSend = repsToSend - 1;
											minToKeepHome = Math.min(repsToSend, Math.floor(repsToSend*boatsPerRep/100));
											units = Math.min((boatsPerRep - 1) * 500 + 5 * boatsPerRep, 500 * boatsPerRep);
										}
										extras = webfrontend.data.City.getInstance().units[15].count - repsToSend*boatsPerRep - minToKeepHome;
										window.console.debug("reps", repsToSend, "boats", boatsPerRep, "min", minToKeepHome, "extras", extras, Math.floor(extras / repsToSend));
										boatsPerRep = boatsPerRep + Math.floor(extras / repsToSend);
										units = Math.min((boatsPerRep - 1) * 500 + 5 * boatsPerRep, 500 * boatsPerRep);
										if (units * repsToSend > webfrontend.data.City.getInstance().units[7].count)
										{
											units = Math.floor(webfrontend.data.City.getInstance().units[7].count / repsToSend);
										}
										
										unitsToSend.push({
											t: "7",
											c: units
										});
										unitsToSend.push({
											t: "15",
											c: boatsPerRep
										});
									}
									else if (webfrontend.data.City.getInstance().units[17] != null)
									{
										var boatsPerRep = Math.floor(loot/3000);
										repsToSend = Math.floor(webfrontend.data.City.getInstance().units[17].count / boatsPerRep);
										repsToSend = Math.min(repsToSend, orderLimit);
										extras = webfrontend.data.City.getInstance().units[17].count - repsToSend*boatsPerRep;
										boatsPerRep = boatsPerRep + Math.floor(extras / repsToSend);
										unitsToSend.push({
											t: "17",
											c: boatsPerRep
										});
									}
									else if (webfrontend.data.City.getInstance().units[16] != null)
									{
										var boatsPerRep = Math.floor(loot/1500);
										repsToSend = Math.floor(webfrontend.data.City.getInstance().units[16].count / boatsPerRep);
										repsToSend = Math.min(repsToSend, orderLimit);
										extras = webfrontend.data.City.getInstance().units[16].count - repsToSend*boatsPerRep;
										boatsPerRep = boatsPerRep + Math.floor(extras / repsToSend);
										unitsToSend.push({
											t: "16",
											c: boatsPerRep
										});
									}

									for (var i = 0; i < repsToSend; i++) {
										webfrontend.net.CommandManager.getInstance().sendCommand("OrderUnits", {
											cityid: webfrontend.data.City.getInstance().getId(),
											units: unitsToSend,
											targetPlayer: "",
											targetCity: coord.xPos + ":" + coord.yPos,
											order: 8,
											transport: 2,
											iUnitOrderOptions: 0,
											timeReferenceType: 1,
											referenceTimeUTCMillis: 0,
											raidTimeReferenceType: 1,
											raidReferenceTimeUTCMillis: 0,
											createCity: ""
										}, this, this.onTroopsSent);
										orderLimit = orderLimit - 1;
									}
								}
								else
								{
									for (var i = 0; i < 18 && orderLimit > 0; i++) {
										if (webfrontend.data.City.getInstance().units[i] != null) {
											if (NRG.options.RaidUnitCarry[i] > 0 && webfrontend.data.City.getInstance().units[i].count > 0) {
												var numUnitsPerRep = Math.floor(loot / NRG.options.RaidUnitCarry[i]);
												var maxReps = Math.floor(webfrontend.data.City.getInstance().units[i].count / numUnitsPerRep);
												for (var x = 0; x < maxReps && orderLimit > 0; x++) {
													var unitsToSend = new Array();
													var unitString = "" + i;
													var trans = 1;
													if (i > 14) {
														trans = 2;
													}
													unitsToSend.push({
														t: unitString,
														c: numUnitsPerRep
													});
													webfrontend.net.CommandManager.getInstance().sendCommand("OrderUnits", {
														cityid: webfrontend.data.City.getInstance().getId(),
														units: unitsToSend,
														targetPlayer: "",
														targetCity: coord.xPos + ":" + coord.yPos,
														order: 8,
														transport: trans,
														iUnitOrderOptions: 0,
														timeReferenceType: 1,
														referenceTimeUTCMillis: 0,
														raidTimeReferenceType: 1,
														raidReferenceTimeUTCMillis: 0,
														createCity: ""
													}, this, this.onTroopsSent);
													orderLimit = orderLimit - 1;
												}
											}
										}
									}
								}
                            }
                        }, this);
                        this.raidDungeon1Btn.addListener("execute", function (e) {
                            var coord = this.main.worldViewCoord;
                            if (coord && this.main.checkCoordType(this.main.ATTACKABLE) && this.main.getDungeonLevel() > 0) {
                                var level = this.main.getDungeonLevel();
                                var lootMin = NRG.options.DungeonLoot[level];
                                var lootMax = NRG.options.DungeonLootMax[level];
                                var loot = ((lootMax - lootMin) * coord.progress) / 100 + lootMin;
                                window.console.debug(coord.progress, lootMin, lootMax, loot);
                                var unitType = -1;
                                var orderCount = 0;
                                if (webfrontend.data.City.getInstance().getUnitOrders() != null) {
                                    orderCount = webfrontend.data.City.getInstance().getUnitOrders().length;
                                }
                                var orderLimit = webfrontend.data.City.getInstance().getOrderLimit() - orderCount;
                                for (var i = 0; i < 18 && orderLimit > 0; i++) {
                                    if (webfrontend.data.City.getInstance().units[i] != null) {
                                        if (NRG.options.RaidUnitCarry[i] > 0 && webfrontend.data.City.getInstance().units[i].count > 0) {
                                            var numUnitsPerRep = Math.floor(loot / NRG.options.RaidUnitCarry[i]);
                                            var maxReps = Math.floor(webfrontend.data.City.getInstance().units[i].count / numUnitsPerRep);
                                            for (var x = 0; x < maxReps && orderLimit > 0; x++) {
                                                var unitsToSend = new Array();
                                                var unitString = "" + i;
                                                var trans = 1;
                                                if (i > 14) {
                                                    trans = 2;
                                                }
                                                unitsToSend.push({
                                                    t: unitString,
                                                    c: numUnitsPerRep
                                                });
                                                webfrontend.net.CommandManager.getInstance().sendCommand("OrderUnits", {
                                                    cityid: webfrontend.data.City.getInstance().getId(),
                                                    units: unitsToSend,
                                                    targetPlayer: "",
                                                    targetCity: coord.xPos + ":" + coord.yPos,
                                                    order: 8,
                                                    transport: trans,
                                                    iUnitOrderOptions: 0,
                                                    timeReferenceType: 1,
                                                    referenceTimeUTCMillis: 0,
                                                    raidTimeReferenceType: 1,
                                                    raidReferenceTimeUTCMillis: 0,
                                                    createCity: ""
                                                }, this, this.onTroopsSent);
                                                orderLimit = 0;
                                            }
                                        }
                                    }
                                }
                            }
                        }, this);
                        this.raidDungeonAllBtn.addListener("execute", function (e) {
                            var coord = this.main.worldViewCoord;
                            if (coord && this.main.checkCoordType(this.main.ATTACKABLE) && this.main.getDungeonLevel() > 0) {
                                var unitType = -1;
                                var orderCount = 0;
                                if (webfrontend.data.City.getInstance().getUnitOrders() != null) {
                                    orderCount = webfrontend.data.City.getInstance().getUnitOrders().length;
                                }
                                var orderLimit = webfrontend.data.City.getInstance().getOrderLimit() - orderCount;
                                var unitsToSend = new Array();
                                var trans = 1;
                                for (var i = 0; i < 15; i++) 
                                {
                                    if (webfrontend.data.City.getInstance().units[i] != null) 
                                    {
                                        if (NRG.options.RaidUnitCarry[i] > 0 && webfrontend.data.City.getInstance().units[i].count > 0) 
                                        {
                                            var unitString = "" + i;
                                            unitsToSend.push({
                                                t: unitString,
                                                c: webfrontend.data.City.getInstance().units[i].count
                                            });
                                        }
                                    }
                                }
                                if (orderLimit > 0 && unitsToSend.length > 0)
                                {
                                    webfrontend.net.CommandManager.getInstance().sendCommand("OrderUnits", {
                                        cityid: webfrontend.data.City.getInstance().getId(),
                                        units: unitsToSend,
                                        targetPlayer: "",
                                        targetCity: coord.xPos + ":" + coord.yPos,
                                        order: 8,
                                        transport: trans,
                                        iUnitOrderOptions: 0,
                                        timeReferenceType: 1,
                                        referenceTimeUTCMillis: 0,
                                        raidTimeReferenceType: 1,
                                        raidReferenceTimeUTCMillis: 0,
                                        createCity: ""
                                    }, this, this.onTroopsSent);
                                }
                            }
                        }, this);
                        this.sendArmyBtn.addListener("execute", function (e) {
                            var coord = this.main.worldViewCoord;
                            if (coord && this.main.checkCoordType(this.main.ATTACKABLE)) {
                                this.main.app.showSendArmy(coord.xPos, coord.yPos);
                            }
                        }, this);
                        this.plunderBtn.addListener("execute", function (e) {
                            var coord = this.main.worldViewCoord;
                            if (coord && this.main.checkCoordType(this.main.CITY)) {
                                var unitsToSend = new Array();
                                for (var i = 0; i < 13; i++) {
                                    if (webfrontend.data.City.getInstance().units[i] != null) {
                                        if (webfrontend.data.City.getInstance().units[i].count > 0) {
                                            var unitString = "" + i;
                                            unitsToSend.push({
                                                t: unitString,
                                                c: webfrontend.data.City.getInstance().units[i].count
                                            });
                                        }
                                    }
                                }
                                webfrontend.net.CommandManager.getInstance().sendCommand("OrderUnits", {
                                    cityid: webfrontend.data.City.getInstance().getId(),
                                    units: unitsToSend,
                                    targetPlayer: coord.playerName,
                                    targetCity: coord.xPos + ":" + coord.yPos,
                                    order: 2,
                                    transport: 1,
                                    iUnitOrderOptions: 0,
                                    timeReferenceType: 1,
                                    referenceTimeUTCMillis: 0,
                                    raidTimeReferenceType: 0,
                                    raidReferenceTimeUTCMillis: 0,
                                    createCity: ""
                                }, this, this.onTroopsSent);
                            }
                        }, this);
                        this.scoutBtn.addListener("execute", function (e) {
                            var coord = this.main.worldViewCoord;
                            if (coord && this.main.checkCoordType(this.main.CITY)) {
                                var unitsToSend = new Array();
                                if (webfrontend.data.City.getInstance().units[8] != null) {
                                    if (webfrontend.data.City.getInstance().units[8].count >= 1500) {
                                        unitsToSend.push({
                                            t: 8,
                                            c: 1500
                                        });
                                    }
                                }
                                webfrontend.net.CommandManager.getInstance().sendCommand("OrderUnits", {
                                    cityid: webfrontend.data.City.getInstance().getId(),
                                    units: unitsToSend,
                                    targetPlayer: coord.playerName,
                                    targetCity: coord.xPos + ":" + coord.yPos,
                                    order: 1,
                                    transport: 1,
                                    iUnitOrderOptions: 0,
                                    timeReferenceType: 1,
                                    referenceTimeUTCMillis: 0,
                                    raidTimeReferenceType: 0,
                                    raidReferenceTimeUTCMillis: 0,
                                    createCity: ""
                                }, this, this.onTroopsSent);
                            }
                        }, this);
                        this.copyBtn.addListener("execute", function (e) {
                            var coord = this.main.worldViewCoord;
                            if (coord && this.main.checkCoordType(this.main.ANY)) {
                                this.main.sendToChat("[city]" + webfrontend.gui.Util.formatCoordinates(coord.xPos, coord.yPos) + "[/city]");
                            }
                        }, this);
                        this.copyBtnSub.addListener("execute", function (e) {
                            var coord = this.main.worldViewCoord;
                            if (coord && this.main.checkCoordType(this.main.ANY)) {
                                this.main.sendToChat("[city]" + webfrontend.gui.Util.formatCoordinates(coord.xPos, coord.yPos) + "[/city]");
                            }
                        }, this);
                        this.copyCoordBtn.addListener("execute", function (e) {
                            var coord = this.main.worldViewCoord;
                            if (coord && this.main.checkCoordType(this.main.ANY)) {
                                if (this.copyMenu.getOpener() == this.copyToMail) {
                                    this.main.sendToMail("[city]" + webfrontend.gui.Util.formatCoordinates(coord.xPos, coord.yPos) + "[/city]");
                                } else {
                                    this.main.sendToChat("[city]" + webfrontend.gui.Util.formatCoordinates(coord.xPos, coord.yPos) + "[/city]");
                                }
                            }
                        }, this);
                        this.copyPlayerBtn.addListener("execute", function (e) {
                            var coord = this.main.worldViewCoord;
                            if (coord && this.main.checkCoordType(this.main.CITY | this.main.LAWLESS)) {
                                if (this.copyMenu.getOpener() == this.copyToMail) {
                                    this.main.sendToMail("[player]" + coord.playerName + "[/player]");
                                } else {
                                    this.main.sendToChat("[player]" + coord.playerName + "[/player]");
                                }
                            }
                        }, this);
                        this.copyAllianceBtn.addListener("execute", function (e) {
                            var coord = this.main.worldViewCoord;
                            if (coord && this.main.checkCoordType(this.main.CITY)) {
                                if (this.copyMenu.getOpener() == this.copyToMail) {
                                    this.main.sendToMail("[alliance]" + coord.allianceName + "[/alliance]");
                                } else {
                                    this.main.sendToChat("[alliance]" + coord.allianceName + "[/alliance]");
                                }
                            }
                        }, this);
                        this.copyToMail.addListener("execute", function (e) {
                            var coord = this.main.worldViewCoord;
                            if (coord && this.main.checkCoordType(this.main.ANY)) {
                                this.main.sendToMail("[city]" + webfrontend.gui.Util.formatCoordinates(coord.xPos, coord.yPos) + "[/city]");
                            }
                        }, this);
                        this.sendResBtn.addListener("execute", function (e) {
                            var coord = this.main.worldViewCoord;
                            if (coord && this.main.checkCoordType(this.main.CITY)) {
                                this.main.app.showTrade(coord.xPos, coord.yPos);
                            }
                        }, this);
                        this.infoPlayerBtn.addListener("execute", function (e) {
                            var coord = this.main.worldViewCoord;
                            if (coord && this.main.checkCoordType(this.main.CITY)) {
                                this.main.app.showInfoPage(this.main.app.getPlayerInfoPage(), {
                                    "name": coord.playerName
                                });
                            }
                        }, this);
                        this.infoAllianceBtn.addListener("execute", function (e) {
                            var coord = this.main.worldViewCoord;
                            if (coord && this.main.checkCoordType(this.main.CITY)) {
                                this.main.app.showInfoPage(this.main.app.getAllianceInfoPage(), {
                                    "name": coord.allianceName
                                });
                            }
                        }, this);
                        this.whisperBtn.addListener("execute", function (e) {
                            var coord = this.main.worldViewCoord;
                            if (coord && this.main.checkCoordType(this.main.CITY)) {
                                this.main.sendToChat("/whisper " + coord.playerName + " ", true);
                            }
                        }, this);
                        debugLog("HTK Context Menu Initialized.");
                    },
                    members: {
                        main: null,
                        worldContext: null,
                        copyMenu: null,
                        infoMenu: null,
                        selectCityBtn: null,
                        viewReportsBtn: null,
                        killBossBtn: null,
                        raidDungeonBtn: null,
                        raidDungeon1Btn: null,
                        raidDungeonAllBtn: null,
                        sendArmyBtn: null,
                        plunderBtn: null,
                        scoutBtn: null,
                        sendResBtn: null,
                        copyBtn: null,
                        copyBtnSub: null,
                        copyCoordBtn: null,
                        copyPlayerBtn: null,
                        copyAllianceBtn: null,
                        copyToMail: null,
                        infoBtn: null,
                        infoPlayerBtn: null,
                        infoAllianceBtn: null,
                        whisperBtn: null,

                        func: function (obj) {},
                        onTroopsSent: function (ok, errorCode) {
                            try {

                                if (errorCode != 0) {
                                    window.console.debug("Troops won't go");
                                }

                            } catch (e) {
                                debug(e);
                            }
                        },
                        updateWorldViewContext: function () {
                            this.selectCityBtn.setVisibility("excluded");
                            this.viewReportsBtn.setVisibility("excluded");
                            this.killBossBtn.setVisibility("excluded");
                            this.raidDungeonBtn.setVisibility("excluded");
                            this.raidDungeon1Btn.setVisibility("excluded");
                            this.raidDungeonAllBtn.setVisibility("excluded");
                            this.sendArmyBtn.setVisibility("excluded");
                            this.plunderBtn.setVisibility("excluded");
                            this.scoutBtn.setVisibility("excluded");
                            this.sendResBtn.setVisibility("excluded");
                            this.copyBtn.setVisibility("excluded");
                            this.copyBtnSub.setVisibility("excluded");
                            this.copyToMail.setVisibility("excluded");
                            this.infoBtn.setVisibility("excluded");
                            this.whisperBtn.setVisibility("excluded");
                            if (this.main.app.visMain.mapmode == "r" || this.main.app.visMain.mapmode == "w") {
                                var coord = this.main.updateWorldViewCoord();
                                if (coord && this.main.checkCoordType(this.main.CITY) && coord.playerName == this.main.playerName && this.main.selectCity({
                                    "cityX": coord.xPos,
                                    "cityY": coord.yPos,
                                    "cityIsMine": true
                                })) {
                                    this.selectCityBtn.setVisibility("visible");
                                    this.sendArmyBtn.setVisibility("visible");
                                    this.viewReportsBtn.setVisibility("visible");
                                    this.copyBtnSub.setVisibility("visible");
                                    this.sendResBtn.setVisibility("visible");
                                    this.infoBtn.setVisibility("visible");
                                    if (this.main.app.sendMail && this.main.app.sendMail.isSeeable()) {
                                        this.copyToMail.setVisibility("visible");
                                    }
                                } else if (coord && this.main.checkCoordType(this.main.ATTACKABLE)) {
                                    this.viewReportsBtn.setVisibility("visible");
                                    this.sendArmyBtn.setVisibility("visible");
                                    if (this.main.getBossLevel() > 0) {
                                        this.killBossBtn.setVisibility("visible");
                                    }
                                    if (this.main.getDungeonLevel() > 0) {
                                        this.raidDungeonBtn.setVisibility("visible");
                                        this.raidDungeon1Btn.setVisibility("visible");
                                        this.raidDungeonAllBtn.setVisibility("visible");
                                    }
                                    if (this.main.checkCoordType(this.main.CITY)) {
                                        this.plunderBtn.setVisibility("visible");
                                        this.scoutBtn.setVisibility("visible");
                                        this.copyBtnSub.setVisibility("visible");
                                        this.sendResBtn.setVisibility("visible");
                                        this.infoBtn.setVisibility("visible");
                                        this.whisperBtn.setVisibility("visible");
                                        if (this.main.app.sendMail && this.main.app.sendMail.isSeeable()) {
                                            this.copyToMail.setVisibility("visible");
                                        }
                                    } else {
                                        this.copyBtn.setVisibility("visible");
                                    }
                                } else if (coord && this.main.checkCoordType(this.main.ANY)) {
                                    this.copyBtn.setVisibility("visible");
                                }
                            }
                        }
                    }
                });

                window.htk = new nessusRiverGuardian.main();
            }

            function checkLoad() {
                try {
                    if (typeof qx != 'undefined') {
                        var app = qx.core.Init.getApplication();
                        var cityInfo = app.cityInfoView;
                        var chat = app.chat;
                        var startTime = webfrontend.data.ServerTime.getInstance().refTime;
                        if (app && cityInfo && chat && startTime) {
                            debugLog("HTK Load Complete.");
                            initNessusRiverGuardian();
                        } else {
                            window.setTimeout(checkLoad, 1000);
                        }
                    } else {
                        window.setTimeout(checkLoad, 1000);
                    }
                } catch (e) {
                    if (typeof console != 'undefined') console.log(e);
                    else if (window.opera) opera.postError(e);
                    else GM_log(e);
                }
            }
            if (/lordofultima\.com/i.test(document.domain)) {
                debugLog("HTK Loading...");
                window.setTimeout(checkLoad, 1000);
            }
        }

        // injecting, because there seem to be problems when creating game interface with unsafeWindow
    var NRGScript = document.createElement("script");
    txt = NRG_mainFunction.toString();
    if (window.opera != undefined) txt = txt.replace(/</g, "&lt;"); // rofl Opera
    NRGScript.innerHTML = "(" + txt + ")();";
    NRGScript.type = "text/javascript";
    if (/lordofultima\.com/i.test(document.domain)) document.getElementsByTagName("head")[0].appendChild(NRGScript);

})();