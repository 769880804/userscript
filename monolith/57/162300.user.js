// ==UserScript==
// @name          Salesforce (SFDC) Field Security Profile helper
// @namespace     http://klarna.com
// @icon          http://integration.klarna.com/images/downloads/logotypes/sweden/klarna_logo.png
// @description   This userscript (compatible with Chrome and FF+Greasemonkey) enables quickly setting field level security based on a string with proper format which can be generated by the script itself based on the current state of the form or an already existing field. It means that if you have the correct field level security for one field, you can via extremely simple copy and paste, replicate this setup on a bunch of fields (one at a time), at the time of field creation or later.
// @copyright     2012 Klarna AB Martin Peters
// @version       0.0.1
//
// @include   https://*.salesforce.com/p/setup/field/*
//
// ==/UserScript==

function addJQuery(callback) {
    var script = document.createElement("script");
    script.setAttribute("src", "https://ajax.googleapis.com/ajax/libs/jquery/1.6.3/jquery.min.js");
    script.addEventListener('load', function() {
	var script = document.createElement("script");
	script.textContent = "(" + callback.toString() + ")();";
	document.body.appendChild(script);
    }, false);
    document.body.appendChild(script);
}

//Main method of the userscript
function main() {
    j$ = jQuery.noConflict();
   
    function permissionsPrompt(){
	//Create a security-settings-string based on the current form state
	var profileSeparator = ';';
	var profileString = '';
	var profileRows = j$('tr[class*=dataRow]');
	for( var i=0;i<profileRows.length;i++ ){
	    var row = profileRows[i];
	    var profileName = j$(row).children('th').text();

	    var visible = j$(j$(row).children('td:eq(0)')).children('input').is(':checked'); //For visible checkbox
	    var readOnly = j$(j$(row).children('td:eq(1)')).children('input').is(':checked'); //For read-only checkbox
	    
	    profileString = profileString + profileName+',';
	    if(visible && readOnly){
		profileString = profileString + 'r';
	    } else if( visible ){
		profileString = profileString + 'w';
	    }
	    profileString = profileString + profileSeparator;
	}
	//Show a js-prompt where you can copy the current state for re-use
	var inputText = prompt('Enter: "profile name",(r|w|null); etc..',profileString);

	//Set form state based on the input-text given from the prompt, for example copied off of a reference-field
	var profileStrings = inputText.split(profileSeparator);
	var profiles = {};
	for( var i=0;i<profileStrings.length;i++ ){
	    var profileParts = profileStrings[i].split(',');
	    var profileName = j$.trim(profileParts[0]);
	    var permissions = j$.trim(profileParts[1]);
	    profiles[profileName] = permissions;
	}
	var profileRows = j$('tr[class*=dataRow]');
	for( var i=0;i<profileRows.length;i++ ){
	    var row = profileRows[i];
	    var profileName = j$(row).children('th').text();
	    var visible = false;
	    var readOnly = false;
	    var permission = profiles[profileName];
	    if( permission == 'r' ){
		visible=true;
		readOnly=true;
	    }
	    if( permission == 'w' ){
		visible=true;
		readOnly=false;
	    }
	    j$(j$(row).children('td:eq(0)')).children('input').attr('checked', visible); //For visible checkbox
	    j$(j$(row).children('td:eq(1)')).children('input').attr('checked', readOnly); //For read-only checkbox
	}
    }

    function addButton(){
	var buttons = j$("div[class='pbTopButtons'],td[id='topButtonRow']");
	buttons.append('<input id="profile_button" type="button" class="btn" value="Script-Update" name="Script-Update" />');
	j$("input[id='profile_button']").click(permissionsPrompt);
    }
   
    //Add button on the page-load event
    addButton();
}

//Load jQuery and execute the main function
addJQuery(main);
